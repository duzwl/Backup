{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/img/blog.png","path":"img/blog.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/blog.png","path":"img/blog.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/eye.png","path":"img/eye.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/search.png","path":"img/search.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/busuanzi.js","path":"js/busuanzi.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/require-2.1.6,jquery-1.9.1.min.js","path":"js/require-2.1.6,jquery-1.9.1.min.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"d6a0a74b372dafdab38efeb401c39ffe735a9cca","modified":1468342361292},{"_id":"themes/yilia/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1459279410000},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1459279410000},{"_id":"themes/yilia/_config.yml","hash":"49fd2b0f000ba7dbdda619911a25f6a32a31e8fe","modified":1469097313713},{"_id":"themes/yilia/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1459279410000},{"_id":"source/_posts/BSTree.md","hash":"e05a23e4b63496af87e41459634d76b8abe5971c","modified":1469426004789},{"_id":"source/_posts/Coroutines.md","hash":"3bbcbae62f595ee14be5af490bf3306bd2879100","modified":1469265681365},{"_id":"source/_posts/agenda.md","hash":"0ab2b8e61239d56711594101bc2deb4722b35893","modified":1469612847918},{"_id":"source/_posts/calculator.md","hash":"13d4fbdf9a9d30669ba6e2d3862c01474269aa94","modified":1469604446925},{"_id":"source/_posts/garen.md","hash":"27f3c359aa70dd0888d471142df67de0154f967a","modified":1469189800586},{"_id":"source/_posts/hexo.md","hash":"9c0a1aa1a5a693b936b82908812f4c427de90882","modified":1468655746318},{"_id":"source/_posts/井字棋.md","hash":"d38b4517eabbd9bb91ed37cc44240e23f6a4048a","modified":1469097999412},{"_id":"source/_posts/单周期CPU.md","hash":"a55eddf0c708d0792e9b14a4c76d7dfd975b5acb","modified":1468671020239},{"_id":"source/_posts/同步1.md","hash":"18c101f3f1540b0959621b4b200a7e2b455e7a65","modified":1469088036971},{"_id":"source/_posts/同步2.md","hash":"78bc4a6c49c004560b99a229624f4153b50d0cd5","modified":1469087320128},{"_id":"source/_posts/图的最短路径.md","hash":"9435d9e38c0ea61be44b08f67c6a3408b493d129","modified":1469441488274},{"_id":"source/_posts/多周期CPU.md","hash":"b1766be209821bac45006a1a1578afb44d764f44","modified":1468818026339},{"_id":"source/_posts/序列化.md","hash":"a6319759f131c0dfbeed49a65406b4d318df1ee2","modified":1469251091652},{"_id":"source/_posts/打飞碟.md","hash":"1bf5e7b4b96aa977a22cf3c5375587c64defff64","modified":1469178329218},{"_id":"source/_posts/打飞碟改进.md","hash":"8776cc6f42c8384c5024e3db243041cec60fa440","modified":1469189013340},{"_id":"source/_posts/排序1.md","hash":"0b03dc37e4e145415386178315a128074c353f1a","modified":1469425987665},{"_id":"source/_posts/排序2.md","hash":"e1421df1a40c2fe7f8a32e69e0a3e3aa2dcf081d","modified":1469425950063},{"_id":"source/_posts/无向图.md","hash":"593d390f2bcb978fe5a1c9f88e7eb9124432341e","modified":1469442333598},{"_id":"source/_posts/汇编.md","hash":"a90bf0f3a5a295d2dbcfff2540d3a72c8ec640ad","modified":1468664500110},{"_id":"source/_posts/牧师与魔鬼改进.md","hash":"23e63417736ef3db3bc971441e4d55337d514b22","modified":1469174773910},{"_id":"source/_posts/牧师和魔鬼.md","hash":"8680c5af5d2d4b19d5ceb54ec5e02be7827a8c07","modified":1469098063895},{"_id":"source/_posts/粒子系统.md","hash":"68c880170ebd4e967a852d62c62d261e74b036a0","modified":1469251318737},{"_id":"source/_posts/线程.md","hash":"179d12e28fa1c9baad4e6b55ef86cdad9fda39c4","modified":1469087332399},{"_id":"source/_posts/缓存.md","hash":"6e651cf5b9949c5c959bd0cc42d8dff29cac311a","modified":1468918231478},{"_id":"source/_posts/进程.md","hash":"d0aed9c520a987752a1f1e9565fd1bdb6dc4690a","modified":1469094128667},{"_id":"source/_posts/递归应用.md","hash":"f3ad0445a53649ec1a497d0a8af41862798f7857","modified":1469445088792},{"_id":"source/_posts/链表.md","hash":"8a58c61ae4217e9a6fd435215e02ed983d9f2f01","modified":1469427816930},{"_id":"source/about/index.md","hash":"89779695e978cd20f3243c598fbe48769bd2d975","modified":1468385122370},{"_id":"source/img/blog.png","hash":"a9db59a4375d17bae7192a38ff3c3c508cfa96e7","modified":1468316171253},{"_id":"themes/yilia/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1459279410000},{"_id":"themes/yilia/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1459279410000},{"_id":"themes/yilia/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1459279410000},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1459279410000},{"_id":"themes/yilia/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1459279410000},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1459279410000},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1459279410000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1459279410000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1459279410000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1468405901188},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1459279410000},{"_id":"themes/yilia/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1459279410000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459279410000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459279410000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1468405970442},{"_id":"themes/yilia/source/favicon.ico","hash":"d6a0a74b372dafdab38efeb401c39ffe735a9cca","modified":1468342361292},{"_id":"source/_posts/garen/a.png","hash":"fe407e25173d60c07a78200a2fbb43f489c20303","modified":1469183513441},{"_id":"source/_posts/井字棋/1.png","hash":"59163a0d5c91fad7ca1481de0fdee7e14bba06b7","modified":1469085847653},{"_id":"source/_posts/单周期CPU/alu.png","hash":"d59b9199b1edf48a6e3309289dcd68b3cd4f4e85","modified":1468669644205},{"_id":"source/_posts/单周期CPU/chuansong.png","hash":"49ebd9a89aace15f49feec563b5704d36c81658a","modified":1468668473673},{"_id":"source/_posts/单周期CPU/duxie.png","hash":"a9890f48251dde542704c80d9f3f9616291da524","modified":1468668560974},{"_id":"source/_posts/单周期CPU/fenzhi.png","hash":"9b8f0b0180d9440cd4ad207acf77eac7317074f5","modified":1468668586103},{"_id":"source/_posts/单周期CPU/j.png","hash":"1e668405acaea851e115d5df2cfd485aa173158a","modified":1468668196285},{"_id":"source/_posts/单周期CPU/i.png","hash":"705a91c30121bce858dd4fa66f2880f7745c1639","modified":1468668179679},{"_id":"source/_posts/单周期CPU/luoji.png","hash":"1a56b9fc32cc04ae5a1a12144929125e44404387","modified":1468668444859},{"_id":"source/_posts/单周期CPU/r.png","hash":"32242aeb17cef7b567a385745ad1e9cc3a083286","modified":1468668163622},{"_id":"source/_posts/单周期CPU/suansu.png","hash":"5dea3af661dbac041cb40c299efb38d3eeef1ece","modified":1468668418616},{"_id":"source/_posts/单周期CPU/tingji.png","hash":"0ea63b964eea243becf0ce104f2ce0e3b2d6ec05","modified":1468668611890},{"_id":"source/_posts/单周期CPU/yanzheng.png","hash":"16391aead6b561bc38cbdf5df88bfa4326d701e6","modified":1468670733236},{"_id":"source/_posts/单周期CPU/yuanli.png","hash":"1fcdd7ca4842eb26bbb68eb02ede95f67fffc4b3","modified":1468669023970},{"_id":"source/_posts/单周期CPU/zong.png","hash":"5c8eccd079894476f11e8a0629e12f28ad4bd71f","modified":1468669741508},{"_id":"source/_posts/同步1/3.png","hash":"9bcbc45ff96dee41ff9d099a72c97e312ac871b0","modified":1469007005410},{"_id":"source/_posts/图的最短路径/a.png","hash":"d92d0f2de7940a5c38c8d85228c7925428e30eee","modified":1469439494166},{"_id":"source/_posts/多周期CPU/alu.png","hash":"23a951e994cb80c0c8748f2ba3da99d3cf2c13a9","modified":1468816679479},{"_id":"source/_posts/多周期CPU/bijiao.png","hash":"74c50f4610c944bd65f021324ec8b820aa6d587b","modified":1468815220288},{"_id":"source/_posts/多周期CPU/chuansong.png","hash":"cac278c3645af939ea6de41bbe98f27b532b8513","modified":1468815201174},{"_id":"source/_posts/多周期CPU/duxie.png","hash":"192939734f66061263c27db997542bb48830ebf4","modified":1468815244103},{"_id":"source/_posts/多周期CPU/exe.png","hash":"f9e7a341f9212abf591fe116d7515e9ab91aeca3","modified":1468816886789},{"_id":"source/_posts/多周期CPU/fenzhi.png","hash":"b3caf1d089cf2a33daf43fea71e22de9bbc23934","modified":1468815260023},{"_id":"source/_posts/多周期CPU/guoc.png","hash":"3617283fde4ae926c1881a60cb689090a3b0334e","modified":1468815886668},{"_id":"source/_posts/多周期CPU/id.png","hash":"f830e3588d37ccc3cade03be9f5bd4ad2246a7ce","modified":1468816864693},{"_id":"source/_posts/多周期CPU/if.png","hash":"fc133b957a0d510dc3e1dc2745982b2c64fe78ab","modified":1468816823275},{"_id":"source/_posts/多周期CPU/kongzhi.png","hash":"d6fe645c16af510a8b6e21158ad520578defabc7","modified":1468816011004},{"_id":"source/_posts/多周期CPU/luoji.png","hash":"ca6f75cf7237a1f8b3a1a0045a0ce4e90594277c","modified":1468815149793},{"_id":"source/_posts/多周期CPU/mem.png","hash":"fe819d180435c4861f60afb7df9da7f4e2431e79","modified":1468816908288},{"_id":"source/_posts/多周期CPU/tiaozhuan.png","hash":"bbee11566eb2b83e6737a36aede40028926112c8","modified":1468815280551},{"_id":"source/_posts/多周期CPU/suansu.png","hash":"037424f8db02719100c0af38efddbcd0c96d46e9","modified":1468815124291},{"_id":"source/_posts/多周期CPU/tingji.png","hash":"1513731245acc8045800fcc61b09e599c2d5e3ab","modified":1468815321056},{"_id":"source/_posts/多周期CPU/wb.png","hash":"9318030224aebf268e1f7b52f2a12662ccb3106b","modified":1468816923032},{"_id":"source/_posts/多周期CPU/yiwei.png","hash":"dfb6bbf215c1fef4d762caed9724b4794fb4c943","modified":1468815180064},{"_id":"source/_posts/多周期CPU/zhuanyi.png","hash":"00c8488e796074220ff821a801d5f87cb9598914","modified":1468815974538},{"_id":"source/_posts/多周期CPU/zi.png","hash":"243f0972613932a89605e77b4c547b4cbfcd0a0b","modified":1468815303621},{"_id":"source/_posts/序列化/a.png","hash":"a66948179df17e3b837a21be4a0199994bf050a8","modified":1469249962003},{"_id":"source/_posts/序列化/b.png","hash":"d69f8b7259bec3988fc674f265bd2f8c51fb5a0d","modified":1469249981071},{"_id":"source/_posts/序列化/c.png","hash":"1c46d6ae92a59fb025f856c5801af28f6ef9360d","modified":1469250085566},{"_id":"source/_posts/序列化/d.png","hash":"0cf8f6034f29d2d6efbf206f856084a28a9ec1cf","modified":1469250694505},{"_id":"source/_posts/序列化/f.png","hash":"b9e3f2119bf24886cadbe643c84d4c0b6d3ba16e","modified":1469250722999},{"_id":"source/_posts/打飞碟/a1.png","hash":"1d142e7d557cb5fe01794bc528ae66ac088ebbb7","modified":1469177877619},{"_id":"source/_posts/打飞碟/aa.png","hash":"d99eb95d7ed1bc5d28c5c632a4c01ee2da79b427","modified":1469177389460},{"_id":"source/_posts/打飞碟/all.png","hash":"7edd5c5826a60be903028f5eb6a8346fef4beea9","modified":1469178111135},{"_id":"source/_posts/打飞碟/bb.png","hash":"c2ea81c14c5fe4504ec911ca013e78b0e9f27916","modified":1469177480413},{"_id":"source/_posts/打飞碟/cc.png","hash":"b6379a631b30224046aeedf9cfea866eae7f0d01","modified":1469177600002},{"_id":"source/_posts/打飞碟/d.png","hash":"4d8fd0cf50f6b76a016e52e3d5b6099b28866393","modified":1469177844332},{"_id":"source/_posts/打飞碟/f1.png","hash":"66d83c2be11e985b0d9f86706d9dfeac53ee4f6c","modified":1469177669270},{"_id":"source/_posts/打飞碟/f2.png","hash":"88a03ba2e0e22384d91df41eea27aec0260cf5cc","modified":1469177677076},{"_id":"source/_posts/打飞碟/f3.png","hash":"e4ac651046459202c218184751427bfe4f8ea952","modified":1469177706449},{"_id":"source/_posts/打飞碟/f4.png","hash":"136c591f45dbf194bc4381055666c5b14a8ec0ce","modified":1469177735476},{"_id":"source/_posts/打飞碟/f5.png","hash":"51b7132ee2de80eb4d1643dd1e15570a26ccfc20","modified":1469177762014},{"_id":"source/_posts/打飞碟/f6.png","hash":"bdfd67272d31c6f8723c0612ed875b5cbb40f3a3","modified":1469177782564},{"_id":"source/_posts/打飞碟/f7.png","hash":"f90f8640a0c6512428dc7e5afd4bbe62ad9cb108","modified":1469177808676},{"_id":"source/_posts/打飞碟/g1.png","hash":"8a9e72e17c444085cbfb9807ad63a9f98b7a288c","modified":1469177925651},{"_id":"source/_posts/打飞碟/u1.png","hash":"2f61a49251e0c51d05d6a47caed55f97e4218014","modified":1469177976047},{"_id":"source/_posts/打飞碟/u2.png","hash":"2b15c880d168bdc36041b6617daf890183a8e528","modified":1469177998881},{"_id":"source/_posts/打飞碟改进/bc.png","hash":"2d47a933c4aa6bd5412bdf8e1e712475a212e9de","modified":1469188623188},{"_id":"source/_posts/打飞碟改进/df.png","hash":"66e7465f2f41112b28ec20857dd75b527ea45706","modified":1469187930653},{"_id":"source/_posts/打飞碟改进/fd.png","hash":"e2d9ed888735c4675f3cb8aee52a1ddd5713de8e","modified":1469187631948},{"_id":"source/_posts/打飞碟改进/gm.png","hash":"109a39b0a357f41a3564e746b812a968ebb26934","modified":1469189004553},{"_id":"source/_posts/打飞碟改进/j.png","hash":"d7f010aa5f84e76d36684e320b5af4dfba770a42","modified":1469188757217},{"_id":"source/_posts/打飞碟改进/sxj.png","hash":"478eca07aa87dc94caa3fd85ae4d457b30d0de76","modified":1469187518028},{"_id":"source/_posts/打飞碟改进/ui.png","hash":"69557eb8a60aab4537071eb9a4ec863328a9102b","modified":1469188134962},{"_id":"source/_posts/打飞碟改进/zd.png","hash":"92f07a4ba97b6224a448bd62a7ddf2ecdc9e95a1","modified":1469187571246},{"_id":"source/_posts/排序2/a.png","hash":"57a981bb7cee72a0ed9c431cd15b7375208b5260","modified":1469355644006},{"_id":"source/_posts/汇编/5.png","hash":"13a8061926a79705ca85ef954daefee945605e2d","modified":1468660245523},{"_id":"source/_posts/汇编/7.png","hash":"0ad41143d16b029261d0603618c9105ca82dbcf7","modified":1468660992062},{"_id":"source/_posts/汇编/8.png","hash":"a14d5c6c70e7d9b8349df82827f5ac3ac2e84ca6","modified":1468661007540},{"_id":"source/_posts/汇编/9.png","hash":"740ef74abf22bb4e50f320a7244908acf86fcd4e","modified":1468661022405},{"_id":"source/_posts/汇编/c++.png","hash":"52297ecd56d2f80fb081449458297fe7880d3783","modified":1468660891534},{"_id":"source/_posts/牧师和魔鬼/1.png","hash":"a44a62db1080651b573e6720e57b61c4c0d7211c","modified":1469089377331},{"_id":"source/_posts/牧师和魔鬼/2.png","hash":"909da70bf219b8b49ad7acdb12f4d21a33a0a958","modified":1469090441254},{"_id":"source/_posts/牧师和魔鬼/3.png","hash":"913d771f3bc4a74f53a43a81db7f70a00d6a32d5","modified":1469091116433},{"_id":"source/_posts/牧师和魔鬼/4.png","hash":"7d24f683b69c8fba44b7affca9ae00da115b14ab","modified":1469091130591},{"_id":"source/_posts/牧师与魔鬼改进/a.png","hash":"3fb5e09498656af99128fc648a58b783a86618eb","modified":1469099505978},{"_id":"source/_posts/牧师与魔鬼改进/b.png","hash":"09231f1cf6fb9da210176563cfc90a786fa565b7","modified":1469174963428},{"_id":"source/_posts/牧师与魔鬼改进/c.png","hash":"59f7326baf541f580f4fbde9d420cf0504180d4b","modified":1469175042553},{"_id":"source/_posts/牧师与魔鬼改进/d.png","hash":"f29e9abdcc316440f9f98fba16e5fc272824feda","modified":1469174527802},{"_id":"source/_posts/牧师与魔鬼改进/e.png","hash":"f67f5bd62caad9ac2578f31adc594985bf28c0c6","modified":1469174625730},{"_id":"source/_posts/粒子系统/a.png","hash":"0c02cc63e90ac2143a291424d8892b2f3fa5c7de","modified":1469248726615},{"_id":"source/_posts/粒子系统/b.png","hash":"626fefcb149da344b971e2b14f0be3be283e453d","modified":1469248750838},{"_id":"source/_posts/粒子系统/z.png","hash":"c9ed9e2a07a3e7ce52cadfdb3b159d0ddeb2adf0","modified":1469249017928},{"_id":"source/_posts/线程/1.png","hash":"92c8c7bcce7c0b7cb542dff99bdf53e956f3e5b5","modified":1469004599951},{"_id":"source/_posts/缓存/1.2.png","hash":"9421f828056e2dd1e77756b7680cdb86508580fc","modified":1468917664073},{"_id":"source/_posts/缓存/1.png","hash":"2563cee211e12441f8ea424b1ad38c05dac1259a","modified":1468916683680},{"_id":"source/_posts/缓存/1.1.png","hash":"f7e9c9235e6647d59a1d2f47c728c48d42e4a116","modified":1468917650044},{"_id":"source/_posts/缓存/2.1.png","hash":"b2f2dae37038c1eae5cb631a2e85392c16c867c2","modified":1468917721537},{"_id":"source/_posts/缓存/2.2.png","hash":"0f8e7070b9ba2c08edf79cdb599cc94de7a8d7e6","modified":1468917730586},{"_id":"source/_posts/缓存/3.1.png","hash":"af7b7cc4758ad3bdd5dc0ba3e9b9c7b52aa01140","modified":1468917792395},{"_id":"source/_posts/缓存/3.2.png","hash":"62cc1825ea2249e796468928344d545840457a3a","modified":1468917797823},{"_id":"source/_posts/缓存/2.png","hash":"a77c5a5c77164035713165738f9c7406872efbd7","modified":1468916753027},{"_id":"source/_posts/缓存/3.png","hash":"cfbe4baa66e690a1779cf9d36b0a0cb632692dba","modified":1468916861218},{"_id":"source/_posts/缓存/4.png","hash":"2162e41be46c37fad7c177b0543a44a051cc9d79","modified":1468916936207},{"_id":"source/_posts/进程/2.png","hash":"233079444451487443a9ecc98c004d9045e6efc2","modified":1468922594051},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"abb25d74070ce223a1b880d2230de2ef3dc03575","modified":1468490896666},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"f8f463e2674f1fed2565d4321aecd8975b3ab683","modified":1468420215488},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"93285be5710646276071a44a18a96cd604ec62e6","modified":1468497061527},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"f7068535c0df7e7bc6614a046e7d4b262a65d8b2","modified":1468381330803},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2c17af61a962f15b001dfec436260023e7809a56","modified":1468486227654},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/totop.ejs","hash":"5b72139e13bd9d716b9b857882202828d3f0469b","modified":1468497578133},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1459279410000},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1459279410000},{"_id":"themes/yilia/source/css/style.styl","hash":"6187f0d8a09584e3fd237d72c0ba786d64f08902","modified":1468416861199},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1468487723425},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1459279410000},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1459279410000},{"_id":"themes/yilia/source/img/blog.png","hash":"a9db59a4375d17bae7192a38ff3c3c508cfa96e7","modified":1468316171253},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1459279410000},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1459279410000},{"_id":"themes/yilia/source/img/eye.png","hash":"3aea04d93ef8edb5247b29746ca131d034abd190","modified":1468570241153},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1459279410000},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1459279410000},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1459279410000},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1459279410000},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1459279410000},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1459279410000},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1459279410000},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1459279410000},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1459279410000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1459279410000},{"_id":"themes/yilia/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1468403356429},{"_id":"themes/yilia/source/img/search.png","hash":"1ab76b03297ae2ce61ec59dd9bf8727f1fbbcedd","modified":1468415669688},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1459279410000},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1459279410000},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1459279410000},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1459279410000},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1459279410000},{"_id":"themes/yilia/source/js/busuanzi.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1468222180240},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1459279410000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1468485552785},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1468332785949},{"_id":"themes/yilia/source/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1468485759830},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1468485827971},{"_id":"themes/yilia/source/js/totop.js","hash":"f11c32b847a649d9c26f842275709dde442192d4","modified":1468403278151},{"_id":"source/_posts/garen/j.png","hash":"d62eefc4d27df61427732acf7ca0f66f05cd3341","modified":1469184848486},{"_id":"source/_posts/garen/jg.png","hash":"11a221bd288429644b2cda1fa055d48882edb51f","modified":1469184800497},{"_id":"source/_posts/单周期CPU/tonglu.png","hash":"3e6c0901c48c8f34ef33886083ff4c606730336d","modified":1468669100287},{"_id":"source/_posts/单周期CPU/xinhao.png","hash":"19ec05d47aa4917971e051671491e99e2d47a239","modified":1468669354269},{"_id":"source/_posts/同步1/1.png","hash":"af8ca32c3c2871954e53ba3a26624ca8d87805ba","modified":1469006616816},{"_id":"source/_posts/同步1/2.png","hash":"26cf34e6d2b65dfeb4e7aacc9b4f075d1790f676","modified":1469006623781},{"_id":"source/_posts/同步1/4.png","hash":"19b75d984c39045b062a75d3607fb2d651139c4e","modified":1469007011942},{"_id":"source/_posts/同步1/5.png","hash":"b217a8af73f70967c1eaf09f062674044a3937f7","modified":1469007122670},{"_id":"source/_posts/同步1/6.png","hash":"c294a17988fb0a2c46ab26fd465fee7f5294367f","modified":1469007129926},{"_id":"source/_posts/同步2/1.png","hash":"063f3840959507894f88ef57716bf05991509135","modified":1469007723173},{"_id":"source/_posts/多周期CPU/ceshi.png","hash":"042429bd3b89e1e1aaefa8e70864df5f909200cd","modified":1468817582215},{"_id":"source/_posts/多周期CPU/tonglu.png","hash":"87783a5f66693a392610a337dfcd4b6324feda6c","modified":1468816162349},{"_id":"source/_posts/多周期CPU/xinhao1.png","hash":"ba90de800a86e2ed4721db47eae31e66ee329cbf","modified":1468816382458},{"_id":"source/_posts/多周期CPU/xinhao2.png","hash":"69157bcd18b481b1716fb0e9a8070914bfb1f576","modified":1468816421278},{"_id":"source/_posts/汇编/6.png","hash":"64fa41c5a16565592a0b11abb0456c78b078e7da","modified":1468660368207},{"_id":"source/_posts/牧师和魔鬼/5.png","hash":"4e0268fff4812d6d87a8460e609fa64ac70cb9b2","modified":1469091561189},{"_id":"source/_posts/进程/1.png","hash":"fe6f9ac82989583138d811841314c80fd4af15bf","modified":1468922256060},{"_id":"themes/yilia/source/js/require-2.1.6,jquery-1.9.1.min.js","hash":"52bd7bb2637470cd9c373411ecbbafc8a3d9490d","modified":1468490859304},{"_id":"source/_posts/agenda/Agenda/Agenda.cpp","hash":"d45a063c3942ed6799a5f5e0efe7903000bff793","modified":1436792592000},{"_id":"source/_posts/agenda/Agenda/AgendaService.cpp","hash":"7c04f35c959d841c8f0d6f1b7d51d059a84dd341","modified":1469607012539},{"_id":"source/_posts/agenda/Agenda/AgendaService.h","hash":"e2e55b9291ea212b08c47ed72cf419a7fcbbeab1","modified":1469531851811},{"_id":"source/_posts/agenda/Agenda/AgendaUI.cpp","hash":"05ad8d7ae5e127bb83f2afe001df4e2ab768421d","modified":1469608347823},{"_id":"source/_posts/agenda/Agenda/AgendaUI.h","hash":"748d9358f8e0a695e5e866fda53986f6711fcacd","modified":1469608696958},{"_id":"source/_posts/agenda/Agenda/Date.cpp","hash":"8d97e1878ba604dd4abd62e84234d4e7fe95a596","modified":1469525833451},{"_id":"source/_posts/agenda/Agenda/Date.h","hash":"10cf08d7658393708d4c6f928cd33ce5458bece5","modified":1469524825467},{"_id":"source/_posts/agenda/Agenda/Meeting.cpp","hash":"9ea39ac4698c33fcceedb22ce8b525880b8165e4","modified":1469524602361},{"_id":"source/_posts/agenda/Agenda/Meeting.csv","hash":"e31dd28f0c78f1194d41e01e22d9701bb4c1e7dd","modified":1469525456544},{"_id":"source/_posts/agenda/Agenda/Meeting.h","hash":"dae559c7f4284decacb1adb59e6da84156eabc98","modified":1469524702869},{"_id":"source/_posts/agenda/Agenda/Makefile","hash":"2cadf89abf5cdfc5484d877735cbf0d3ea7c3a03","modified":1469609719134},{"_id":"source/_posts/agenda/Agenda/Storage.cpp","hash":"dc022ea0caa40b866a696972c785f04f498bbce8","modified":1469531402556},{"_id":"source/_posts/agenda/Agenda/Storage.h","hash":"99ad4fc3f412601dc4a1c43c0685a3e7d76419f6","modified":1469529690849},{"_id":"source/_posts/agenda/Agenda/User.cpp","hash":"9d80187c333b50509fe0a55a9849f8aa9f0fed72","modified":1436792592000},{"_id":"source/_posts/agenda/Agenda/User.csv","hash":"78c475ee89deae669376822a4ab828451953b7f0","modified":1469523923731},{"_id":"source/_posts/agenda/Agenda/User.h","hash":"b9eac38e3b75e6a8ca256f750874ea221a5364d0","modified":1469524713869},{"_id":"source/_posts/garen/g1.png","hash":"c7cfb5fee6672fa09669f7af17063a251e4bb876","modified":1469183870999},{"_id":"source/_posts/打飞碟改进/all.png","hash":"255e682e6a8a63325450690f2c714fbc65c15f95","modified":1469187463668},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1468571600698},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1459279410000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"8de1122a05ef76e2a1ffc73cf668504fa32776ca","modified":1468421153930},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"6a9e414cd9eeead955f2065abb44aaef5d5e55bb","modified":1468497355356},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"e6edef53bb59499be66fad2a22f6a868d53bea54","modified":1468588332566},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"e38304e0cfd372c5ed22eb9e726f9705e776bf1c","modified":1468425144170},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"f93af77aaa2d6eaa556e6084889231c7e39b81ea","modified":1469251171361},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1459279410000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"c295ca64fc3944b03b52a2e71319854638493f0f","modified":1468571608344},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1459279410000},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1459279410000},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1459279410000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1459279410000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1459279410000},{"_id":"source/_posts/汇编/jiemian1.png","hash":"4c5663ae730c39d5929aa4d53e4e045a869048b3","modified":1468659064356},{"_id":"source/_posts/汇编/jiemian4.png","hash":"2500705626c78fecece6bec8b783712e37b056d0","modified":1468659138177},{"_id":"source/_posts/汇编/jiemian2.png","hash":"22ea10db0be0df630cfe3eaf64198e038856254b","modified":1468659092423},{"_id":"source/_posts/汇编/jiemian3.png","hash":"100887aa0a9be6b1288a64aeb544876c7d2fb74d","modified":1468659113317},{"_id":"source/_posts/粒子系统/b.gif","hash":"7e14c7b1bb55c98b04340d04b6372cfd91ea1617","modified":1469251455406},{"_id":"source/_posts/粒子系统/a.gif","hash":"3cbd5ea008deed63cdeb45f4455f390e38e0e855","modified":1469249424624},{"_id":"source/_posts/garen/aa.gif","hash":"038c3c6b7da9e03281b41b4bb1b94a4b5f2c6255","modified":1469185134170},{"_id":"public/search.xml","hash":"fc18e459ce83ad1d5df47d98071758b4e7355afc","modified":1469612868733},{"_id":"public/sitemap.xml","hash":"1274925433f8f05d97d34d6b6fa7444a409d3dcf","modified":1469612869433},{"_id":"public/about/index.html","hash":"d6db8090b697aa7e72437644e2e348ff3f19c56d","modified":1469612869488},{"_id":"public/archives/page/4/index.html","hash":"04ab6e863e922c25001dd0aa27b7a754727a1154","modified":1469612869488},{"_id":"public/archives/2016/page/4/index.html","hash":"66cb48b93c3e3bbe49066a8af023e418f681cdde","modified":1469612869488},{"_id":"public/archives/2016/07/page/4/index.html","hash":"90806677bd52df30940897c92f72e937cc540c89","modified":1469612869488},{"_id":"public/categories/3D游戏开发/page/2/index.html","hash":"f7928b63655642bb8641ddffc2989a25ca7f47ff","modified":1469612869488},{"_id":"public/categories/C-C/index.html","hash":"4925c4bdc4b782c97031fb111549f36c14bc2937","modified":1469612869488},{"_id":"public/categories/随笔/index.html","hash":"1801f0d4b0ab31de3c499ebd5e484d3debabd816","modified":1469612869488},{"_id":"public/categories/计算机组成原理/index.html","hash":"115bca359639219e960811a3b48b5aa24cec1bbb","modified":1469612869488},{"_id":"public/categories/Operating-System/index.html","hash":"059f584e1d8d265b5947d78bbfaeea4d72b6f803","modified":1469612869488},{"_id":"public/categories/Operating-System/C-C/index.html","hash":"6789b3bc0012b1b8b380523cc501f791dd4a0966","modified":1469612869488},{"_id":"public/categories/Data-Structure/index.html","hash":"526ace6e5ad81611f88223d2d0fa215a6f86d611","modified":1469612869488},{"_id":"public/page/4/index.html","hash":"3aa53ed6e5aa97444d845a5f16d5f41cc16922a6","modified":1469612869488},{"_id":"public/tags/C/page/2/index.html","hash":"740a4fb32f55c97113e034402587acefb032ab82","modified":1469612869489},{"_id":"public/tags/unity3d/page/2/index.html","hash":"57a4dcde59dda1f5c93af8a76611dedcbe34ad98","modified":1469612869489},{"_id":"public/tags/C-C/page/2/index.html","hash":"ecd26f093c9cd5a78a16cbf7d545237aef964859","modified":1469612869489},{"_id":"public/tags/递归/index.html","hash":"4a659154ba2bc9765dcf7da922a56e39ebd719ac","modified":1469612869489},{"_id":"public/tags/工厂模式/index.html","hash":"93314ed788a5e79fd9a474e5a521f64e1cf8ef1d","modified":1469612869489},{"_id":"public/tags/观察者模式/index.html","hash":"541568dc9babb72ad6dcd852cab7cb4045554ce0","modified":1469612869489},{"_id":"public/tags/hexo/index.html","hash":"bd8d7febb7c491db091daebfc66320a4962e7013","modified":1469612869489},{"_id":"public/tags/blog/index.html","hash":"d27b1da69b2869a0d19cb580eb3b0bb0b5bd5123","modified":1469612869489},{"_id":"public/tags/verilog/index.html","hash":"cda7e80ab87725ec1965025d569ced879fdefd5d","modified":1469612869489},{"_id":"public/tags/CPU/index.html","hash":"f4c2d3b901e0cbeaefe2906ada862ab078036cc6","modified":1469612869489},{"_id":"public/tags/MIPS/index.html","hash":"1ec40511e7003e5e23b4ac8ff0fe47c9955d33ea","modified":1469612869489},{"_id":"public/tags/thread/index.html","hash":"b9128e00166f9cfcade70e8cfa47c59968eeaa97","modified":1469612869489},{"_id":"public/tags/semaphore/index.html","hash":"8d680c1010b885c3dadfcf027c0864d52bed18ee","modified":1469612869489},{"_id":"public/tags/序列化/index.html","hash":"7cc35f9a351a21ba6b6b84dc4e40a7e8d76e4763","modified":1469612869489},{"_id":"public/tags/排序/index.html","hash":"6ecdf1d589076151f463953bd9dbd0c7c0aca4e0","modified":1469612869489},{"_id":"public/tags/汇编/index.html","hash":"018131e48997955de715576b961c1f2fb0110881","modified":1469612869489},{"_id":"public/tags/cache/index.html","hash":"099c0635b274e123d4f03b9d06d3b62e124940b5","modified":1469612869490},{"_id":"public/tags/procedure/index.html","hash":"799949d66f8c32148de7acbd549a20e796880c2e","modified":1469612869490},{"_id":"public/C-C/agenda/index.html","hash":"3cefa4480cca59198aa21709c87d04fb0678bd4e","modified":1469612869490},{"_id":"public/algorithm/Data-Structure/递归应用/index.html","hash":"bf796fe67f54d24952298e3bab870ade0797d9b2","modified":1469612869490},{"_id":"public/algorithm/Data-Structure/无向图/index.html","hash":"7b6f5e97c42008ad2df031bc21f874d00967f110","modified":1469612869490},{"_id":"public/algorithm/Data-Structure/图的最短路径/index.html","hash":"1e1db3a6ee6044b76bd18fadc68794f420f7c42e","modified":1469612869490},{"_id":"public/Data-Structure/链表/index.html","hash":"b5517421fca07c883b2c6daeb69e5b53540f30d3","modified":1469612869490},{"_id":"public/algorithm/Data-Structure/calculator/index.html","hash":"5b8fafe11e3579cea1f137af5e1de9fe9478e446","modified":1469612869490},{"_id":"public/algorithm/Data-Structure/排序2/index.html","hash":"bff0666659f4b14f953f26aa27e421da2d096cfd","modified":1469612869490},{"_id":"public/algorithm/Data-Structure/排序1/index.html","hash":"03db6013a4cf794f7c408ae5762b930e658f10b1","modified":1469612869490},{"_id":"public/algorithm/Data-Structure/BSTree/index.html","hash":"6b321eef2dc4a91ff99c5b1668d5cd114e5ce801","modified":1469612869490},{"_id":"public/3D游戏开发/Coroutines/index.html","hash":"4fa2dd82f7c8b9766d2c51383e663a5d563607ae","modified":1469612869490},{"_id":"public/3D游戏开发/序列化/index.html","hash":"9634f02e37f9581f798164ad2664d814a20c92a1","modified":1469612869490},{"_id":"public/3D游戏开发/粒子系统/index.html","hash":"713fb3692ab7d511a63b8bce470f1d8eb528f433","modified":1469612869490},{"_id":"public/3D游戏开发/打飞碟改进/index.html","hash":"fbff4a34e649ec8860565368d8a9dd8f79c4eba8","modified":1469612869490},{"_id":"public/3D游戏开发/garen/index.html","hash":"9f785df1c32904b9cae00779f7d71f982b1e3bdf","modified":1469612869491},{"_id":"public/3D游戏开发/打飞碟/index.html","hash":"7a5fe4f43e72181a5817ea51331822364c462021","modified":1469612869491},{"_id":"public/3D游戏开发/牧师与魔鬼改进/index.html","hash":"7d44ff1c697c2e6acde585da79ae3e8facb48d66","modified":1469612869491},{"_id":"public/3D游戏开发/牧师和魔鬼/index.html","hash":"4b8e03e0eccfd59b33fbff06c4fb58c9ba4ab748","modified":1469612869491},{"_id":"public/3D游戏开发/井字棋/index.html","hash":"c404e40e4bbee22c05e08fe533d022d5b6852b6b","modified":1469612869491},{"_id":"public/Operating-System/C-C/同步2/index.html","hash":"b5c0122873f5ba64f11ba98598cf203ea3129844","modified":1469612869491},{"_id":"public/Operating-System/C-C/同步1/index.html","hash":"82b6f53130cc5cea46afcd72e899e5247251f40f","modified":1469612869491},{"_id":"public/Operating-System/C-C/线程/index.html","hash":"683d0406679789674498bb15349aed1eb3910936","modified":1469612869491},{"_id":"public/Operating-System/C-C/进程/index.html","hash":"afa3a0be1014ea50ab0ce412d6f9bc2c35144055","modified":1469612869492},{"_id":"public/计算机组成原理/缓存/index.html","hash":"fa6d75912eb38d6937867ae5a76ece761ec66871","modified":1469612869492},{"_id":"public/计算机组成原理/多周期CPU/index.html","hash":"1c789d03e9e4a61d1dc8c0a697feaa466071cdaf","modified":1469612869492},{"_id":"public/计算机组成原理/单周期CPU/index.html","hash":"293c4710b56e233da1ae20768b758865caf7f799","modified":1469612869492},{"_id":"public/计算机组成原理/汇编/index.html","hash":"80734e31223785b74cdc36118577518bfdd99791","modified":1469612869492},{"_id":"public/随笔/hexo/index.html","hash":"ef178c5aa326ee4c05e6e6ce98ae83a176e273c1","modified":1469612869492},{"_id":"public/archives/index.html","hash":"e787f3e0d3942a2fd3bcb2147050d4300af41119","modified":1469612869492},{"_id":"public/archives/page/2/index.html","hash":"4037b4aedb323391ea0d0aeaead09bd1690c16c5","modified":1469612869492},{"_id":"public/archives/page/3/index.html","hash":"f112a7124abcd898be50c780c39db75d86b65feb","modified":1469612869493},{"_id":"public/archives/2016/index.html","hash":"0d51d6edc1b2929b190212e343b561201c7349e8","modified":1469612869493},{"_id":"public/archives/2016/page/2/index.html","hash":"2ffadaacf570853362cfdf86244c22bc011bd22d","modified":1469612869493},{"_id":"public/archives/2016/page/3/index.html","hash":"d36d9c621ead03cc72b5ba34311b2915340935ea","modified":1469612869493},{"_id":"public/archives/2016/07/index.html","hash":"353352ac8a2799a6e14d91d3315b242fdedcdb31","modified":1469612869493},{"_id":"public/archives/2016/07/page/2/index.html","hash":"ab1eb0e910a3e16df476fedbc2a88df8e5edd3de","modified":1469612869493},{"_id":"public/archives/2016/07/page/3/index.html","hash":"9527ec39d52f4819fa1ea9a94a316ee70d177dad","modified":1469612869493},{"_id":"public/categories/3D游戏开发/index.html","hash":"b75eba262a75fcf97a5dc612f632cb643f49a437","modified":1469612869493},{"_id":"public/categories/algorithm/index.html","hash":"da37aa85261e2e9c59e4fe416b8c60d0dec451da","modified":1469612869493},{"_id":"public/categories/algorithm/Data-Structure/index.html","hash":"842ffba908def581a96241fea41c2a4e6cda8bc5","modified":1469612869494},{"_id":"public/index.html","hash":"87a87d3c7e03d05aabbbe9fb32fc46e461e052a8","modified":1469612869494},{"_id":"public/page/2/index.html","hash":"5aca0b2f221b3d6886d4389cf9e9799bb322fe3d","modified":1469612869494},{"_id":"public/page/3/index.html","hash":"6097f072b6cfd98c98bcf8d49b7e71db10bea882","modified":1469612869494},{"_id":"public/tags/C/index.html","hash":"e8028ff0ad1fd020f0d9dd64f0a6b6f1195e2c80","modified":1469612869494},{"_id":"public/tags/unity3d/index.html","hash":"8d200e86a0f0a52bf38e67daa6e884f97d054e6b","modified":1469612869494},{"_id":"public/tags/C-C/index.html","hash":"c68a576f2fd5fd3c057a8924508c2e35aa0db2b2","modified":1469612869495},{"_id":"public/tags/MVC/index.html","hash":"0ed1a1fbfeb4a16f9a955daa10d43ce369c4c73d","modified":1469612869495},{"_id":"public/favicon.ico","hash":"d6a0a74b372dafdab38efeb401c39ffe735a9cca","modified":1469612869567},{"_id":"public/img/blog.png","hash":"a9db59a4375d17bae7192a38ff3c3c508cfa96e7","modified":1469612869567},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469612869567},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469612869567},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469612869567},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469612869568},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469612869568},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469612869568},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1469612869568},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1469612869568},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1469612869568},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1469612869568},{"_id":"public/img/eye.png","hash":"3aea04d93ef8edb5247b29746ca131d034abd190","modified":1469612869568},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1469612869568},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1469612869568},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1469612869568},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1469612869569},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1469612869569},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1469612869569},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1469612869569},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1469612869569},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1469612869569},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1469612869569},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1469612869570},{"_id":"public/img/search.png","hash":"1ab76b03297ae2ce61ec59dd9bf8727f1fbbcedd","modified":1469612869570},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1469612869570},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1469612869570},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1469612869570},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1469612869570},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1469612869570},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1469612869570},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1469612869570},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1469612869571},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469612869571},{"_id":"public/C-C/agenda/Agenda/Agenda.cpp","hash":"d45a063c3942ed6799a5f5e0efe7903000bff793","modified":1469612869571},{"_id":"public/C-C/agenda/Agenda/AgendaService.cpp","hash":"7c04f35c959d841c8f0d6f1b7d51d059a84dd341","modified":1469612869571},{"_id":"public/C-C/agenda/Agenda/AgendaService.h","hash":"e2e55b9291ea212b08c47ed72cf419a7fcbbeab1","modified":1469612869571},{"_id":"public/C-C/agenda/Agenda/AgendaUI.cpp","hash":"05ad8d7ae5e127bb83f2afe001df4e2ab768421d","modified":1469612869571},{"_id":"public/C-C/agenda/Agenda/AgendaUI.h","hash":"748d9358f8e0a695e5e866fda53986f6711fcacd","modified":1469612869571},{"_id":"public/C-C/agenda/Agenda/Date.cpp","hash":"8d97e1878ba604dd4abd62e84234d4e7fe95a596","modified":1469612869571},{"_id":"public/C-C/agenda/Agenda/Date.h","hash":"10cf08d7658393708d4c6f928cd33ce5458bece5","modified":1469612869571},{"_id":"public/C-C/agenda/Agenda/Meeting.cpp","hash":"9ea39ac4698c33fcceedb22ce8b525880b8165e4","modified":1469612869572},{"_id":"public/C-C/agenda/Agenda/Meeting.csv","hash":"e31dd28f0c78f1194d41e01e22d9701bb4c1e7dd","modified":1469612869572},{"_id":"public/C-C/agenda/Agenda/Meeting.h","hash":"dae559c7f4284decacb1adb59e6da84156eabc98","modified":1469612869572},{"_id":"public/C-C/agenda/Agenda/Makefile","hash":"2cadf89abf5cdfc5484d877735cbf0d3ea7c3a03","modified":1469612869572},{"_id":"public/C-C/agenda/Agenda/Storage.h","hash":"99ad4fc3f412601dc4a1c43c0685a3e7d76419f6","modified":1469612869572},{"_id":"public/C-C/agenda/Agenda/User.cpp","hash":"9d80187c333b50509fe0a55a9849f8aa9f0fed72","modified":1469612869572},{"_id":"public/C-C/agenda/Agenda/Storage.cpp","hash":"dc022ea0caa40b866a696972c785f04f498bbce8","modified":1469612869572},{"_id":"public/C-C/agenda/Agenda/User.csv","hash":"78c475ee89deae669376822a4ab828451953b7f0","modified":1469612869572},{"_id":"public/C-C/agenda/Agenda/User.h","hash":"b9eac38e3b75e6a8ca256f750874ea221a5364d0","modified":1469612869572},{"_id":"public/3D游戏开发/井字棋/1.png","hash":"59163a0d5c91fad7ca1481de0fdee7e14bba06b7","modified":1469612869572},{"_id":"public/algorithm/Data-Structure/图的最短路径/a.png","hash":"d92d0f2de7940a5c38c8d85228c7925428e30eee","modified":1469612869572},{"_id":"public/algorithm/Data-Structure/排序2/a.png","hash":"57a981bb7cee72a0ed9c431cd15b7375208b5260","modified":1469612869572},{"_id":"public/3D游戏开发/garen/a.png","hash":"fe407e25173d60c07a78200a2fbb43f489c20303","modified":1469612869572},{"_id":"public/Operating-System/C-C/进程/2.png","hash":"233079444451487443a9ecc98c004d9045e6efc2","modified":1469612869572},{"_id":"public/Operating-System/C-C/线程/1.png","hash":"92c8c7bcce7c0b7cb542dff99bdf53e956f3e5b5","modified":1469612869573},{"_id":"public/3D游戏开发/序列化/a.png","hash":"a66948179df17e3b837a21be4a0199994bf050a8","modified":1469612869573},{"_id":"public/3D游戏开发/序列化/b.png","hash":"d69f8b7259bec3988fc674f265bd2f8c51fb5a0d","modified":1469612869574},{"_id":"public/3D游戏开发/序列化/c.png","hash":"1c46d6ae92a59fb025f856c5801af28f6ef9360d","modified":1469612869574},{"_id":"public/3D游戏开发/序列化/d.png","hash":"0cf8f6034f29d2d6efbf206f856084a28a9ec1cf","modified":1469612869574},{"_id":"public/3D游戏开发/序列化/f.png","hash":"b9e3f2119bf24886cadbe643c84d4c0b6d3ba16e","modified":1469612869574},{"_id":"public/3D游戏开发/牧师与魔鬼改进/a.png","hash":"3fb5e09498656af99128fc648a58b783a86618eb","modified":1469612869574},{"_id":"public/3D游戏开发/牧师与魔鬼改进/b.png","hash":"09231f1cf6fb9da210176563cfc90a786fa565b7","modified":1469612869574},{"_id":"public/3D游戏开发/牧师与魔鬼改进/c.png","hash":"59f7326baf541f580f4fbde9d420cf0504180d4b","modified":1469612869574},{"_id":"public/3D游戏开发/牧师与魔鬼改进/d.png","hash":"f29e9abdcc316440f9f98fba16e5fc272824feda","modified":1469612869574},{"_id":"public/3D游戏开发/牧师与魔鬼改进/e.png","hash":"f67f5bd62caad9ac2578f31adc594985bf28c0c6","modified":1469612869574},{"_id":"public/3D游戏开发/牧师和魔鬼/1.png","hash":"a44a62db1080651b573e6720e57b61c4c0d7211c","modified":1469612869574},{"_id":"public/3D游戏开发/牧师和魔鬼/2.png","hash":"909da70bf219b8b49ad7acdb12f4d21a33a0a958","modified":1469612869574},{"_id":"public/3D游戏开发/牧师和魔鬼/3.png","hash":"913d771f3bc4a74f53a43a81db7f70a00d6a32d5","modified":1469612869575},{"_id":"public/3D游戏开发/牧师和魔鬼/4.png","hash":"7d24f683b69c8fba44b7affca9ae00da115b14ab","modified":1469612869575},{"_id":"public/3D游戏开发/粒子系统/a.png","hash":"0c02cc63e90ac2143a291424d8892b2f3fa5c7de","modified":1469612869575},{"_id":"public/3D游戏开发/粒子系统/b.png","hash":"626fefcb149da344b971e2b14f0be3be283e453d","modified":1469612869575},{"_id":"public/3D游戏开发/粒子系统/z.png","hash":"c9ed9e2a07a3e7ce52cadfdb3b159d0ddeb2adf0","modified":1469612869575},{"_id":"public/Operating-System/C-C/同步1/3.png","hash":"9bcbc45ff96dee41ff9d099a72c97e312ac871b0","modified":1469612869575},{"_id":"public/3D游戏开发/打飞碟改进/bc.png","hash":"2d47a933c4aa6bd5412bdf8e1e712475a212e9de","modified":1469612869575},{"_id":"public/3D游戏开发/打飞碟改进/df.png","hash":"66e7465f2f41112b28ec20857dd75b527ea45706","modified":1469612869575},{"_id":"public/3D游戏开发/打飞碟改进/gm.png","hash":"109a39b0a357f41a3564e746b812a968ebb26934","modified":1469612869575},{"_id":"public/3D游戏开发/打飞碟改进/fd.png","hash":"e2d9ed888735c4675f3cb8aee52a1ddd5713de8e","modified":1469612869575},{"_id":"public/3D游戏开发/打飞碟改进/j.png","hash":"d7f010aa5f84e76d36684e320b5af4dfba770a42","modified":1469612869575},{"_id":"public/3D游戏开发/打飞碟改进/sxj.png","hash":"478eca07aa87dc94caa3fd85ae4d457b30d0de76","modified":1469612869575},{"_id":"public/3D游戏开发/打飞碟改进/ui.png","hash":"69557eb8a60aab4537071eb9a4ec863328a9102b","modified":1469612869575},{"_id":"public/3D游戏开发/打飞碟改进/zd.png","hash":"92f07a4ba97b6224a448bd62a7ddf2ecdc9e95a1","modified":1469612869575},{"_id":"public/计算机组成原理/汇编/5.png","hash":"13a8061926a79705ca85ef954daefee945605e2d","modified":1469612869575},{"_id":"public/计算机组成原理/汇编/7.png","hash":"0ad41143d16b029261d0603618c9105ca82dbcf7","modified":1469612869575},{"_id":"public/计算机组成原理/汇编/8.png","hash":"a14d5c6c70e7d9b8349df82827f5ac3ac2e84ca6","modified":1469612869575},{"_id":"public/计算机组成原理/汇编/9.png","hash":"740ef74abf22bb4e50f320a7244908acf86fcd4e","modified":1469612869575},{"_id":"public/计算机组成原理/汇编/c++.png","hash":"52297ecd56d2f80fb081449458297fe7880d3783","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/1.1.png","hash":"f7e9c9235e6647d59a1d2f47c728c48d42e4a116","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/1.2.png","hash":"9421f828056e2dd1e77756b7680cdb86508580fc","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/1.png","hash":"2563cee211e12441f8ea424b1ad38c05dac1259a","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/2.1.png","hash":"b2f2dae37038c1eae5cb631a2e85392c16c867c2","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/2.2.png","hash":"0f8e7070b9ba2c08edf79cdb599cc94de7a8d7e6","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/2.png","hash":"a77c5a5c77164035713165738f9c7406872efbd7","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/3.1.png","hash":"af7b7cc4758ad3bdd5dc0ba3e9b9c7b52aa01140","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/3.png","hash":"cfbe4baa66e690a1779cf9d36b0a0cb632692dba","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/3.2.png","hash":"62cc1825ea2249e796468928344d545840457a3a","modified":1469612869576},{"_id":"public/计算机组成原理/缓存/4.png","hash":"2162e41be46c37fad7c177b0543a44a051cc9d79","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/alu.png","hash":"d59b9199b1edf48a6e3309289dcd68b3cd4f4e85","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/chuansong.png","hash":"49ebd9a89aace15f49feec563b5704d36c81658a","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/duxie.png","hash":"a9890f48251dde542704c80d9f3f9616291da524","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/fenzhi.png","hash":"9b8f0b0180d9440cd4ad207acf77eac7317074f5","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/i.png","hash":"705a91c30121bce858dd4fa66f2880f7745c1639","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/luoji.png","hash":"1a56b9fc32cc04ae5a1a12144929125e44404387","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/j.png","hash":"1e668405acaea851e115d5df2cfd485aa173158a","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/r.png","hash":"32242aeb17cef7b567a385745ad1e9cc3a083286","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/suansu.png","hash":"5dea3af661dbac041cb40c299efb38d3eeef1ece","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/tingji.png","hash":"0ea63b964eea243becf0ce104f2ce0e3b2d6ec05","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/yanzheng.png","hash":"16391aead6b561bc38cbdf5df88bfa4326d701e6","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/yuanli.png","hash":"1fcdd7ca4842eb26bbb68eb02ede95f67fffc4b3","modified":1469612869576},{"_id":"public/计算机组成原理/单周期CPU/zong.png","hash":"5c8eccd079894476f11e8a0629e12f28ad4bd71f","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/a1.png","hash":"1d142e7d557cb5fe01794bc528ae66ac088ebbb7","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/aa.png","hash":"d99eb95d7ed1bc5d28c5c632a4c01ee2da79b427","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/all.png","hash":"7edd5c5826a60be903028f5eb6a8346fef4beea9","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/bb.png","hash":"c2ea81c14c5fe4504ec911ca013e78b0e9f27916","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/cc.png","hash":"b6379a631b30224046aeedf9cfea866eae7f0d01","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/d.png","hash":"4d8fd0cf50f6b76a016e52e3d5b6099b28866393","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/f1.png","hash":"66d83c2be11e985b0d9f86706d9dfeac53ee4f6c","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/f2.png","hash":"88a03ba2e0e22384d91df41eea27aec0260cf5cc","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/f3.png","hash":"e4ac651046459202c218184751427bfe4f8ea952","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/f4.png","hash":"136c591f45dbf194bc4381055666c5b14a8ec0ce","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/f5.png","hash":"51b7132ee2de80eb4d1643dd1e15570a26ccfc20","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/f6.png","hash":"bdfd67272d31c6f8723c0612ed875b5cbb40f3a3","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/f7.png","hash":"f90f8640a0c6512428dc7e5afd4bbe62ad9cb108","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/g1.png","hash":"8a9e72e17c444085cbfb9807ad63a9f98b7a288c","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/u1.png","hash":"2f61a49251e0c51d05d6a47caed55f97e4218014","modified":1469612869577},{"_id":"public/3D游戏开发/打飞碟/u2.png","hash":"2b15c880d168bdc36041b6617daf890183a8e528","modified":1469612869577},{"_id":"public/计算机组成原理/多周期CPU/alu.png","hash":"23a951e994cb80c0c8748f2ba3da99d3cf2c13a9","modified":1469612869577},{"_id":"public/计算机组成原理/多周期CPU/bijiao.png","hash":"74c50f4610c944bd65f021324ec8b820aa6d587b","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/chuansong.png","hash":"cac278c3645af939ea6de41bbe98f27b532b8513","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/duxie.png","hash":"192939734f66061263c27db997542bb48830ebf4","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/exe.png","hash":"f9e7a341f9212abf591fe116d7515e9ab91aeca3","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/fenzhi.png","hash":"b3caf1d089cf2a33daf43fea71e22de9bbc23934","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/guoc.png","hash":"3617283fde4ae926c1881a60cb689090a3b0334e","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/id.png","hash":"f830e3588d37ccc3cade03be9f5bd4ad2246a7ce","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/if.png","hash":"fc133b957a0d510dc3e1dc2745982b2c64fe78ab","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/kongzhi.png","hash":"d6fe645c16af510a8b6e21158ad520578defabc7","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/luoji.png","hash":"ca6f75cf7237a1f8b3a1a0045a0ce4e90594277c","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/mem.png","hash":"fe819d180435c4861f60afb7df9da7f4e2431e79","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/suansu.png","hash":"037424f8db02719100c0af38efddbcd0c96d46e9","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/tiaozhuan.png","hash":"bbee11566eb2b83e6737a36aede40028926112c8","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/tingji.png","hash":"1513731245acc8045800fcc61b09e599c2d5e3ab","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/wb.png","hash":"9318030224aebf268e1f7b52f2a12662ccb3106b","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/yiwei.png","hash":"dfb6bbf215c1fef4d762caed9724b4794fb4c943","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/zhuanyi.png","hash":"00c8488e796074220ff821a801d5f87cb9598914","modified":1469612869578},{"_id":"public/计算机组成原理/多周期CPU/zi.png","hash":"243f0972613932a89605e77b4c547b4cbfcd0a0b","modified":1469612869578},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1469612870873},{"_id":"public/Operating-System/C-C/同步2/1.png","hash":"063f3840959507894f88ef57716bf05991509135","modified":1469612870876},{"_id":"public/Operating-System/C-C/进程/1.png","hash":"fe6f9ac82989583138d811841314c80fd4af15bf","modified":1469612870876},{"_id":"public/3D游戏开发/garen/j.png","hash":"d62eefc4d27df61427732acf7ca0f66f05cd3341","modified":1469612870876},{"_id":"public/3D游戏开发/garen/jg.png","hash":"11a221bd288429644b2cda1fa055d48882edb51f","modified":1469612870876},{"_id":"public/3D游戏开发/牧师和魔鬼/5.png","hash":"4e0268fff4812d6d87a8460e609fa64ac70cb9b2","modified":1469612870876},{"_id":"public/Operating-System/C-C/同步1/1.png","hash":"af8ca32c3c2871954e53ba3a26624ca8d87805ba","modified":1469612870877},{"_id":"public/Operating-System/C-C/同步1/2.png","hash":"26cf34e6d2b65dfeb4e7aacc9b4f075d1790f676","modified":1469612870877},{"_id":"public/Operating-System/C-C/同步1/4.png","hash":"19b75d984c39045b062a75d3607fb2d651139c4e","modified":1469612870877},{"_id":"public/Operating-System/C-C/同步1/5.png","hash":"b217a8af73f70967c1eaf09f062674044a3937f7","modified":1469612870877},{"_id":"public/Operating-System/C-C/同步1/6.png","hash":"c294a17988fb0a2c46ab26fd465fee7f5294367f","modified":1469612870877},{"_id":"public/计算机组成原理/汇编/6.png","hash":"64fa41c5a16565592a0b11abb0456c78b078e7da","modified":1469612870877},{"_id":"public/计算机组成原理/单周期CPU/tonglu.png","hash":"3e6c0901c48c8f34ef33886083ff4c606730336d","modified":1469612870877},{"_id":"public/计算机组成原理/单周期CPU/xinhao.png","hash":"19ec05d47aa4917971e051671491e99e2d47a239","modified":1469612870877},{"_id":"public/计算机组成原理/多周期CPU/ceshi.png","hash":"042429bd3b89e1e1aaefa8e70864df5f909200cd","modified":1469612870877},{"_id":"public/计算机组成原理/多周期CPU/tonglu.png","hash":"87783a5f66693a392610a337dfcd4b6324feda6c","modified":1469612870877},{"_id":"public/计算机组成原理/多周期CPU/xinhao1.png","hash":"ba90de800a86e2ed4721db47eae31e66ee329cbf","modified":1469612870877},{"_id":"public/计算机组成原理/多周期CPU/xinhao2.png","hash":"69157bcd18b481b1716fb0e9a8070914bfb1f576","modified":1469612870878},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1469612870909},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1469612870910},{"_id":"public/js/busuanzi.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1469612870910},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1469612870910},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1469612870910},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1469612870910},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1469612870910},{"_id":"public/js/totop.js","hash":"73cbc9a975a67e179aafbf0670d3499084eb4f8a","modified":1469612870910},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1469612870910},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469612870910},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1469612870910},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469612870910},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1469612870910},{"_id":"public/css/style.css","hash":"2f7c198ebcf1d1a5ea031100c01cfbbc48ec97b2","modified":1469612870911},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1469612870911},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1469612870911},{"_id":"public/js/require-2.1.6,jquery-1.9.1.min.js","hash":"7c51ab8c7a21ac07d5038f14dd7982a33c570c25","modified":1469612870911},{"_id":"public/3D游戏开发/garen/g1.png","hash":"c7cfb5fee6672fa09669f7af17063a251e4bb876","modified":1469612870911},{"_id":"public/3D游戏开发/打飞碟改进/all.png","hash":"255e682e6a8a63325450690f2c714fbc65c15f95","modified":1469612870911},{"_id":"public/计算机组成原理/汇编/jiemian1.png","hash":"4c5663ae730c39d5929aa4d53e4e045a869048b3","modified":1469612870993},{"_id":"public/计算机组成原理/汇编/jiemian4.png","hash":"2500705626c78fecece6bec8b783712e37b056d0","modified":1469612870995},{"_id":"public/计算机组成原理/汇编/jiemian2.png","hash":"22ea10db0be0df630cfe3eaf64198e038856254b","modified":1469612871021},{"_id":"public/计算机组成原理/汇编/jiemian3.png","hash":"100887aa0a9be6b1288a64aeb544876c7d2fb74d","modified":1469612871021},{"_id":"public/3D游戏开发/粒子系统/b.gif","hash":"7e14c7b1bb55c98b04340d04b6372cfd91ea1617","modified":1469612871054},{"_id":"public/3D游戏开发/粒子系统/a.gif","hash":"3cbd5ea008deed63cdeb45f4455f390e38e0e855","modified":1469612871062},{"_id":"public/3D游戏开发/garen/aa.gif","hash":"038c3c6b7da9e03281b41b4bb1b94a4b5f2c6255","modified":1469612871123}],"Category":[{"name":"3D游戏开发","_id":"cir4pjzjy0004gobkl9imkfhz"},{"name":"algorithm","_id":"cir4pjzks0009gobkyygnmpau"},{"name":"C/C++","_id":"cir4pjzlr000egobkggz858he"},{"name":"随笔","_id":"cir4pjzof000sgobk4j3n6wea"},{"name":"Data Structure","parent":"cir4pjzks0009gobkyygnmpau","_id":"cir4pjzp5000zgobksxkzmzsh"},{"name":"计算机组成原理","_id":"cir4pjzpz0016gobkcctf92cp"},{"name":"Operating System","_id":"cir4pjzqy001egobknyjd9fd6"},{"name":"C/C++","parent":"cir4pjzqy001egobknyjd9fd6","_id":"cir4pjzt2002ggobkzd7uhpo6"},{"name":"Data Structure","_id":"cir4pjztc0035gobkmp57ndb2"}],"Data":[],"Page":[{"title":"about","date":"2016-07-13T04:44:55.000Z","_content":"**关于我**","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-13 12:44:55\n---\n**关于我**","updated":"2016-07-13T04:45:22.370Z","path":"about/index.html","comments":1,"layout":"page","_id":"cir4pjzjn0001gobknktaipj0","content":"<p><strong>关于我</strong></p>\n","excerpt":"","more":"<p><strong>关于我</strong></p>\n"}],"Post":[{"title":"Coroutines","toc":true,"date":"2016-07-23T09:15:55.000Z","_content":"Coroutines即协程，一般我们调用函数的时候，这个函数就会在一帧的时间内完成。如果我们希望我们的函数不在一帧里完全完成，每次只执行一部分，这时候就要用到协程。协程通过yield，可以在执行的途中退出，下次再次执行的时候在yield的下一句执行。协程通过保存一个栈记录执行的顺序，就像操作系统中的保存上下文一样。\n<!--more-->\n## **协程**\n\n协程的格式：返回值是IEnumerator和拥有yield返回语句。\n``` cpp\nIEnumerator Fade() {\n    for (float f = 1f; f >= 0; f -= 0.1f) {\n        Color c = renderer.material.color;\n        c.a = f;\n        renderer.material.color = c;\n        yield return null;\n    }\n}\n\n//run the coroutine\nvoid Update() {\n    if (Input.GetKeyDown(\"f\")) {\n        StartCoroutine(\"Fade\");\n    }\n}\n```\n\nWaitForSeconds允许在t秒以后再恢复:\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class WaitForSecondsExample : MonoBehaviour {\n    \n    void Start() {\n        StartCoroutine(Example());\n    }\n    \n    IEnumerator Example() {\n        print(Time.time);\n        yield return new WaitForSeconds(5);\n        print(Time.time);\n    }\n    \n}\n```\n\n## **停止协程**\n\n``` cpp\nStopCoroutine(Coroutine);\nStopCoroutine(\"FunctionName\");  //只有使用startCoroutine(\"funName\")的才能使用 \n```\n\n> 参考资料：[Unity Manual/Scripting/Scripting Overview/Coroutines](http://docs.unity3d.com/Manual/Coroutines.html)","source":"_posts/Coroutines.md","raw":"---\ntitle: Coroutines\ntoc: true\ndate: 2016-07-23 17:15:55\ntags:\n- C#\n- unity3d\ncategories: 3D游戏开发\n---\nCoroutines即协程，一般我们调用函数的时候，这个函数就会在一帧的时间内完成。如果我们希望我们的函数不在一帧里完全完成，每次只执行一部分，这时候就要用到协程。协程通过yield，可以在执行的途中退出，下次再次执行的时候在yield的下一句执行。协程通过保存一个栈记录执行的顺序，就像操作系统中的保存上下文一样。\n<!--more-->\n## **协程**\n\n协程的格式：返回值是IEnumerator和拥有yield返回语句。\n``` cpp\nIEnumerator Fade() {\n    for (float f = 1f; f >= 0; f -= 0.1f) {\n        Color c = renderer.material.color;\n        c.a = f;\n        renderer.material.color = c;\n        yield return null;\n    }\n}\n\n//run the coroutine\nvoid Update() {\n    if (Input.GetKeyDown(\"f\")) {\n        StartCoroutine(\"Fade\");\n    }\n}\n```\n\nWaitForSeconds允许在t秒以后再恢复:\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class WaitForSecondsExample : MonoBehaviour {\n    \n    void Start() {\n        StartCoroutine(Example());\n    }\n    \n    IEnumerator Example() {\n        print(Time.time);\n        yield return new WaitForSeconds(5);\n        print(Time.time);\n    }\n    \n}\n```\n\n## **停止协程**\n\n``` cpp\nStopCoroutine(Coroutine);\nStopCoroutine(\"FunctionName\");  //只有使用startCoroutine(\"funName\")的才能使用 \n```\n\n> 参考资料：[Unity Manual/Scripting/Scripting Overview/Coroutines](http://docs.unity3d.com/Manual/Coroutines.html)","slug":"Coroutines","published":1,"updated":"2016-07-23T09:21:21.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzjh0000gobk4cxg8uoz","content":"<p>Coroutines即协程，一般我们调用函数的时候，这个函数就会在一帧的时间内完成。如果我们希望我们的函数不在一帧里完全完成，每次只执行一部分，这时候就要用到协程。协程通过yield，可以在执行的途中退出，下次再次执行的时候在yield的下一句执行。协程通过保存一个栈记录执行的顺序，就像操作系统中的保存上下文一样。<br><a id=\"more\"></a></p>\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a><strong>协程</strong></h2><p>协程的格式：返回值是IEnumerator和拥有yield返回语句。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">IEnumerator <span class=\"title\">Fade</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">float</span> f = <span class=\"number\">1f</span>; f &gt;= <span class=\"number\">0</span>; f -= <span class=\"number\">0.1f</span>) &#123;</div><div class=\"line\">        Color c = renderer.material.color;</div><div class=\"line\">        c.a = f;</div><div class=\"line\">        renderer.material.color = c;</div><div class=\"line\">        yield <span class=\"keyword\">return</span> null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//run the coroutine</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Input.GetKeyDown(<span class=\"string\">\"f\"</span>)) &#123;</div><div class=\"line\">        StartCoroutine(<span class=\"string\">\"Fade\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>WaitForSeconds允许在t秒以后再恢复:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> WaitForSecondsExample : MonoBehaviour &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        StartCoroutine(Example());</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\">IEnumerator <span class=\"title\">Example</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        print(Time.time);</div><div class=\"line\">        <span class=\"function\">yield <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title\">WaitForSeconds</span><span class=\"params\">(<span class=\"number\">5</span>)</span></span>;</div><div class=\"line\">        print(Time.time);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"停止协程\"><a href=\"#停止协程\" class=\"headerlink\" title=\"停止协程\"></a><strong>停止协程</strong></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">StopCoroutine(Coroutine);</div><div class=\"line\">StopCoroutine(<span class=\"string\">\"FunctionName\"</span>);  <span class=\"comment\">//只有使用startCoroutine(\"funName\")的才能使用</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料：<a href=\"http://docs.unity3d.com/Manual/Coroutines.html\" target=\"_blank\" rel=\"external\">Unity Manual/Scripting/Scripting Overview/Coroutines</a></p>\n</blockquote>\n","excerpt":"<p>Coroutines即协程，一般我们调用函数的时候，这个函数就会在一帧的时间内完成。如果我们希望我们的函数不在一帧里完全完成，每次只执行一部分，这时候就要用到协程。协程通过yield，可以在执行的途中退出，下次再次执行的时候在yield的下一句执行。协程通过保存一个栈记录执行的顺序，就像操作系统中的保存上下文一样。<br>","more":"</p>\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a><strong>协程</strong></h2><p>协程的格式：返回值是IEnumerator和拥有yield返回语句。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">IEnumerator <span class=\"title\">Fade</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">float</span> f = <span class=\"number\">1f</span>; f &gt;= <span class=\"number\">0</span>; f -= <span class=\"number\">0.1f</span>) &#123;</div><div class=\"line\">        Color c = renderer.material.color;</div><div class=\"line\">        c.a = f;</div><div class=\"line\">        renderer.material.color = c;</div><div class=\"line\">        yield <span class=\"keyword\">return</span> null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//run the coroutine</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Input.GetKeyDown(<span class=\"string\">\"f\"</span>)) &#123;</div><div class=\"line\">        StartCoroutine(<span class=\"string\">\"Fade\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>WaitForSeconds允许在t秒以后再恢复:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> WaitForSecondsExample : MonoBehaviour &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        StartCoroutine(Example());</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\">IEnumerator <span class=\"title\">Example</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        print(Time.time);</div><div class=\"line\">        <span class=\"function\">yield <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title\">WaitForSeconds</span><span class=\"params\">(<span class=\"number\">5</span>)</span></span>;</div><div class=\"line\">        print(Time.time);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"停止协程\"><a href=\"#停止协程\" class=\"headerlink\" title=\"停止协程\"></a><strong>停止协程</strong></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">StopCoroutine(Coroutine);</div><div class=\"line\">StopCoroutine(<span class=\"string\">\"FunctionName\"</span>);  <span class=\"comment\">//只有使用startCoroutine(\"funName\")的才能使用</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>参考资料：<a href=\"http://docs.unity3d.com/Manual/Coroutines.html\">Unity Manual/Scripting/Scripting Overview/Coroutines</a></p>\n</blockquote>"},{"title":"BSTree","toc":true,"date":"2016-07-23T09:39:25.000Z","_content":"BSTree即二叉搜索树，对于每个节点，其值不比它左子树的任意元素小，而且不比它的右子树的任意元素大。下面简单介绍BSTree的搜索，插入，删除。\n<!--more-->\n## **节点**\n\n每个节点都是一个结构体，包含一个值以及左右指针，指向左右子树：\n``` cpp\n#ifndef NODE\n#define NODE\n\ntemplate <class Entry>\nstruct Node {\n    Entry entry;\n    Node<Entry> *left;\n    Node<Entry> *right;\n    Node(const Entry &en) {\n        entry = en;\n        left = NULL;\n        right = NULL;\n    }\n};\n\n#endif\n```\n\n## **查找**\n\n查找比较简单，使用递归即可：\n``` cpp\ntemplate <class Entry>\nNode<Entry>* BSTree_search(Node<Entry> *root, Entry &target) {\n    if (root->entry == target || root == NULL) return root;\n    if (root->entry < target)\n    return BSTree_search(root->right, target);\n    return BSTree_search(root->left, target);\n}\n```\n\n## **插入**\n\n同查找类似：\n``` cpp\ntemplate <class Entry>\nvoid BSTree_insert(Node<Entry> *&root, const Entry &target) {\n    if (root == NULL) root = new Node<Entry>(target);\n    if (root->entry < target) BSTree_insert(root->right, target);\n    if (root->entry > target) BSTree_insert(root->left, target);\n}\n```\n## **删除**\n\n删除相对来说比较麻烦，需要小心以免出错。分为四种情况：左子树为空、右子树空左右子树空左右都不空。其中，左右都不为空在删除时分为两种情况：需删除节点左子树有右子树、无右子树。\n``` cpp\ntemplate <class Entry>\nvoid BSTree_remove(Node<Entry> *&root, const Entry &target) {\n    if (root == NULL) return;\n    if (root->entry == target) {\n        Node<Entry> *dele = root;\n        if (root->left == NULL) root = root->right;\n        else if (root->right == NULL) root = root->left;\n        else if (root->right == NULL && root->left == NULL) root = NULL;\n        else {\n            dele = root->left;\n            Node<Entry> *parent = root;\n            \n            while (dele->right) parent = dele, dele = dele->right;\n            root->entry = dele->entry;\n            \n            if (parent == root) root->left = dele->left;\n            else parent->right = dele->left;\n        }\n        delete dele;\n    } else if (root->entry < target) {\n        BSTree_remove(root->right, target);\n    } else {\n        BSTree_remove(root->left, target);\n    }\n}\n```","source":"_posts/BSTree.md","raw":"---\ntitle: BSTree\ntoc: true\ndate: 2016-07-23 17:39:25\ntags:\n- C/C++\n- 递归\ncategories:\n- algorithm\n- Data Structure\n---\nBSTree即二叉搜索树，对于每个节点，其值不比它左子树的任意元素小，而且不比它的右子树的任意元素大。下面简单介绍BSTree的搜索，插入，删除。\n<!--more-->\n## **节点**\n\n每个节点都是一个结构体，包含一个值以及左右指针，指向左右子树：\n``` cpp\n#ifndef NODE\n#define NODE\n\ntemplate <class Entry>\nstruct Node {\n    Entry entry;\n    Node<Entry> *left;\n    Node<Entry> *right;\n    Node(const Entry &en) {\n        entry = en;\n        left = NULL;\n        right = NULL;\n    }\n};\n\n#endif\n```\n\n## **查找**\n\n查找比较简单，使用递归即可：\n``` cpp\ntemplate <class Entry>\nNode<Entry>* BSTree_search(Node<Entry> *root, Entry &target) {\n    if (root->entry == target || root == NULL) return root;\n    if (root->entry < target)\n    return BSTree_search(root->right, target);\n    return BSTree_search(root->left, target);\n}\n```\n\n## **插入**\n\n同查找类似：\n``` cpp\ntemplate <class Entry>\nvoid BSTree_insert(Node<Entry> *&root, const Entry &target) {\n    if (root == NULL) root = new Node<Entry>(target);\n    if (root->entry < target) BSTree_insert(root->right, target);\n    if (root->entry > target) BSTree_insert(root->left, target);\n}\n```\n## **删除**\n\n删除相对来说比较麻烦，需要小心以免出错。分为四种情况：左子树为空、右子树空左右子树空左右都不空。其中，左右都不为空在删除时分为两种情况：需删除节点左子树有右子树、无右子树。\n``` cpp\ntemplate <class Entry>\nvoid BSTree_remove(Node<Entry> *&root, const Entry &target) {\n    if (root == NULL) return;\n    if (root->entry == target) {\n        Node<Entry> *dele = root;\n        if (root->left == NULL) root = root->right;\n        else if (root->right == NULL) root = root->left;\n        else if (root->right == NULL && root->left == NULL) root = NULL;\n        else {\n            dele = root->left;\n            Node<Entry> *parent = root;\n            \n            while (dele->right) parent = dele, dele = dele->right;\n            root->entry = dele->entry;\n            \n            if (parent == root) root->left = dele->left;\n            else parent->right = dele->left;\n        }\n        delete dele;\n    } else if (root->entry < target) {\n        BSTree_remove(root->right, target);\n    } else {\n        BSTree_remove(root->left, target);\n    }\n}\n```","slug":"BSTree","published":1,"updated":"2016-07-25T05:53:24.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzjq0002gobkanmmb97g","content":"<p>BSTree即二叉搜索树，对于每个节点，其值不比它左子树的任意元素小，而且不比它的右子树的任意元素大。下面简单介绍BSTree的搜索，插入，删除。<br><a id=\"more\"></a></p>\n<h2 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a><strong>节点</strong></h2><p>每个节点都是一个结构体，包含一个值以及左右指针，指向左右子树：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> NODE</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NODE</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Entry&gt;</div><div class=\"line\"><span class=\"keyword\">struct</span> Node &#123;</div><div class=\"line\">    Entry entry;</div><div class=\"line\">    Node&lt;Entry&gt; *left;</div><div class=\"line\">    Node&lt;Entry&gt; *right;</div><div class=\"line\">    Node(<span class=\"keyword\">const</span> Entry &amp;en) &#123;</div><div class=\"line\">        entry = en;</div><div class=\"line\">        left = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        right = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a><strong>查找</strong></h2><p>查找比较简单，使用递归即可：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Entry&gt;</div><div class=\"line\">Node&lt;Entry&gt;* BSTree_search(Node&lt;Entry&gt; *root, Entry &amp;target) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry == target || root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> root;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry &lt; target)</div><div class=\"line\">    <span class=\"keyword\">return</span> BSTree_search(root-&gt;right, target);</div><div class=\"line\">    <span class=\"keyword\">return</span> BSTree_search(root-&gt;left, target);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a><strong>插入</strong></h2><p>同查找类似：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Entry&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BSTree_insert</span><span class=\"params\">(Node&lt;Entry&gt; *&amp;root, <span class=\"keyword\">const</span> Entry &amp;target)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) root = <span class=\"keyword\">new</span> Node&lt;Entry&gt;(target);</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry &lt; target) BSTree_insert(root-&gt;right, target);</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry &gt; target) BSTree_insert(root-&gt;left, target);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a><strong>删除</strong></h2><p>删除相对来说比较麻烦，需要小心以免出错。分为四种情况：左子树为空、右子树空左右子树空左右都不空。其中，左右都不为空在删除时分为两种情况：需删除节点左子树有右子树、无右子树。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Entry&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BSTree_remove</span><span class=\"params\">(Node&lt;Entry&gt; *&amp;root, <span class=\"keyword\">const</span> Entry &amp;target)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry == target) &#123;</div><div class=\"line\">        Node&lt;Entry&gt; *dele = root;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;left == <span class=\"literal\">NULL</span>) root = root-&gt;right;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">NULL</span>) root = root-&gt;left;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;left == <span class=\"literal\">NULL</span>) root = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            dele = root-&gt;left;</div><div class=\"line\">            Node&lt;Entry&gt; *parent = root;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">while</span> (dele-&gt;right) parent = dele, dele = dele-&gt;right;</div><div class=\"line\">            root-&gt;entry = dele-&gt;entry;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (parent == root) root-&gt;left = dele-&gt;left;</div><div class=\"line\">            <span class=\"keyword\">else</span> parent-&gt;right = dele-&gt;left;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">delete</span> dele;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;entry &lt; target) &#123;</div><div class=\"line\">        BSTree_remove(root-&gt;right, target);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        BSTree_remove(root-&gt;left, target);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>BSTree即二叉搜索树，对于每个节点，其值不比它左子树的任意元素小，而且不比它的右子树的任意元素大。下面简单介绍BSTree的搜索，插入，删除。<br>","more":"</p>\n<h2 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a><strong>节点</strong></h2><p>每个节点都是一个结构体，包含一个值以及左右指针，指向左右子树：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> NODE</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NODE</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Entry&gt;</div><div class=\"line\"><span class=\"keyword\">struct</span> Node &#123;</div><div class=\"line\">    Entry entry;</div><div class=\"line\">    Node&lt;Entry&gt; *left;</div><div class=\"line\">    Node&lt;Entry&gt; *right;</div><div class=\"line\">    Node(<span class=\"keyword\">const</span> Entry &amp;en) &#123;</div><div class=\"line\">        entry = en;</div><div class=\"line\">        left = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        right = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div></pre></td></tr></table></figure></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a><strong>查找</strong></h2><p>查找比较简单，使用递归即可：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Entry&gt;</div><div class=\"line\">Node&lt;Entry&gt;* BSTree_search(Node&lt;Entry&gt; *root, Entry &amp;target) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry == target || root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> root;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry &lt; target)</div><div class=\"line\">    <span class=\"keyword\">return</span> BSTree_search(root-&gt;right, target);</div><div class=\"line\">    <span class=\"keyword\">return</span> BSTree_search(root-&gt;left, target);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a><strong>插入</strong></h2><p>同查找类似：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Entry&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BSTree_insert</span><span class=\"params\">(Node&lt;Entry&gt; *&amp;root, <span class=\"keyword\">const</span> Entry &amp;target)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) root = <span class=\"keyword\">new</span> Node&lt;Entry&gt;(target);</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry &lt; target) BSTree_insert(root-&gt;right, target);</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry &gt; target) BSTree_insert(root-&gt;left, target);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a><strong>删除</strong></h2><p>删除相对来说比较麻烦，需要小心以免出错。分为四种情况：左子树为空、右子树空左右子树空左右都不空。其中，左右都不为空在删除时分为两种情况：需删除节点左子树有右子树、无右子树。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Entry&gt;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BSTree_remove</span><span class=\"params\">(Node&lt;Entry&gt; *&amp;root, <span class=\"keyword\">const</span> Entry &amp;target)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;entry == target) &#123;</div><div class=\"line\">        Node&lt;Entry&gt; *dele = root;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root-&gt;left == <span class=\"literal\">NULL</span>) root = root-&gt;right;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">NULL</span>) root = root-&gt;left;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;right == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;left == <span class=\"literal\">NULL</span>) root = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            dele = root-&gt;left;</div><div class=\"line\">            Node&lt;Entry&gt; *parent = root;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">while</span> (dele-&gt;right) parent = dele, dele = dele-&gt;right;</div><div class=\"line\">            root-&gt;entry = dele-&gt;entry;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (parent == root) root-&gt;left = dele-&gt;left;</div><div class=\"line\">            <span class=\"keyword\">else</span> parent-&gt;right = dele-&gt;left;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">delete</span> dele;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (root-&gt;entry &lt; target) &#123;</div><div class=\"line\">        BSTree_remove(root-&gt;right, target);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        BSTree_remove(root-&gt;left, target);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Agenda--会议管理系统","toc":true,"date":"2016-07-26T09:58:20.000Z","_content":"使用C++实现一个简单的会议管理系统，支持登陆、注册，创建会议、查询会议等等功能。\n<!--more-->\n\n## **单例模式**\n\n单例模式也称为单件模式、单子模式，可能是使用最广泛的设计模式。其意图是保证一个类仅有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。有很多地方需要这样的功能模块，如系统的日志输出，GUI应用必须是单鼠标，MODEM的联接需要一条且只需要一条电话线，操作系统只能有一个窗口管理器，一台PC连一个键盘。\n\n《设计模式》一书中给出了一种很不错的实现，定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。\n``` cpp\nclass Singleton  \n{  \nprivate:  \n    Singleton() {}   // 构造函数是私有的  \n \n    static Singleton *Instance;  \npublic:  \n    static Singleton * GetInstance()  \n    {  \n        if(Instance == NULL)   // 判断是否第一次调用  \n            Instance = new Singleton();  \n        return Instance;  \n    }  \n};\n```\n大多数时候，这样的实现都不会出现问题。有经验的读者可能会问，Instance指向的空间什么时候释放呢？更严重的问题是，该实例的析构函数什么时候执行？\n\n我们知道，程序在结束的时候，系统会自动析构所有的全局变量。事实上，系统也会析构所有的类的静态成员变量，就像这些静态成员也是全局变量一样。利用这个特征，我们可以在单例类中定义一个这样的静态成员变量，而它的唯一工作就是在析构函数中删除单例类的实例。\n``` cpp\nclass Singleton  \n{  \nprivate:  \n    Singleton() {}   // 构造函数是私有的\n \n    static Singleton *Instance;  \n\n    class Garbage   // 它的唯一工作就是在析构函数中删除CSingleton的实例  \n    {  \n    public:  \n        ~Garbage()  \n        {  \n            if(Singleton::Instance)  \n                delete Singleton::Instance;\n        }  \n    };  \n\n    static Garbage garbage;\npublic:  \n    static Singleton * GetInstance()  \n    {  \n        if(Instance == NULL)   // 判断是否第一次调用  \n            Instance = new Singleton();  \n        return Instance;  \n    }  \n};\n```\n另外一种实现，使用局部静态变量，非常强大的方法，完全实现了单例的特性，而且代码量更少，也不用担心单例销毁的问题。\n``` cpp\nclass Singleton  \n{  \n    private:  \n        Singleton() {}   // 构造函数是私有的  \n    public:  \n        static Singleton * GetInstance()  \n        {  \n            static Singleton instance;   // 局部静态变量  \n            return &instance;  \n        }  \n};  \n```\n注意Getinstance返回的是指针，这样可以防止如下使用出现问题：\n``` cpp\nSingleton singleton = Singleton :: GetInstance();\n```\n这么做就出现了一个类拷贝的问题，违背了单例的特性。产生这个问题原因在于：编译器会为类生成一个默认的构造函数，来支持类的拷贝。使用指针则可以避免。\n\n## **文件读取**\n\n用到fstream类。以读文件ifstream为例，下来两种读法相同：\n``` cpp\nifstream in;\nin.open(\"1.txt\", fstream::in);\n```\n``` cpp\nifstream in(\"1.txt\", fstream::in);\n```\n读取一整行时，可用两种方法：\n``` cpp\nin.getline(tmp);\n```\n``` cpp\ngetline(in, tmp);\n```\n写文件可以直接：\n``` cpp\nofstream out(\"1.txt\");\nout << \"This is a line.\\n\";  \nout << \"This is another line.\\n\";\n```\n文件读写结束需要调用close()函数。\n\n## **Lambda 表达式**\n\nLambda表达式是C++11的比较重要的一个新特性，基本形式为auto lambda = [] () -> {}。\n\nlambda 表达式使用一对方括号[]作为开始的标识，类似于声明一个函数，只不过这个函数没有名字，也就是一个匿名函数；()内表示Lambda表达式接受的参数，也就是函数参数；表达式的返回值是自动推断的，不需要显式声明，因而使用表达式的时候可以用auto申明；lambda 表达式可以使用与其相同范围 scope 内的变量，要捕获这些变量则需要将变量写在[]中；\n\n- []        // 不捕获任何外部变量\n- [=]       // 以值的形式捕获所有外部变量\n- [&]       // 以引用形式捕获所有外部变量\n- [x, &y]   // x 以传值形式捕获，y 以引用形式捕获\n- [=, &z]   // z 以引用形式捕获，其余变量以传值形式捕获\n- [&, x]    // x 以值的形式捕获，其余变量以引用形式捕获\n\n另外，auto关键字实际会将 lambda 表达式转换成一种类似于std::function的内部类型（但并不是std::function类型，虽然与std::function“兼容”）。所以，我们也可以这么写：\n``` cpp\nauto lambda = [] () -> int { return val * 100; };\n```\n``` cpp\nstd::function<int()> lambda = [] () -> int { return val * 100; };\n```\n简单来说，std::function<int()>就是一个可调用对象模板类，代表一个可调用对象，接受 0 个参数，返回值是int。所以，当我们需要一个接受一个double作为参数，返回int的对象时，就可以写作：std::function&lt;int(double)&gt;。\n\n另外有一点需要注意。对于[=]或[&]的形式，lambda 表达式可以直接使用 this 指针。但是，对于[]的形式，如果要使用 this 指针，必须显式传入：\n``` cpp\n[this]() { this->someFunc(); }();\n```\n## **Makefile**\n\n网上makefile教程很多，这里不意义说明，值给出本程序的makefile:\n``` makefile\nobj=Meeting.o User.o Date.o Storage.o AgendaService.o AgendaUI.o\n\nth:$(obj) Agenda.cpp\n\tg++ -std=c++0x -o th $(obj) Agenda.cpp\nAgendaUI.o:AgendaUI.h AgendaUI.cpp\n\tg++ -std=c++0x -c AgendaUI.cpp\nAgendaService.o:AgendaService.h AgendaService.cpp\n\tg++ -std=c++0x -c AgendaService.cpp\nMeeting.o:Meeting.cpp Meeting.h\n\tg++ -std=c++0x -c Meeting.cpp\nDate.o:Date.cpp Date.h\n\tg++ -std=c++0x -c Date.cpp\nUser.o:User.h User.cpp\n\tg++ -std=c++0x -c User.cpp\nStorage.o:Storage.h Storage.cpp\n\tg++ -std=c++0x -c  Storage.cpp\n.PHONY:clean\nclean:\n\t-rm $(obj) th\n```\n切记g++前面是一个TAB键！\n\n## **MVC设计模式**\n\n#### **Model**\n\n模型是最简单最基础的结构，它除了各种数据。在Agenda系统中，模型包括Meeting、Date、User，他们包含各种基本的操作，如获取会议的sponsor、获取用户email、会议时间是否合法等等，模型在实现这些操作时不需要考虑实际中千变万化的各种情况，只需实现即可。\n\n所有这些模型集中到一个单例模式类storage中，使用这些模型可以添加用户、删除用户、创建会议等等，这些方法的实现不需考虑实际输入等等情况，只需实现它，这些情况由Controller考虑。\n\n#### **Controller**\n\n控制器控制程序的逻辑，处理数据输入，若输入的数据满足所需要的逻辑，则调用model中数据处理类来处理数据，因而数据处理类需要注入到控制器中（在控制器中有model的一个私有实例即可注入）。Agenda中，控制器为AgendaService，其中有Storage实例，相关操作如创建会议等，若满足逻辑则通过Storage实例处理并写入数据。\n\n#### **View**\n\n视觉类，显示相关界面，提示用户可以进行的操作等等。用户选择相关操作后，显示与操作相关的界面，然后调用controller控制并处理用户请求。在view这里读取的数据，通过controller传送到model中。\n\n在agenda系统中，界面包含三部分：用户登录、用户注册、退出系统。用户注册和退出系统比较简单，而用户登录，登录后，用户可以进行一系列操作，因而将这些操作写在一个死循环中，由用户选择并显示相关页面。\n\n这是完整[代码](https://github.com/duzwl/duzwl.github.io/tree/master/C-C/agenda/Agenda)\n\n\n\n","source":"_posts/agenda.md","raw":"---\ntitle: Agenda--会议管理系统\ntoc: true\ndate: 2016-07-26 17:58:20\ntags:\n- C/C++\n- MVC\ncategories: C/C++\n---\n使用C++实现一个简单的会议管理系统，支持登陆、注册，创建会议、查询会议等等功能。\n<!--more-->\n\n## **单例模式**\n\n单例模式也称为单件模式、单子模式，可能是使用最广泛的设计模式。其意图是保证一个类仅有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。有很多地方需要这样的功能模块，如系统的日志输出，GUI应用必须是单鼠标，MODEM的联接需要一条且只需要一条电话线，操作系统只能有一个窗口管理器，一台PC连一个键盘。\n\n《设计模式》一书中给出了一种很不错的实现，定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。\n``` cpp\nclass Singleton  \n{  \nprivate:  \n    Singleton() {}   // 构造函数是私有的  \n \n    static Singleton *Instance;  \npublic:  \n    static Singleton * GetInstance()  \n    {  \n        if(Instance == NULL)   // 判断是否第一次调用  \n            Instance = new Singleton();  \n        return Instance;  \n    }  \n};\n```\n大多数时候，这样的实现都不会出现问题。有经验的读者可能会问，Instance指向的空间什么时候释放呢？更严重的问题是，该实例的析构函数什么时候执行？\n\n我们知道，程序在结束的时候，系统会自动析构所有的全局变量。事实上，系统也会析构所有的类的静态成员变量，就像这些静态成员也是全局变量一样。利用这个特征，我们可以在单例类中定义一个这样的静态成员变量，而它的唯一工作就是在析构函数中删除单例类的实例。\n``` cpp\nclass Singleton  \n{  \nprivate:  \n    Singleton() {}   // 构造函数是私有的\n \n    static Singleton *Instance;  \n\n    class Garbage   // 它的唯一工作就是在析构函数中删除CSingleton的实例  \n    {  \n    public:  \n        ~Garbage()  \n        {  \n            if(Singleton::Instance)  \n                delete Singleton::Instance;\n        }  \n    };  \n\n    static Garbage garbage;\npublic:  \n    static Singleton * GetInstance()  \n    {  \n        if(Instance == NULL)   // 判断是否第一次调用  \n            Instance = new Singleton();  \n        return Instance;  \n    }  \n};\n```\n另外一种实现，使用局部静态变量，非常强大的方法，完全实现了单例的特性，而且代码量更少，也不用担心单例销毁的问题。\n``` cpp\nclass Singleton  \n{  \n    private:  \n        Singleton() {}   // 构造函数是私有的  \n    public:  \n        static Singleton * GetInstance()  \n        {  \n            static Singleton instance;   // 局部静态变量  \n            return &instance;  \n        }  \n};  \n```\n注意Getinstance返回的是指针，这样可以防止如下使用出现问题：\n``` cpp\nSingleton singleton = Singleton :: GetInstance();\n```\n这么做就出现了一个类拷贝的问题，违背了单例的特性。产生这个问题原因在于：编译器会为类生成一个默认的构造函数，来支持类的拷贝。使用指针则可以避免。\n\n## **文件读取**\n\n用到fstream类。以读文件ifstream为例，下来两种读法相同：\n``` cpp\nifstream in;\nin.open(\"1.txt\", fstream::in);\n```\n``` cpp\nifstream in(\"1.txt\", fstream::in);\n```\n读取一整行时，可用两种方法：\n``` cpp\nin.getline(tmp);\n```\n``` cpp\ngetline(in, tmp);\n```\n写文件可以直接：\n``` cpp\nofstream out(\"1.txt\");\nout << \"This is a line.\\n\";  \nout << \"This is another line.\\n\";\n```\n文件读写结束需要调用close()函数。\n\n## **Lambda 表达式**\n\nLambda表达式是C++11的比较重要的一个新特性，基本形式为auto lambda = [] () -> {}。\n\nlambda 表达式使用一对方括号[]作为开始的标识，类似于声明一个函数，只不过这个函数没有名字，也就是一个匿名函数；()内表示Lambda表达式接受的参数，也就是函数参数；表达式的返回值是自动推断的，不需要显式声明，因而使用表达式的时候可以用auto申明；lambda 表达式可以使用与其相同范围 scope 内的变量，要捕获这些变量则需要将变量写在[]中；\n\n- []        // 不捕获任何外部变量\n- [=]       // 以值的形式捕获所有外部变量\n- [&]       // 以引用形式捕获所有外部变量\n- [x, &y]   // x 以传值形式捕获，y 以引用形式捕获\n- [=, &z]   // z 以引用形式捕获，其余变量以传值形式捕获\n- [&, x]    // x 以值的形式捕获，其余变量以引用形式捕获\n\n另外，auto关键字实际会将 lambda 表达式转换成一种类似于std::function的内部类型（但并不是std::function类型，虽然与std::function“兼容”）。所以，我们也可以这么写：\n``` cpp\nauto lambda = [] () -> int { return val * 100; };\n```\n``` cpp\nstd::function<int()> lambda = [] () -> int { return val * 100; };\n```\n简单来说，std::function<int()>就是一个可调用对象模板类，代表一个可调用对象，接受 0 个参数，返回值是int。所以，当我们需要一个接受一个double作为参数，返回int的对象时，就可以写作：std::function&lt;int(double)&gt;。\n\n另外有一点需要注意。对于[=]或[&]的形式，lambda 表达式可以直接使用 this 指针。但是，对于[]的形式，如果要使用 this 指针，必须显式传入：\n``` cpp\n[this]() { this->someFunc(); }();\n```\n## **Makefile**\n\n网上makefile教程很多，这里不意义说明，值给出本程序的makefile:\n``` makefile\nobj=Meeting.o User.o Date.o Storage.o AgendaService.o AgendaUI.o\n\nth:$(obj) Agenda.cpp\n\tg++ -std=c++0x -o th $(obj) Agenda.cpp\nAgendaUI.o:AgendaUI.h AgendaUI.cpp\n\tg++ -std=c++0x -c AgendaUI.cpp\nAgendaService.o:AgendaService.h AgendaService.cpp\n\tg++ -std=c++0x -c AgendaService.cpp\nMeeting.o:Meeting.cpp Meeting.h\n\tg++ -std=c++0x -c Meeting.cpp\nDate.o:Date.cpp Date.h\n\tg++ -std=c++0x -c Date.cpp\nUser.o:User.h User.cpp\n\tg++ -std=c++0x -c User.cpp\nStorage.o:Storage.h Storage.cpp\n\tg++ -std=c++0x -c  Storage.cpp\n.PHONY:clean\nclean:\n\t-rm $(obj) th\n```\n切记g++前面是一个TAB键！\n\n## **MVC设计模式**\n\n#### **Model**\n\n模型是最简单最基础的结构，它除了各种数据。在Agenda系统中，模型包括Meeting、Date、User，他们包含各种基本的操作，如获取会议的sponsor、获取用户email、会议时间是否合法等等，模型在实现这些操作时不需要考虑实际中千变万化的各种情况，只需实现即可。\n\n所有这些模型集中到一个单例模式类storage中，使用这些模型可以添加用户、删除用户、创建会议等等，这些方法的实现不需考虑实际输入等等情况，只需实现它，这些情况由Controller考虑。\n\n#### **Controller**\n\n控制器控制程序的逻辑，处理数据输入，若输入的数据满足所需要的逻辑，则调用model中数据处理类来处理数据，因而数据处理类需要注入到控制器中（在控制器中有model的一个私有实例即可注入）。Agenda中，控制器为AgendaService，其中有Storage实例，相关操作如创建会议等，若满足逻辑则通过Storage实例处理并写入数据。\n\n#### **View**\n\n视觉类，显示相关界面，提示用户可以进行的操作等等。用户选择相关操作后，显示与操作相关的界面，然后调用controller控制并处理用户请求。在view这里读取的数据，通过controller传送到model中。\n\n在agenda系统中，界面包含三部分：用户登录、用户注册、退出系统。用户注册和退出系统比较简单，而用户登录，登录后，用户可以进行一系列操作，因而将这些操作写在一个死循环中，由用户选择并显示相关页面。\n\n这是完整[代码](https://github.com/duzwl/duzwl.github.io/tree/master/C-C/agenda/Agenda)\n\n\n\n","slug":"agenda","published":1,"updated":"2016-07-27T09:47:27.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzk00005gobksuzqyli8","content":"<p>使用C++实现一个简单的会议管理系统，支持登陆、注册，创建会议、查询会议等等功能。<br><a id=\"more\"></a></p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a><strong>单例模式</strong></h2><p>单例模式也称为单件模式、单子模式，可能是使用最广泛的设计模式。其意图是保证一个类仅有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。有很多地方需要这样的功能模块，如系统的日志输出，GUI应用必须是单鼠标，MODEM的联接需要一条且只需要一条电话线，操作系统只能有一个窗口管理器，一台PC连一个键盘。</p>\n<p>《设计模式》一书中给出了一种很不错的实现，定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton  </div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    Singleton() &#123;&#125;   <span class=\"comment\">// 构造函数是私有的  </span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">static</span> Singleton *Instance;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton * <span class=\"title\">GetInstance</span><span class=\"params\">()</span>  </span></div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(Instance == <span class=\"literal\">NULL</span>)   <span class=\"comment\">// 判断是否第一次调用  </span></div><div class=\"line\">            Instance = <span class=\"keyword\">new</span> Singleton();  </div><div class=\"line\">        <span class=\"keyword\">return</span> Instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>大多数时候，这样的实现都不会出现问题。有经验的读者可能会问，Instance指向的空间什么时候释放呢？更严重的问题是，该实例的析构函数什么时候执行？</p>\n<p>我们知道，程序在结束的时候，系统会自动析构所有的全局变量。事实上，系统也会析构所有的类的静态成员变量，就像这些静态成员也是全局变量一样。利用这个特征，我们可以在单例类中定义一个这样的静态成员变量，而它的唯一工作就是在析构函数中删除单例类的实例。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton  </div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    Singleton() &#123;&#125;   <span class=\"comment\">// 构造函数是私有的</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">static</span> Singleton *Instance;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class</span> Garbage   <span class=\"comment\">// 它的唯一工作就是在析构函数中删除CSingleton的实例  </span></div><div class=\"line\">    &#123;  </div><div class=\"line\">    <span class=\"keyword\">public</span>:  </div><div class=\"line\">        ~Garbage()  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(Singleton::Instance)  </div><div class=\"line\">                <span class=\"keyword\">delete</span> Singleton::Instance;</div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> Garbage garbage;</div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton * <span class=\"title\">GetInstance</span><span class=\"params\">()</span>  </span></div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(Instance == <span class=\"literal\">NULL</span>)   <span class=\"comment\">// 判断是否第一次调用  </span></div><div class=\"line\">            Instance = <span class=\"keyword\">new</span> Singleton();  </div><div class=\"line\">        <span class=\"keyword\">return</span> Instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>另外一种实现，使用局部静态变量，非常强大的方法，完全实现了单例的特性，而且代码量更少，也不用担心单例销毁的问题。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span>:  </div><div class=\"line\">        Singleton() &#123;&#125;   <span class=\"comment\">// 构造函数是私有的  </span></div><div class=\"line\">    <span class=\"keyword\">public</span>:  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> Singleton * <span class=\"title\">GetInstance</span><span class=\"params\">()</span>  </span></div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">static</span> Singleton instance;   <span class=\"comment\">// 局部静态变量  </span></div><div class=\"line\">            <span class=\"keyword\">return</span> &amp;instance;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>注意Getinstance返回的是指针，这样可以防止如下使用出现问题：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Singleton singleton = Singleton :: GetInstance();</div></pre></td></tr></table></figure></p>\n<p>这么做就出现了一个类拷贝的问题，违背了单例的特性。产生这个问题原因在于：编译器会为类生成一个默认的构造函数，来支持类的拷贝。使用指针则可以避免。</p>\n<h2 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a><strong>文件读取</strong></h2><p>用到fstream类。以读文件ifstream为例，下来两种读法相同：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifstream in;</div><div class=\"line\">in.open(<span class=\"string\">\"1.txt\"</span>, fstream::in);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"1.txt\"</span>, fstream::in)</span></span>;</div></pre></td></tr></table></figure>\n<p>读取一整行时，可用两种方法：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">in.getline(tmp);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getline(in, tmp);</div></pre></td></tr></table></figure>\n<p>写文件可以直接：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"1.txt\"</span>)</span></span>;</div><div class=\"line\">out &lt;&lt; <span class=\"string\">\"This is a line.\\n\"</span>;  </div><div class=\"line\">out &lt;&lt; <span class=\"string\">\"This is another line.\\n\"</span>;</div></pre></td></tr></table></figure></p>\n<p>文件读写结束需要调用close()函数。</p>\n<h2 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a><strong>Lambda 表达式</strong></h2><p>Lambda表达式是C++11的比较重要的一个新特性，基本形式为auto lambda = [] () -&gt; {}。</p>\n<p>lambda 表达式使用一对方括号[]作为开始的标识，类似于声明一个函数，只不过这个函数没有名字，也就是一个匿名函数；()内表示Lambda表达式接受的参数，也就是函数参数；表达式的返回值是自动推断的，不需要显式声明，因而使用表达式的时候可以用auto申明；lambda 表达式可以使用与其相同范围 scope 内的变量，要捕获这些变量则需要将变量写在[]中；</p>\n<ul>\n<li>[]        // 不捕获任何外部变量</li>\n<li>[=]       // 以值的形式捕获所有外部变量</li>\n<li>[&amp;]       // 以引用形式捕获所有外部变量</li>\n<li>[x, &amp;y]   // x 以传值形式捕获，y 以引用形式捕获</li>\n<li>[=, &amp;z]   // z 以引用形式捕获，其余变量以传值形式捕获</li>\n<li>[&amp;, x]    // x 以值的形式捕获，其余变量以引用形式捕获</li>\n</ul>\n<p>另外，auto关键字实际会将 lambda 表达式转换成一种类似于std::function的内部类型（但并不是std::function类型，虽然与std::function“兼容”）。所以，我们也可以这么写：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> lambda = [] () -&gt; <span class=\"keyword\">int</span> &#123; <span class=\"keyword\">return</span> val * <span class=\"number\">100</span>; &#125;;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">int</span>()&gt; lambda = [] () -&gt; <span class=\"keyword\">int</span> &#123; <span class=\"keyword\">return</span> val * <span class=\"number\">100</span>; &#125;;</div></pre></td></tr></table></figure>\n<p>简单来说，std::function<int()>就是一个可调用对象模板类，代表一个可调用对象，接受 0 个参数，返回值是int。所以，当我们需要一个接受一个double作为参数，返回int的对象时，就可以写作：std::function&lt;int(double)&gt;。</int()></p>\n<p>另外有一点需要注意。对于[=]或[&amp;]的形式，lambda 表达式可以直接使用 this 指针。但是，对于[]的形式，如果要使用 this 指针，必须显式传入：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">this</span>]() &#123; <span class=\"keyword\">this</span>-&gt;someFunc(); &#125;();</div></pre></td></tr></table></figure></p>\n<h2 id=\"Makefile\"><a href=\"#Makefile\" class=\"headerlink\" title=\"Makefile\"></a><strong>Makefile</strong></h2><p>网上makefile教程很多，这里不意义说明，值给出本程序的makefile:<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj=Meeting.o User.o Date.o Storage.o AgendaService.o AgendaUI.o</div><div class=\"line\"></div><div class=\"line\">th:$(obj) Agenda.cpp</div><div class=\"line\">\tg++ -std=c++0x -o th <span class=\"variable\">$(obj)</span> Agenda.cpp</div><div class=\"line\">AgendaUI.o:AgendaUI.h AgendaUI.cpp</div><div class=\"line\">\tg++ -std=c++0x -c AgendaUI.cpp</div><div class=\"line\">AgendaService.o:AgendaService.h AgendaService.cpp</div><div class=\"line\">\tg++ -std=c++0x -c AgendaService.cpp</div><div class=\"line\">Meeting.o:Meeting.cpp Meeting.h</div><div class=\"line\">\tg++ -std=c++0x -c Meeting.cpp</div><div class=\"line\">Date.o:Date.cpp Date.h</div><div class=\"line\">\tg++ -std=c++0x -c Date.cpp</div><div class=\"line\">User.o:User.h User.cpp</div><div class=\"line\">\tg++ -std=c++0x -c User.cpp</div><div class=\"line\">Storage.o:Storage.h Storage.cpp</div><div class=\"line\">\tg++ -std=c++0x -c  Storage.cpp</div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">.PHONY</span>:clean</span></div><div class=\"line\"><span class=\"section\">clean:</span></div><div class=\"line\">\t-rm <span class=\"variable\">$(obj)</span> th</div></pre></td></tr></table></figure></p>\n<p>切记g++前面是一个TAB键！</p>\n<h2 id=\"MVC设计模式\"><a href=\"#MVC设计模式\" class=\"headerlink\" title=\"MVC设计模式\"></a><strong>MVC设计模式</strong></h2><h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a><strong>Model</strong></h4><p>模型是最简单最基础的结构，它除了各种数据。在Agenda系统中，模型包括Meeting、Date、User，他们包含各种基本的操作，如获取会议的sponsor、获取用户email、会议时间是否合法等等，模型在实现这些操作时不需要考虑实际中千变万化的各种情况，只需实现即可。</p>\n<p>所有这些模型集中到一个单例模式类storage中，使用这些模型可以添加用户、删除用户、创建会议等等，这些方法的实现不需考虑实际输入等等情况，只需实现它，这些情况由Controller考虑。</p>\n<h4 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a><strong>Controller</strong></h4><p>控制器控制程序的逻辑，处理数据输入，若输入的数据满足所需要的逻辑，则调用model中数据处理类来处理数据，因而数据处理类需要注入到控制器中（在控制器中有model的一个私有实例即可注入）。Agenda中，控制器为AgendaService，其中有Storage实例，相关操作如创建会议等，若满足逻辑则通过Storage实例处理并写入数据。</p>\n<h4 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a><strong>View</strong></h4><p>视觉类，显示相关界面，提示用户可以进行的操作等等。用户选择相关操作后，显示与操作相关的界面，然后调用controller控制并处理用户请求。在view这里读取的数据，通过controller传送到model中。</p>\n<p>在agenda系统中，界面包含三部分：用户登录、用户注册、退出系统。用户注册和退出系统比较简单，而用户登录，登录后，用户可以进行一系列操作，因而将这些操作写在一个死循环中，由用户选择并显示相关页面。</p>\n<p>这是完整<a href=\"https://github.com/duzwl/duzwl.github.io/tree/master/C-C/agenda/Agenda\" target=\"_blank\" rel=\"external\">代码</a></p>\n","excerpt":"<p>使用C++实现一个简单的会议管理系统，支持登陆、注册，创建会议、查询会议等等功能。<br>","more":"</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a><strong>单例模式</strong></h2><p>单例模式也称为单件模式、单子模式，可能是使用最广泛的设计模式。其意图是保证一个类仅有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。有很多地方需要这样的功能模块，如系统的日志输出，GUI应用必须是单鼠标，MODEM的联接需要一条且只需要一条电话线，操作系统只能有一个窗口管理器，一台PC连一个键盘。</p>\n<p>《设计模式》一书中给出了一种很不错的实现，定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton  </div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    Singleton() &#123;&#125;   <span class=\"comment\">// 构造函数是私有的  </span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">static</span> Singleton *Instance;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton * <span class=\"title\">GetInstance</span><span class=\"params\">()</span>  </div><div class=\"line\">    </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(Instance == <span class=\"literal\">NULL</span>)   <span class=\"comment\">// 判断是否第一次调用  </span></div><div class=\"line\">            Instance = <span class=\"keyword\">new</span> Singleton();  </div><div class=\"line\">        <span class=\"keyword\">return</span> Instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>大多数时候，这样的实现都不会出现问题。有经验的读者可能会问，Instance指向的空间什么时候释放呢？更严重的问题是，该实例的析构函数什么时候执行？</p>\n<p>我们知道，程序在结束的时候，系统会自动析构所有的全局变量。事实上，系统也会析构所有的类的静态成员变量，就像这些静态成员也是全局变量一样。利用这个特征，我们可以在单例类中定义一个这样的静态成员变量，而它的唯一工作就是在析构函数中删除单例类的实例。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton  </div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">    Singleton() &#123;&#125;   <span class=\"comment\">// 构造函数是私有的</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">static</span> Singleton *Instance;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">class</span> Garbage   <span class=\"comment\">// 它的唯一工作就是在析构函数中删除CSingleton的实例  </span></div><div class=\"line\">    &#123;  </div><div class=\"line\">    <span class=\"keyword\">public</span>:  </div><div class=\"line\">        ~Garbage()  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(Singleton::Instance)  </div><div class=\"line\">                <span class=\"keyword\">delete</span> Singleton::Instance;</div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> Garbage garbage;</div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Singleton * <span class=\"title\">GetInstance</span><span class=\"params\">()</span>  </div><div class=\"line\">    </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(Instance == <span class=\"literal\">NULL</span>)   <span class=\"comment\">// 判断是否第一次调用  </span></div><div class=\"line\">            Instance = <span class=\"keyword\">new</span> Singleton();  </div><div class=\"line\">        <span class=\"keyword\">return</span> Instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>另外一种实现，使用局部静态变量，非常强大的方法，完全实现了单例的特性，而且代码量更少，也不用担心单例销毁的问题。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton  </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span>:  </div><div class=\"line\">        Singleton() &#123;&#125;   <span class=\"comment\">// 构造函数是私有的  </span></div><div class=\"line\">    <span class=\"keyword\">public</span>:  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> Singleton * <span class=\"title\">GetInstance</span><span class=\"params\">()</span>  </div><div class=\"line\">        </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">static</span> Singleton instance;   <span class=\"comment\">// 局部静态变量  </span></div><div class=\"line\">            <span class=\"keyword\">return</span> &amp;instance;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>注意Getinstance返回的是指针，这样可以防止如下使用出现问题：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Singleton singleton = Singleton :: GetInstance();</div></pre></td></tr></table></figure></p>\n<p>这么做就出现了一个类拷贝的问题，违背了单例的特性。产生这个问题原因在于：编译器会为类生成一个默认的构造函数，来支持类的拷贝。使用指针则可以避免。</p>\n<h2 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a><strong>文件读取</strong></h2><p>用到fstream类。以读文件ifstream为例，下来两种读法相同：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifstream in;</div><div class=\"line\">in.open(<span class=\"string\">\"1.txt\"</span>, fstream::in);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"1.txt\"</span>, fstream::in)</span></span>;</div></pre></td></tr></table></figure>\n<p>读取一整行时，可用两种方法：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">in.getline(tmp);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getline(in, tmp);</div></pre></td></tr></table></figure>\n<p>写文件可以直接：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ofstream <span class=\"title\">out</span><span class=\"params\">(<span class=\"string\">\"1.txt\"</span>)</span></span>;</div><div class=\"line\">out &lt;&lt; <span class=\"string\">\"This is a line.\\n\"</span>;  </div><div class=\"line\">out &lt;&lt; <span class=\"string\">\"This is another line.\\n\"</span>;</div></pre></td></tr></table></figure></p>\n<p>文件读写结束需要调用close()函数。</p>\n<h2 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a><strong>Lambda 表达式</strong></h2><p>Lambda表达式是C++11的比较重要的一个新特性，基本形式为auto lambda = [] () -&gt; {}。</p>\n<p>lambda 表达式使用一对方括号[]作为开始的标识，类似于声明一个函数，只不过这个函数没有名字，也就是一个匿名函数；()内表示Lambda表达式接受的参数，也就是函数参数；表达式的返回值是自动推断的，不需要显式声明，因而使用表达式的时候可以用auto申明；lambda 表达式可以使用与其相同范围 scope 内的变量，要捕获这些变量则需要将变量写在[]中；</p>\n<ul>\n<li>[]        // 不捕获任何外部变量</li>\n<li>[=]       // 以值的形式捕获所有外部变量</li>\n<li>[&amp;]       // 以引用形式捕获所有外部变量</li>\n<li>[x, &amp;y]   // x 以传值形式捕获，y 以引用形式捕获</li>\n<li>[=, &amp;z]   // z 以引用形式捕获，其余变量以传值形式捕获</li>\n<li>[&amp;, x]    // x 以值的形式捕获，其余变量以引用形式捕获</li>\n</ul>\n<p>另外，auto关键字实际会将 lambda 表达式转换成一种类似于std::function的内部类型（但并不是std::function类型，虽然与std::function“兼容”）。所以，我们也可以这么写：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">auto</span> lambda = [] () -&gt; <span class=\"keyword\">int</span> &#123; <span class=\"keyword\">return</span> val * <span class=\"number\">100</span>; &#125;;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">int</span>()&gt; lambda = [] () -&gt; <span class=\"keyword\">int</span> &#123; <span class=\"keyword\">return</span> val * <span class=\"number\">100</span>; &#125;;</div></pre></td></tr></table></figure>\n<p>简单来说，std::function<int()>就是一个可调用对象模板类，代表一个可调用对象，接受 0 个参数，返回值是int。所以，当我们需要一个接受一个double作为参数，返回int的对象时，就可以写作：std::function&lt;int(double)&gt;。</p>\n<p>另外有一点需要注意。对于[=]或[&amp;]的形式，lambda 表达式可以直接使用 this 指针。但是，对于[]的形式，如果要使用 this 指针，必须显式传入：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"keyword\">this</span>]() &#123; <span class=\"keyword\">this</span>-&gt;someFunc(); &#125;();</div></pre></td></tr></table></figure></p>\n<h2 id=\"Makefile\"><a href=\"#Makefile\" class=\"headerlink\" title=\"Makefile\"></a><strong>Makefile</strong></h2><p>网上makefile教程很多，这里不意义说明，值给出本程序的makefile:<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj=Meeting.o User.o Date.o Storage.o AgendaService.o AgendaUI.o</div><div class=\"line\"></div><div class=\"line\">th:$(obj) Agenda.cpp</div><div class=\"line\">\tg++ -std=c++0x -o th <span class=\"variable\">$(obj)</span> Agenda.cpp</div><div class=\"line\">AgendaUI.o:AgendaUI.h AgendaUI.cpp</div><div class=\"line\">\tg++ -std=c++0x -c AgendaUI.cpp</div><div class=\"line\">AgendaService.o:AgendaService.h AgendaService.cpp</div><div class=\"line\">\tg++ -std=c++0x -c AgendaService.cpp</div><div class=\"line\">Meeting.o:Meeting.cpp Meeting.h</div><div class=\"line\">\tg++ -std=c++0x -c Meeting.cpp</div><div class=\"line\">Date.o:Date.cpp Date.h</div><div class=\"line\">\tg++ -std=c++0x -c Date.cpp</div><div class=\"line\">User.o:User.h User.cpp</div><div class=\"line\">\tg++ -std=c++0x -c User.cpp</div><div class=\"line\">Storage.o:Storage.h Storage.cpp</div><div class=\"line\">\tg++ -std=c++0x -c  Storage.cpp</div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">.PHONY</span>:clean</span></div><div class=\"line\"><span class=\"section\">clean:</span></div><div class=\"line\">\t-rm <span class=\"variable\">$(obj)</span> th</div></pre></td></tr></table></figure></p>\n<p>切记g++前面是一个TAB键！</p>\n<h2 id=\"MVC设计模式\"><a href=\"#MVC设计模式\" class=\"headerlink\" title=\"MVC设计模式\"></a><strong>MVC设计模式</strong></h2><h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a><strong>Model</strong></h4><p>模型是最简单最基础的结构，它除了各种数据。在Agenda系统中，模型包括Meeting、Date、User，他们包含各种基本的操作，如获取会议的sponsor、获取用户email、会议时间是否合法等等，模型在实现这些操作时不需要考虑实际中千变万化的各种情况，只需实现即可。</p>\n<p>所有这些模型集中到一个单例模式类storage中，使用这些模型可以添加用户、删除用户、创建会议等等，这些方法的实现不需考虑实际输入等等情况，只需实现它，这些情况由Controller考虑。</p>\n<h4 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a><strong>Controller</strong></h4><p>控制器控制程序的逻辑，处理数据输入，若输入的数据满足所需要的逻辑，则调用model中数据处理类来处理数据，因而数据处理类需要注入到控制器中（在控制器中有model的一个私有实例即可注入）。Agenda中，控制器为AgendaService，其中有Storage实例，相关操作如创建会议等，若满足逻辑则通过Storage实例处理并写入数据。</p>\n<h4 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a><strong>View</strong></h4><p>视觉类，显示相关界面，提示用户可以进行的操作等等。用户选择相关操作后，显示与操作相关的界面，然后调用controller控制并处理用户请求。在view这里读取的数据，通过controller传送到model中。</p>\n<p>在agenda系统中，界面包含三部分：用户登录、用户注册、退出系统。用户注册和退出系统比较简单，而用户登录，登录后，用户可以进行一系列操作，因而将这些操作写在一个死循环中，由用户选择并显示相关页面。</p>\n<p>这是完整<a href=\"https://github.com/duzwl/duzwl.github.io/tree/master/C-C/agenda/Agenda\">代码</a></p>"},{"title":"Simple Calculator","toc":true,"date":"2016-07-25T02:49:14.000Z","_content":"栈、队列、链表是学习数据结构必须掌握的知识点，初学者必须学会自己实现它们并完善相关的操作函数。下面利用栈的相关知识，实现计算器的功能。计算器能进行+-*/以及包含多重()在内的运算，但必须保证输入的字符串有相应的输出结果。\n<!--more-->\n\n## **原理剖析**\n\n使用两个栈stack&lt;string&gt;，一个num储存数字，一个chra储存运算符+-*/以及()；读取一整个字符串后需要剔除字符串中的空格；然后由于输入过程中，输入+9和-9都是合法的，因而需要在符号前面添加0。\n\n本代码采取边解析字符串边运算边储存到栈中的方法，解析完毕后再对栈中的字符串进行运算，返回运算结果，保留小数点后三位小数并实现四舍五入。\n- 读取到‘)’时，可以对num和chra中的数字和字符进行计算，直到chra顶为')'\n- 读取到‘(’时，直接压栈\n- 读取到‘+’ ‘-’时，可以直接对num和chra中的数字和字符进行计算\n- 读取到‘\\*’ ‘/’时，若chra顶为‘\\*’或‘/’则可以直接对num和chra中的数字和字符进行计算\n- 读取到数字，直接压栈\n\n最后，两个栈中剩下最简单的运算，使用while循环直接算出结果。\n\n剩下的四舍五入比较简单，也比较经典。\n\n## **实现代码**\n\n``` cpp\n#include<iostream>\n#include<stack>\n#include<string>\n#include<iomanip>\n#include<sstream>\n#include \"stdio.h\"\n\nfloat calculator(string s1) {\n    string s0 = s1, s = \"\";\n        \n    string::iterator it = s0.begin();      // 删除空格 \n    for (; it != s0.end(); ++it) {\n        if (*it == ' ') {\n            s0.erase(it);\n            it--;\n        }\n    }\n\t\t\n    if (s0[0] == '+' || s0[0] == '-') s += \"0\";   // 补0，对运算结果无影响\n    for (int i = 0; i < s0.size(); ++i) {\n        s += s0[i];\n        if ((s0[i] == '(' && s0[i+1] == '-') || (s0[i] == '(' && s0[i+1] == '+')) s += \"0\";\n    }\n        \n    stack<string> num, chra;\n    for (int i = 0; i < s.size(); ++i) {   // 解析字符串同时运算\n        \t\n        string tmp = \"\";    // 解析字符串\n        if (s[i] == ')') {\n            tmp += s[i];\n        } else if (s[i] == '(') {\n            tmp += s[i];\n        } else if (s[i] == '+') {\n            tmp += s[i];\n        } else if (s[i] == '-') {\n            tmp += s[i];\n        } else if (s[i] == '*') {\n            tmp += s[i];\n        } else if (s[i] == '/') {\n            tmp += s[i];\n        } else {\n            while (s[i] != ')' && s[i] != '(' && s[i] != '+' && s[i] != '-' && s[i] != '*' && s[i] != '/' && i < s.size()) {\n                tmp += s[i];\n                i++;\n            }\n            i--;\n        }\n            \n        if (tmp == \")\" ) {\n            while (1) {\n                num.push(chra.top());\n                chra.pop();\n                \n                int flag = 0;\n                if (num.top() == \"+\") flag = 1;\n                else if (num.top() == \"-\") flag = 2;\n                else if (num.top() == \"*\") flag = 3;\n                else flag = 4;\n                num.pop();\n                    \n                float a, b, c;   // 取出num顶两个数据并将结果放在c中 \n                stringstream stream;\n                stream << num.top(); stream >> a; stream.clear();\n                num.pop();\n                stream << num.top(); stream >> b; stream.clear();\n                num.pop();\n                    \n                if (flag == 1) c = a+b;\n                else if (flag == 2) c = b-a;\n                else if (flag == 3) c = a*b;\n                else c = b/a;\n                    \n                string ss;\n                stream << c; stream >> ss; stream.clear();\n                num.push(ss);\n                if (chra.top() == \"(\") break;\n            }\n            chra.pop();\n        } else if (tmp == \"(\") {\n            chra.push(tmp);\n        } else if (tmp == \"+\" || tmp == \"-\") {\n            if (!chra.empty()) {     // 切记不能为空 \n                if (chra.top() == \"+\" || chra.top() == \"-\" || chra.top() == \"*\" || chra.top() == \"/\") {\n                \tnum.push(chra.top());\n                \tchra.pop();\n                \t    \n                \tint flag = 0;\n                \tif (num.top() == \"+\") flag = 1;\n                \telse if (num.top() == \"-\") flag = 2;\n                \telse if (num.top() == \"*\") flag = 3;\n                \telse flag = 4;\n                \tnum.pop();\n                \t    \n                \tfloat a, b, c;\n                \tstringstream stream;\n               \t\tstream << num.top(); stream >> a; stream.clear();\n                \tnum.pop();\n                \tstream << num.top(); stream >> b; stream.clear();\n                \tnum.pop();\n                \t    \n                \tif (flag == 1) c = a+b;\n                \telse if (flag == 2) c = b-a;\n                \telse if (flag == 3) c = a*b;\n                \telse c = b/a;\n                \t    \n                \tstring ss;\n                    stream << c; stream >> ss; stream.clear();\n                \tnum.push(ss);\n                }\n            }\n            chra.push(tmp);\n        } else if (tmp == \"*\" || tmp == \"/\") {\n            if (!chra.empty()) {\n                if (chra.top() == \"*\" || chra.top() == \"/\") {\n                    num.push(chra.top());\n                \tchra.pop();\n                \t    \n                \tint flag = 0;\n                \tif (num.top() == \"*\") flag = 3;\n                \telse flag = 4;\n                \tnum.pop();\n                \t    \n                \tfloat a, b, c;\n                \tstringstream stream;\n                \tstream << num.top(); stream >> a; stream.clear();\n                \tnum.pop();\n                \tstream << num.top(); stream >> b; stream.clear();\n                \tnum.pop();\n                \t    \n                \tif (flag == 3) c = a*b;\n                \telse if (flag == 4) c = b/a;\n                \t    \n                \tstring ss;\n                \tstream << c; stream >> ss; stream.clear();\n                \tnum.push(ss);\n                }\n            }\n            chra.push(tmp);\n        } else {\n            num.push(tmp);\n        }\n    }\n                  \n    while (!chra.empty()) {  // 字符串读取完毕，运算结果\n        num.push(chra.top());\n        chra.pop();\n            \n        int flag = 0;\n        if (num.top() == \"+\") flag = 1;\n        else if (num.top() == \"-\") flag = 2;\n        else if (num.top() == \"*\") flag = 3;\n        else flag = 4;\n        num.pop();\n            \n        float a, b, c;\n        stringstream stream;\n        stream << num.top(); stream >> a; stream.clear();\n        num.pop();\n        stream << num.top(); stream >> b; stream.clear();\n        num.pop();\n            \n        if (flag == 1) c = a+b;\n        else if (flag == 2) c = b-a;\n        else if (flag == 3) c = a*b;\n        else c = b/a;\n            \n        string ss;\n        stream << c; stream >> ss; stream.clear();\n        num.push(ss);\n    }\n        \n    float f;\n    stringstream stream;\n    stream << num.top(); stream >> f; stream.clear();\n        \n    f *= 1000;   // 实现三位小数的四舍五入 \n    int ff = f+0.5;\n    float ans = ff/1000.0;\n    if (ans < 0) ans -= 0.001;\n        \n    return ans;\n}\n```\n","source":"_posts/calculator.md","raw":"---\ntitle: Simple Calculator\ntoc: true\ndate: 2016-07-25 10:49:14\ntags:\n- C/C++\ncategories: \n- algorithm\n- Data Structure\n---\n栈、队列、链表是学习数据结构必须掌握的知识点，初学者必须学会自己实现它们并完善相关的操作函数。下面利用栈的相关知识，实现计算器的功能。计算器能进行+-*/以及包含多重()在内的运算，但必须保证输入的字符串有相应的输出结果。\n<!--more-->\n\n## **原理剖析**\n\n使用两个栈stack&lt;string&gt;，一个num储存数字，一个chra储存运算符+-*/以及()；读取一整个字符串后需要剔除字符串中的空格；然后由于输入过程中，输入+9和-9都是合法的，因而需要在符号前面添加0。\n\n本代码采取边解析字符串边运算边储存到栈中的方法，解析完毕后再对栈中的字符串进行运算，返回运算结果，保留小数点后三位小数并实现四舍五入。\n- 读取到‘)’时，可以对num和chra中的数字和字符进行计算，直到chra顶为')'\n- 读取到‘(’时，直接压栈\n- 读取到‘+’ ‘-’时，可以直接对num和chra中的数字和字符进行计算\n- 读取到‘\\*’ ‘/’时，若chra顶为‘\\*’或‘/’则可以直接对num和chra中的数字和字符进行计算\n- 读取到数字，直接压栈\n\n最后，两个栈中剩下最简单的运算，使用while循环直接算出结果。\n\n剩下的四舍五入比较简单，也比较经典。\n\n## **实现代码**\n\n``` cpp\n#include<iostream>\n#include<stack>\n#include<string>\n#include<iomanip>\n#include<sstream>\n#include \"stdio.h\"\n\nfloat calculator(string s1) {\n    string s0 = s1, s = \"\";\n        \n    string::iterator it = s0.begin();      // 删除空格 \n    for (; it != s0.end(); ++it) {\n        if (*it == ' ') {\n            s0.erase(it);\n            it--;\n        }\n    }\n\t\t\n    if (s0[0] == '+' || s0[0] == '-') s += \"0\";   // 补0，对运算结果无影响\n    for (int i = 0; i < s0.size(); ++i) {\n        s += s0[i];\n        if ((s0[i] == '(' && s0[i+1] == '-') || (s0[i] == '(' && s0[i+1] == '+')) s += \"0\";\n    }\n        \n    stack<string> num, chra;\n    for (int i = 0; i < s.size(); ++i) {   // 解析字符串同时运算\n        \t\n        string tmp = \"\";    // 解析字符串\n        if (s[i] == ')') {\n            tmp += s[i];\n        } else if (s[i] == '(') {\n            tmp += s[i];\n        } else if (s[i] == '+') {\n            tmp += s[i];\n        } else if (s[i] == '-') {\n            tmp += s[i];\n        } else if (s[i] == '*') {\n            tmp += s[i];\n        } else if (s[i] == '/') {\n            tmp += s[i];\n        } else {\n            while (s[i] != ')' && s[i] != '(' && s[i] != '+' && s[i] != '-' && s[i] != '*' && s[i] != '/' && i < s.size()) {\n                tmp += s[i];\n                i++;\n            }\n            i--;\n        }\n            \n        if (tmp == \")\" ) {\n            while (1) {\n                num.push(chra.top());\n                chra.pop();\n                \n                int flag = 0;\n                if (num.top() == \"+\") flag = 1;\n                else if (num.top() == \"-\") flag = 2;\n                else if (num.top() == \"*\") flag = 3;\n                else flag = 4;\n                num.pop();\n                    \n                float a, b, c;   // 取出num顶两个数据并将结果放在c中 \n                stringstream stream;\n                stream << num.top(); stream >> a; stream.clear();\n                num.pop();\n                stream << num.top(); stream >> b; stream.clear();\n                num.pop();\n                    \n                if (flag == 1) c = a+b;\n                else if (flag == 2) c = b-a;\n                else if (flag == 3) c = a*b;\n                else c = b/a;\n                    \n                string ss;\n                stream << c; stream >> ss; stream.clear();\n                num.push(ss);\n                if (chra.top() == \"(\") break;\n            }\n            chra.pop();\n        } else if (tmp == \"(\") {\n            chra.push(tmp);\n        } else if (tmp == \"+\" || tmp == \"-\") {\n            if (!chra.empty()) {     // 切记不能为空 \n                if (chra.top() == \"+\" || chra.top() == \"-\" || chra.top() == \"*\" || chra.top() == \"/\") {\n                \tnum.push(chra.top());\n                \tchra.pop();\n                \t    \n                \tint flag = 0;\n                \tif (num.top() == \"+\") flag = 1;\n                \telse if (num.top() == \"-\") flag = 2;\n                \telse if (num.top() == \"*\") flag = 3;\n                \telse flag = 4;\n                \tnum.pop();\n                \t    \n                \tfloat a, b, c;\n                \tstringstream stream;\n               \t\tstream << num.top(); stream >> a; stream.clear();\n                \tnum.pop();\n                \tstream << num.top(); stream >> b; stream.clear();\n                \tnum.pop();\n                \t    \n                \tif (flag == 1) c = a+b;\n                \telse if (flag == 2) c = b-a;\n                \telse if (flag == 3) c = a*b;\n                \telse c = b/a;\n                \t    \n                \tstring ss;\n                    stream << c; stream >> ss; stream.clear();\n                \tnum.push(ss);\n                }\n            }\n            chra.push(tmp);\n        } else if (tmp == \"*\" || tmp == \"/\") {\n            if (!chra.empty()) {\n                if (chra.top() == \"*\" || chra.top() == \"/\") {\n                    num.push(chra.top());\n                \tchra.pop();\n                \t    \n                \tint flag = 0;\n                \tif (num.top() == \"*\") flag = 3;\n                \telse flag = 4;\n                \tnum.pop();\n                \t    \n                \tfloat a, b, c;\n                \tstringstream stream;\n                \tstream << num.top(); stream >> a; stream.clear();\n                \tnum.pop();\n                \tstream << num.top(); stream >> b; stream.clear();\n                \tnum.pop();\n                \t    \n                \tif (flag == 3) c = a*b;\n                \telse if (flag == 4) c = b/a;\n                \t    \n                \tstring ss;\n                \tstream << c; stream >> ss; stream.clear();\n                \tnum.push(ss);\n                }\n            }\n            chra.push(tmp);\n        } else {\n            num.push(tmp);\n        }\n    }\n                  \n    while (!chra.empty()) {  // 字符串读取完毕，运算结果\n        num.push(chra.top());\n        chra.pop();\n            \n        int flag = 0;\n        if (num.top() == \"+\") flag = 1;\n        else if (num.top() == \"-\") flag = 2;\n        else if (num.top() == \"*\") flag = 3;\n        else flag = 4;\n        num.pop();\n            \n        float a, b, c;\n        stringstream stream;\n        stream << num.top(); stream >> a; stream.clear();\n        num.pop();\n        stream << num.top(); stream >> b; stream.clear();\n        num.pop();\n            \n        if (flag == 1) c = a+b;\n        else if (flag == 2) c = b-a;\n        else if (flag == 3) c = a*b;\n        else c = b/a;\n            \n        string ss;\n        stream << c; stream >> ss; stream.clear();\n        num.push(ss);\n    }\n        \n    float f;\n    stringstream stream;\n    stream << num.top(); stream >> f; stream.clear();\n        \n    f *= 1000;   // 实现三位小数的四舍五入 \n    int ff = f+0.5;\n    float ans = ff/1000.0;\n    if (ans < 0) ans -= 0.001;\n        \n    return ans;\n}\n```\n","slug":"calculator","published":1,"updated":"2016-07-27T07:27:26.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzk70006gobk0a783v37","content":"<p>栈、队列、链表是学习数据结构必须掌握的知识点，初学者必须学会自己实现它们并完善相关的操作函数。下面利用栈的相关知识，实现计算器的功能。计算器能进行+-*/以及包含多重()在内的运算，但必须保证输入的字符串有相应的输出结果。<br><a id=\"more\"></a></p>\n<h2 id=\"原理剖析\"><a href=\"#原理剖析\" class=\"headerlink\" title=\"原理剖析\"></a><strong>原理剖析</strong></h2><p>使用两个栈stack&lt;string&gt;，一个num储存数字，一个chra储存运算符+-*/以及()；读取一整个字符串后需要剔除字符串中的空格；然后由于输入过程中，输入+9和-9都是合法的，因而需要在符号前面添加0。</p>\n<p>本代码采取边解析字符串边运算边储存到栈中的方法，解析完毕后再对栈中的字符串进行运算，返回运算结果，保留小数点后三位小数并实现四舍五入。</p>\n<ul>\n<li>读取到‘)’时，可以对num和chra中的数字和字符进行计算，直到chra顶为’)’</li>\n<li>读取到‘(’时，直接压栈</li>\n<li>读取到‘+’ ‘-’时，可以直接对num和chra中的数字和字符进行计算</li>\n<li>读取到‘*’ ‘/’时，若chra顶为‘*’或‘/’则可以直接对num和chra中的数字和字符进行计算</li>\n<li>读取到数字，直接压栈</li>\n</ul>\n<p>最后，两个栈中剩下最简单的运算，使用while循环直接算出结果。</p>\n<p>剩下的四舍五入比较简单，也比较经典。</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a><strong>实现代码</strong></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iomanip&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">calculator</span><span class=\"params\">(<span class=\"built_in\">string</span> s1)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">string</span> s0 = s1, s = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"built_in\">string</span>::iterator it = s0.begin();      <span class=\"comment\">// 删除空格 </span></div><div class=\"line\">    <span class=\"keyword\">for</span> (; it != s0.end(); ++it) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (*it == <span class=\"string\">' '</span>) &#123;</div><div class=\"line\">            s0.erase(it);</div><div class=\"line\">            it--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (s0[<span class=\"number\">0</span>] == <span class=\"string\">'+'</span> || s0[<span class=\"number\">0</span>] == <span class=\"string\">'-'</span>) s += <span class=\"string\">\"0\"</span>;   <span class=\"comment\">// 补0，对运算结果无影响</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s0.size(); ++i) &#123;</div><div class=\"line\">        s += s0[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> ((s0[i] == <span class=\"string\">'('</span> &amp;&amp; s0[i+<span class=\"number\">1</span>] == <span class=\"string\">'-'</span>) || (s0[i] == <span class=\"string\">'('</span> &amp;&amp; s0[i+<span class=\"number\">1</span>] == <span class=\"string\">'+'</span>)) s += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">string</span>&gt; num, chra;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.size(); ++i) &#123;   <span class=\"comment\">// 解析字符串同时运算</span></div><div class=\"line\">        \t</div><div class=\"line\">        <span class=\"built_in\">string</span> tmp = <span class=\"string\">\"\"</span>;    <span class=\"comment\">// 解析字符串</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">')'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'('</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'+'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'-'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'/'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (s[i] != <span class=\"string\">')'</span> &amp;&amp; s[i] != <span class=\"string\">'('</span> &amp;&amp; s[i] != <span class=\"string\">'+'</span> &amp;&amp; s[i] != <span class=\"string\">'-'</span> &amp;&amp; s[i] != <span class=\"string\">'*'</span> &amp;&amp; s[i] != <span class=\"string\">'/'</span> &amp;&amp; i &lt; s.size()) &#123;</div><div class=\"line\">                tmp += s[i];</div><div class=\"line\">                i++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            i--;</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">if</span> (tmp == <span class=\"string\">\")\"</span> ) &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                num.push(chra.top());</div><div class=\"line\">                chra.pop();</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"+\"</span>) flag = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"-\"</span>) flag = <span class=\"number\">2</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"*\"</span>) flag = <span class=\"number\">3</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> flag = <span class=\"number\">4</span>;</div><div class=\"line\">                num.pop();</div><div class=\"line\">                    </div><div class=\"line\">                <span class=\"keyword\">float</span> a, b, c;   <span class=\"comment\">// 取出num顶两个数据并将结果放在c中 </span></div><div class=\"line\">                <span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">                stream &lt;&lt; num.top(); stream &gt;&gt; a; stream.clear();</div><div class=\"line\">                num.pop();</div><div class=\"line\">                stream &lt;&lt; num.top(); stream &gt;&gt; b; stream.clear();</div><div class=\"line\">                num.pop();</div><div class=\"line\">                    </div><div class=\"line\">                <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) c = a+b;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">2</span>) c = b-a;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">3</span>) c = a*b;</div><div class=\"line\">                <span class=\"keyword\">else</span> c = b/a;</div><div class=\"line\">                    </div><div class=\"line\">                <span class=\"built_in\">string</span> ss;</div><div class=\"line\">                stream &lt;&lt; c; stream &gt;&gt; ss; stream.clear();</div><div class=\"line\">                num.push(ss);</div><div class=\"line\">                <span class=\"keyword\">if</span> (chra.top() == <span class=\"string\">\"(\"</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chra.pop();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp == <span class=\"string\">\"(\"</span>) &#123;</div><div class=\"line\">            chra.push(tmp);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp == <span class=\"string\">\"+\"</span> || tmp == <span class=\"string\">\"-\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!chra.empty()) &#123;     <span class=\"comment\">// 切记不能为空 </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (chra.top() == <span class=\"string\">\"+\"</span> || chra.top() == <span class=\"string\">\"-\"</span> || chra.top() == <span class=\"string\">\"*\"</span> || chra.top() == <span class=\"string\">\"/\"</span>) &#123;</div><div class=\"line\">                \tnum.push(chra.top());</div><div class=\"line\">                \tchra.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">                \t<span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"+\"</span>) flag = <span class=\"number\">1</span>;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"-\"</span>) flag = <span class=\"number\">2</span>;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"*\"</span>) flag = <span class=\"number\">3</span>;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> flag = <span class=\"number\">4</span>;</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">float</span> a, b, c;</div><div class=\"line\">                \t<span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">               \t\tstream &lt;&lt; num.top(); stream &gt;&gt; a; stream.clear();</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \tstream &lt;&lt; num.top(); stream &gt;&gt; b; stream.clear();</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) c = a+b;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">2</span>) c = b-a;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">3</span>) c = a*b;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> c = b/a;</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"built_in\">string</span> ss;</div><div class=\"line\">                    stream &lt;&lt; c; stream &gt;&gt; ss; stream.clear();</div><div class=\"line\">                \tnum.push(ss);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chra.push(tmp);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp == <span class=\"string\">\"*\"</span> || tmp == <span class=\"string\">\"/\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!chra.empty()) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (chra.top() == <span class=\"string\">\"*\"</span> || chra.top() == <span class=\"string\">\"/\"</span>) &#123;</div><div class=\"line\">                    num.push(chra.top());</div><div class=\"line\">                \tchra.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">                \t<span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"*\"</span>) flag = <span class=\"number\">3</span>;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> flag = <span class=\"number\">4</span>;</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">float</span> a, b, c;</div><div class=\"line\">                \t<span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">                \tstream &lt;&lt; num.top(); stream &gt;&gt; a; stream.clear();</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \tstream &lt;&lt; num.top(); stream &gt;&gt; b; stream.clear();</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">if</span> (flag == <span class=\"number\">3</span>) c = a*b;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">4</span>) c = b/a;</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"built_in\">string</span> ss;</div><div class=\"line\">                \tstream &lt;&lt; c; stream &gt;&gt; ss; stream.clear();</div><div class=\"line\">                \tnum.push(ss);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chra.push(tmp);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            num.push(tmp);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">                  </div><div class=\"line\">    <span class=\"keyword\">while</span> (!chra.empty()) &#123;  <span class=\"comment\">// 字符串读取完毕，运算结果</span></div><div class=\"line\">        num.push(chra.top());</div><div class=\"line\">        chra.pop();</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"+\"</span>) flag = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"-\"</span>) flag = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"*\"</span>) flag = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> flag = <span class=\"number\">4</span>;</div><div class=\"line\">        num.pop();</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">float</span> a, b, c;</div><div class=\"line\">        <span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">        stream &lt;&lt; num.top(); stream &gt;&gt; a; stream.clear();</div><div class=\"line\">        num.pop();</div><div class=\"line\">        stream &lt;&lt; num.top(); stream &gt;&gt; b; stream.clear();</div><div class=\"line\">        num.pop();</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) c = a+b;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">2</span>) c = b-a;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">3</span>) c = a*b;</div><div class=\"line\">        <span class=\"keyword\">else</span> c = b/a;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"built_in\">string</span> ss;</div><div class=\"line\">        stream &lt;&lt; c; stream &gt;&gt; ss; stream.clear();</div><div class=\"line\">        num.push(ss);</div><div class=\"line\">    &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">float</span> f;</div><div class=\"line\">    <span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">    stream &lt;&lt; num.top(); stream &gt;&gt; f; stream.clear();</div><div class=\"line\">        </div><div class=\"line\">    f *= <span class=\"number\">1000</span>;   <span class=\"comment\">// 实现三位小数的四舍五入 </span></div><div class=\"line\">    <span class=\"keyword\">int</span> ff = f+<span class=\"number\">0.5</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> ans = ff/<span class=\"number\">1000.0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ans &lt; <span class=\"number\">0</span>) ans -= <span class=\"number\">0.001</span>;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>栈、队列、链表是学习数据结构必须掌握的知识点，初学者必须学会自己实现它们并完善相关的操作函数。下面利用栈的相关知识，实现计算器的功能。计算器能进行+-*/以及包含多重()在内的运算，但必须保证输入的字符串有相应的输出结果。<br>","more":"</p>\n<h2 id=\"原理剖析\"><a href=\"#原理剖析\" class=\"headerlink\" title=\"原理剖析\"></a><strong>原理剖析</strong></h2><p>使用两个栈stack&lt;string&gt;，一个num储存数字，一个chra储存运算符+-*/以及()；读取一整个字符串后需要剔除字符串中的空格；然后由于输入过程中，输入+9和-9都是合法的，因而需要在符号前面添加0。</p>\n<p>本代码采取边解析字符串边运算边储存到栈中的方法，解析完毕后再对栈中的字符串进行运算，返回运算结果，保留小数点后三位小数并实现四舍五入。</p>\n<ul>\n<li>读取到‘)’时，可以对num和chra中的数字和字符进行计算，直到chra顶为’)’</li>\n<li>读取到‘(’时，直接压栈</li>\n<li>读取到‘+’ ‘-’时，可以直接对num和chra中的数字和字符进行计算</li>\n<li>读取到‘*’ ‘/’时，若chra顶为‘*’或‘/’则可以直接对num和chra中的数字和字符进行计算</li>\n<li>读取到数字，直接压栈</li>\n</ul>\n<p>最后，两个栈中剩下最简单的运算，使用while循环直接算出结果。</p>\n<p>剩下的四舍五入比较简单，也比较经典。</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a><strong>实现代码</strong></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iomanip&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"stdio.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">calculator</span><span class=\"params\">(<span class=\"built_in\">string</span> s1)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">string</span> s0 = s1, s = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"built_in\">string</span>::iterator it = s0.begin();      <span class=\"comment\">// 删除空格 </span></div><div class=\"line\">    <span class=\"keyword\">for</span> (; it != s0.end(); ++it) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (*it == <span class=\"string\">' '</span>) &#123;</div><div class=\"line\">            s0.erase(it);</div><div class=\"line\">            it--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t\t</div><div class=\"line\">    <span class=\"keyword\">if</span> (s0[<span class=\"number\">0</span>] == <span class=\"string\">'+'</span> || s0[<span class=\"number\">0</span>] == <span class=\"string\">'-'</span>) s += <span class=\"string\">\"0\"</span>;   <span class=\"comment\">// 补0，对运算结果无影响</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s0.size(); ++i) &#123;</div><div class=\"line\">        s += s0[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> ((s0[i] == <span class=\"string\">'('</span> &amp;&amp; s0[i+<span class=\"number\">1</span>] == <span class=\"string\">'-'</span>) || (s0[i] == <span class=\"string\">'('</span> &amp;&amp; s0[i+<span class=\"number\">1</span>] == <span class=\"string\">'+'</span>)) s += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"built_in\">stack</span>&lt;<span class=\"built_in\">string</span>&gt; num, chra;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.size(); ++i) &#123;   <span class=\"comment\">// 解析字符串同时运算</span></div><div class=\"line\">        \t</div><div class=\"line\">        <span class=\"built_in\">string</span> tmp = <span class=\"string\">\"\"</span>;    <span class=\"comment\">// 解析字符串</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">')'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'('</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'+'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'-'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'/'</span>) &#123;</div><div class=\"line\">            tmp += s[i];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (s[i] != <span class=\"string\">')'</span> &amp;&amp; s[i] != <span class=\"string\">'('</span> &amp;&amp; s[i] != <span class=\"string\">'+'</span> &amp;&amp; s[i] != <span class=\"string\">'-'</span> &amp;&amp; s[i] != <span class=\"string\">'*'</span> &amp;&amp; s[i] != <span class=\"string\">'/'</span> &amp;&amp; i &lt; s.size()) &#123;</div><div class=\"line\">                tmp += s[i];</div><div class=\"line\">                i++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            i--;</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">if</span> (tmp == <span class=\"string\">\")\"</span> ) &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">                num.push(chra.top());</div><div class=\"line\">                chra.pop();</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"+\"</span>) flag = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"-\"</span>) flag = <span class=\"number\">2</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"*\"</span>) flag = <span class=\"number\">3</span>;</div><div class=\"line\">                <span class=\"keyword\">else</span> flag = <span class=\"number\">4</span>;</div><div class=\"line\">                num.pop();</div><div class=\"line\">                    </div><div class=\"line\">                <span class=\"keyword\">float</span> a, b, c;   <span class=\"comment\">// 取出num顶两个数据并将结果放在c中 </span></div><div class=\"line\">                <span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">                stream &lt;&lt; num.top(); stream &gt;&gt; a; stream.clear();</div><div class=\"line\">                num.pop();</div><div class=\"line\">                stream &lt;&lt; num.top(); stream &gt;&gt; b; stream.clear();</div><div class=\"line\">                num.pop();</div><div class=\"line\">                    </div><div class=\"line\">                <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) c = a+b;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">2</span>) c = b-a;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">3</span>) c = a*b;</div><div class=\"line\">                <span class=\"keyword\">else</span> c = b/a;</div><div class=\"line\">                    </div><div class=\"line\">                <span class=\"built_in\">string</span> ss;</div><div class=\"line\">                stream &lt;&lt; c; stream &gt;&gt; ss; stream.clear();</div><div class=\"line\">                num.push(ss);</div><div class=\"line\">                <span class=\"keyword\">if</span> (chra.top() == <span class=\"string\">\"(\"</span>) <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chra.pop();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp == <span class=\"string\">\"(\"</span>) &#123;</div><div class=\"line\">            chra.push(tmp);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp == <span class=\"string\">\"+\"</span> || tmp == <span class=\"string\">\"-\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!chra.empty()) &#123;     <span class=\"comment\">// 切记不能为空 </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (chra.top() == <span class=\"string\">\"+\"</span> || chra.top() == <span class=\"string\">\"-\"</span> || chra.top() == <span class=\"string\">\"*\"</span> || chra.top() == <span class=\"string\">\"/\"</span>) &#123;</div><div class=\"line\">                \tnum.push(chra.top());</div><div class=\"line\">                \tchra.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">                \t<span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"+\"</span>) flag = <span class=\"number\">1</span>;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"-\"</span>) flag = <span class=\"number\">2</span>;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"*\"</span>) flag = <span class=\"number\">3</span>;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> flag = <span class=\"number\">4</span>;</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">float</span> a, b, c;</div><div class=\"line\">                \t<span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">               \t\tstream &lt;&lt; num.top(); stream &gt;&gt; a; stream.clear();</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \tstream &lt;&lt; num.top(); stream &gt;&gt; b; stream.clear();</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) c = a+b;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">2</span>) c = b-a;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">3</span>) c = a*b;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> c = b/a;</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"built_in\">string</span> ss;</div><div class=\"line\">                    stream &lt;&lt; c; stream &gt;&gt; ss; stream.clear();</div><div class=\"line\">                \tnum.push(ss);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chra.push(tmp);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tmp == <span class=\"string\">\"*\"</span> || tmp == <span class=\"string\">\"/\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!chra.empty()) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (chra.top() == <span class=\"string\">\"*\"</span> || chra.top() == <span class=\"string\">\"/\"</span>) &#123;</div><div class=\"line\">                    num.push(chra.top());</div><div class=\"line\">                \tchra.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">                \t<span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"*\"</span>) flag = <span class=\"number\">3</span>;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> flag = <span class=\"number\">4</span>;</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">float</span> a, b, c;</div><div class=\"line\">                \t<span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">                \tstream &lt;&lt; num.top(); stream &gt;&gt; a; stream.clear();</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \tstream &lt;&lt; num.top(); stream &gt;&gt; b; stream.clear();</div><div class=\"line\">                \tnum.pop();</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"keyword\">if</span> (flag == <span class=\"number\">3</span>) c = a*b;</div><div class=\"line\">                \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">4</span>) c = b/a;</div><div class=\"line\">                \t    </div><div class=\"line\">                \t<span class=\"built_in\">string</span> ss;</div><div class=\"line\">                \tstream &lt;&lt; c; stream &gt;&gt; ss; stream.clear();</div><div class=\"line\">                \tnum.push(ss);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            chra.push(tmp);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            num.push(tmp);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">                  </div><div class=\"line\">    <span class=\"keyword\">while</span> (!chra.empty()) &#123;  <span class=\"comment\">// 字符串读取完毕，运算结果</span></div><div class=\"line\">        num.push(chra.top());</div><div class=\"line\">        chra.pop();</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">int</span> flag = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"+\"</span>) flag = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"-\"</span>) flag = <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num.top() == <span class=\"string\">\"*\"</span>) flag = <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> flag = <span class=\"number\">4</span>;</div><div class=\"line\">        num.pop();</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">float</span> a, b, c;</div><div class=\"line\">        <span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">        stream &lt;&lt; num.top(); stream &gt;&gt; a; stream.clear();</div><div class=\"line\">        num.pop();</div><div class=\"line\">        stream &lt;&lt; num.top(); stream &gt;&gt; b; stream.clear();</div><div class=\"line\">        num.pop();</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) c = a+b;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">2</span>) c = b-a;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag == <span class=\"number\">3</span>) c = a*b;</div><div class=\"line\">        <span class=\"keyword\">else</span> c = b/a;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"built_in\">string</span> ss;</div><div class=\"line\">        stream &lt;&lt; c; stream &gt;&gt; ss; stream.clear();</div><div class=\"line\">        num.push(ss);</div><div class=\"line\">    &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">float</span> f;</div><div class=\"line\">    <span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">    stream &lt;&lt; num.top(); stream &gt;&gt; f; stream.clear();</div><div class=\"line\">        </div><div class=\"line\">    f *= <span class=\"number\">1000</span>;   <span class=\"comment\">// 实现三位小数的四舍五入 </span></div><div class=\"line\">    <span class=\"keyword\">int</span> ff = f+<span class=\"number\">0.5</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> ans = ff/<span class=\"number\">1000.0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (ans &lt; <span class=\"number\">0</span>) ans -= <span class=\"number\">0.001</span>;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Garen击球游戏","toc":true,"date":"2016-07-22T10:02:50.000Z","_content":"现在使用unity3d的动画系统编写击球小游戏。这是[Garen](http://pan.baidu.com/s/1i5exKNV)模型，下载完后将所有模型和动作设置成Legacy动画， inspector -> Rig -> Animation type -> Legacy -> Apply button。游戏过程中将所有随机放置的小球击毙即获得胜利，显示所用时间。方向键控制移动，鼠标控制点击。\n<!--more-->\n## **基本概念**\n![](a.png)\n把garen拖入场景中再自己设置一个“格斗场”，然后给garen添加刚体组件和胶囊体碰撞组件；新建1个UI Text对象，并将其定位在屏幕中央，用于显示玩家的最终用时，记得将其拖入对应的代码框处，将其中的文本删除；\n![](g1.png)\n## **动作设计**\n### **GarenMovement.cs**\n\ngaren有3个动作，分别是Idle、Run、Attack。Idle在Start时就播放，Run需要在Update中检测键盘输入，可以使用GetAxisRaw获得WASD的方向。Attack是比较复杂的动作，通过在动作过程中注册回调函数，可以使得在攻击动画播放过程中触发这些函数，比如AttackHit函数，以及StopAttack函数。前者判断有没有击中物体，并广播击中消息。后者使玩家播放站立动画（攻击动画结束后站立）。\n\n此外，这里击中小球的检测使用射线碰撞检测：把射线的长度设置为刀的长度，然后发出点设为Garen的腰部，这就可以很好地检测Garen的刀是否“砍”中了物体。\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class GarenMovement : MonoBehaviour\n{\n    public delegate void AttackHitHandler(GameObject obj);\n    public static event AttackHitHandler OnAttackHit;\n\n    public float speed = 5f;\n    Vector3 movement;\n    Rigidbody playerRigidbody;\n    bool isAttacking = false;\n    float rayLength = 1.8f;\n    Animation ani;\n    AnimationState idle;\n    AnimationState run;\n    AnimationState attack;\n\n    void Start()\n    {\n        playerRigidbody = this.GetComponent<Rigidbody>();\n        ani = this.GetComponent<Animation>();\n        idle = ani[\"Idle\"];\n        run = ani[\"Run\"];\n        attack = ani[\"Attack1\"];\n\n        idle.wrapMode = WrapMode.Loop;  // 站立动画\n        ani.Play(idle.clip.name);\n    }\n\n    void Move(float h, float v)  // 向movement移动，同时旋转身体,移动过程播放run动画\n    {\n        if (h != 0 || v != 0)\n        {\n            movement.Set(h, 0f, v);\n            movement = movement.normalized * speed * Time.deltaTime;\n            playerRigidbody.MovePosition(transform.position + movement);\n\n            Quaternion newRotation = Quaternion.LookRotation(movement);\n            playerRigidbody.MoveRotation(newRotation);\n\n            run.wrapMode = WrapMode.Loop;\n            ani.CrossFade(run.clip.name, 0.1f);\n        }\n        else\n        {\n            ani.CrossFade(idle.clip.name, 0.1f);\n        }\n    }\n\n    void Attack()\n    {\n        isAttacking = true;\n        if (attack.clip.events.Length == 0)\n        {\n            AnimationEvent endEvent = new AnimationEvent();  // 攻击动画结束后设置isDttacking\n            endEvent.functionName = \"StopAttack\";\n            endEvent.time = attack.clip.length - 0.2f;\n            attack.clip.AddEvent(endEvent);\n\n            AnimationEvent hitEvent = new AnimationEvent();  // 攻击结束，判断是否击中小球\n            hitEvent.functionName = \"AttackHit\";\n            hitEvent.time = 0.5f;\n            attack.clip.AddEvent(hitEvent);\n        }\n        ani.Play(attack.clip.name);\n    }\n\n    void StopAttack()\n    {\n        isAttacking = false;\n    }\n\n    void AttackHit()\n    {\n        GameObject obj = GameObject.Find(\"C_BUFFBONE_GLB_CENTER_LOC\");  // 射线的长度设置为刀的长度，发出点设为Garen的center\n        Ray ray = new Ray(obj.transform.position, movement);\n        RaycastHit hit;\n        if (Physics.Raycast(ray, out hit, rayLength))\n        {\n            Debug.DrawLine(ray.origin, hit.point);\n            OnAttackHit(hit.collider.gameObject);    // 广播消息\n        }\n    }\n\n    void FixedUpdate()\n    {\n        if (!isAttacking)\n        {\n            float h = Input.GetAxisRaw(\"Horizontal\");\n            float v = Input.GetAxisRaw(\"Vertical\");\n            Move(h, v);\n        }\n        if (Input.GetMouseButtonDown(0))\n        {\n            Attack();\n        }\n    } \n}\n```\n委托（Delegate)相当于一个公众号，每个人都可以关注它，而它只负责发送推送，关注它的人都可以接受的推送。这也是所谓的观察者模式。\n\n### **Judge.cs**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.mygame;\n\npublic class Judge : MonoBehaviour\n{\n    public int count = 7;\n\n    void Start()\n    {\n        GarenMovement.OnAttackHit += HitEvent;\n    }\n\n    void HitEvent(GameObject obj)  // 击中小球，回收\n    {\n        if (obj.tag.Contains(\"Ball\"))\n        {\n            obj.SetActive(false);\n            if (--count == 0)\n            {\n                MyUI.GetInstance().Display(Time.time.ToString());\n            }\n        }\n    }\n}\n```\n这里记得要添加标签\n### **BaseCode.cs**\n在命名空间Com.Mygame中添加UI类和小球工厂供BaseCode使用：\n``` cpp\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.mygame;\n\nnamespace Com.mygame\n{\n    public class MyUI : System.Object\n    {\n        static MyUI instance;\n        public Text mainText;\n\n        public static MyUI GetInstance()\n        {\n            if (instance == null)\n            {\n                instance = new MyUI();\n            }\n            return instance;\n        }\n\n        public void Display(string info)\n        {\n            mainText.text = info;\n        }\n    }\n\n    public class BallFactory : System.Object\n    {\n        static BallFactory instance;\n        static List<GameObject> ballList;\n\n        public static BallFactory GetInstance()\n        {\n            if (instance == null)\n            {\n                instance = new BallFactory();\n                ballList = new List<GameObject>();\n            }\n            return instance;\n        }\n\n        public GameObject GetBall()\n        {\n            for (int i = 0; i < ballList.Count; ++i)\n            {\n                if (!ballList[i].activeInHierarchy)\n                {\n                    return ballList[i];\n                }\n            }\n            GameObject newObj = GameObject.CreatePrimitive(PrimitiveType.Sphere);\n            newObj.GetComponent<Renderer>().material.color = Color.blue;\n            newObj.tag = \"Ball\";\n            ballList.Add(newObj);\n            return newObj;\n        }\n    }\n}\n\npublic class BaseCode : MonoBehaviour\n{\n    public int balls = 7;\n    public Text text;\n\n    void Start()\n    {\n        MyUI.GetInstance().mainText = text;\n        for (int i = 0; i < balls; ++i)\n        {\n            GameObject ball = BallFactory.GetInstance().GetBall();\n            ball.transform.position = new Vector3(Random.Range(-10f, 10f), 0.5f, Random.Range(-10f, 10f));\n        }\n    }\n}\n\n```\n最后把GarenMovement脚本挂载在了Garen上，把Judge和BaseCode挂载在了MainCamera上，运行一下，OK! \n![](j.png)\n![](jg.png)\n![](aa.gif)","source":"_posts/garen.md","raw":"---\ntitle: Garen击球游戏\ntoc: true\ndate: 2016-07-22 18:02:50\ntags:\n- C#\n- MVC\n- 工厂模式\n- 观察者模式\n- unity3d\ncategories: 3D游戏开发\n---\n现在使用unity3d的动画系统编写击球小游戏。这是[Garen](http://pan.baidu.com/s/1i5exKNV)模型，下载完后将所有模型和动作设置成Legacy动画， inspector -> Rig -> Animation type -> Legacy -> Apply button。游戏过程中将所有随机放置的小球击毙即获得胜利，显示所用时间。方向键控制移动，鼠标控制点击。\n<!--more-->\n## **基本概念**\n![](a.png)\n把garen拖入场景中再自己设置一个“格斗场”，然后给garen添加刚体组件和胶囊体碰撞组件；新建1个UI Text对象，并将其定位在屏幕中央，用于显示玩家的最终用时，记得将其拖入对应的代码框处，将其中的文本删除；\n![](g1.png)\n## **动作设计**\n### **GarenMovement.cs**\n\ngaren有3个动作，分别是Idle、Run、Attack。Idle在Start时就播放，Run需要在Update中检测键盘输入，可以使用GetAxisRaw获得WASD的方向。Attack是比较复杂的动作，通过在动作过程中注册回调函数，可以使得在攻击动画播放过程中触发这些函数，比如AttackHit函数，以及StopAttack函数。前者判断有没有击中物体，并广播击中消息。后者使玩家播放站立动画（攻击动画结束后站立）。\n\n此外，这里击中小球的检测使用射线碰撞检测：把射线的长度设置为刀的长度，然后发出点设为Garen的腰部，这就可以很好地检测Garen的刀是否“砍”中了物体。\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class GarenMovement : MonoBehaviour\n{\n    public delegate void AttackHitHandler(GameObject obj);\n    public static event AttackHitHandler OnAttackHit;\n\n    public float speed = 5f;\n    Vector3 movement;\n    Rigidbody playerRigidbody;\n    bool isAttacking = false;\n    float rayLength = 1.8f;\n    Animation ani;\n    AnimationState idle;\n    AnimationState run;\n    AnimationState attack;\n\n    void Start()\n    {\n        playerRigidbody = this.GetComponent<Rigidbody>();\n        ani = this.GetComponent<Animation>();\n        idle = ani[\"Idle\"];\n        run = ani[\"Run\"];\n        attack = ani[\"Attack1\"];\n\n        idle.wrapMode = WrapMode.Loop;  // 站立动画\n        ani.Play(idle.clip.name);\n    }\n\n    void Move(float h, float v)  // 向movement移动，同时旋转身体,移动过程播放run动画\n    {\n        if (h != 0 || v != 0)\n        {\n            movement.Set(h, 0f, v);\n            movement = movement.normalized * speed * Time.deltaTime;\n            playerRigidbody.MovePosition(transform.position + movement);\n\n            Quaternion newRotation = Quaternion.LookRotation(movement);\n            playerRigidbody.MoveRotation(newRotation);\n\n            run.wrapMode = WrapMode.Loop;\n            ani.CrossFade(run.clip.name, 0.1f);\n        }\n        else\n        {\n            ani.CrossFade(idle.clip.name, 0.1f);\n        }\n    }\n\n    void Attack()\n    {\n        isAttacking = true;\n        if (attack.clip.events.Length == 0)\n        {\n            AnimationEvent endEvent = new AnimationEvent();  // 攻击动画结束后设置isDttacking\n            endEvent.functionName = \"StopAttack\";\n            endEvent.time = attack.clip.length - 0.2f;\n            attack.clip.AddEvent(endEvent);\n\n            AnimationEvent hitEvent = new AnimationEvent();  // 攻击结束，判断是否击中小球\n            hitEvent.functionName = \"AttackHit\";\n            hitEvent.time = 0.5f;\n            attack.clip.AddEvent(hitEvent);\n        }\n        ani.Play(attack.clip.name);\n    }\n\n    void StopAttack()\n    {\n        isAttacking = false;\n    }\n\n    void AttackHit()\n    {\n        GameObject obj = GameObject.Find(\"C_BUFFBONE_GLB_CENTER_LOC\");  // 射线的长度设置为刀的长度，发出点设为Garen的center\n        Ray ray = new Ray(obj.transform.position, movement);\n        RaycastHit hit;\n        if (Physics.Raycast(ray, out hit, rayLength))\n        {\n            Debug.DrawLine(ray.origin, hit.point);\n            OnAttackHit(hit.collider.gameObject);    // 广播消息\n        }\n    }\n\n    void FixedUpdate()\n    {\n        if (!isAttacking)\n        {\n            float h = Input.GetAxisRaw(\"Horizontal\");\n            float v = Input.GetAxisRaw(\"Vertical\");\n            Move(h, v);\n        }\n        if (Input.GetMouseButtonDown(0))\n        {\n            Attack();\n        }\n    } \n}\n```\n委托（Delegate)相当于一个公众号，每个人都可以关注它，而它只负责发送推送，关注它的人都可以接受的推送。这也是所谓的观察者模式。\n\n### **Judge.cs**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.mygame;\n\npublic class Judge : MonoBehaviour\n{\n    public int count = 7;\n\n    void Start()\n    {\n        GarenMovement.OnAttackHit += HitEvent;\n    }\n\n    void HitEvent(GameObject obj)  // 击中小球，回收\n    {\n        if (obj.tag.Contains(\"Ball\"))\n        {\n            obj.SetActive(false);\n            if (--count == 0)\n            {\n                MyUI.GetInstance().Display(Time.time.ToString());\n            }\n        }\n    }\n}\n```\n这里记得要添加标签\n### **BaseCode.cs**\n在命名空间Com.Mygame中添加UI类和小球工厂供BaseCode使用：\n``` cpp\nusing UnityEngine;\nusing UnityEngine.UI;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.mygame;\n\nnamespace Com.mygame\n{\n    public class MyUI : System.Object\n    {\n        static MyUI instance;\n        public Text mainText;\n\n        public static MyUI GetInstance()\n        {\n            if (instance == null)\n            {\n                instance = new MyUI();\n            }\n            return instance;\n        }\n\n        public void Display(string info)\n        {\n            mainText.text = info;\n        }\n    }\n\n    public class BallFactory : System.Object\n    {\n        static BallFactory instance;\n        static List<GameObject> ballList;\n\n        public static BallFactory GetInstance()\n        {\n            if (instance == null)\n            {\n                instance = new BallFactory();\n                ballList = new List<GameObject>();\n            }\n            return instance;\n        }\n\n        public GameObject GetBall()\n        {\n            for (int i = 0; i < ballList.Count; ++i)\n            {\n                if (!ballList[i].activeInHierarchy)\n                {\n                    return ballList[i];\n                }\n            }\n            GameObject newObj = GameObject.CreatePrimitive(PrimitiveType.Sphere);\n            newObj.GetComponent<Renderer>().material.color = Color.blue;\n            newObj.tag = \"Ball\";\n            ballList.Add(newObj);\n            return newObj;\n        }\n    }\n}\n\npublic class BaseCode : MonoBehaviour\n{\n    public int balls = 7;\n    public Text text;\n\n    void Start()\n    {\n        MyUI.GetInstance().mainText = text;\n        for (int i = 0; i < balls; ++i)\n        {\n            GameObject ball = BallFactory.GetInstance().GetBall();\n            ball.transform.position = new Vector3(Random.Range(-10f, 10f), 0.5f, Random.Range(-10f, 10f));\n        }\n    }\n}\n\n```\n最后把GarenMovement脚本挂载在了Garen上，把Judge和BaseCode挂载在了MainCamera上，运行一下，OK! \n![](j.png)\n![](jg.png)\n![](aa.gif)","slug":"garen","published":1,"updated":"2016-07-22T12:16:40.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzkp0008gobk8qzjp9yd","content":"<p>现在使用unity3d的动画系统编写击球小游戏。这是<a href=\"http://pan.baidu.com/s/1i5exKNV\" target=\"_blank\" rel=\"external\">Garen</a>模型，下载完后将所有模型和动作设置成Legacy动画， inspector -&gt; Rig -&gt; Animation type -&gt; Legacy -&gt; Apply button。游戏过程中将所有随机放置的小球击毙即获得胜利，显示所用时间。方向键控制移动，鼠标控制点击。<br><a id=\"more\"></a></p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a><strong>基本概念</strong></h2><p><img src=\"a.png\" alt=\"\"><br>把garen拖入场景中再自己设置一个“格斗场”，然后给garen添加刚体组件和胶囊体碰撞组件；新建1个UI Text对象，并将其定位在屏幕中央，用于显示玩家的最终用时，记得将其拖入对应的代码框处，将其中的文本删除；<br><img src=\"g1.png\" alt=\"\"></p>\n<h2 id=\"动作设计\"><a href=\"#动作设计\" class=\"headerlink\" title=\"动作设计\"></a><strong>动作设计</strong></h2><h3 id=\"GarenMovement-cs\"><a href=\"#GarenMovement-cs\" class=\"headerlink\" title=\"GarenMovement.cs\"></a><strong>GarenMovement.cs</strong></h3><p>garen有3个动作，分别是Idle、Run、Attack。Idle在Start时就播放，Run需要在Update中检测键盘输入，可以使用GetAxisRaw获得WASD的方向。Attack是比较复杂的动作，通过在动作过程中注册回调函数，可以使得在攻击动画播放过程中触发这些函数，比如AttackHit函数，以及StopAttack函数。前者判断有没有击中物体，并广播击中消息。后者使玩家播放站立动画（攻击动画结束后站立）。</p>\n<p>此外，这里击中小球的检测使用射线碰撞检测：把射线的长度设置为刀的长度，然后发出点设为Garen的腰部，这就可以很好地检测Garen的刀是否“砍”中了物体。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GarenMovement : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> delegate <span class=\"keyword\">void</span> <span class=\"title\">AttackHitHandler</span><span class=\"params\">(GameObject obj)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> event AttackHitHandler OnAttackHit;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">5f</span>;</div><div class=\"line\">    Vector3 movement;</div><div class=\"line\">    Rigidbody playerRigidbody;</div><div class=\"line\">    <span class=\"keyword\">bool</span> isAttacking = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> rayLength = <span class=\"number\">1.8f</span>;</div><div class=\"line\">    Animation ani;</div><div class=\"line\">    AnimationState idle;</div><div class=\"line\">    AnimationState run;</div><div class=\"line\">    AnimationState attack;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        playerRigidbody = <span class=\"keyword\">this</span>.GetComponent&lt;Rigidbody&gt;();</div><div class=\"line\">        ani = <span class=\"keyword\">this</span>.GetComponent&lt;Animation&gt;();</div><div class=\"line\">        idle = ani[<span class=\"string\">\"Idle\"</span>];</div><div class=\"line\">        run = ani[<span class=\"string\">\"Run\"</span>];</div><div class=\"line\">        attack = ani[<span class=\"string\">\"Attack1\"</span>];</div><div class=\"line\"></div><div class=\"line\">        idle.wrapMode = WrapMode.Loop;  <span class=\"comment\">// 站立动画</span></div><div class=\"line\">        ani.Play(idle.clip.name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Move</span><span class=\"params\">(<span class=\"keyword\">float</span> h, <span class=\"keyword\">float</span> v)</span>  <span class=\"comment\">// 向movement移动，同时旋转身体,移动过程播放run动画</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"number\">0</span> || v != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            movement.Set(h, <span class=\"number\">0f</span>, v);</div><div class=\"line\">            movement = movement.normalized * speed * Time.deltaTime;</div><div class=\"line\">            playerRigidbody.MovePosition(transform.position + movement);</div><div class=\"line\"></div><div class=\"line\">            Quaternion newRotation = Quaternion.LookRotation(movement);</div><div class=\"line\">            playerRigidbody.MoveRotation(newRotation);</div><div class=\"line\"></div><div class=\"line\">            run.wrapMode = WrapMode.Loop;</div><div class=\"line\">            ani.CrossFade(run.clip.name, <span class=\"number\">0.1f</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            ani.CrossFade(idle.clip.name, <span class=\"number\">0.1f</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Attack</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        isAttacking = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (attack.clip.events.Length == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            AnimationEvent endEvent = <span class=\"keyword\">new</span> AnimationEvent();  <span class=\"comment\">// 攻击动画结束后设置isDttacking</span></div><div class=\"line\">            endEvent.functionName = <span class=\"string\">\"StopAttack\"</span>;</div><div class=\"line\">            endEvent.time = attack.clip.length - <span class=\"number\">0.2f</span>;</div><div class=\"line\">            attack.clip.AddEvent(endEvent);</div><div class=\"line\"></div><div class=\"line\">            AnimationEvent hitEvent = <span class=\"keyword\">new</span> AnimationEvent();  <span class=\"comment\">// 攻击结束，判断是否击中小球</span></div><div class=\"line\">            hitEvent.functionName = <span class=\"string\">\"AttackHit\"</span>;</div><div class=\"line\">            hitEvent.time = <span class=\"number\">0.5f</span>;</div><div class=\"line\">            attack.clip.AddEvent(hitEvent);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ani.Play(attack.clip.name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StopAttack</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        isAttacking = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AttackHit</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        GameObject obj = GameObject.Find(<span class=\"string\">\"C_BUFFBONE_GLB_CENTER_LOC\"</span>);  <span class=\"comment\">// 射线的长度设置为刀的长度，发出点设为Garen的center</span></div><div class=\"line\">        Ray ray = <span class=\"keyword\">new</span> Ray(obj.transform.position, movement);</div><div class=\"line\">        RaycastHit hit;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Physics.Raycast(ray, out hit, rayLength))</div><div class=\"line\">        &#123;</div><div class=\"line\">            Debug.DrawLine(ray.origin, hit.point);</div><div class=\"line\">            OnAttackHit(hit.collider.gameObject);    <span class=\"comment\">// 广播消息</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isAttacking)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">float</span> h = Input.GetAxisRaw(<span class=\"string\">\"Horizontal\"</span>);</div><div class=\"line\">            <span class=\"keyword\">float</span> v = Input.GetAxisRaw(<span class=\"string\">\"Vertical\"</span>);</div><div class=\"line\">            Move(h, v);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Input.GetMouseButtonDown(<span class=\"number\">0</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            Attack();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>委托（Delegate)相当于一个公众号，每个人都可以关注它，而它只负责发送推送，关注它的人都可以接受的推送。这也是所谓的观察者模式。</p>\n<h3 id=\"Judge-cs\"><a href=\"#Judge-cs\" class=\"headerlink\" title=\"Judge.cs\"></a><strong>Judge.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Judge : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count = <span class=\"number\">7</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        GarenMovement.OnAttackHit += HitEvent;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HitEvent</span><span class=\"params\">(GameObject obj)</span>  <span class=\"comment\">// 击中小球，回收</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj.tag.Contains(<span class=\"string\">\"Ball\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            obj.SetActive(<span class=\"literal\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (--count == <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                MyUI.GetInstance().Display(Time.time.ToString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里记得要添加标签</p>\n<h3 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h3><p>在命名空间Com.Mygame中添加UI类和小球工厂供BaseCode使用：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine.UI;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MyUI : System.Object</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> MyUI instance;</div><div class=\"line\">        <span class=\"keyword\">public</span> Text mainText;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MyUI <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> MyUI();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"built_in\">string</span> info)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            mainText.text = info;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BallFactory : System.Object</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> BallFactory instance;</div><div class=\"line\">        <span class=\"keyword\">static</span> List&lt;GameObject&gt; ballList;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BallFactory <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> BallFactory();</div><div class=\"line\">                ballList = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GameObject <span class=\"title\">GetBall</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ballList.Count; ++i)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!ballList[i].activeInHierarchy)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> ballList[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            GameObject newObj = GameObject.CreatePrimitive(PrimitiveType.Sphere);</div><div class=\"line\">            newObj.GetComponent&lt;Renderer&gt;().material.color = Color.blue;</div><div class=\"line\">            newObj.tag = <span class=\"string\">\"Ball\"</span>;</div><div class=\"line\">            ballList.Add(newObj);</div><div class=\"line\">            <span class=\"keyword\">return</span> newObj;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> balls = <span class=\"number\">7</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> Text text;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        MyUI.GetInstance().mainText = text;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; balls; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            GameObject ball = BallFactory.GetInstance().GetBall();</div><div class=\"line\">            ball.transform.position = <span class=\"keyword\">new</span> Vector3(Random.Range(<span class=\"number\">-10</span>f, <span class=\"number\">10f</span>), <span class=\"number\">0.5f</span>, Random.Range(<span class=\"number\">-10</span>f, <span class=\"number\">10f</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后把GarenMovement脚本挂载在了Garen上，把Judge和BaseCode挂载在了MainCamera上，运行一下，OK!<br><img src=\"j.png\" alt=\"\"><br><img src=\"jg.png\" alt=\"\"><br><img src=\"aa.gif\" alt=\"\"></p>\n","excerpt":"<p>现在使用unity3d的动画系统编写击球小游戏。这是<a href=\"http://pan.baidu.com/s/1i5exKNV\">Garen</a>模型，下载完后将所有模型和动作设置成Legacy动画， inspector -&gt; Rig -&gt; Animation type -&gt; Legacy -&gt; Apply button。游戏过程中将所有随机放置的小球击毙即获得胜利，显示所用时间。方向键控制移动，鼠标控制点击。<br>","more":"</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a><strong>基本概念</strong></h2><p><img src=\"a.png\" alt=\"\"><br>把garen拖入场景中再自己设置一个“格斗场”，然后给garen添加刚体组件和胶囊体碰撞组件；新建1个UI Text对象，并将其定位在屏幕中央，用于显示玩家的最终用时，记得将其拖入对应的代码框处，将其中的文本删除；<br><img src=\"g1.png\" alt=\"\"></p>\n<h2 id=\"动作设计\"><a href=\"#动作设计\" class=\"headerlink\" title=\"动作设计\"></a><strong>动作设计</strong></h2><h3 id=\"GarenMovement-cs\"><a href=\"#GarenMovement-cs\" class=\"headerlink\" title=\"GarenMovement.cs\"></a><strong>GarenMovement.cs</strong></h3><p>garen有3个动作，分别是Idle、Run、Attack。Idle在Start时就播放，Run需要在Update中检测键盘输入，可以使用GetAxisRaw获得WASD的方向。Attack是比较复杂的动作，通过在动作过程中注册回调函数，可以使得在攻击动画播放过程中触发这些函数，比如AttackHit函数，以及StopAttack函数。前者判断有没有击中物体，并广播击中消息。后者使玩家播放站立动画（攻击动画结束后站立）。</p>\n<p>此外，这里击中小球的检测使用射线碰撞检测：把射线的长度设置为刀的长度，然后发出点设为Garen的腰部，这就可以很好地检测Garen的刀是否“砍”中了物体。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GarenMovement : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> delegate <span class=\"keyword\">void</span> <span class=\"title\">AttackHitHandler</span><span class=\"params\">(GameObject obj)</span></span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> event AttackHitHandler OnAttackHit;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">5f</span>;</div><div class=\"line\">    Vector3 movement;</div><div class=\"line\">    Rigidbody playerRigidbody;</div><div class=\"line\">    <span class=\"keyword\">bool</span> isAttacking = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> rayLength = <span class=\"number\">1.8f</span>;</div><div class=\"line\">    Animation ani;</div><div class=\"line\">    AnimationState idle;</div><div class=\"line\">    AnimationState run;</div><div class=\"line\">    AnimationState attack;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        playerRigidbody = <span class=\"keyword\">this</span>.GetComponent&lt;Rigidbody&gt;();</div><div class=\"line\">        ani = <span class=\"keyword\">this</span>.GetComponent&lt;Animation&gt;();</div><div class=\"line\">        idle = ani[<span class=\"string\">\"Idle\"</span>];</div><div class=\"line\">        run = ani[<span class=\"string\">\"Run\"</span>];</div><div class=\"line\">        attack = ani[<span class=\"string\">\"Attack1\"</span>];</div><div class=\"line\"></div><div class=\"line\">        idle.wrapMode = WrapMode.Loop;  <span class=\"comment\">// 站立动画</span></div><div class=\"line\">        ani.Play(idle.clip.name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Move</span><span class=\"params\">(<span class=\"keyword\">float</span> h, <span class=\"keyword\">float</span> v)</span>  <span class=\"comment\">// 向movement移动，同时旋转身体,移动过程播放run动画</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"number\">0</span> || v != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            movement.Set(h, <span class=\"number\">0f</span>, v);</div><div class=\"line\">            movement = movement.normalized * speed * Time.deltaTime;</div><div class=\"line\">            playerRigidbody.MovePosition(transform.position + movement);</div><div class=\"line\"></div><div class=\"line\">            Quaternion newRotation = Quaternion.LookRotation(movement);</div><div class=\"line\">            playerRigidbody.MoveRotation(newRotation);</div><div class=\"line\"></div><div class=\"line\">            run.wrapMode = WrapMode.Loop;</div><div class=\"line\">            ani.CrossFade(run.clip.name, <span class=\"number\">0.1f</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            ani.CrossFade(idle.clip.name, <span class=\"number\">0.1f</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Attack</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        isAttacking = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (attack.clip.events.Length == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            AnimationEvent endEvent = <span class=\"keyword\">new</span> AnimationEvent();  <span class=\"comment\">// 攻击动画结束后设置isDttacking</span></div><div class=\"line\">            endEvent.functionName = <span class=\"string\">\"StopAttack\"</span>;</div><div class=\"line\">            endEvent.time = attack.clip.length - <span class=\"number\">0.2f</span>;</div><div class=\"line\">            attack.clip.AddEvent(endEvent);</div><div class=\"line\"></div><div class=\"line\">            AnimationEvent hitEvent = <span class=\"keyword\">new</span> AnimationEvent();  <span class=\"comment\">// 攻击结束，判断是否击中小球</span></div><div class=\"line\">            hitEvent.functionName = <span class=\"string\">\"AttackHit\"</span>;</div><div class=\"line\">            hitEvent.time = <span class=\"number\">0.5f</span>;</div><div class=\"line\">            attack.clip.AddEvent(hitEvent);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ani.Play(attack.clip.name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StopAttack</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        isAttacking = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AttackHit</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        GameObject obj = GameObject.Find(<span class=\"string\">\"C_BUFFBONE_GLB_CENTER_LOC\"</span>);  <span class=\"comment\">// 射线的长度设置为刀的长度，发出点设为Garen的center</span></div><div class=\"line\">        Ray ray = <span class=\"keyword\">new</span> Ray(obj.transform.position, movement);</div><div class=\"line\">        RaycastHit hit;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Physics.Raycast(ray, out hit, rayLength))</div><div class=\"line\">        &#123;</div><div class=\"line\">            Debug.DrawLine(ray.origin, hit.point);</div><div class=\"line\">            OnAttackHit(hit.collider.gameObject);    <span class=\"comment\">// 广播消息</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isAttacking)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">float</span> h = Input.GetAxisRaw(<span class=\"string\">\"Horizontal\"</span>);</div><div class=\"line\">            <span class=\"keyword\">float</span> v = Input.GetAxisRaw(<span class=\"string\">\"Vertical\"</span>);</div><div class=\"line\">            Move(h, v);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Input.GetMouseButtonDown(<span class=\"number\">0</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            Attack();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>委托（Delegate)相当于一个公众号，每个人都可以关注它，而它只负责发送推送，关注它的人都可以接受的推送。这也是所谓的观察者模式。</p>\n<h3 id=\"Judge-cs\"><a href=\"#Judge-cs\" class=\"headerlink\" title=\"Judge.cs\"></a><strong>Judge.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Judge : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count = <span class=\"number\">7</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        GarenMovement.OnAttackHit += HitEvent;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HitEvent</span><span class=\"params\">(GameObject obj)</span>  <span class=\"comment\">// 击中小球，回收</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (obj.tag.Contains(<span class=\"string\">\"Ball\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            obj.SetActive(<span class=\"literal\">false</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (--count == <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                MyUI.GetInstance().Display(Time.time.ToString());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里记得要添加标签</p>\n<h3 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h3><p>在命名空间Com.Mygame中添加UI类和小球工厂供BaseCode使用：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine.UI;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MyUI : System.Object</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> MyUI instance;</div><div class=\"line\">        <span class=\"keyword\">public</span> Text mainText;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MyUI <span class=\"title\">GetInstance</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> MyUI();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Display</span><span class=\"params\">(<span class=\"built_in\">string</span> info)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            mainText.text = info;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BallFactory : System.Object</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> BallFactory instance;</div><div class=\"line\">        <span class=\"keyword\">static</span> List&lt;GameObject&gt; ballList;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BallFactory <span class=\"title\">GetInstance</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> BallFactory();</div><div class=\"line\">                ballList = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GameObject <span class=\"title\">GetBall</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ballList.Count; ++i)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!ballList[i].activeInHierarchy)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> ballList[i];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            GameObject newObj = GameObject.CreatePrimitive(PrimitiveType.Sphere);</div><div class=\"line\">            newObj.GetComponent&lt;Renderer&gt;().material.color = Color.blue;</div><div class=\"line\">            newObj.tag = <span class=\"string\">\"Ball\"</span>;</div><div class=\"line\">            ballList.Add(newObj);</div><div class=\"line\">            <span class=\"keyword\">return</span> newObj;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> balls = <span class=\"number\">7</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> Text text;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        MyUI.GetInstance().mainText = text;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; balls; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            GameObject ball = BallFactory.GetInstance().GetBall();</div><div class=\"line\">            ball.transform.position = <span class=\"keyword\">new</span> Vector3(Random.Range(<span class=\"number\">-10</span>f, <span class=\"number\">10f</span>), <span class=\"number\">0.5f</span>, Random.Range(<span class=\"number\">-10</span>f, <span class=\"number\">10f</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后把GarenMovement脚本挂载在了Garen上，把Judge和BaseCode挂载在了MainCamera上，运行一下，OK!<br><img src=\"j.png\" alt=\"\"><br><img src=\"jg.png\" alt=\"\"><br><img src=\"aa.gif\" alt=\"\"></p>"},{"title":"Hexo Your Blog","toc":true,"date":"2016-07-15T09:03:10.000Z","_content":"\n  之前一直想写自己的技术博客，无奈没有时间。虽然在CSDN上草草地写过几篇，但是CSDN界面太乱太杂，完全没有自己的空间的感觉。我是一个不愿将就的人，恰巧这次假期页比较长，所以我学着搭建了自己的Hexo，可能你也喜欢我用的这个主题，下面是我搭建的简单过程。\n<!--more-->\n## **注册github并创建repo**\n\n  注册以及创建自己的github仓库网上有很多教程，大家可以看看这篇[ 笑笑晓小姐](http://www.cnblogs.com/KnowLXQ/p/5427555.html)，这篇介绍的比较简单。这里注意，创建的repo必须命名为your_name.github.io，作为你博客的服务。创建好之后，点击\"setting\"==>\"Launch automaic page generator\"==>\"Continue to layouts\"==>\"Publish page\"，发布github默认生成的静态站点。记得添加自己的[SSH key](http://blog.csdn.net/binyao02123202/article/details/20130891)。这里是[github简易使用教程](http://www.bootcss.com/p/git-guide/)。\n\n## **安装Node.js**\n\n  选择适合自己电脑的[node.js](https://nodejs.org/en/)，然后win+R并输入cmd打开命令行（用git bash也可以的），依次输入\n``` javascript\n\t$ git --version\n\t$ node -v\n\t$ npm -v\n```\n\n\n验证软件是否正确安装。在cmd中若提示git不是内部命令，则添加环境变量。然后创建你存放博客的一个文件夹，比如hexo，输入\n``` JavaScript\n$ npm install -g hexo\n```\n\n安装hexo框架，再输入\n``` JavaScript\n$ hexo -v\n```\n\n验证是否安装。\n\n## **配置hexo**\n\n### **基本配置**\n\ncd到你刚刚创建的文件夹，执行\n``` JavaScript\n$ hexo init\n```\n\n每次想“编译”hexo文件夹的代码时执行\n``` JavaScript\n$ hexo g\n```\n\n然后如果要在本地浏览器中打开预览，则\n``` JavaScript\n$ hexo s -p xxxx\n```\n\n在浏览器中打开_localhost:xxx_即可预览。以后写文章，执行\n``` JavaScript\n$ hexo new Name\n```\n\n在hexo\\source_posts\\Name.md下编辑文件，保存即可。\n``` JavaScript\n$ hexo clean\n$ hexo d -g\n```\n即可部署到github仓库。附[Markdown](http://sspai.com/25137)指南。\n### **博客配置以及主题**\n博客详细配置以及主题配置过程太繁琐，这里不一一说明，具体参考[不如的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)。注意区分开根文件夹hexo下的_config.yml配置文件和主题目录下的_config.yml文件。根文件夹配置中，deploy下的repository可以用github链接方式https，也可以使用ssh，我是因为https无法连接才采用ssh的，具体这两种方式有什么区别我不是很清楚。\n\n配置完成后，需要下载相关[插件](http://www.jianshu.com/p/73779eacb494)，这些插件在主题配置或者部署github中需要用到。\n``` JavaScript\n$ npm install hexo-generator-index --save\n$ npm install hexo-generator-archive --save\n$ npm install hexo-generator-category--save\n$ npm install hexo-generator-tag --save\n$ npm install hexo-server--save\n$ npm install hexo-deployer-git --save\n$ npm install hexo-deployer-heroku --save\n$ npm install hexo-deployer-rsync --save\n$ npm install hexo-deployer-openshift --save\n$ npm install hexo-renderer-marked@0.2.7 --save\n$ npm install hexo-renderer-stylus@0.3.0 --save\n$ npm install hexo-generator-feed@1.0.3 --save\n$ npm install hexo-generator-sitemap@1.0.1 --save\n```\n\n多余的插件安装了也无所谓，以备不时之需。\n有个image master插件可以插入本地图片，执行\n``` JavaScript\n$ npm install hexo-asset-image-master --save\n```\n\n安装后，以后写文章会在_post目录下同时生成.md文件和同名文件夹，使用时\n``` bash\n![\"图片描述\"（可以不写）](文件夹/xxx.png)\n```\n即可。\n\n### **踏过的坑**\n\n只能说刚开始的我too naive，以为hexo博客很容易搭，结果是踏过了几乎所有的坑才搭建好的。下面是我遇到的最友好的两个坑：\n\n#### **主题源代码**\n\n搭建过程按照教程来，没有差错。搭建完之后发现本地浏览器运行正常，手机端正常，就是网页端出现问题。为此，我重装过git，从头到尾重新配置过几次，就是解决不了问题。后来发现是源代码出现了问题。代码中需要引用jQuery,引用方式是某个网址，而目前那个网址已经失效了！因为这个问题我找了两天！个人觉得这样的编程习惯不是很好，往后编程，将库下载到本地再引用，这样更安全。而本地运行正常，是因为之前学习web2.0下载过jQuery模板。\n\n#### **ejs模板**\n\n源代码中用的是ejs模板，而有的主题用的是swig模板，根据自己所用的主题安装相应的模板，避免问题的产生。因为这个问题，我也是花了大半天时间才发现的。\n\n至此，按照步骤来搭建自己的hexo博客应该不是个大问题的。希望本文能多多少少帮到你们。第一次写博文，轻喷。","source":"_posts/hexo.md","raw":"---\ntitle: Hexo Your Blog\ntoc: true\ndate: 2016-07-15 17:03:10\ntags: \n- hexo\n- blog\ncategories: 随笔\n---\n\n  之前一直想写自己的技术博客，无奈没有时间。虽然在CSDN上草草地写过几篇，但是CSDN界面太乱太杂，完全没有自己的空间的感觉。我是一个不愿将就的人，恰巧这次假期页比较长，所以我学着搭建了自己的Hexo，可能你也喜欢我用的这个主题，下面是我搭建的简单过程。\n<!--more-->\n## **注册github并创建repo**\n\n  注册以及创建自己的github仓库网上有很多教程，大家可以看看这篇[ 笑笑晓小姐](http://www.cnblogs.com/KnowLXQ/p/5427555.html)，这篇介绍的比较简单。这里注意，创建的repo必须命名为your_name.github.io，作为你博客的服务。创建好之后，点击\"setting\"==>\"Launch automaic page generator\"==>\"Continue to layouts\"==>\"Publish page\"，发布github默认生成的静态站点。记得添加自己的[SSH key](http://blog.csdn.net/binyao02123202/article/details/20130891)。这里是[github简易使用教程](http://www.bootcss.com/p/git-guide/)。\n\n## **安装Node.js**\n\n  选择适合自己电脑的[node.js](https://nodejs.org/en/)，然后win+R并输入cmd打开命令行（用git bash也可以的），依次输入\n``` javascript\n\t$ git --version\n\t$ node -v\n\t$ npm -v\n```\n\n\n验证软件是否正确安装。在cmd中若提示git不是内部命令，则添加环境变量。然后创建你存放博客的一个文件夹，比如hexo，输入\n``` JavaScript\n$ npm install -g hexo\n```\n\n安装hexo框架，再输入\n``` JavaScript\n$ hexo -v\n```\n\n验证是否安装。\n\n## **配置hexo**\n\n### **基本配置**\n\ncd到你刚刚创建的文件夹，执行\n``` JavaScript\n$ hexo init\n```\n\n每次想“编译”hexo文件夹的代码时执行\n``` JavaScript\n$ hexo g\n```\n\n然后如果要在本地浏览器中打开预览，则\n``` JavaScript\n$ hexo s -p xxxx\n```\n\n在浏览器中打开_localhost:xxx_即可预览。以后写文章，执行\n``` JavaScript\n$ hexo new Name\n```\n\n在hexo\\source_posts\\Name.md下编辑文件，保存即可。\n``` JavaScript\n$ hexo clean\n$ hexo d -g\n```\n即可部署到github仓库。附[Markdown](http://sspai.com/25137)指南。\n### **博客配置以及主题**\n博客详细配置以及主题配置过程太繁琐，这里不一一说明，具体参考[不如的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)。注意区分开根文件夹hexo下的_config.yml配置文件和主题目录下的_config.yml文件。根文件夹配置中，deploy下的repository可以用github链接方式https，也可以使用ssh，我是因为https无法连接才采用ssh的，具体这两种方式有什么区别我不是很清楚。\n\n配置完成后，需要下载相关[插件](http://www.jianshu.com/p/73779eacb494)，这些插件在主题配置或者部署github中需要用到。\n``` JavaScript\n$ npm install hexo-generator-index --save\n$ npm install hexo-generator-archive --save\n$ npm install hexo-generator-category--save\n$ npm install hexo-generator-tag --save\n$ npm install hexo-server--save\n$ npm install hexo-deployer-git --save\n$ npm install hexo-deployer-heroku --save\n$ npm install hexo-deployer-rsync --save\n$ npm install hexo-deployer-openshift --save\n$ npm install hexo-renderer-marked@0.2.7 --save\n$ npm install hexo-renderer-stylus@0.3.0 --save\n$ npm install hexo-generator-feed@1.0.3 --save\n$ npm install hexo-generator-sitemap@1.0.1 --save\n```\n\n多余的插件安装了也无所谓，以备不时之需。\n有个image master插件可以插入本地图片，执行\n``` JavaScript\n$ npm install hexo-asset-image-master --save\n```\n\n安装后，以后写文章会在_post目录下同时生成.md文件和同名文件夹，使用时\n``` bash\n![\"图片描述\"（可以不写）](文件夹/xxx.png)\n```\n即可。\n\n### **踏过的坑**\n\n只能说刚开始的我too naive，以为hexo博客很容易搭，结果是踏过了几乎所有的坑才搭建好的。下面是我遇到的最友好的两个坑：\n\n#### **主题源代码**\n\n搭建过程按照教程来，没有差错。搭建完之后发现本地浏览器运行正常，手机端正常，就是网页端出现问题。为此，我重装过git，从头到尾重新配置过几次，就是解决不了问题。后来发现是源代码出现了问题。代码中需要引用jQuery,引用方式是某个网址，而目前那个网址已经失效了！因为这个问题我找了两天！个人觉得这样的编程习惯不是很好，往后编程，将库下载到本地再引用，这样更安全。而本地运行正常，是因为之前学习web2.0下载过jQuery模板。\n\n#### **ejs模板**\n\n源代码中用的是ejs模板，而有的主题用的是swig模板，根据自己所用的主题安装相应的模板，避免问题的产生。因为这个问题，我也是花了大半天时间才发现的。\n\n至此，按照步骤来搭建自己的hexo博客应该不是个大问题的。希望本文能多多少少帮到你们。第一次写博文，轻喷。","slug":"hexo","published":1,"updated":"2016-07-16T07:55:46.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzl4000agobkqatiko5o","content":"<p>  之前一直想写自己的技术博客，无奈没有时间。虽然在CSDN上草草地写过几篇，但是CSDN界面太乱太杂，完全没有自己的空间的感觉。我是一个不愿将就的人，恰巧这次假期页比较长，所以我学着搭建了自己的Hexo，可能你也喜欢我用的这个主题，下面是我搭建的简单过程。<br><a id=\"more\"></a></p>\n<h2 id=\"注册github并创建repo\"><a href=\"#注册github并创建repo\" class=\"headerlink\" title=\"注册github并创建repo\"></a><strong>注册github并创建repo</strong></h2><p>  注册以及创建自己的github仓库网上有很多教程，大家可以看看这篇<a href=\"http://www.cnblogs.com/KnowLXQ/p/5427555.html\" target=\"_blank\" rel=\"external\"> 笑笑晓小姐</a>，这篇介绍的比较简单。这里注意，创建的repo必须命名为your_name.github.io，作为你博客的服务。创建好之后，点击”setting”==&gt;”Launch automaic page generator”==&gt;”Continue to layouts”==&gt;”Publish page”，发布github默认生成的静态站点。记得添加自己的<a href=\"http://blog.csdn.net/binyao02123202/article/details/20130891\" target=\"_blank\" rel=\"external\">SSH key</a>。这里是<a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"external\">github简易使用教程</a>。</p>\n<h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a><strong>安装Node.js</strong></h2><p>  选择适合自己电脑的<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node.js</a>，然后win+R并输入cmd打开命令行（用git bash也可以的），依次输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git --version</div><div class=\"line\">$ node -v</div><div class=\"line\">$ npm -v</div></pre></td></tr></table></figure></p>\n<p>验证软件是否正确安装。在cmd中若提示git不是内部命令，则添加环境变量。然后创建你存放博客的一个文件夹，比如hexo，输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo</div></pre></td></tr></table></figure></p>\n<p>安装hexo框架，再输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -v</div></pre></td></tr></table></figure></p>\n<p>验证是否安装。</p>\n<h2 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a><strong>配置hexo</strong></h2><h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a><strong>基本配置</strong></h3><p>cd到你刚刚创建的文件夹，执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p>每次想“编译”hexo文件夹的代码时执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure></p>\n<p>然后如果要在本地浏览器中打开预览，则<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s -p xxxx</div></pre></td></tr></table></figure></p>\n<p>在浏览器中打开<em>localhost:xxx</em>即可预览。以后写文章，执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo <span class=\"keyword\">new</span> Name</div></pre></td></tr></table></figure></p>\n<p>在hexo\\source_posts\\Name.md下编辑文件，保存即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo d -g</div></pre></td></tr></table></figure></p>\n<p>即可部署到github仓库。附<a href=\"http://sspai.com/25137\" target=\"_blank\" rel=\"external\">Markdown</a>指南。</p>\n<h3 id=\"博客配置以及主题\"><a href=\"#博客配置以及主题\" class=\"headerlink\" title=\"博客配置以及主题\"></a><strong>博客配置以及主题</strong></h3><p>博客详细配置以及主题配置过程太繁琐，这里不一一说明，具体参考<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">不如的博客</a>。注意区分开根文件夹hexo下的_config.yml配置文件和主题目录下的_config.yml文件。根文件夹配置中，deploy下的repository可以用github链接方式https，也可以使用ssh，我是因为https无法连接才采用ssh的，具体这两种方式有什么区别我不是很清楚。</p>\n<p>配置完成后，需要下载相关<a href=\"http://www.jianshu.com/p/73779eacb494\" target=\"_blank\" rel=\"external\">插件</a>，这些插件在主题配置或者部署github中需要用到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-index --save</div><div class=\"line\">$ npm install hexo-generator-archive --save</div><div class=\"line\">$ npm install hexo-generator-category--save</div><div class=\"line\">$ npm install hexo-generator-tag --save</div><div class=\"line\">$ npm install hexo-server--save</div><div class=\"line\">$ npm install hexo-deployer-git --save</div><div class=\"line\">$ npm install hexo-deployer-heroku --save</div><div class=\"line\">$ npm install hexo-deployer-rsync --save</div><div class=\"line\">$ npm install hexo-deployer-openshift --save</div><div class=\"line\">$ npm install hexo-renderer-marked@<span class=\"number\">0.2</span><span class=\"number\">.7</span> --save</div><div class=\"line\">$ npm install hexo-renderer-stylus@<span class=\"number\">0.3</span><span class=\"number\">.0</span> --save</div><div class=\"line\">$ npm install hexo-generator-feed@<span class=\"number\">1.0</span><span class=\"number\">.3</span> --save</div><div class=\"line\">$ npm install hexo-generator-sitemap@<span class=\"number\">1.0</span><span class=\"number\">.1</span> --save</div></pre></td></tr></table></figure></p>\n<p>多余的插件安装了也无所谓，以备不时之需。<br>有个image master插件可以插入本地图片，执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-asset-image-master --save</div></pre></td></tr></table></figure></p>\n<p>安装后，以后写文章会在_post目录下同时生成.md文件和同名文件夹，使用时<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">\"图片描述\"</span>（可以不写）](文件夹/xxx.png)</div></pre></td></tr></table></figure></p>\n<p>即可。</p>\n<h3 id=\"踏过的坑\"><a href=\"#踏过的坑\" class=\"headerlink\" title=\"踏过的坑\"></a><strong>踏过的坑</strong></h3><p>只能说刚开始的我too naive，以为hexo博客很容易搭，结果是踏过了几乎所有的坑才搭建好的。下面是我遇到的最友好的两个坑：</p>\n<h4 id=\"主题源代码\"><a href=\"#主题源代码\" class=\"headerlink\" title=\"主题源代码\"></a><strong>主题源代码</strong></h4><p>搭建过程按照教程来，没有差错。搭建完之后发现本地浏览器运行正常，手机端正常，就是网页端出现问题。为此，我重装过git，从头到尾重新配置过几次，就是解决不了问题。后来发现是源代码出现了问题。代码中需要引用jQuery,引用方式是某个网址，而目前那个网址已经失效了！因为这个问题我找了两天！个人觉得这样的编程习惯不是很好，往后编程，将库下载到本地再引用，这样更安全。而本地运行正常，是因为之前学习web2.0下载过jQuery模板。</p>\n<h4 id=\"ejs模板\"><a href=\"#ejs模板\" class=\"headerlink\" title=\"ejs模板\"></a><strong>ejs模板</strong></h4><p>源代码中用的是ejs模板，而有的主题用的是swig模板，根据自己所用的主题安装相应的模板，避免问题的产生。因为这个问题，我也是花了大半天时间才发现的。</p>\n<p>至此，按照步骤来搭建自己的hexo博客应该不是个大问题的。希望本文能多多少少帮到你们。第一次写博文，轻喷。</p>\n","excerpt":"<p>  之前一直想写自己的技术博客，无奈没有时间。虽然在CSDN上草草地写过几篇，但是CSDN界面太乱太杂，完全没有自己的空间的感觉。我是一个不愿将就的人，恰巧这次假期页比较长，所以我学着搭建了自己的Hexo，可能你也喜欢我用的这个主题，下面是我搭建的简单过程。<br>","more":"</p>\n<h2 id=\"注册github并创建repo\"><a href=\"#注册github并创建repo\" class=\"headerlink\" title=\"注册github并创建repo\"></a><strong>注册github并创建repo</strong></h2><p>  注册以及创建自己的github仓库网上有很多教程，大家可以看看这篇<a href=\"http://www.cnblogs.com/KnowLXQ/p/5427555.html\"> 笑笑晓小姐</a>，这篇介绍的比较简单。这里注意，创建的repo必须命名为your_name.github.io，作为你博客的服务。创建好之后，点击”setting”==&gt;”Launch automaic page generator”==&gt;”Continue to layouts”==&gt;”Publish page”，发布github默认生成的静态站点。记得添加自己的<a href=\"http://blog.csdn.net/binyao02123202/article/details/20130891\">SSH key</a>。这里是<a href=\"http://www.bootcss.com/p/git-guide/\">github简易使用教程</a>。</p>\n<h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a><strong>安装Node.js</strong></h2><p>  选择适合自己电脑的<a href=\"https://nodejs.org/en/\">node.js</a>，然后win+R并输入cmd打开命令行（用git bash也可以的），依次输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git --version</div><div class=\"line\">$ node -v</div><div class=\"line\">$ npm -v</div></pre></td></tr></table></figure></p>\n<p>验证软件是否正确安装。在cmd中若提示git不是内部命令，则添加环境变量。然后创建你存放博客的一个文件夹，比如hexo，输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo</div></pre></td></tr></table></figure></p>\n<p>安装hexo框架，再输入<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo -v</div></pre></td></tr></table></figure></p>\n<p>验证是否安装。</p>\n<h2 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a><strong>配置hexo</strong></h2><h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a><strong>基本配置</strong></h3><p>cd到你刚刚创建的文件夹，执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p>每次想“编译”hexo文件夹的代码时执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div></pre></td></tr></table></figure></p>\n<p>然后如果要在本地浏览器中打开预览，则<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s -p xxxx</div></pre></td></tr></table></figure></p>\n<p>在浏览器中打开<em>localhost:xxx</em>即可预览。以后写文章，执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo <span class=\"keyword\">new</span> Name</div></pre></td></tr></table></figure></p>\n<p>在hexo\\source_posts\\Name.md下编辑文件，保存即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo d -g</div></pre></td></tr></table></figure></p>\n<p>即可部署到github仓库。附<a href=\"http://sspai.com/25137\">Markdown</a>指南。</p>\n<h3 id=\"博客配置以及主题\"><a href=\"#博客配置以及主题\" class=\"headerlink\" title=\"博客配置以及主题\"></a><strong>博客配置以及主题</strong></h3><p>博客详细配置以及主题配置过程太繁琐，这里不一一说明，具体参考<a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">不如的博客</a>。注意区分开根文件夹hexo下的_config.yml配置文件和主题目录下的_config.yml文件。根文件夹配置中，deploy下的repository可以用github链接方式https，也可以使用ssh，我是因为https无法连接才采用ssh的，具体这两种方式有什么区别我不是很清楚。</p>\n<p>配置完成后，需要下载相关<a href=\"http://www.jianshu.com/p/73779eacb494\">插件</a>，这些插件在主题配置或者部署github中需要用到。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-index --save</div><div class=\"line\">$ npm install hexo-generator-archive --save</div><div class=\"line\">$ npm install hexo-generator-category--save</div><div class=\"line\">$ npm install hexo-generator-tag --save</div><div class=\"line\">$ npm install hexo-server--save</div><div class=\"line\">$ npm install hexo-deployer-git --save</div><div class=\"line\">$ npm install hexo-deployer-heroku --save</div><div class=\"line\">$ npm install hexo-deployer-rsync --save</div><div class=\"line\">$ npm install hexo-deployer-openshift --save</div><div class=\"line\">$ npm install hexo-renderer-marked@<span class=\"number\">0.2</span><span class=\"number\">.7</span> --save</div><div class=\"line\">$ npm install hexo-renderer-stylus@<span class=\"number\">0.3</span><span class=\"number\">.0</span> --save</div><div class=\"line\">$ npm install hexo-generator-feed@<span class=\"number\">1.0</span><span class=\"number\">.3</span> --save</div><div class=\"line\">$ npm install hexo-generator-sitemap@<span class=\"number\">1.0</span><span class=\"number\">.1</span> --save</div></pre></td></tr></table></figure></p>\n<p>多余的插件安装了也无所谓，以备不时之需。<br>有个image master插件可以插入本地图片，执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-asset-image-master --save</div></pre></td></tr></table></figure></p>\n<p>安装后，以后写文章会在_post目录下同时生成.md文件和同名文件夹，使用时<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![<span class=\"string\">\"图片描述\"</span>（可以不写）](文件夹/xxx.png)</div></pre></td></tr></table></figure></p>\n<p>即可。</p>\n<h3 id=\"踏过的坑\"><a href=\"#踏过的坑\" class=\"headerlink\" title=\"踏过的坑\"></a><strong>踏过的坑</strong></h3><p>只能说刚开始的我too naive，以为hexo博客很容易搭，结果是踏过了几乎所有的坑才搭建好的。下面是我遇到的最友好的两个坑：</p>\n<h4 id=\"主题源代码\"><a href=\"#主题源代码\" class=\"headerlink\" title=\"主题源代码\"></a><strong>主题源代码</strong></h4><p>搭建过程按照教程来，没有差错。搭建完之后发现本地浏览器运行正常，手机端正常，就是网页端出现问题。为此，我重装过git，从头到尾重新配置过几次，就是解决不了问题。后来发现是源代码出现了问题。代码中需要引用jQuery,引用方式是某个网址，而目前那个网址已经失效了！因为这个问题我找了两天！个人觉得这样的编程习惯不是很好，往后编程，将库下载到本地再引用，这样更安全。而本地运行正常，是因为之前学习web2.0下载过jQuery模板。</p>\n<h4 id=\"ejs模板\"><a href=\"#ejs模板\" class=\"headerlink\" title=\"ejs模板\"></a><strong>ejs模板</strong></h4><p>源代码中用的是ejs模板，而有的主题用的是swig模板，根据自己所用的主题安装相应的模板，避免问题的产生。因为这个问题，我也是花了大半天时间才发现的。</p>\n<p>至此，按照步骤来搭建自己的hexo博客应该不是个大问题的。希望本文能多多少少帮到你们。第一次写博文，轻喷。</p>"},{"title":"井字棋","toc":true,"date":"2016-07-21T07:04:46.000Z","_content":"3D游戏开发虽然比较难，但也很有趣。我学的只是皮毛，却领略了游戏开发的魅力所在。下面利用unity3d的GUI实现简单井字棋游戏。\n所使用软件：unity，VS2015\n<!--more-->\n\n## **总体思路**\n先上结果图：\n![](1.png)\n\n- 变量turn：1表示圆圈回合，-1表示X回合；3*3数组map：1表示格子里画圆圈，2表示画X\n- check()函数：横向斜向检测是否有赢家，返回值0表示游戏进行中。\n- reset()函数：初始化，在Start中调用。\n- OnGUI函数：渲染3*3GUI棋盘，根据数据对应位置值画圆圈或X；若游戏进行中则用来改变数组对应位置的值。OnGUI函数每一帧都会渲染一次界面。\n\n## **完整代码**\n\n一言不合就上代码\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class game : MonoBehaviour {\n\n    private int turn = 1;  // 1为圆圈回合  -1为×回合\n    private int[,] map = new int[3, 3];  // 1代表格子里是圆圈，2代表×\n    void reset()\n    {\n        turn = 1;\n        for (int i = 0; i < 3; ++i)\n            for (int j = 0; j < 3; ++j)\n                map[i, j] = 0;\n    }\n    int check()\n    {\n        for (int i = 0; i < 3; ++i)  // 横向连线\n            if (map[i, 0] != 0 && map[i, 1] == map[i, 0] && map[i, 2] == map[i, 1])\n                return map[i, 0];\n        for (int j = 0; j < 3; ++j)  //  纵向\n            if (map[0, j] != 0 && map[0, j] == map[1, j] && map[1, j] == map[2, j])\n                return map[0, j];\n        if (map[1, 1] != 0 && map[0, 0] == map[1, 1] && map[1, 1] == map[2, 2] ||\n            map[0, 2] == map[1, 1] && map[1, 1] == map[2, 0])  // 斜向\n            return map[1, 1];\n        return 0;\n    }\n    void Start () {\n        reset();\n\t}\n\tvoid OnGUI()\n    {\n        if (GUI.Button(new Rect(35, 230, 80, 45), \"Reset\")) reset();\n        int ans = check();  // 0表示游戏进行中  1表示圆圈赢 2表示X赢\n        if (ans == 1) GUI.Label(new Rect(50, 180, 100, 50), \"O wins!\");\n        else if (ans == 2) GUI.Label(new Rect(50, 180, 100, 50), \"X wins!\");\n\n        for (int i = 0; i < 3; ++i)\n        {\n            for (int j = 0; j < 3; ++j)\n            {\n                if (map[i, j] == 1)\n                    GUI.Button(new Rect(i * 50, j * 50, 50, 50), \"O\");\n                if (map[i, j] == 2)\n                    GUI.Button(new Rect(i * 50, j * 50, 50, 50), \"X\");\n\n                if (GUI.Button(new Rect(i * 50, j * 50, 50, 50), \"\"))\n                {\n                    if (ans == 0)\n                    {\n                        if (turn == 1) map[i, j] = 1;\n                        else map[i, j] = 2;\n                        turn = -turn;\n                    }\n                }\n\n            }\n\n        }\n    }\n}\n```\n\n记得将代码挂载到主摄像机上","source":"_posts/井字棋.md","raw":"---\ntitle: 井字棋\ntoc: true\ndate: 2016-07-21 15:04:46\ntags:\n- unity3d\n- C#\ncategories: 3D游戏开发\n---\n3D游戏开发虽然比较难，但也很有趣。我学的只是皮毛，却领略了游戏开发的魅力所在。下面利用unity3d的GUI实现简单井字棋游戏。\n所使用软件：unity，VS2015\n<!--more-->\n\n## **总体思路**\n先上结果图：\n![](1.png)\n\n- 变量turn：1表示圆圈回合，-1表示X回合；3*3数组map：1表示格子里画圆圈，2表示画X\n- check()函数：横向斜向检测是否有赢家，返回值0表示游戏进行中。\n- reset()函数：初始化，在Start中调用。\n- OnGUI函数：渲染3*3GUI棋盘，根据数据对应位置值画圆圈或X；若游戏进行中则用来改变数组对应位置的值。OnGUI函数每一帧都会渲染一次界面。\n\n## **完整代码**\n\n一言不合就上代码\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class game : MonoBehaviour {\n\n    private int turn = 1;  // 1为圆圈回合  -1为×回合\n    private int[,] map = new int[3, 3];  // 1代表格子里是圆圈，2代表×\n    void reset()\n    {\n        turn = 1;\n        for (int i = 0; i < 3; ++i)\n            for (int j = 0; j < 3; ++j)\n                map[i, j] = 0;\n    }\n    int check()\n    {\n        for (int i = 0; i < 3; ++i)  // 横向连线\n            if (map[i, 0] != 0 && map[i, 1] == map[i, 0] && map[i, 2] == map[i, 1])\n                return map[i, 0];\n        for (int j = 0; j < 3; ++j)  //  纵向\n            if (map[0, j] != 0 && map[0, j] == map[1, j] && map[1, j] == map[2, j])\n                return map[0, j];\n        if (map[1, 1] != 0 && map[0, 0] == map[1, 1] && map[1, 1] == map[2, 2] ||\n            map[0, 2] == map[1, 1] && map[1, 1] == map[2, 0])  // 斜向\n            return map[1, 1];\n        return 0;\n    }\n    void Start () {\n        reset();\n\t}\n\tvoid OnGUI()\n    {\n        if (GUI.Button(new Rect(35, 230, 80, 45), \"Reset\")) reset();\n        int ans = check();  // 0表示游戏进行中  1表示圆圈赢 2表示X赢\n        if (ans == 1) GUI.Label(new Rect(50, 180, 100, 50), \"O wins!\");\n        else if (ans == 2) GUI.Label(new Rect(50, 180, 100, 50), \"X wins!\");\n\n        for (int i = 0; i < 3; ++i)\n        {\n            for (int j = 0; j < 3; ++j)\n            {\n                if (map[i, j] == 1)\n                    GUI.Button(new Rect(i * 50, j * 50, 50, 50), \"O\");\n                if (map[i, j] == 2)\n                    GUI.Button(new Rect(i * 50, j * 50, 50, 50), \"X\");\n\n                if (GUI.Button(new Rect(i * 50, j * 50, 50, 50), \"\"))\n                {\n                    if (ans == 0)\n                    {\n                        if (turn == 1) map[i, j] = 1;\n                        else map[i, j] = 2;\n                        turn = -turn;\n                    }\n                }\n\n            }\n\n        }\n    }\n}\n```\n\n记得将代码挂载到主摄像机上","slug":"井字棋","published":1,"updated":"2016-07-21T10:46:39.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzli000cgobksqlxytzu","content":"<p>3D游戏开发虽然比较难，但也很有趣。我学的只是皮毛，却领略了游戏开发的魅力所在。下面利用unity3d的GUI实现简单井字棋游戏。<br>所使用软件：unity，VS2015<br><a id=\"more\"></a></p>\n<h2 id=\"总体思路\"><a href=\"#总体思路\" class=\"headerlink\" title=\"总体思路\"></a><strong>总体思路</strong></h2><p>先上结果图：<br><img src=\"1.png\" alt=\"\"></p>\n<ul>\n<li>变量turn：1表示圆圈回合，-1表示X回合；3*3数组map：1表示格子里画圆圈，2表示画X</li>\n<li>check()函数：横向斜向检测是否有赢家，返回值0表示游戏进行中。</li>\n<li>reset()函数：初始化，在Start中调用。</li>\n<li>OnGUI函数：渲染3*3GUI棋盘，根据数据对应位置值画圆圈或X；若游戏进行中则用来改变数组对应位置的值。OnGUI函数每一帧都会渲染一次界面。</li>\n</ul>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><p>一言不合就上代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> game : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> turn = <span class=\"number\">1</span>;  <span class=\"comment\">// 1为圆圈回合  -1为×回合</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[,] <span class=\"built_in\">map</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>, <span class=\"number\">3</span>];  <span class=\"comment\">// 1代表格子里是圆圈，2代表×</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reset</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        turn = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)</div><div class=\"line\">                <span class=\"built_in\">map</span>[i, j] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">check</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)  <span class=\"comment\">// 横向连线</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i, <span class=\"number\">0</span>] != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">map</span>[i, <span class=\"number\">1</span>] == <span class=\"built_in\">map</span>[i, <span class=\"number\">0</span>] &amp;&amp; <span class=\"built_in\">map</span>[i, <span class=\"number\">2</span>] == <span class=\"built_in\">map</span>[i, <span class=\"number\">1</span>])</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>[i, <span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)  <span class=\"comment\">//  纵向</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[<span class=\"number\">0</span>, j] != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">0</span>, j] == <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, j] &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, j] == <span class=\"built_in\">map</span>[<span class=\"number\">2</span>, j])</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>[<span class=\"number\">0</span>, j];</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>] == <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] == <span class=\"built_in\">map</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>] ||</div><div class=\"line\">            <span class=\"built_in\">map</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>] == <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] == <span class=\"built_in\">map</span>[<span class=\"number\">2</span>, <span class=\"number\">0</span>])  <span class=\"comment\">// 斜向</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        reset();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnGUI</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(<span class=\"number\">35</span>, <span class=\"number\">230</span>, <span class=\"number\">80</span>, <span class=\"number\">45</span>), <span class=\"string\">\"Reset\"</span>)) reset();</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = check();  <span class=\"comment\">// 0表示游戏进行中  1表示圆圈赢 2表示X赢</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ans == <span class=\"number\">1</span>) GUI.Label(<span class=\"keyword\">new</span> Rect(<span class=\"number\">50</span>, <span class=\"number\">180</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>), <span class=\"string\">\"O wins!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ans == <span class=\"number\">2</span>) GUI.Label(<span class=\"keyword\">new</span> Rect(<span class=\"number\">50</span>, <span class=\"number\">180</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>), <span class=\"string\">\"X wins!\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i, j] == <span class=\"number\">1</span>)</div><div class=\"line\">                    GUI.Button(<span class=\"keyword\">new</span> Rect(i * <span class=\"number\">50</span>, j * <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>), <span class=\"string\">\"O\"</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i, j] == <span class=\"number\">2</span>)</div><div class=\"line\">                    GUI.Button(<span class=\"keyword\">new</span> Rect(i * <span class=\"number\">50</span>, j * <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>), <span class=\"string\">\"X\"</span>);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(i * <span class=\"number\">50</span>, j * <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>), <span class=\"string\">\"\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (ans == <span class=\"number\">0</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (turn == <span class=\"number\">1</span>) <span class=\"built_in\">map</span>[i, j] = <span class=\"number\">1</span>;</div><div class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"built_in\">map</span>[i, j] = <span class=\"number\">2</span>;</div><div class=\"line\">                        turn = -turn;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>记得将代码挂载到主摄像机上</p>\n","excerpt":"<p>3D游戏开发虽然比较难，但也很有趣。我学的只是皮毛，却领略了游戏开发的魅力所在。下面利用unity3d的GUI实现简单井字棋游戏。<br>所使用软件：unity，VS2015<br>","more":"</p>\n<h2 id=\"总体思路\"><a href=\"#总体思路\" class=\"headerlink\" title=\"总体思路\"></a><strong>总体思路</strong></h2><p>先上结果图：<br><img src=\"1.png\" alt=\"\"></p>\n<ul>\n<li>变量turn：1表示圆圈回合，-1表示X回合；3*3数组map：1表示格子里画圆圈，2表示画X</li>\n<li>check()函数：横向斜向检测是否有赢家，返回值0表示游戏进行中。</li>\n<li>reset()函数：初始化，在Start中调用。</li>\n<li>OnGUI函数：渲染3*3GUI棋盘，根据数据对应位置值画圆圈或X；若游戏进行中则用来改变数组对应位置的值。OnGUI函数每一帧都会渲染一次界面。</li>\n</ul>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><p>一言不合就上代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> game : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> turn = <span class=\"number\">1</span>;  <span class=\"comment\">// 1为圆圈回合  -1为×回合</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[,] <span class=\"built_in\">map</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>, <span class=\"number\">3</span>];  <span class=\"comment\">// 1代表格子里是圆圈，2代表×</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reset</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        turn = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)</div><div class=\"line\">                <span class=\"built_in\">map</span>[i, j] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">check</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)  <span class=\"comment\">// 横向连线</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i, <span class=\"number\">0</span>] != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">map</span>[i, <span class=\"number\">1</span>] == <span class=\"built_in\">map</span>[i, <span class=\"number\">0</span>] &amp;&amp; <span class=\"built_in\">map</span>[i, <span class=\"number\">2</span>] == <span class=\"built_in\">map</span>[i, <span class=\"number\">1</span>])</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>[i, <span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)  <span class=\"comment\">//  纵向</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[<span class=\"number\">0</span>, j] != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">0</span>, j] == <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, j] &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, j] == <span class=\"built_in\">map</span>[<span class=\"number\">2</span>, j])</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>[<span class=\"number\">0</span>, j];</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>] == <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] == <span class=\"built_in\">map</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>] ||</div><div class=\"line\">            <span class=\"built_in\">map</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>] == <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] &amp;&amp; <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>] == <span class=\"built_in\">map</span>[<span class=\"number\">2</span>, <span class=\"number\">0</span>])  <span class=\"comment\">// 斜向</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        reset();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnGUI</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(<span class=\"number\">35</span>, <span class=\"number\">230</span>, <span class=\"number\">80</span>, <span class=\"number\">45</span>), <span class=\"string\">\"Reset\"</span>)) reset();</div><div class=\"line\">        <span class=\"keyword\">int</span> ans = check();  <span class=\"comment\">// 0表示游戏进行中  1表示圆圈赢 2表示X赢</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ans == <span class=\"number\">1</span>) GUI.Label(<span class=\"keyword\">new</span> Rect(<span class=\"number\">50</span>, <span class=\"number\">180</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>), <span class=\"string\">\"O wins!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ans == <span class=\"number\">2</span>) GUI.Label(<span class=\"keyword\">new</span> Rect(<span class=\"number\">50</span>, <span class=\"number\">180</span>, <span class=\"number\">100</span>, <span class=\"number\">50</span>), <span class=\"string\">\"X wins!\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i, j] == <span class=\"number\">1</span>)</div><div class=\"line\">                    GUI.Button(<span class=\"keyword\">new</span> Rect(i * <span class=\"number\">50</span>, j * <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>), <span class=\"string\">\"O\"</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>[i, j] == <span class=\"number\">2</span>)</div><div class=\"line\">                    GUI.Button(<span class=\"keyword\">new</span> Rect(i * <span class=\"number\">50</span>, j * <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>), <span class=\"string\">\"X\"</span>);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(i * <span class=\"number\">50</span>, j * <span class=\"number\">50</span>, <span class=\"number\">50</span>, <span class=\"number\">50</span>), <span class=\"string\">\"\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (ans == <span class=\"number\">0</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (turn == <span class=\"number\">1</span>) <span class=\"built_in\">map</span>[i, j] = <span class=\"number\">1</span>;</div><div class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"built_in\">map</span>[i, j] = <span class=\"number\">2</span>;</div><div class=\"line\">                        turn = -turn;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>记得将代码挂载到主摄像机上</p>"},{"title":"MIPS单周期CPU","toc":true,"date":"2016-07-16T11:12:21.000Z","_content":"指令是计算机软件和硬件的交界处，高级语言编译链接后生成大量的指令传送到CPU中完成相应的功能。本文介绍的是单周期CPU，即虽然每条指令能拆分成多条微指令，但是每条指令都必须在一个时钟周期内执行完毕。往后会介绍多周期CPU，相应的可能也更复杂一些。\n模拟过程需要Xilinx ISE软件，软件包比较大，而且一般有闪退问题，win10不兼容问题，解决方法百度上都有，不慌。这里提供一个[友情链接](http://blog.sina.com.cn/s/blog_5252f6ca0101je0q.html)。\n友情提示：ise不会提示你变量名拼写错误\n\n<!--more-->\n## **MIPS32指令格式**\n### **R类型**\n![](r.png)\n### **I类型**\n![](i.png)\n### **J类型**\n![](j.png)\n\n其中，\n\n- op：为操作码；\n- rs：为第1个源操作数寄存器，寄存器地址（编号）是00000~11111，00~1F；\n- rt：为第2个源操作数寄存器，或目的操作数寄存器，寄存器地址（同上）；\n- rd：为目的操作数寄存器，寄存器地址（同上）；\n- sa：为位移量（shift amt），移位指令用于指定移多少位；\n- func：为功能码，在寄存器类型指令中（R类型）用来指定指令的功能；\n- immediate：为16位立即数，用作无符号的逻辑操作数、有符号的算术操作数、数据加载（Laod）/数据保存（Store）指令的数据地址字节偏移量和分支指令中相对程序计数器（PC）的有符号偏移量；\n- address：为地址。\n## **单周期CPU能执行的指令**\n### **算术运算指令**\n![](suansu.png)\nreserved为预留部分，即未用，一般填“0”。\n### **逻辑运算指令**\n![](luoji.png)\n### **传送指令**\n![](chuansong.png)\n### **存储器读写指令**\n![](duxie.png)\n### **分支指令**\n![](fenzhi.png)\nimmediate是从PC+4地址开始和转移到的指令之间指令条数。immediate符号扩展之后左移2位再相加。为什么要左移2位？由于跳转到的指令地址肯定是4的倍数（每条指令占4个字节），最低两位是“00”，因此将immediate放进指令码中的时候，是右移了2位的，也就是以上说的“指令之间指令条数”。\n### **停机指令**\n![](tingji.png)\n功能：停机，不改变PC值\n## **设计原理**\n单周期CPU指的是一条指令的执行在一个时钟周期内完成，然后开始下一条指令的执行，即一条指令用一个时钟周期完成。电平从低到高变化的瞬间称为时钟上升沿，两个相邻时钟上升沿之间的时间间隔称为一个时钟周期。时钟周期一般也称振荡周期（如果晶振的输出没有经过分频就直接作为CPU的工作时钟，则时钟周期就等于振荡周期。若振荡周期经二分频后形成时钟脉冲信号作为CPU的工作时钟，这样，时钟周期就是振荡周期的两倍。）\nCPU在处理指令时，一般需要经过以下几个步骤：\n\n+ 取指令(IF)：根据程序计数器PC中的指令地址，从存储器中取出一条指令，同时，PC根据指令字长度自动递增产生下一条指令所需要的指令地址，但遇到“地址转移”指令时，则控制器把“转移地址”送入PC，当然得到的“地址”需要做些变换才送入PC。\n- 指令译码(ID)：对取指令操作中得到的指令进行分析并译码，确定这条指令需要完成的操作，从而产生相应的操作控制信号，用于驱动执行状态中的各种操作。\n- 指令执行(EXE)：根据指令译码得到的操作控制信号，具体地执行指令动作，然后转移到结果写回状态。\n- 存储器访问(MEM)：所有需要访问存储器的操作都将在这个步骤中执行，该步骤给出存储器的数据地址，把数据写入到存储器中数据地址所指定的存储单元或者从存储器中得到数据地址单元中的数据。\n- 结果写回(WB)：指令执行的结果或者访问存储器中得到的数据写回相应的目的寄存器中。\n单周期CPU，是在一个时钟周期内完成这五个阶段的处理。\n![](yuanli.png)\n## **数据通路及其控制**\n### **数据通路**\n接下来需要了解CPU的数据通路及其控制信号，这是重点也是难点。下面这图需要完完全全弄得，理解每条指令执行过程中控制信号相应的值及其执行过程。多看几次也就不觉得很复杂了。\n![](tonglu.png)\n上图是基本上能够在单周期上完成所要求设计的指令功能的数据通路和必要的控制线路图。其中指令和数据各存储在不同存储器中，即有指令存储器和数据存储器。访问存储器时，先给出地址，然后由读/写信号控制（1-写，0-读。当然，也可以由时钟信号控制，但必须在图上标出）。对于寄存器组，读操作时，先给出地址，输出端就直接输出相应数据；而在写操作时，在 WE使能信号为1时，在时钟边沿触发写入\n### **控制信号**\n控制信号的作用说明如下：\n![](xinhao.png)\n\n- Instruction Memory：指令存储器，\n - Iaddr，指令存储器地址输入端口\n - IDataIn，指令存储器数据输入端口（指令代码输入端口）\n - IDataOut，指令存储器数据输出端口（指令代码输出端口）\n - RW，指令存储器读写控制信号，为1写，为0读\n- Data Memory：数据存储器，\n - Daddr，数据存储器地址输入端口\n - DataIn，数据存储器数据输入端口\n - DataOut，数据存储器数据输出端口\n - RW，数据存储器读写控制信号，为1写，为0读\n- Register File：（寄存器组）\n - Read Reg1，rs寄存器地址输入端口\n - Read Reg2，rt寄存器地址输入端口\n - Write Reg，将数据写入的寄存器端口，其地址来源rt或rd字段\n - Write Data，写入寄存器的数据输入端口\n - Read Data1，rs寄存器数据输出端口\n - Read Data2，rt寄存器数据输出端口\n - WE，写使能信号，为1时，在时钟上升沿写入\n\n### **ALU运算功能表**\n![](alu.png)\n\nALU:\n\n- result，ALU运算结果\n- zero，运算结果标志，结果为0输出1，否则输出0\n\n![](zong.png)\n\n注：关系表中有两个数字的表示取两个值都行，不影响实验结果，但为了代码设计的方便，代码中使用的是右边的数值。\n## **设计方法**\n采用模块设计的思想，依次设计InsMEM模块、ControlUnit模块、registerFile模块、Extend模块、ALU模块、DataMEM模块，最后设计CPU总模块，需要注意的是，PC没有独立为一个模块，免去参数传递的麻烦。\n### **InsMEM模块**\n把将要执行的指令my_test_rom.txt加载到储存指令的内存中。根据PC的值返回相应的指令。\n``` verilog\nmodule InsMEM(\n    input [31:0] PC,\n    output reg [31:0] instruction\n    );\n    reg [31:0] mem [0:64];\n\t \n    initial begin\n        $readmemb(\"my_test_rom.txt\", mem);\n    end\n\n    always@(PC) begin\n        instruction <= mem[(PC-4)/4];  // 初始化为4'b0100\n    end\n\t \nendmodule\n```\n### **ControlUnit模块**\n模块设计中，每个operation，比如ADD，对应的变量初始化为0，当需要使用时，改为1；控制信号的变量，比如PCWre，采用|操作符拼接，减少代码量又简洁，这里用到了表3中的值，用到右边的值。\n``` verilog\nmodule ControlUnit(\n    input [5:0] operation,\n    input zero,\n    output PCWre,\n    output ALUSrcB,\n    output ALUM2Reg,\n    output RegWre,\n    output InsMemRW,\n    output DataMemRW,\n    output ExtSel,\n    output PCSrc,\n    output RegOut,\n    output [2:0] ALUOp\n    );\n\t \n\tparameter ADD = 6'b000000, ADDI = 6'b000001, SUB = 6'b000010, ORI = 6'b010000,\n              AND = 6'b010001, OR = 6'b010010, MOVE = 6'b100000, SW = 6'b100110,\n              LW = 6'b100111, BEQ = 6'b110000, HALT = 6'b111111;\n    reg i_add, i_addi, i_sub, i_ori, i_and, i_or, i_move, i_sw, i_lw, i_beq, i_halt;\n\t \n\talways @(operation) begin\n\t \n\t    i_add = 0; i_addi = 0; i_sub = 0; i_ori = 0;\n        i_and = 0; i_or = 0; i_move = 0; i_sw = 0;\n        i_lw = 0; i_beq = 0; i_halt = 0;\n\t\t  \n        case(operation)\n            ADD: i_add = 1;\n            ADDI: i_addi = 1;\n            SUB: i_sub = 1;\n            ORI: i_ori = 1;\n            AND: i_and = 1;\n            OR: i_or = 1;\n            MOVE: i_move = 1;\n            SW: i_sw = 1;\n            LW: i_lw = 1;\n            BEQ: i_beq = 1;\n            HALT: i_halt = 1;\n        endcase\n    end\n\t \n\tassign PCWre = !i_halt;\n    assign ALUSrcB = i_addi || i_ori || i_sw || i_lw;\n    assign ALUM2Reg = i_lw;\n    assign RegWre = !(i_sw || i_beq);\n    assign InsMemRW = 0;    // 无相关\n    assign DataMemRW = i_sw;\n    assign ExtSel = !i_ori;   // 除了ori是0扩展，其他的也可以为符号扩展\n    assign PCSrc = (i_beq && zero); // beq且相减之后值为0!!!!!\n    assign RegOut = !(i_addi || i_ori || i_lw);\n    assign ALUOp = {i_and, i_ori || i_or, i_sub || i_ori || i_or || i_beq};\n\nendmodule\n\n```\n### **registerFile模块**\n申明31个寄存器，0号寄存器一直当做0处理；寄存器的值在这个模块中取出，同时也可以向寄存器写值，由CU控制。\n\n``` verilog\nmodule registerFile(\n    input [4:0] rs, rt, rd,  // 相应的赋值在主模块实现\n    input [31:0] write_data,\n    input RegWre, RegOut, clk,  \n    output [31:0] readData1, readData2\n    );\n    \n\twire [4:0] write_reg;\n\tassign write_reg = (RegOut == 0) ? rt : rd;\n\t \n\treg [31:0] register [1:31];  // 声明r1~r31\n    integer i;\n    initial begin\n        for (i = 0; i < 32; i = i + 1)\n            register[i] = 0;\n    end\n\t \n\t // 0号寄存器值固定为0\n    assign readData1 = (rs == 0)? 0 : register[rs];\n    assign readData2 = (rt == 0)? 0 : register[rt];\n\t \n\talways @(posedge clk) begin\n\t     if ((RegWre == 1) && (write_reg != 0)) begin\n\t\t      register[write_reg] <= write_data;\n\t\t end\n\tend\n\nendmodule\n```\n### **Extend模块**\n本模块比较简单，分为零拓展或符号拓展，16位->32位。\n\n``` verilog\nmodule Extend(\n    input [15:0] imme_16,\n    input ExtSel,\n    output [31:0] imme_32\n    );\n    // 1为符号拓展，0为零拓展\n    assign imme_32 = (ExtSel)? {{16{imme_16[15]}}, imme_16[15:0]} : {{16{1'b0}}, imme_16[15:0]};\n\nendmodule\n```\n### ** ALU模块**\n根据CU发出的控制信号ALUOp的不同，ALU对传进去的值执行不同的操作。\n``` verilog\nmodule ALU(\n    input [31:0] readData1,\n    input [31:0] readData2,\n    input [31:0] imme_32,\n    input ALUSrcB,\n    input [2:0] ALUOp,\n    output wire zero,\n    output reg [31:0] result\n    );\n\t \n\twire [31:0] alub;\n    assign alub = (ALUSrcB == 0) ? readData2 : imme_32;\n\t \n\talways@(readData1 or alub or ALUOp) begin\n        case (ALUOp)\n            3'b000: result <= readData1 + alub;\n            3'b001: result <= readData1 - alub;\n            3'b010: result <= alub - readData1;\n            3'b011: result <= readData1 | alub;\n            3'b100: result <= readData1 & alub;\n            3'b101: result <= ~readData1 & alub;\n            3'b110: result <= (~readData1 & alub) | (readData1 & ~alub);\n            3'b111: result <= (readData1 & alub) | (~readData1 & ~alub);\n        endcase\n    end\n    assign zero = (result == 0) ? 1 : 0;\n\nendmodule\n```\n### **DataMEM模块**\n数据储存在模块中申请的数组当中，并根据控制信号的不同，可以存值也可以取值。\n``` verilog\nmodule DataMEM(\n    input [31:0] result,\n    input [31:0] readData2,\n    input DataMemRW,\n    input ALUM2Reg,\n    output [31:0] write_data\n    );\n\n    reg [31:0] DataMem [0:63];  // 声明内存\n    reg [31:0] DataOut;\n    integer i;\n    initial begin\n        for (i = 0; i < 64; i = i + 1)\n            DataMem[i] = 0;\n    end\n\t \n\t always@(result or DataMemRW) begin\n        if (DataMemRW == 0) // 取字\n            DataOut = DataMem[result];\n        else   // 存字\n            DataMem[result] = readData2;\n    end\n\t assign write_data = (ALUM2Reg == 0) ? result : DataOut;\n\nendmodule\n```\n### **CPU总模块**\n总模块中将各个模块之间的接口连起来，并且将指令拆分为几个部分，传入不同的模块；然后实例化各个模块，需要注意的是，实例化模块时，变量名和顺序一定一定要和小模块申明时相同；此外，总模块中根据具体情况改变PC的值。\n``` verilog\n\nmodule CPU();\n\n    // CU控制信号线\n    wire PCWre;\n    wire ALUSrcB;\n    wire ALUM2Reg;\n    wire RegWre;\n    wire InsMemRW;\n    wire DataMemRW;\n    wire ExtSel;\n    wire PCSrc;\n    wire RegOut;\n    wire [2:0] ALUOp;\n\t \n    // 此模块中需要赋值的变量\n    wire [5:0] operation;\n    wire [4:0] rs;\n    wire [4:0] rt;\n    wire [4:0] rd;\n    wire [15:0] imme_16;\n    reg clk;\n    wire [31:0] result;\n    wire [31:0] write_data;\n\n    // 其他的模块相互传递的线\n    wire [31:0] instruction;\n    reg [31:0] PC;\n    wire [31:0] imme_32;\n    wire [31:0] readData1;\n    wire [31:0] readData2;\n    wire zero;\n\t \n\t // 拆分指令的位\n\t assign operation[5:0] = instruction[31:26];\n    assign rs = instruction[25:21];\n    assign rt = instruction[20:16];\n    assign rd = instruction[15:11];\n    assign imme_16 = instruction[15:0];\n\t \n\t // 初始化  设置时钟周期\n\t initial begin\n        PC = 4'b0100;\n        clk = 0;\n    end\n    always #500\n        clk = ~clk;\n\t \n\t // 实例化各个模块，注意变量名不能拼写错误\n\t InsMEM insmem(PC, instruction);\n\t ControlUnit controlunit(operation, zero, PCWre, ALUSrcB, ALUM2Reg, RegWre, InsMemRW, DataMemRW, ExtSel, PCSrc, RegOut,ALUOp);\n    registerFile registerfile(rs, rt, rd, write_data, RegWre, RegOut, clk, readData1, readData2);\n    Extend extend(imme_16, ExtSel, imme_32);\n\t ALU alu(readData1, readData2, imme_32, ALUSrcB, ALUOp, zero, result);\n\t DataMEM datamem(result, readData2, DataMemRW, ALUM2Reg, write_data);\n\t \n\t // PC的值需要适当更改\n\t always@(posedge clk) begin\n        if  (PCWre == 1)\n            PC <= (PCSrc == 0)? (PC + 4) : (PC + 4 + imme_32 * 4);\n        else \n            PC <= PC;\n    end\n\nendmodule\n\n```\n## **验证方法**\n完善如下表格，将指令写到my_test_rom.txt文件，文件放在project根文件夹，即可仿真验证。\n![](yanzheng.png)\n验证过程复杂繁琐，这里不一一说明。总的来说验证过程就是看每条指令执行之后寄存器以及控制信号的值是否正确，是否符合要求。\n\n经验证，以上代码是没有bug的。如果有任何问题，欢迎指出。","source":"_posts/单周期CPU.md","raw":"---\ntitle: MIPS单周期CPU\ntoc: true\ndate: 2016-07-16 19:12:21\ntags: \n- verilog\n- CPU\n- MIPS\ncategories: 计算机组成原理\n---\n指令是计算机软件和硬件的交界处，高级语言编译链接后生成大量的指令传送到CPU中完成相应的功能。本文介绍的是单周期CPU，即虽然每条指令能拆分成多条微指令，但是每条指令都必须在一个时钟周期内执行完毕。往后会介绍多周期CPU，相应的可能也更复杂一些。\n模拟过程需要Xilinx ISE软件，软件包比较大，而且一般有闪退问题，win10不兼容问题，解决方法百度上都有，不慌。这里提供一个[友情链接](http://blog.sina.com.cn/s/blog_5252f6ca0101je0q.html)。\n友情提示：ise不会提示你变量名拼写错误\n\n<!--more-->\n## **MIPS32指令格式**\n### **R类型**\n![](r.png)\n### **I类型**\n![](i.png)\n### **J类型**\n![](j.png)\n\n其中，\n\n- op：为操作码；\n- rs：为第1个源操作数寄存器，寄存器地址（编号）是00000~11111，00~1F；\n- rt：为第2个源操作数寄存器，或目的操作数寄存器，寄存器地址（同上）；\n- rd：为目的操作数寄存器，寄存器地址（同上）；\n- sa：为位移量（shift amt），移位指令用于指定移多少位；\n- func：为功能码，在寄存器类型指令中（R类型）用来指定指令的功能；\n- immediate：为16位立即数，用作无符号的逻辑操作数、有符号的算术操作数、数据加载（Laod）/数据保存（Store）指令的数据地址字节偏移量和分支指令中相对程序计数器（PC）的有符号偏移量；\n- address：为地址。\n## **单周期CPU能执行的指令**\n### **算术运算指令**\n![](suansu.png)\nreserved为预留部分，即未用，一般填“0”。\n### **逻辑运算指令**\n![](luoji.png)\n### **传送指令**\n![](chuansong.png)\n### **存储器读写指令**\n![](duxie.png)\n### **分支指令**\n![](fenzhi.png)\nimmediate是从PC+4地址开始和转移到的指令之间指令条数。immediate符号扩展之后左移2位再相加。为什么要左移2位？由于跳转到的指令地址肯定是4的倍数（每条指令占4个字节），最低两位是“00”，因此将immediate放进指令码中的时候，是右移了2位的，也就是以上说的“指令之间指令条数”。\n### **停机指令**\n![](tingji.png)\n功能：停机，不改变PC值\n## **设计原理**\n单周期CPU指的是一条指令的执行在一个时钟周期内完成，然后开始下一条指令的执行，即一条指令用一个时钟周期完成。电平从低到高变化的瞬间称为时钟上升沿，两个相邻时钟上升沿之间的时间间隔称为一个时钟周期。时钟周期一般也称振荡周期（如果晶振的输出没有经过分频就直接作为CPU的工作时钟，则时钟周期就等于振荡周期。若振荡周期经二分频后形成时钟脉冲信号作为CPU的工作时钟，这样，时钟周期就是振荡周期的两倍。）\nCPU在处理指令时，一般需要经过以下几个步骤：\n\n+ 取指令(IF)：根据程序计数器PC中的指令地址，从存储器中取出一条指令，同时，PC根据指令字长度自动递增产生下一条指令所需要的指令地址，但遇到“地址转移”指令时，则控制器把“转移地址”送入PC，当然得到的“地址”需要做些变换才送入PC。\n- 指令译码(ID)：对取指令操作中得到的指令进行分析并译码，确定这条指令需要完成的操作，从而产生相应的操作控制信号，用于驱动执行状态中的各种操作。\n- 指令执行(EXE)：根据指令译码得到的操作控制信号，具体地执行指令动作，然后转移到结果写回状态。\n- 存储器访问(MEM)：所有需要访问存储器的操作都将在这个步骤中执行，该步骤给出存储器的数据地址，把数据写入到存储器中数据地址所指定的存储单元或者从存储器中得到数据地址单元中的数据。\n- 结果写回(WB)：指令执行的结果或者访问存储器中得到的数据写回相应的目的寄存器中。\n单周期CPU，是在一个时钟周期内完成这五个阶段的处理。\n![](yuanli.png)\n## **数据通路及其控制**\n### **数据通路**\n接下来需要了解CPU的数据通路及其控制信号，这是重点也是难点。下面这图需要完完全全弄得，理解每条指令执行过程中控制信号相应的值及其执行过程。多看几次也就不觉得很复杂了。\n![](tonglu.png)\n上图是基本上能够在单周期上完成所要求设计的指令功能的数据通路和必要的控制线路图。其中指令和数据各存储在不同存储器中，即有指令存储器和数据存储器。访问存储器时，先给出地址，然后由读/写信号控制（1-写，0-读。当然，也可以由时钟信号控制，但必须在图上标出）。对于寄存器组，读操作时，先给出地址，输出端就直接输出相应数据；而在写操作时，在 WE使能信号为1时，在时钟边沿触发写入\n### **控制信号**\n控制信号的作用说明如下：\n![](xinhao.png)\n\n- Instruction Memory：指令存储器，\n - Iaddr，指令存储器地址输入端口\n - IDataIn，指令存储器数据输入端口（指令代码输入端口）\n - IDataOut，指令存储器数据输出端口（指令代码输出端口）\n - RW，指令存储器读写控制信号，为1写，为0读\n- Data Memory：数据存储器，\n - Daddr，数据存储器地址输入端口\n - DataIn，数据存储器数据输入端口\n - DataOut，数据存储器数据输出端口\n - RW，数据存储器读写控制信号，为1写，为0读\n- Register File：（寄存器组）\n - Read Reg1，rs寄存器地址输入端口\n - Read Reg2，rt寄存器地址输入端口\n - Write Reg，将数据写入的寄存器端口，其地址来源rt或rd字段\n - Write Data，写入寄存器的数据输入端口\n - Read Data1，rs寄存器数据输出端口\n - Read Data2，rt寄存器数据输出端口\n - WE，写使能信号，为1时，在时钟上升沿写入\n\n### **ALU运算功能表**\n![](alu.png)\n\nALU:\n\n- result，ALU运算结果\n- zero，运算结果标志，结果为0输出1，否则输出0\n\n![](zong.png)\n\n注：关系表中有两个数字的表示取两个值都行，不影响实验结果，但为了代码设计的方便，代码中使用的是右边的数值。\n## **设计方法**\n采用模块设计的思想，依次设计InsMEM模块、ControlUnit模块、registerFile模块、Extend模块、ALU模块、DataMEM模块，最后设计CPU总模块，需要注意的是，PC没有独立为一个模块，免去参数传递的麻烦。\n### **InsMEM模块**\n把将要执行的指令my_test_rom.txt加载到储存指令的内存中。根据PC的值返回相应的指令。\n``` verilog\nmodule InsMEM(\n    input [31:0] PC,\n    output reg [31:0] instruction\n    );\n    reg [31:0] mem [0:64];\n\t \n    initial begin\n        $readmemb(\"my_test_rom.txt\", mem);\n    end\n\n    always@(PC) begin\n        instruction <= mem[(PC-4)/4];  // 初始化为4'b0100\n    end\n\t \nendmodule\n```\n### **ControlUnit模块**\n模块设计中，每个operation，比如ADD，对应的变量初始化为0，当需要使用时，改为1；控制信号的变量，比如PCWre，采用|操作符拼接，减少代码量又简洁，这里用到了表3中的值，用到右边的值。\n``` verilog\nmodule ControlUnit(\n    input [5:0] operation,\n    input zero,\n    output PCWre,\n    output ALUSrcB,\n    output ALUM2Reg,\n    output RegWre,\n    output InsMemRW,\n    output DataMemRW,\n    output ExtSel,\n    output PCSrc,\n    output RegOut,\n    output [2:0] ALUOp\n    );\n\t \n\tparameter ADD = 6'b000000, ADDI = 6'b000001, SUB = 6'b000010, ORI = 6'b010000,\n              AND = 6'b010001, OR = 6'b010010, MOVE = 6'b100000, SW = 6'b100110,\n              LW = 6'b100111, BEQ = 6'b110000, HALT = 6'b111111;\n    reg i_add, i_addi, i_sub, i_ori, i_and, i_or, i_move, i_sw, i_lw, i_beq, i_halt;\n\t \n\talways @(operation) begin\n\t \n\t    i_add = 0; i_addi = 0; i_sub = 0; i_ori = 0;\n        i_and = 0; i_or = 0; i_move = 0; i_sw = 0;\n        i_lw = 0; i_beq = 0; i_halt = 0;\n\t\t  \n        case(operation)\n            ADD: i_add = 1;\n            ADDI: i_addi = 1;\n            SUB: i_sub = 1;\n            ORI: i_ori = 1;\n            AND: i_and = 1;\n            OR: i_or = 1;\n            MOVE: i_move = 1;\n            SW: i_sw = 1;\n            LW: i_lw = 1;\n            BEQ: i_beq = 1;\n            HALT: i_halt = 1;\n        endcase\n    end\n\t \n\tassign PCWre = !i_halt;\n    assign ALUSrcB = i_addi || i_ori || i_sw || i_lw;\n    assign ALUM2Reg = i_lw;\n    assign RegWre = !(i_sw || i_beq);\n    assign InsMemRW = 0;    // 无相关\n    assign DataMemRW = i_sw;\n    assign ExtSel = !i_ori;   // 除了ori是0扩展，其他的也可以为符号扩展\n    assign PCSrc = (i_beq && zero); // beq且相减之后值为0!!!!!\n    assign RegOut = !(i_addi || i_ori || i_lw);\n    assign ALUOp = {i_and, i_ori || i_or, i_sub || i_ori || i_or || i_beq};\n\nendmodule\n\n```\n### **registerFile模块**\n申明31个寄存器，0号寄存器一直当做0处理；寄存器的值在这个模块中取出，同时也可以向寄存器写值，由CU控制。\n\n``` verilog\nmodule registerFile(\n    input [4:0] rs, rt, rd,  // 相应的赋值在主模块实现\n    input [31:0] write_data,\n    input RegWre, RegOut, clk,  \n    output [31:0] readData1, readData2\n    );\n    \n\twire [4:0] write_reg;\n\tassign write_reg = (RegOut == 0) ? rt : rd;\n\t \n\treg [31:0] register [1:31];  // 声明r1~r31\n    integer i;\n    initial begin\n        for (i = 0; i < 32; i = i + 1)\n            register[i] = 0;\n    end\n\t \n\t // 0号寄存器值固定为0\n    assign readData1 = (rs == 0)? 0 : register[rs];\n    assign readData2 = (rt == 0)? 0 : register[rt];\n\t \n\talways @(posedge clk) begin\n\t     if ((RegWre == 1) && (write_reg != 0)) begin\n\t\t      register[write_reg] <= write_data;\n\t\t end\n\tend\n\nendmodule\n```\n### **Extend模块**\n本模块比较简单，分为零拓展或符号拓展，16位->32位。\n\n``` verilog\nmodule Extend(\n    input [15:0] imme_16,\n    input ExtSel,\n    output [31:0] imme_32\n    );\n    // 1为符号拓展，0为零拓展\n    assign imme_32 = (ExtSel)? {{16{imme_16[15]}}, imme_16[15:0]} : {{16{1'b0}}, imme_16[15:0]};\n\nendmodule\n```\n### ** ALU模块**\n根据CU发出的控制信号ALUOp的不同，ALU对传进去的值执行不同的操作。\n``` verilog\nmodule ALU(\n    input [31:0] readData1,\n    input [31:0] readData2,\n    input [31:0] imme_32,\n    input ALUSrcB,\n    input [2:0] ALUOp,\n    output wire zero,\n    output reg [31:0] result\n    );\n\t \n\twire [31:0] alub;\n    assign alub = (ALUSrcB == 0) ? readData2 : imme_32;\n\t \n\talways@(readData1 or alub or ALUOp) begin\n        case (ALUOp)\n            3'b000: result <= readData1 + alub;\n            3'b001: result <= readData1 - alub;\n            3'b010: result <= alub - readData1;\n            3'b011: result <= readData1 | alub;\n            3'b100: result <= readData1 & alub;\n            3'b101: result <= ~readData1 & alub;\n            3'b110: result <= (~readData1 & alub) | (readData1 & ~alub);\n            3'b111: result <= (readData1 & alub) | (~readData1 & ~alub);\n        endcase\n    end\n    assign zero = (result == 0) ? 1 : 0;\n\nendmodule\n```\n### **DataMEM模块**\n数据储存在模块中申请的数组当中，并根据控制信号的不同，可以存值也可以取值。\n``` verilog\nmodule DataMEM(\n    input [31:0] result,\n    input [31:0] readData2,\n    input DataMemRW,\n    input ALUM2Reg,\n    output [31:0] write_data\n    );\n\n    reg [31:0] DataMem [0:63];  // 声明内存\n    reg [31:0] DataOut;\n    integer i;\n    initial begin\n        for (i = 0; i < 64; i = i + 1)\n            DataMem[i] = 0;\n    end\n\t \n\t always@(result or DataMemRW) begin\n        if (DataMemRW == 0) // 取字\n            DataOut = DataMem[result];\n        else   // 存字\n            DataMem[result] = readData2;\n    end\n\t assign write_data = (ALUM2Reg == 0) ? result : DataOut;\n\nendmodule\n```\n### **CPU总模块**\n总模块中将各个模块之间的接口连起来，并且将指令拆分为几个部分，传入不同的模块；然后实例化各个模块，需要注意的是，实例化模块时，变量名和顺序一定一定要和小模块申明时相同；此外，总模块中根据具体情况改变PC的值。\n``` verilog\n\nmodule CPU();\n\n    // CU控制信号线\n    wire PCWre;\n    wire ALUSrcB;\n    wire ALUM2Reg;\n    wire RegWre;\n    wire InsMemRW;\n    wire DataMemRW;\n    wire ExtSel;\n    wire PCSrc;\n    wire RegOut;\n    wire [2:0] ALUOp;\n\t \n    // 此模块中需要赋值的变量\n    wire [5:0] operation;\n    wire [4:0] rs;\n    wire [4:0] rt;\n    wire [4:0] rd;\n    wire [15:0] imme_16;\n    reg clk;\n    wire [31:0] result;\n    wire [31:0] write_data;\n\n    // 其他的模块相互传递的线\n    wire [31:0] instruction;\n    reg [31:0] PC;\n    wire [31:0] imme_32;\n    wire [31:0] readData1;\n    wire [31:0] readData2;\n    wire zero;\n\t \n\t // 拆分指令的位\n\t assign operation[5:0] = instruction[31:26];\n    assign rs = instruction[25:21];\n    assign rt = instruction[20:16];\n    assign rd = instruction[15:11];\n    assign imme_16 = instruction[15:0];\n\t \n\t // 初始化  设置时钟周期\n\t initial begin\n        PC = 4'b0100;\n        clk = 0;\n    end\n    always #500\n        clk = ~clk;\n\t \n\t // 实例化各个模块，注意变量名不能拼写错误\n\t InsMEM insmem(PC, instruction);\n\t ControlUnit controlunit(operation, zero, PCWre, ALUSrcB, ALUM2Reg, RegWre, InsMemRW, DataMemRW, ExtSel, PCSrc, RegOut,ALUOp);\n    registerFile registerfile(rs, rt, rd, write_data, RegWre, RegOut, clk, readData1, readData2);\n    Extend extend(imme_16, ExtSel, imme_32);\n\t ALU alu(readData1, readData2, imme_32, ALUSrcB, ALUOp, zero, result);\n\t DataMEM datamem(result, readData2, DataMemRW, ALUM2Reg, write_data);\n\t \n\t // PC的值需要适当更改\n\t always@(posedge clk) begin\n        if  (PCWre == 1)\n            PC <= (PCSrc == 0)? (PC + 4) : (PC + 4 + imme_32 * 4);\n        else \n            PC <= PC;\n    end\n\nendmodule\n\n```\n## **验证方法**\n完善如下表格，将指令写到my_test_rom.txt文件，文件放在project根文件夹，即可仿真验证。\n![](yanzheng.png)\n验证过程复杂繁琐，这里不一一说明。总的来说验证过程就是看每条指令执行之后寄存器以及控制信号的值是否正确，是否符合要求。\n\n经验证，以上代码是没有bug的。如果有任何问题，欢迎指出。","slug":"单周期CPU","published":1,"updated":"2016-07-16T12:10:20.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzlz000hgobkcd2yzcf0","content":"<p>指令是计算机软件和硬件的交界处，高级语言编译链接后生成大量的指令传送到CPU中完成相应的功能。本文介绍的是单周期CPU，即虽然每条指令能拆分成多条微指令，但是每条指令都必须在一个时钟周期内执行完毕。往后会介绍多周期CPU，相应的可能也更复杂一些。<br>模拟过程需要Xilinx ISE软件，软件包比较大，而且一般有闪退问题，win10不兼容问题，解决方法百度上都有，不慌。这里提供一个<a href=\"http://blog.sina.com.cn/s/blog_5252f6ca0101je0q.html\" target=\"_blank\" rel=\"external\">友情链接</a>。<br>友情提示：ise不会提示你变量名拼写错误</p>\n<a id=\"more\"></a>\n<h2 id=\"MIPS32指令格式\"><a href=\"#MIPS32指令格式\" class=\"headerlink\" title=\"MIPS32指令格式\"></a><strong>MIPS32指令格式</strong></h2><h3 id=\"R类型\"><a href=\"#R类型\" class=\"headerlink\" title=\"R类型\"></a><strong>R类型</strong></h3><p><img src=\"r.png\" alt=\"\"></p>\n<h3 id=\"I类型\"><a href=\"#I类型\" class=\"headerlink\" title=\"I类型\"></a><strong>I类型</strong></h3><p><img src=\"i.png\" alt=\"\"></p>\n<h3 id=\"J类型\"><a href=\"#J类型\" class=\"headerlink\" title=\"J类型\"></a><strong>J类型</strong></h3><p><img src=\"j.png\" alt=\"\"></p>\n<p>其中，</p>\n<ul>\n<li>op：为操作码；</li>\n<li>rs：为第1个源操作数寄存器，寄存器地址（编号）是00000~11111，00~1F；</li>\n<li>rt：为第2个源操作数寄存器，或目的操作数寄存器，寄存器地址（同上）；</li>\n<li>rd：为目的操作数寄存器，寄存器地址（同上）；</li>\n<li>sa：为位移量（shift amt），移位指令用于指定移多少位；</li>\n<li>func：为功能码，在寄存器类型指令中（R类型）用来指定指令的功能；</li>\n<li>immediate：为16位立即数，用作无符号的逻辑操作数、有符号的算术操作数、数据加载（Laod）/数据保存（Store）指令的数据地址字节偏移量和分支指令中相对程序计数器（PC）的有符号偏移量；</li>\n<li>address：为地址。<h2 id=\"单周期CPU能执行的指令\"><a href=\"#单周期CPU能执行的指令\" class=\"headerlink\" title=\"单周期CPU能执行的指令\"></a><strong>单周期CPU能执行的指令</strong></h2><h3 id=\"算术运算指令\"><a href=\"#算术运算指令\" class=\"headerlink\" title=\"算术运算指令\"></a><strong>算术运算指令</strong></h3><img src=\"suansu.png\" alt=\"\"><br>reserved为预留部分，即未用，一般填“0”。<h3 id=\"逻辑运算指令\"><a href=\"#逻辑运算指令\" class=\"headerlink\" title=\"逻辑运算指令\"></a><strong>逻辑运算指令</strong></h3><img src=\"luoji.png\" alt=\"\"><h3 id=\"传送指令\"><a href=\"#传送指令\" class=\"headerlink\" title=\"传送指令\"></a><strong>传送指令</strong></h3><img src=\"chuansong.png\" alt=\"\"><h3 id=\"存储器读写指令\"><a href=\"#存储器读写指令\" class=\"headerlink\" title=\"存储器读写指令\"></a><strong>存储器读写指令</strong></h3><img src=\"duxie.png\" alt=\"\"><h3 id=\"分支指令\"><a href=\"#分支指令\" class=\"headerlink\" title=\"分支指令\"></a><strong>分支指令</strong></h3><img src=\"fenzhi.png\" alt=\"\"><br>immediate是从PC+4地址开始和转移到的指令之间指令条数。immediate符号扩展之后左移2位再相加。为什么要左移2位？由于跳转到的指令地址肯定是4的倍数（每条指令占4个字节），最低两位是“00”，因此将immediate放进指令码中的时候，是右移了2位的，也就是以上说的“指令之间指令条数”。<h3 id=\"停机指令\"><a href=\"#停机指令\" class=\"headerlink\" title=\"停机指令\"></a><strong>停机指令</strong></h3><img src=\"tingji.png\" alt=\"\"><br>功能：停机，不改变PC值<h2 id=\"设计原理\"><a href=\"#设计原理\" class=\"headerlink\" title=\"设计原理\"></a><strong>设计原理</strong></h2>单周期CPU指的是一条指令的执行在一个时钟周期内完成，然后开始下一条指令的执行，即一条指令用一个时钟周期完成。电平从低到高变化的瞬间称为时钟上升沿，两个相邻时钟上升沿之间的时间间隔称为一个时钟周期。时钟周期一般也称振荡周期（如果晶振的输出没有经过分频就直接作为CPU的工作时钟，则时钟周期就等于振荡周期。若振荡周期经二分频后形成时钟脉冲信号作为CPU的工作时钟，这样，时钟周期就是振荡周期的两倍。）<br>CPU在处理指令时，一般需要经过以下几个步骤：</li>\n</ul>\n<ul>\n<li>取指令(IF)：根据程序计数器PC中的指令地址，从存储器中取出一条指令，同时，PC根据指令字长度自动递增产生下一条指令所需要的指令地址，但遇到“地址转移”指令时，则控制器把“转移地址”送入PC，当然得到的“地址”需要做些变换才送入PC。</li>\n</ul>\n<ul>\n<li>指令译码(ID)：对取指令操作中得到的指令进行分析并译码，确定这条指令需要完成的操作，从而产生相应的操作控制信号，用于驱动执行状态中的各种操作。</li>\n<li>指令执行(EXE)：根据指令译码得到的操作控制信号，具体地执行指令动作，然后转移到结果写回状态。</li>\n<li>存储器访问(MEM)：所有需要访问存储器的操作都将在这个步骤中执行，该步骤给出存储器的数据地址，把数据写入到存储器中数据地址所指定的存储单元或者从存储器中得到数据地址单元中的数据。</li>\n<li><p>结果写回(WB)：指令执行的结果或者访问存储器中得到的数据写回相应的目的寄存器中。<br>单周期CPU，是在一个时钟周期内完成这五个阶段的处理。<br><img src=\"yuanli.png\" alt=\"\"></p>\n<h2 id=\"数据通路及其控制\"><a href=\"#数据通路及其控制\" class=\"headerlink\" title=\"数据通路及其控制\"></a><strong>数据通路及其控制</strong></h2><h3 id=\"数据通路\"><a href=\"#数据通路\" class=\"headerlink\" title=\"数据通路\"></a><strong>数据通路</strong></h3><p>接下来需要了解CPU的数据通路及其控制信号，这是重点也是难点。下面这图需要完完全全弄得，理解每条指令执行过程中控制信号相应的值及其执行过程。多看几次也就不觉得很复杂了。<br><img src=\"tonglu.png\" alt=\"\"><br>上图是基本上能够在单周期上完成所要求设计的指令功能的数据通路和必要的控制线路图。其中指令和数据各存储在不同存储器中，即有指令存储器和数据存储器。访问存储器时，先给出地址，然后由读/写信号控制（1-写，0-读。当然，也可以由时钟信号控制，但必须在图上标出）。对于寄存器组，读操作时，先给出地址，输出端就直接输出相应数据；而在写操作时，在 WE使能信号为1时，在时钟边沿触发写入</p>\n<h3 id=\"控制信号\"><a href=\"#控制信号\" class=\"headerlink\" title=\"控制信号\"></a><strong>控制信号</strong></h3><p>控制信号的作用说明如下：<br><img src=\"xinhao.png\" alt=\"\"></p>\n</li>\n<li><p>Instruction Memory：指令存储器，</p>\n<ul>\n<li>Iaddr，指令存储器地址输入端口</li>\n<li>IDataIn，指令存储器数据输入端口（指令代码输入端口）</li>\n<li>IDataOut，指令存储器数据输出端口（指令代码输出端口）</li>\n<li>RW，指令存储器读写控制信号，为1写，为0读</li>\n</ul>\n</li>\n<li>Data Memory：数据存储器，<ul>\n<li>Daddr，数据存储器地址输入端口</li>\n<li>DataIn，数据存储器数据输入端口</li>\n<li>DataOut，数据存储器数据输出端口</li>\n<li>RW，数据存储器读写控制信号，为1写，为0读</li>\n</ul>\n</li>\n<li>Register File：（寄存器组）<ul>\n<li>Read Reg1，rs寄存器地址输入端口</li>\n<li>Read Reg2，rt寄存器地址输入端口</li>\n<li>Write Reg，将数据写入的寄存器端口，其地址来源rt或rd字段</li>\n<li>Write Data，写入寄存器的数据输入端口</li>\n<li>Read Data1，rs寄存器数据输出端口</li>\n<li>Read Data2，rt寄存器数据输出端口</li>\n<li>WE，写使能信号，为1时，在时钟上升沿写入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ALU运算功能表\"><a href=\"#ALU运算功能表\" class=\"headerlink\" title=\"ALU运算功能表\"></a><strong>ALU运算功能表</strong></h3><p><img src=\"alu.png\" alt=\"\"></p>\n<p>ALU:</p>\n<ul>\n<li>result，ALU运算结果</li>\n<li>zero，运算结果标志，结果为0输出1，否则输出0</li>\n</ul>\n<p><img src=\"zong.png\" alt=\"\"></p>\n<p>注：关系表中有两个数字的表示取两个值都行，不影响实验结果，但为了代码设计的方便，代码中使用的是右边的数值。</p>\n<h2 id=\"设计方法\"><a href=\"#设计方法\" class=\"headerlink\" title=\"设计方法\"></a><strong>设计方法</strong></h2><p>采用模块设计的思想，依次设计InsMEM模块、ControlUnit模块、registerFile模块、Extend模块、ALU模块、DataMEM模块，最后设计CPU总模块，需要注意的是，PC没有独立为一个模块，免去参数传递的麻烦。</p>\n<h3 id=\"InsMEM模块\"><a href=\"#InsMEM模块\" class=\"headerlink\" title=\"InsMEM模块\"></a><strong>InsMEM模块</strong></h3><p>把将要执行的指令my_test_rom.txt加载到储存指令的内存中。根据PC的值返回相应的指令。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> InsMEM(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] mem [<span class=\"number\">0</span>:<span class=\"number\">64</span>];</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"built_in\">$readmemb</span>(<span class=\"string\">\"my_test_rom.txt\"</span>, mem);</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">always</span>@(PC) <span class=\"keyword\">begin</span></div><div class=\"line\">        instruction &lt;= mem[(PC-<span class=\"number\">4</span>)/<span class=\"number\">4</span>];  <span class=\"comment\">// 初始化为4'b0100</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ControlUnit模块\"><a href=\"#ControlUnit模块\" class=\"headerlink\" title=\"ControlUnit模块\"></a><strong>ControlUnit模块</strong></h3><p>模块设计中，每个operation，比如ADD，对应的变量初始化为0，当需要使用时，改为1；控制信号的变量，比如PCWre，采用|操作符拼接，减少代码量又简洁，这里用到了表3中的值，用到右边的值。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> ControlUnit(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">5</span>:<span class=\"number\">0</span>] operation,</div><div class=\"line\">    <span class=\"keyword\">input</span> zero,</div><div class=\"line\">    <span class=\"keyword\">output</span> PCWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> ALUSrcB,</div><div class=\"line\">    <span class=\"keyword\">output</span> ALUM2Reg,</div><div class=\"line\">    <span class=\"keyword\">output</span> RegWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> InsMemRW,</div><div class=\"line\">    <span class=\"keyword\">output</span> DataMemRW,</div><div class=\"line\">    <span class=\"keyword\">output</span> ExtSel,</div><div class=\"line\">    <span class=\"keyword\">output</span> PCSrc,</div><div class=\"line\">    <span class=\"keyword\">output</span> RegOut,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp</div><div class=\"line\">    );</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">parameter</span> ADD = <span class=\"number\">6'b000000</span>, ADDI = <span class=\"number\">6'b000001</span>, SUB = <span class=\"number\">6'b000010</span>, ORI = <span class=\"number\">6'b010000</span>,</div><div class=\"line\">              AND = <span class=\"number\">6'b010001</span>, OR = <span class=\"number\">6'b010010</span>, MOVE = <span class=\"number\">6'b100000</span>, SW = <span class=\"number\">6'b100110</span>,</div><div class=\"line\">              LW = <span class=\"number\">6'b100111</span>, BEQ = <span class=\"number\">6'b110000</span>, HALT = <span class=\"number\">6'b111111</span>;</div><div class=\"line\">    <span class=\"keyword\">reg</span> i_add, i_addi, i_sub, i_ori, i_and, i_or, i_move, i_sw, i_lw, i_beq, i_halt;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">always</span> @(operation) <span class=\"keyword\">begin</span></div><div class=\"line\">\t </div><div class=\"line\">\t    i_add = <span class=\"number\">0</span>; i_addi = <span class=\"number\">0</span>; i_sub = <span class=\"number\">0</span>; i_ori = <span class=\"number\">0</span>;</div><div class=\"line\">        i_and = <span class=\"number\">0</span>; i_or = <span class=\"number\">0</span>; i_move = <span class=\"number\">0</span>; i_sw = <span class=\"number\">0</span>;</div><div class=\"line\">        i_lw = <span class=\"number\">0</span>; i_beq = <span class=\"number\">0</span>; i_halt = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  </div><div class=\"line\">        <span class=\"keyword\">case</span>(operation)</div><div class=\"line\">            ADD: i_add = <span class=\"number\">1</span>;</div><div class=\"line\">            ADDI: i_addi = <span class=\"number\">1</span>;</div><div class=\"line\">            SUB: i_sub = <span class=\"number\">1</span>;</div><div class=\"line\">            ORI: i_ori = <span class=\"number\">1</span>;</div><div class=\"line\">            AND: i_and = <span class=\"number\">1</span>;</div><div class=\"line\">            OR: i_or = <span class=\"number\">1</span>;</div><div class=\"line\">            MOVE: i_move = <span class=\"number\">1</span>;</div><div class=\"line\">            SW: i_sw = <span class=\"number\">1</span>;</div><div class=\"line\">            LW: i_lw = <span class=\"number\">1</span>;</div><div class=\"line\">            BEQ: i_beq = <span class=\"number\">1</span>;</div><div class=\"line\">            HALT: i_halt = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">endcase</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">assign</span> PCWre = !i_halt;</div><div class=\"line\">    <span class=\"keyword\">assign</span> ALUSrcB = i_addi || i_ori || i_sw || i_lw;</div><div class=\"line\">    <span class=\"keyword\">assign</span> ALUM2Reg = i_lw;</div><div class=\"line\">    <span class=\"keyword\">assign</span> RegWre = !(i_sw || i_beq);</div><div class=\"line\">    <span class=\"keyword\">assign</span> InsMemRW = <span class=\"number\">0</span>;    <span class=\"comment\">// 无相关</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> DataMemRW = i_sw;</div><div class=\"line\">    <span class=\"keyword\">assign</span> ExtSel = !i_ori;   <span class=\"comment\">// 除了ori是0扩展，其他的也可以为符号扩展</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> PCSrc = (i_beq &amp;&amp; zero); <span class=\"comment\">// beq且相减之后值为0!!!!!</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> RegOut = !(i_addi || i_ori || i_lw);</div><div class=\"line\">    <span class=\"keyword\">assign</span> ALUOp = &#123;i_and, i_ori || i_or, i_sub || i_ori || i_or || i_beq&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"registerFile模块\"><a href=\"#registerFile模块\" class=\"headerlink\" title=\"registerFile模块\"></a><strong>registerFile模块</strong></h3><p>申明31个寄存器，0号寄存器一直当做0处理；寄存器的值在这个模块中取出，同时也可以向寄存器写值，由CU控制。</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> registerFile(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rs, rt, rd,  <span class=\"comment\">// 相应的赋值在主模块实现</span></div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data,</div><div class=\"line\">    <span class=\"keyword\">input</span> RegWre, RegOut, clk,  </div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1, readData2</div><div class=\"line\">    );</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] write_reg;</div><div class=\"line\">\t<span class=\"keyword\">assign</span> write_reg = (RegOut == <span class=\"number\">0</span>) ? rt : rd;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] register [<span class=\"number\">1</span>:<span class=\"number\">31</span>];  <span class=\"comment\">// 声明r1~r31</span></div><div class=\"line\">    <span class=\"keyword\">integer</span> i;</div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i = i + <span class=\"number\">1</span>)</div><div class=\"line\">            register[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 0号寄存器值固定为0</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> readData1 = (rs == <span class=\"number\">0</span>)? <span class=\"number\">0</span> : register[rs];</div><div class=\"line\">    <span class=\"keyword\">assign</span> readData2 = (rt == <span class=\"number\">0</span>)? <span class=\"number\">0</span> : register[rt];</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">if</span> ((RegWre == <span class=\"number\">1</span>) &amp;&amp; (write_reg != <span class=\"number\">0</span>)) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t      register[write_reg] &lt;= write_data;</div><div class=\"line\">\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t<span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure>\n<h3 id=\"Extend模块\"><a href=\"#Extend模块\" class=\"headerlink\" title=\"Extend模块\"></a><strong>Extend模块</strong></h3><p>本模块比较简单，分为零拓展或符号拓展，16位-&gt;32位。</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> Extend(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] imme_16,</div><div class=\"line\">    <span class=\"keyword\">input</span> ExtSel,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"comment\">// 1为符号拓展，0为零拓展</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> imme_32 = (ExtSel)? &#123;&#123;<span class=\"number\">16</span>&#123;imme_16[<span class=\"number\">15</span>]&#125;&#125;, imme_16[<span class=\"number\">15</span>:<span class=\"number\">0</span>]&#125; : &#123;&#123;<span class=\"number\">16</span>&#123;<span class=\"number\">1'b0</span>&#125;&#125;, imme_16[<span class=\"number\">15</span>:<span class=\"number\">0</span>]&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure>\n<h3 id=\"ALU模块\"><a href=\"#ALU模块\" class=\"headerlink\" title=\" ALU模块\"></a><strong> ALU模块</strong></h3><p>根据CU发出的控制信号ALUOp的不同，ALU对传进去的值执行不同的操作。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> ALU(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32,</div><div class=\"line\">    <span class=\"keyword\">input</span> ALUSrcB,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">wire</span> zero,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result</div><div class=\"line\">    );</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] alub;</div><div class=\"line\">    <span class=\"keyword\">assign</span> alub = (ALUSrcB == <span class=\"number\">0</span>) ? readData2 : imme_32;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">always</span>@(readData1 <span class=\"keyword\">or</span> alub <span class=\"keyword\">or</span> ALUOp) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">case</span> (ALUOp)</div><div class=\"line\">            <span class=\"number\">3'b000</span>: result &lt;= readData1 + alub;</div><div class=\"line\">            <span class=\"number\">3'b001</span>: result &lt;= readData1 - alub;</div><div class=\"line\">            <span class=\"number\">3'b010</span>: result &lt;= alub - readData1;</div><div class=\"line\">            <span class=\"number\">3'b011</span>: result &lt;= readData1 | alub;</div><div class=\"line\">            <span class=\"number\">3'b100</span>: result &lt;= readData1 &amp; alub;</div><div class=\"line\">            <span class=\"number\">3'b101</span>: result &lt;= ~readData1 &amp; alub;</div><div class=\"line\">            <span class=\"number\">3'b110</span>: result &lt;= (~readData1 &amp; alub) | (readData1 &amp; ~alub);</div><div class=\"line\">            <span class=\"number\">3'b111</span>: result &lt;= (readData1 &amp; alub) | (~readData1 &amp; ~alub);</div><div class=\"line\">        <span class=\"keyword\">endcase</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> zero = (result == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"DataMEM模块\"><a href=\"#DataMEM模块\" class=\"headerlink\" title=\"DataMEM模块\"></a><strong>DataMEM模块</strong></h3><p>数据储存在模块中申请的数组当中，并根据控制信号的不同，可以存值也可以取值。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> DataMEM(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2,</div><div class=\"line\">    <span class=\"keyword\">input</span> DataMemRW,</div><div class=\"line\">    <span class=\"keyword\">input</span> ALUM2Reg,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataMem [<span class=\"number\">0</span>:<span class=\"number\">63</span>];  <span class=\"comment\">// 声明内存</span></div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataOut;</div><div class=\"line\">    <span class=\"keyword\">integer</span> i;</div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i = i + <span class=\"number\">1</span>)</div><div class=\"line\">            DataMem[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span>@(result <span class=\"keyword\">or</span> DataMemRW) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (DataMemRW == <span class=\"number\">0</span>) <span class=\"comment\">// 取字</span></div><div class=\"line\">            DataOut = DataMem[result];</div><div class=\"line\">        <span class=\"keyword\">else</span>   <span class=\"comment\">// 存字</span></div><div class=\"line\">            DataMem[result] = readData2;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t <span class=\"keyword\">assign</span> write_data = (ALUM2Reg == <span class=\"number\">0</span>) ? result : DataOut;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"CPU总模块\"><a href=\"#CPU总模块\" class=\"headerlink\" title=\"CPU总模块\"></a><strong>CPU总模块</strong></h3><p>总模块中将各个模块之间的接口连起来，并且将指令拆分为几个部分，传入不同的模块；然后实例化各个模块，需要注意的是，实例化模块时，变量名和顺序一定一定要和小模块申明时相同；此外，总模块中根据具体情况改变PC的值。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">module</span> CPU();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// CU控制信号线</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> PCWre;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ALUSrcB;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ALUM2Reg;</div><div class=\"line\">    <span class=\"keyword\">wire</span> RegWre;</div><div class=\"line\">    <span class=\"keyword\">wire</span> InsMemRW;</div><div class=\"line\">    <span class=\"keyword\">wire</span> DataMemRW;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ExtSel;</div><div class=\"line\">    <span class=\"keyword\">wire</span> PCSrc;</div><div class=\"line\">    <span class=\"keyword\">wire</span> RegOut;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp;</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"comment\">// 此模块中需要赋值的变量</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">5</span>:<span class=\"number\">0</span>] operation;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rs;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rt;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rd;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] imme_16;</div><div class=\"line\">    <span class=\"keyword\">reg</span> clk;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 其他的模块相互传递的线</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction;</div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2;</div><div class=\"line\">    <span class=\"keyword\">wire</span> zero;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 拆分指令的位</span></div><div class=\"line\">\t <span class=\"keyword\">assign</span> operation[<span class=\"number\">5</span>:<span class=\"number\">0</span>] = instruction[<span class=\"number\">31</span>:<span class=\"number\">26</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rs = instruction[<span class=\"number\">25</span>:<span class=\"number\">21</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rt = instruction[<span class=\"number\">20</span>:<span class=\"number\">16</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rd = instruction[<span class=\"number\">15</span>:<span class=\"number\">11</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> imme_16 = instruction[<span class=\"number\">15</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 初始化  设置时钟周期</span></div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        PC = <span class=\"number\">4'b0100</span>;</div><div class=\"line\">        clk = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">always</span> #<span class=\"number\">500</span></div><div class=\"line\">        clk = ~clk;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 实例化各个模块，注意变量名不能拼写错误</span></div><div class=\"line\">\t InsMEM insmem(PC, instruction);</div><div class=\"line\">\t ControlUnit controlunit(operation, zero, PCWre, ALUSrcB, ALUM2Reg, RegWre, InsMemRW, DataMemRW, ExtSel, PCSrc, RegOut,ALUOp);</div><div class=\"line\">    registerFile registerfile(rs, rt, rd, write_data, RegWre, RegOut, clk, readData1, readData2);</div><div class=\"line\">    Extend extend(imme_16, ExtSel, imme_32);</div><div class=\"line\">\t ALU alu(readData1, readData2, imme_32, ALUSrcB, ALUOp, zero, result);</div><div class=\"line\">\t DataMEM datamem(result, readData2, DataMemRW, ALUM2Reg, write_data);</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// PC的值需要适当更改</span></div><div class=\"line\">\t <span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">if</span>  (PCWre == <span class=\"number\">1</span>)</div><div class=\"line\">            PC &lt;= (PCSrc == <span class=\"number\">0</span>)? (PC + <span class=\"number\">4</span>) : (PC + <span class=\"number\">4</span> + imme_32 * <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">            PC &lt;= PC;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"验证方法\"><a href=\"#验证方法\" class=\"headerlink\" title=\"验证方法\"></a><strong>验证方法</strong></h2><p>完善如下表格，将指令写到my_test_rom.txt文件，文件放在project根文件夹，即可仿真验证。<br><img src=\"yanzheng.png\" alt=\"\"><br>验证过程复杂繁琐，这里不一一说明。总的来说验证过程就是看每条指令执行之后寄存器以及控制信号的值是否正确，是否符合要求。</p>\n<p>经验证，以上代码是没有bug的。如果有任何问题，欢迎指出。</p>\n","excerpt":"<p>指令是计算机软件和硬件的交界处，高级语言编译链接后生成大量的指令传送到CPU中完成相应的功能。本文介绍的是单周期CPU，即虽然每条指令能拆分成多条微指令，但是每条指令都必须在一个时钟周期内执行完毕。往后会介绍多周期CPU，相应的可能也更复杂一些。<br>模拟过程需要Xilinx ISE软件，软件包比较大，而且一般有闪退问题，win10不兼容问题，解决方法百度上都有，不慌。这里提供一个<a href=\"http://blog.sina.com.cn/s/blog_5252f6ca0101je0q.html\">友情链接</a>。<br>友情提示：ise不会提示你变量名拼写错误</p>","more":"<h2 id=\"MIPS32指令格式\"><a href=\"#MIPS32指令格式\" class=\"headerlink\" title=\"MIPS32指令格式\"></a><strong>MIPS32指令格式</strong></h2><h3 id=\"R类型\"><a href=\"#R类型\" class=\"headerlink\" title=\"R类型\"></a><strong>R类型</strong></h3><p><img src=\"r.png\" alt=\"\"></p>\n<h3 id=\"I类型\"><a href=\"#I类型\" class=\"headerlink\" title=\"I类型\"></a><strong>I类型</strong></h3><p><img src=\"i.png\" alt=\"\"></p>\n<h3 id=\"J类型\"><a href=\"#J类型\" class=\"headerlink\" title=\"J类型\"></a><strong>J类型</strong></h3><p><img src=\"j.png\" alt=\"\"></p>\n<p>其中，</p>\n<ul>\n<li>op：为操作码；</li>\n<li>rs：为第1个源操作数寄存器，寄存器地址（编号）是00000~11111，00~1F；</li>\n<li>rt：为第2个源操作数寄存器，或目的操作数寄存器，寄存器地址（同上）；</li>\n<li>rd：为目的操作数寄存器，寄存器地址（同上）；</li>\n<li>sa：为位移量（shift amt），移位指令用于指定移多少位；</li>\n<li>func：为功能码，在寄存器类型指令中（R类型）用来指定指令的功能；</li>\n<li>immediate：为16位立即数，用作无符号的逻辑操作数、有符号的算术操作数、数据加载（Laod）/数据保存（Store）指令的数据地址字节偏移量和分支指令中相对程序计数器（PC）的有符号偏移量；</li>\n<li>address：为地址。<h2 id=\"单周期CPU能执行的指令\"><a href=\"#单周期CPU能执行的指令\" class=\"headerlink\" title=\"单周期CPU能执行的指令\"></a><strong>单周期CPU能执行的指令</strong></h2><h3 id=\"算术运算指令\"><a href=\"#算术运算指令\" class=\"headerlink\" title=\"算术运算指令\"></a><strong>算术运算指令</strong></h3><img src=\"suansu.png\" alt=\"\"><br>reserved为预留部分，即未用，一般填“0”。<h3 id=\"逻辑运算指令\"><a href=\"#逻辑运算指令\" class=\"headerlink\" title=\"逻辑运算指令\"></a><strong>逻辑运算指令</strong></h3><img src=\"luoji.png\" alt=\"\"><h3 id=\"传送指令\"><a href=\"#传送指令\" class=\"headerlink\" title=\"传送指令\"></a><strong>传送指令</strong></h3><img src=\"chuansong.png\" alt=\"\"><h3 id=\"存储器读写指令\"><a href=\"#存储器读写指令\" class=\"headerlink\" title=\"存储器读写指令\"></a><strong>存储器读写指令</strong></h3><img src=\"duxie.png\" alt=\"\"><h3 id=\"分支指令\"><a href=\"#分支指令\" class=\"headerlink\" title=\"分支指令\"></a><strong>分支指令</strong></h3><img src=\"fenzhi.png\" alt=\"\"><br>immediate是从PC+4地址开始和转移到的指令之间指令条数。immediate符号扩展之后左移2位再相加。为什么要左移2位？由于跳转到的指令地址肯定是4的倍数（每条指令占4个字节），最低两位是“00”，因此将immediate放进指令码中的时候，是右移了2位的，也就是以上说的“指令之间指令条数”。<h3 id=\"停机指令\"><a href=\"#停机指令\" class=\"headerlink\" title=\"停机指令\"></a><strong>停机指令</strong></h3><img src=\"tingji.png\" alt=\"\"><br>功能：停机，不改变PC值<h2 id=\"设计原理\"><a href=\"#设计原理\" class=\"headerlink\" title=\"设计原理\"></a><strong>设计原理</strong></h2>单周期CPU指的是一条指令的执行在一个时钟周期内完成，然后开始下一条指令的执行，即一条指令用一个时钟周期完成。电平从低到高变化的瞬间称为时钟上升沿，两个相邻时钟上升沿之间的时间间隔称为一个时钟周期。时钟周期一般也称振荡周期（如果晶振的输出没有经过分频就直接作为CPU的工作时钟，则时钟周期就等于振荡周期。若振荡周期经二分频后形成时钟脉冲信号作为CPU的工作时钟，这样，时钟周期就是振荡周期的两倍。）<br>CPU在处理指令时，一般需要经过以下几个步骤：</li>\n</ul>\n<ul>\n<li>取指令(IF)：根据程序计数器PC中的指令地址，从存储器中取出一条指令，同时，PC根据指令字长度自动递增产生下一条指令所需要的指令地址，但遇到“地址转移”指令时，则控制器把“转移地址”送入PC，当然得到的“地址”需要做些变换才送入PC。</li>\n</ul>\n<ul>\n<li>指令译码(ID)：对取指令操作中得到的指令进行分析并译码，确定这条指令需要完成的操作，从而产生相应的操作控制信号，用于驱动执行状态中的各种操作。</li>\n<li>指令执行(EXE)：根据指令译码得到的操作控制信号，具体地执行指令动作，然后转移到结果写回状态。</li>\n<li>存储器访问(MEM)：所有需要访问存储器的操作都将在这个步骤中执行，该步骤给出存储器的数据地址，把数据写入到存储器中数据地址所指定的存储单元或者从存储器中得到数据地址单元中的数据。</li>\n<li><p>结果写回(WB)：指令执行的结果或者访问存储器中得到的数据写回相应的目的寄存器中。<br>单周期CPU，是在一个时钟周期内完成这五个阶段的处理。<br><img src=\"yuanli.png\" alt=\"\"></p>\n<h2 id=\"数据通路及其控制\"><a href=\"#数据通路及其控制\" class=\"headerlink\" title=\"数据通路及其控制\"></a><strong>数据通路及其控制</strong></h2><h3 id=\"数据通路\"><a href=\"#数据通路\" class=\"headerlink\" title=\"数据通路\"></a><strong>数据通路</strong></h3><p>接下来需要了解CPU的数据通路及其控制信号，这是重点也是难点。下面这图需要完完全全弄得，理解每条指令执行过程中控制信号相应的值及其执行过程。多看几次也就不觉得很复杂了。<br><img src=\"tonglu.png\" alt=\"\"><br>上图是基本上能够在单周期上完成所要求设计的指令功能的数据通路和必要的控制线路图。其中指令和数据各存储在不同存储器中，即有指令存储器和数据存储器。访问存储器时，先给出地址，然后由读/写信号控制（1-写，0-读。当然，也可以由时钟信号控制，但必须在图上标出）。对于寄存器组，读操作时，先给出地址，输出端就直接输出相应数据；而在写操作时，在 WE使能信号为1时，在时钟边沿触发写入</p>\n<h3 id=\"控制信号\"><a href=\"#控制信号\" class=\"headerlink\" title=\"控制信号\"></a><strong>控制信号</strong></h3><p>控制信号的作用说明如下：<br><img src=\"xinhao.png\" alt=\"\"></p>\n</li>\n<li><p>Instruction Memory：指令存储器，</p>\n<ul>\n<li>Iaddr，指令存储器地址输入端口</li>\n<li>IDataIn，指令存储器数据输入端口（指令代码输入端口）</li>\n<li>IDataOut，指令存储器数据输出端口（指令代码输出端口）</li>\n<li>RW，指令存储器读写控制信号，为1写，为0读</li>\n</ul>\n</li>\n<li>Data Memory：数据存储器，<ul>\n<li>Daddr，数据存储器地址输入端口</li>\n<li>DataIn，数据存储器数据输入端口</li>\n<li>DataOut，数据存储器数据输出端口</li>\n<li>RW，数据存储器读写控制信号，为1写，为0读</li>\n</ul>\n</li>\n<li>Register File：（寄存器组）<ul>\n<li>Read Reg1，rs寄存器地址输入端口</li>\n<li>Read Reg2，rt寄存器地址输入端口</li>\n<li>Write Reg，将数据写入的寄存器端口，其地址来源rt或rd字段</li>\n<li>Write Data，写入寄存器的数据输入端口</li>\n<li>Read Data1，rs寄存器数据输出端口</li>\n<li>Read Data2，rt寄存器数据输出端口</li>\n<li>WE，写使能信号，为1时，在时钟上升沿写入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ALU运算功能表\"><a href=\"#ALU运算功能表\" class=\"headerlink\" title=\"ALU运算功能表\"></a><strong>ALU运算功能表</strong></h3><p><img src=\"alu.png\" alt=\"\"></p>\n<p>ALU:</p>\n<ul>\n<li>result，ALU运算结果</li>\n<li>zero，运算结果标志，结果为0输出1，否则输出0</li>\n</ul>\n<p><img src=\"zong.png\" alt=\"\"></p>\n<p>注：关系表中有两个数字的表示取两个值都行，不影响实验结果，但为了代码设计的方便，代码中使用的是右边的数值。</p>\n<h2 id=\"设计方法\"><a href=\"#设计方法\" class=\"headerlink\" title=\"设计方法\"></a><strong>设计方法</strong></h2><p>采用模块设计的思想，依次设计InsMEM模块、ControlUnit模块、registerFile模块、Extend模块、ALU模块、DataMEM模块，最后设计CPU总模块，需要注意的是，PC没有独立为一个模块，免去参数传递的麻烦。</p>\n<h3 id=\"InsMEM模块\"><a href=\"#InsMEM模块\" class=\"headerlink\" title=\"InsMEM模块\"></a><strong>InsMEM模块</strong></h3><p>把将要执行的指令my_test_rom.txt加载到储存指令的内存中。根据PC的值返回相应的指令。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> InsMEM(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] mem [<span class=\"number\">0</span>:<span class=\"number\">64</span>];</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"built_in\">$readmemb</span>(<span class=\"string\">\"my_test_rom.txt\"</span>, mem);</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">always</span>@(PC) <span class=\"keyword\">begin</span></div><div class=\"line\">        instruction &lt;= mem[(PC-<span class=\"number\">4</span>)/<span class=\"number\">4</span>];  <span class=\"comment\">// 初始化为4'b0100</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ControlUnit模块\"><a href=\"#ControlUnit模块\" class=\"headerlink\" title=\"ControlUnit模块\"></a><strong>ControlUnit模块</strong></h3><p>模块设计中，每个operation，比如ADD，对应的变量初始化为0，当需要使用时，改为1；控制信号的变量，比如PCWre，采用|操作符拼接，减少代码量又简洁，这里用到了表3中的值，用到右边的值。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> ControlUnit(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">5</span>:<span class=\"number\">0</span>] operation,</div><div class=\"line\">    <span class=\"keyword\">input</span> zero,</div><div class=\"line\">    <span class=\"keyword\">output</span> PCWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> ALUSrcB,</div><div class=\"line\">    <span class=\"keyword\">output</span> ALUM2Reg,</div><div class=\"line\">    <span class=\"keyword\">output</span> RegWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> InsMemRW,</div><div class=\"line\">    <span class=\"keyword\">output</span> DataMemRW,</div><div class=\"line\">    <span class=\"keyword\">output</span> ExtSel,</div><div class=\"line\">    <span class=\"keyword\">output</span> PCSrc,</div><div class=\"line\">    <span class=\"keyword\">output</span> RegOut,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp</div><div class=\"line\">    );</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">parameter</span> ADD = <span class=\"number\">6'b000000</span>, ADDI = <span class=\"number\">6'b000001</span>, SUB = <span class=\"number\">6'b000010</span>, ORI = <span class=\"number\">6'b010000</span>,</div><div class=\"line\">              AND = <span class=\"number\">6'b010001</span>, OR = <span class=\"number\">6'b010010</span>, MOVE = <span class=\"number\">6'b100000</span>, SW = <span class=\"number\">6'b100110</span>,</div><div class=\"line\">              LW = <span class=\"number\">6'b100111</span>, BEQ = <span class=\"number\">6'b110000</span>, HALT = <span class=\"number\">6'b111111</span>;</div><div class=\"line\">    <span class=\"keyword\">reg</span> i_add, i_addi, i_sub, i_ori, i_and, i_or, i_move, i_sw, i_lw, i_beq, i_halt;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">always</span> @(operation) <span class=\"keyword\">begin</span></div><div class=\"line\">\t </div><div class=\"line\">\t    i_add = <span class=\"number\">0</span>; i_addi = <span class=\"number\">0</span>; i_sub = <span class=\"number\">0</span>; i_ori = <span class=\"number\">0</span>;</div><div class=\"line\">        i_and = <span class=\"number\">0</span>; i_or = <span class=\"number\">0</span>; i_move = <span class=\"number\">0</span>; i_sw = <span class=\"number\">0</span>;</div><div class=\"line\">        i_lw = <span class=\"number\">0</span>; i_beq = <span class=\"number\">0</span>; i_halt = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  </div><div class=\"line\">        <span class=\"keyword\">case</span>(operation)</div><div class=\"line\">            ADD: i_add = <span class=\"number\">1</span>;</div><div class=\"line\">            ADDI: i_addi = <span class=\"number\">1</span>;</div><div class=\"line\">            SUB: i_sub = <span class=\"number\">1</span>;</div><div class=\"line\">            ORI: i_ori = <span class=\"number\">1</span>;</div><div class=\"line\">            AND: i_and = <span class=\"number\">1</span>;</div><div class=\"line\">            OR: i_or = <span class=\"number\">1</span>;</div><div class=\"line\">            MOVE: i_move = <span class=\"number\">1</span>;</div><div class=\"line\">            SW: i_sw = <span class=\"number\">1</span>;</div><div class=\"line\">            LW: i_lw = <span class=\"number\">1</span>;</div><div class=\"line\">            BEQ: i_beq = <span class=\"number\">1</span>;</div><div class=\"line\">            HALT: i_halt = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">endcase</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">assign</span> PCWre = !i_halt;</div><div class=\"line\">    <span class=\"keyword\">assign</span> ALUSrcB = i_addi || i_ori || i_sw || i_lw;</div><div class=\"line\">    <span class=\"keyword\">assign</span> ALUM2Reg = i_lw;</div><div class=\"line\">    <span class=\"keyword\">assign</span> RegWre = !(i_sw || i_beq);</div><div class=\"line\">    <span class=\"keyword\">assign</span> InsMemRW = <span class=\"number\">0</span>;    <span class=\"comment\">// 无相关</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> DataMemRW = i_sw;</div><div class=\"line\">    <span class=\"keyword\">assign</span> ExtSel = !i_ori;   <span class=\"comment\">// 除了ori是0扩展，其他的也可以为符号扩展</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> PCSrc = (i_beq &amp;&amp; zero); <span class=\"comment\">// beq且相减之后值为0!!!!!</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> RegOut = !(i_addi || i_ori || i_lw);</div><div class=\"line\">    <span class=\"keyword\">assign</span> ALUOp = &#123;i_and, i_ori || i_or, i_sub || i_ori || i_or || i_beq&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"registerFile模块\"><a href=\"#registerFile模块\" class=\"headerlink\" title=\"registerFile模块\"></a><strong>registerFile模块</strong></h3><p>申明31个寄存器，0号寄存器一直当做0处理；寄存器的值在这个模块中取出，同时也可以向寄存器写值，由CU控制。</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> registerFile(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rs, rt, rd,  <span class=\"comment\">// 相应的赋值在主模块实现</span></div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data,</div><div class=\"line\">    <span class=\"keyword\">input</span> RegWre, RegOut, clk,  </div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1, readData2</div><div class=\"line\">    );</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] write_reg;</div><div class=\"line\">\t<span class=\"keyword\">assign</span> write_reg = (RegOut == <span class=\"number\">0</span>) ? rt : rd;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] register [<span class=\"number\">1</span>:<span class=\"number\">31</span>];  <span class=\"comment\">// 声明r1~r31</span></div><div class=\"line\">    <span class=\"keyword\">integer</span> i;</div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i = i + <span class=\"number\">1</span>)</div><div class=\"line\">            register[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 0号寄存器值固定为0</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> readData1 = (rs == <span class=\"number\">0</span>)? <span class=\"number\">0</span> : register[rs];</div><div class=\"line\">    <span class=\"keyword\">assign</span> readData2 = (rt == <span class=\"number\">0</span>)? <span class=\"number\">0</span> : register[rt];</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">if</span> ((RegWre == <span class=\"number\">1</span>) &amp;&amp; (write_reg != <span class=\"number\">0</span>)) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t      register[write_reg] &lt;= write_data;</div><div class=\"line\">\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t<span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure>\n<h3 id=\"Extend模块\"><a href=\"#Extend模块\" class=\"headerlink\" title=\"Extend模块\"></a><strong>Extend模块</strong></h3><p>本模块比较简单，分为零拓展或符号拓展，16位-&gt;32位。</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> Extend(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] imme_16,</div><div class=\"line\">    <span class=\"keyword\">input</span> ExtSel,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"comment\">// 1为符号拓展，0为零拓展</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> imme_32 = (ExtSel)? &#123;&#123;<span class=\"number\">16</span>&#123;imme_16[<span class=\"number\">15</span>]&#125;&#125;, imme_16[<span class=\"number\">15</span>:<span class=\"number\">0</span>]&#125; : &#123;&#123;<span class=\"number\">16</span>&#123;<span class=\"number\">1'b0</span>&#125;&#125;, imme_16[<span class=\"number\">15</span>:<span class=\"number\">0</span>]&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure>\n<h3 id=\"ALU模块\"><a href=\"#ALU模块\" class=\"headerlink\" title=\" ALU模块\"></a><strong> ALU模块</strong></h3><p>根据CU发出的控制信号ALUOp的不同，ALU对传进去的值执行不同的操作。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> ALU(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32,</div><div class=\"line\">    <span class=\"keyword\">input</span> ALUSrcB,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">wire</span> zero,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result</div><div class=\"line\">    );</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] alub;</div><div class=\"line\">    <span class=\"keyword\">assign</span> alub = (ALUSrcB == <span class=\"number\">0</span>) ? readData2 : imme_32;</div><div class=\"line\">\t </div><div class=\"line\">\t<span class=\"keyword\">always</span>@(readData1 <span class=\"keyword\">or</span> alub <span class=\"keyword\">or</span> ALUOp) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">case</span> (ALUOp)</div><div class=\"line\">            <span class=\"number\">3'b000</span>: result &lt;= readData1 + alub;</div><div class=\"line\">            <span class=\"number\">3'b001</span>: result &lt;= readData1 - alub;</div><div class=\"line\">            <span class=\"number\">3'b010</span>: result &lt;= alub - readData1;</div><div class=\"line\">            <span class=\"number\">3'b011</span>: result &lt;= readData1 | alub;</div><div class=\"line\">            <span class=\"number\">3'b100</span>: result &lt;= readData1 &amp; alub;</div><div class=\"line\">            <span class=\"number\">3'b101</span>: result &lt;= ~readData1 &amp; alub;</div><div class=\"line\">            <span class=\"number\">3'b110</span>: result &lt;= (~readData1 &amp; alub) | (readData1 &amp; ~alub);</div><div class=\"line\">            <span class=\"number\">3'b111</span>: result &lt;= (readData1 &amp; alub) | (~readData1 &amp; ~alub);</div><div class=\"line\">        <span class=\"keyword\">endcase</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> zero = (result == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"DataMEM模块\"><a href=\"#DataMEM模块\" class=\"headerlink\" title=\"DataMEM模块\"></a><strong>DataMEM模块</strong></h3><p>数据储存在模块中申请的数组当中，并根据控制信号的不同，可以存值也可以取值。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> DataMEM(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2,</div><div class=\"line\">    <span class=\"keyword\">input</span> DataMemRW,</div><div class=\"line\">    <span class=\"keyword\">input</span> ALUM2Reg,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataMem [<span class=\"number\">0</span>:<span class=\"number\">63</span>];  <span class=\"comment\">// 声明内存</span></div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataOut;</div><div class=\"line\">    <span class=\"keyword\">integer</span> i;</div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">64</span>; i = i + <span class=\"number\">1</span>)</div><div class=\"line\">            DataMem[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span>@(result <span class=\"keyword\">or</span> DataMemRW) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (DataMemRW == <span class=\"number\">0</span>) <span class=\"comment\">// 取字</span></div><div class=\"line\">            DataOut = DataMem[result];</div><div class=\"line\">        <span class=\"keyword\">else</span>   <span class=\"comment\">// 存字</span></div><div class=\"line\">            DataMem[result] = readData2;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t <span class=\"keyword\">assign</span> write_data = (ALUM2Reg == <span class=\"number\">0</span>) ? result : DataOut;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"CPU总模块\"><a href=\"#CPU总模块\" class=\"headerlink\" title=\"CPU总模块\"></a><strong>CPU总模块</strong></h3><p>总模块中将各个模块之间的接口连起来，并且将指令拆分为几个部分，传入不同的模块；然后实例化各个模块，需要注意的是，实例化模块时，变量名和顺序一定一定要和小模块申明时相同；此外，总模块中根据具体情况改变PC的值。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">module</span> CPU();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// CU控制信号线</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> PCWre;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ALUSrcB;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ALUM2Reg;</div><div class=\"line\">    <span class=\"keyword\">wire</span> RegWre;</div><div class=\"line\">    <span class=\"keyword\">wire</span> InsMemRW;</div><div class=\"line\">    <span class=\"keyword\">wire</span> DataMemRW;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ExtSel;</div><div class=\"line\">    <span class=\"keyword\">wire</span> PCSrc;</div><div class=\"line\">    <span class=\"keyword\">wire</span> RegOut;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp;</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"comment\">// 此模块中需要赋值的变量</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">5</span>:<span class=\"number\">0</span>] operation;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rs;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rt;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rd;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] imme_16;</div><div class=\"line\">    <span class=\"keyword\">reg</span> clk;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 其他的模块相互传递的线</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction;</div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2;</div><div class=\"line\">    <span class=\"keyword\">wire</span> zero;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 拆分指令的位</span></div><div class=\"line\">\t <span class=\"keyword\">assign</span> operation[<span class=\"number\">5</span>:<span class=\"number\">0</span>] = instruction[<span class=\"number\">31</span>:<span class=\"number\">26</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rs = instruction[<span class=\"number\">25</span>:<span class=\"number\">21</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rt = instruction[<span class=\"number\">20</span>:<span class=\"number\">16</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rd = instruction[<span class=\"number\">15</span>:<span class=\"number\">11</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> imme_16 = instruction[<span class=\"number\">15</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 初始化  设置时钟周期</span></div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        PC = <span class=\"number\">4'b0100</span>;</div><div class=\"line\">        clk = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">always</span> #<span class=\"number\">500</span></div><div class=\"line\">        clk = ~clk;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 实例化各个模块，注意变量名不能拼写错误</span></div><div class=\"line\">\t InsMEM insmem(PC, instruction);</div><div class=\"line\">\t ControlUnit controlunit(operation, zero, PCWre, ALUSrcB, ALUM2Reg, RegWre, InsMemRW, DataMemRW, ExtSel, PCSrc, RegOut,ALUOp);</div><div class=\"line\">    registerFile registerfile(rs, rt, rd, write_data, RegWre, RegOut, clk, readData1, readData2);</div><div class=\"line\">    Extend extend(imme_16, ExtSel, imme_32);</div><div class=\"line\">\t ALU alu(readData1, readData2, imme_32, ALUSrcB, ALUOp, zero, result);</div><div class=\"line\">\t DataMEM datamem(result, readData2, DataMemRW, ALUM2Reg, write_data);</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// PC的值需要适当更改</span></div><div class=\"line\">\t <span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">if</span>  (PCWre == <span class=\"number\">1</span>)</div><div class=\"line\">            PC &lt;= (PCSrc == <span class=\"number\">0</span>)? (PC + <span class=\"number\">4</span>) : (PC + <span class=\"number\">4</span> + imme_32 * <span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">            PC &lt;= PC;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"验证方法\"><a href=\"#验证方法\" class=\"headerlink\" title=\"验证方法\"></a><strong>验证方法</strong></h2><p>完善如下表格，将指令写到my_test_rom.txt文件，文件放在project根文件夹，即可仿真验证。<br><img src=\"yanzheng.png\" alt=\"\"><br>验证过程复杂繁琐，这里不一一说明。总的来说验证过程就是看每条指令执行之后寄存器以及控制信号的值是否正确，是否符合要求。</p>\n<p>经验证，以上代码是没有bug的。如果有任何问题，欢迎指出。</p>"},{"title":"OS同步问题（一）","toc":true,"date":"2016-07-20T09:15:17.000Z","_content":"操作系统经典同步问题包括生产者-消费者问题、读者-写者问题、哲学家就餐问题等。下面讲的是生产者-消费者问题以及读者-写者问题。\n\n需要先弄清楚的是，wait()函数将信号量值-1，若值 大于0，则继续执行接下来的代码，否则等待；signal()函数将信号量+1。\n<!--more-->\n## **生产者-消费者问题**\n\n利用线程同步机制，实现生产者-消费者问题。设计一个程序来解决有限缓冲问题;代码中使用了三个信号量: empty (以记录有多少空位)、full (以记录有多少满位)以及mutex (二进制信号量或互斥信号量，以保护对缓冲插入与删除的操作)。empty与full采用标准计数信号量，而mutex 将采用二进制信号量。生产者与消费者作为独立线程，在empty、full、mutex的同步前提下，对缓冲进行插入与删除。\n### **semaphore**\n使用<semaphore.h>头文件中相应函数实现信号量的创建, 以创建mutex为例：\n``` cpp\nsem_t mutex;\nsem_init(&mutex, 0, 1);\nsem_wait(&mutex);\n//访问临界区\nsem_post(&mutex);\n//退出临界区\n```\n\n### **完整代码**\n\n``` cpp\n#include<pthread.h>\n#include<iostream>\n#include<stdlib.h>\n#include<stdio.h>\n#include<unistd.h>\n#include<semaphore.h>\n#include<iostream>\nusing namespace std;\n\n#define BUFFER_SIZE 5\ntypedef int buffer_item;\nbuffer_item buffer[BUFFER_SIZE];\nsem_t full, empty, mutex;  // mutex保护对缓冲插入删除的互斥 \nint in, out, count;\n\nint insert_item(buffer_item item) {\n    sem_wait(&empty);\n    sem_wait(&mutex);\n    \n    buffer[in] = item;\n    cout << \"Produce item \" << item << \" at \" << in << endl;\n    out = in;\n    in = (in + 1) % BUFFER_SIZE;\n    count++;\n    \n    sem_post(&mutex);\n    sem_post(&full);\n    int a = 0;\n    return a;\n}\n\nint remove_item(buffer_item *item) {\n    sem_wait(&full);\n    sem_wait(&mutex);\n    \n    *item = buffer[out];\n    cout << \"Consumed \" << *item << \" at \" << out << endl;\n    in = (in-1+BUFFER_SIZE)%BUFFER_SIZE;\n    out = (out-1+BUFFER_SIZE)%BUFFER_SIZE;\n    count--;\n    \n    sem_post(&mutex);\n    sem_post(&empty);\n    int a = 0;\n    return a;\n}\n\nvoid *producer(void *param) {\n    int *id = (int*)param;\n    buffer_item ran;\n    while (true) {\n        sleep(rand()%5);\n        ran = rand()%100;\n        if (insert_item(ran))\n        cout << \"Producer \" << *id << \" report error condition\\n\"<< endl;\n    }\n}\nvoid *consumer(void *param) {\n    int *id = (int*) param;\n    buffer_item ran;\n    while (true) {\n        sleep(rand()%5);\n        if (remove_item(&ran))\n        cout << \"Consumer \"<< *id << \" report error condition\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    in = 0, out = 0, count = 0;\n    sem_init(&mutex, 0, 1);\n    sem_init(&empty, 0, BUFFER_SIZE);\n    sem_init(&full, 0, 0);\n    \n    int pnum = atoi(argv[2]), cnum = atoi(argv[3]);\n    int sl = atoi(argv[1]);\n    \n    pthread_t p[pnum], c[cnum];\n    pthread_attr_t attr;\n    pthread_attr_init(&attr);\n    \n    for (int i = 0; i < pnum; ++i) {\n        int *pid = (int *)malloc(sizeof(int));\n        *pid = i;\n        pthread_create(&p[i], &attr, producer, (void*)pid);\n    }\n    for (int i = 0; i < cnum; ++i) {\n        int *cid = (int *)malloc(sizeof(int));\n        *cid = i;\n        pthread_create(&c[i], &attr, consumer, (void*)cid);\n    }\n    \n    sleep(sl);\n    return 0;\n}\n```\n\n### **结果示例**\n\n![](1.png)\n![](2.png)\n\n## **读者-写者问题**\n\n创建一个进程，此进程包含n个线程。用这n个线程来表示n个读者或写者。每个线程按相应测试数据文件(后面有介绍)的要求进行读写操作。用信号量机制分别实现读者优先和写者优先的读者-写者问题。\n\n读者-写者问题的读写操作限制(仅读者优先或写者优先)：\n\n1)写-写互斥，即不能有两个写者同时进行写操作。\n\n2)读-写互斥，即不能同时有一个线程在读，而另一个线程在写。\n\n3)读-读允许，即可以有一个或多个读者在读。\n\n读者优先附加限制：如果一个读者申请进行读操作时已有另一个读者正在进行读操作，则该读者可直接开始读操作。\n\n写者优先的附加限制：如果一个读者申请进行读操作时已有另一写者在等待访问共享资源，则该读者必须等到没有写者处于等待状态后才能开始读操作。\n\n### **读者优先**\n\n使用mutex实现对readcount访问的互斥。使用wrt实现对临界区的同步。\n\n当读者占用临界区时：其他申请临界区的读者无需等待, 直接进入临界区, 执行读的操作；而写者等待, 直到所有读者退出临界区, 即readcount == 0时, 才能开始访问临界区, 执行写的操作。\n\n当写者占用临界区时：第一个申请的读者等待wrt信号, 其余读者阻塞在mutex信号上, 一直到当前写者退出临界区并获得临界区访问权；其他到来的写者等待, 直到当前写者退出临界区并获得临界区访问权。\n```\n\t1 W 2 5\n\t2 R 2 5\n\t3 R 3 2\n\t4 R 6 5\n\t5 W 4 3\n```\n```\n\t1 W 2 5\n\t2 W 2 5\n\t3 W 3 2\n\t4 R 5 4\n```\n以上为测试数据。每行测试数据包括四个字段，各个字段间用空格分隔。第一字段为一个正整数，表示线程序号。第二字段表示相应线程角色，R表示读者，W表示写者。第三字段为一个正数，表示读写操作的开始时间：线程创建后，延迟相应时间(单位为秒)后发出对共享资源的读写申请。第四字段为一个正数，表示读写操作的持续时间。\n\n``` cpp\n#include<cstdlib>\n#include<sstream>\n#include<string>\n#include<unistd.h>\n#include<semaphore.h>\n#include<pthread.h>\n#include<stdio.h>\n#include<fstream>\n#include<iostream>\n\nusing namespace std;\n\nstruct info {\n    int id;\n    int s_time;\n    int d_time;\n};\nint readcount;\nsem_t mutex, wrt;  // mutex对readcount实验互斥，wrt对写操作互斥 \n\n\nvoid *reader(void* param) {\n    struct info *data = (struct info*)param;\n    int id = data->id, s_time = data->s_time, d_time = data->d_time;\n    sleep(s_time);\n\n    sem_wait(&mutex);\n    cout << \"Reader \" << id << \" get.\" << endl;\n    readcount++;\n    if (readcount == 1) sem_wait(&wrt);\n    sem_post(&mutex);\n\n    cout << \"Reader \" << id << \" reading.\" << endl;\n    sleep(d_time);\n\n    cout << \"Reader \" << id << \" finish.\" << endl;\n    sem_wait(&mutex);\n    readcount--;\n    if (readcount == 0) {\n        cout << \"All readers finish.\" << endl;\n        sem_post(&wrt);\n    }\n    sem_post(&mutex);\n}\n\nvoid *writer(void* param) {\n    struct info *data = (struct info*)param;\n    int id = data->id, s_time = data->s_time, d_time = data->d_time;\n    sleep(s_time);\n\n    cout << \"Writer \" << id << \" apply.\" << endl;\n    sem_wait(&wrt);\n\n    cout << \"Writer \" << id << \" writing.\" << endl;\n    sleep(d_time);\n\n    cout << \"Writer \" << id << \" finish.\" << endl;\n    sem_post(&wrt);\n}\n\nvoid createThread(char *buffer) {\n    string s(buffer);\n    stringstream ss(s), stream;\n    string sss[4];\n    int i = 0;\n    while (getline(ss, sss[i], ' ')) ++i;\n    struct info *data = (struct info*)malloc(sizeof(struct info));\n    stream << sss[0]; stream >> data->id; stream.clear();\n    stream << sss[2]; stream >> data->s_time; stream.clear();\n    stream << sss[3]; stream >> data->d_time; stream.clear();\n    \n    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));\n    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));\n    pthread_attr_init(attr);\n    \n    if (sss[1] == \"R\") {\n        pthread_create(thread, attr, reader, (void *)data);\n        cout << \"Reader \" << data->id << \" is created.\" << endl;\n    } else {\n        pthread_create(thread, attr, writer, (void *)data);\n        cout << \"Writer \" << data->id << \" is created.\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    readcount = 0;\n    sem_init(&mutex, 0, 1);\n    sem_init(&wrt, 0, 1);\n    char buffer[16];\n\n    ifstream in(argv[1]);\n    if (!in.is_open()) {\n        cout << \"Error opening file\"<< endl;\n        exit(1);\n    }\n    while (in.peek() != EOF) {\n        in.getline(buffer, 16);\n        createThread(buffer);\n    }\n    sleep(20);\n    \n    return 0;\n}\n```\n\n![](3.png)\n![](4.png)\n注意：这里的输出会乱，原因不明，后来在管程的试验中，发现改为printf就不会乱。\n\n### **写者优先**\n\n写者优先与读者优先类似。不同之处在于一旦一个写者到来，它应该尽快对文件进行写操作，如果有一个写者在等待，则新到来的读者不允许进行读操作。为此应当添加一个整型变量write_count，用于记录正在等待的写者的数目，当write_count=0时，才可以释放等待的读者线程队列。\n\n为了对全局变量write_count实现互斥，必须增加一个互斥对象mutex3。\n\n为了实现写者优先，应当添加一个临界区对象read，当有写者在写文件或等待时，读者必须阻塞在read上。\n\n读者线程除了要对全局变量read_count实现操作上的互斥外，还必须有一个互斥对象对阻塞read这一过程实现互斥。这两个互斥对象分别命名为mutex1和mutex2。\n\n``` cpp\n#include<cstdlib>\n#include<sstream>\n#include<string>\n#include<unistd.h>\n#include<semaphore.h>\n#include<pthread.h>\n#include<stdio.h>\n#include<fstream>\n#include<iostream>\n\nusing namespace std;\n\nstruct info {\n    int id;\n    int s_time;\n    int d_time;\n};\nint readcount, writecount;\nsem_t mutex1, mutex2, mutex3, wrt, rea;\n// mutex3实现writecount互斥，mutex1对readcount互斥，mutex2对阻塞rea这一过程实现互斥 \n\nvoid *reader(void* param) {\n    struct info *data = (struct info*)param;\n    int id = data->id, s_time = data->s_time, d_time = data->d_time;\n    sleep(s_time);\n\n    sem_wait(&mutex2);\n    if (writecount != 0) sem_wait(&rea);\n    sem_post(&mutex2);\n    \n    cout << \"Reader \" << id << \" apply.\" << endl;\n    sem_wait(&mutex1);\n    readcount++;\n    if (readcount == 1) sem_wait(&wrt);\n    sem_post(&mutex1);\n    \n    cout << \"Reader \" << id << \" reading.\" << endl;\n    sleep(d_time);\n    \n    cout << \"Reader \" << id << \" finish.\" << endl;\n    sem_wait(&mutex1);\n    readcount--;\n    if (readcount == 0)\n        sem_post(&wrt);\n    sem_post(&mutex1);\n\n}\n\nvoid *writer(void* param) {\n    struct info *data = (struct info*)param;\n    int id = data->id, s_time = data->s_time, d_time = data->d_time;\n    sleep(s_time);\n    \n    cout << \"Writer \" << id << \" get.\" << endl;\n    sem_wait(&mutex3);\n    writecount++;\n    if (writecount == 1)\n        sem_init(&rea, 0, 0);\n    sem_post(&mutex3);\n    \n    sem_wait(&wrt);\n    cout << \"Writer \" << id << \" writing.\" << endl;\n    sleep(data->d_time);\n    sem_post(&wrt);\n    \n    cout << \"Writer \" << id << \" finish.\" << endl;\n    sem_wait(&mutex3);\n    writecount--;\n    if (writecount == 0) sem_post(&rea);\n    sem_post(&mutex3);\n\n}\n\nvoid createThread(char *buffer) {\n    string s(buffer);\n    stringstream ss(s), stream;\n    string sss[4];\n    int i = 0;\n    while (getline(ss, sss[i], ' ')) ++i;\n    struct info *data = (struct info*)malloc(sizeof(struct info));\n    stream << sss[0]; stream >> data->id; stream.clear();\n    stream << sss[2]; stream >> data->s_time; stream.clear();\n    stream << sss[3]; stream >> data->d_time; stream.clear();\n    \n    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));\n    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));\n    pthread_attr_init(attr);\n    \n    if (sss[1] == \"R\") {\n        pthread_create(thread, attr, reader, (void *)data);\n        cout << \"Reader \" << data->id << \" is created.\" << endl;\n    } else {\n        pthread_create(thread, attr, writer, (void *)data);\n        cout << \"Writer \" << data->id << \" is created.\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    readcount = 0;\n    writecount = 0;\n    sem_init(&mutex1, 0, 1);\n    sem_init(&mutex2, 0, 1);\n    sem_init(&mutex3, 0, 1);\n    sem_init(&wrt, 0, 1);\n    sem_init(&rea, 0, 0);\n    char buffer[16];\n\n    ifstream in(argv[1]);\n    if (!in.is_open()) {\n        cout << \"Error opening file\"<< endl;\n        exit(1);\n    }\n    while (in.peek() != EOF) {\n        in.getline(buffer, 16);\n        createThread(buffer);\n    }\n    sleep(20);\n    \n    return 0;\n}\n```\n\n![](5.png)\n![](6.png)\n\n这里使用c++的cout，输出也会混乱，没有在代码里面改为printf。\n\n\n\n\n\n","source":"_posts/同步1.md","raw":"---\ntitle: OS同步问题（一）\ntoc: true\ndate: 2016-07-20 17:15:17\ntags:\n- C/C++\n- thread\n- semaphore\ncategories:\n- Operating System\n- C/C++\n---\n操作系统经典同步问题包括生产者-消费者问题、读者-写者问题、哲学家就餐问题等。下面讲的是生产者-消费者问题以及读者-写者问题。\n\n需要先弄清楚的是，wait()函数将信号量值-1，若值 大于0，则继续执行接下来的代码，否则等待；signal()函数将信号量+1。\n<!--more-->\n## **生产者-消费者问题**\n\n利用线程同步机制，实现生产者-消费者问题。设计一个程序来解决有限缓冲问题;代码中使用了三个信号量: empty (以记录有多少空位)、full (以记录有多少满位)以及mutex (二进制信号量或互斥信号量，以保护对缓冲插入与删除的操作)。empty与full采用标准计数信号量，而mutex 将采用二进制信号量。生产者与消费者作为独立线程，在empty、full、mutex的同步前提下，对缓冲进行插入与删除。\n### **semaphore**\n使用<semaphore.h>头文件中相应函数实现信号量的创建, 以创建mutex为例：\n``` cpp\nsem_t mutex;\nsem_init(&mutex, 0, 1);\nsem_wait(&mutex);\n//访问临界区\nsem_post(&mutex);\n//退出临界区\n```\n\n### **完整代码**\n\n``` cpp\n#include<pthread.h>\n#include<iostream>\n#include<stdlib.h>\n#include<stdio.h>\n#include<unistd.h>\n#include<semaphore.h>\n#include<iostream>\nusing namespace std;\n\n#define BUFFER_SIZE 5\ntypedef int buffer_item;\nbuffer_item buffer[BUFFER_SIZE];\nsem_t full, empty, mutex;  // mutex保护对缓冲插入删除的互斥 \nint in, out, count;\n\nint insert_item(buffer_item item) {\n    sem_wait(&empty);\n    sem_wait(&mutex);\n    \n    buffer[in] = item;\n    cout << \"Produce item \" << item << \" at \" << in << endl;\n    out = in;\n    in = (in + 1) % BUFFER_SIZE;\n    count++;\n    \n    sem_post(&mutex);\n    sem_post(&full);\n    int a = 0;\n    return a;\n}\n\nint remove_item(buffer_item *item) {\n    sem_wait(&full);\n    sem_wait(&mutex);\n    \n    *item = buffer[out];\n    cout << \"Consumed \" << *item << \" at \" << out << endl;\n    in = (in-1+BUFFER_SIZE)%BUFFER_SIZE;\n    out = (out-1+BUFFER_SIZE)%BUFFER_SIZE;\n    count--;\n    \n    sem_post(&mutex);\n    sem_post(&empty);\n    int a = 0;\n    return a;\n}\n\nvoid *producer(void *param) {\n    int *id = (int*)param;\n    buffer_item ran;\n    while (true) {\n        sleep(rand()%5);\n        ran = rand()%100;\n        if (insert_item(ran))\n        cout << \"Producer \" << *id << \" report error condition\\n\"<< endl;\n    }\n}\nvoid *consumer(void *param) {\n    int *id = (int*) param;\n    buffer_item ran;\n    while (true) {\n        sleep(rand()%5);\n        if (remove_item(&ran))\n        cout << \"Consumer \"<< *id << \" report error condition\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    in = 0, out = 0, count = 0;\n    sem_init(&mutex, 0, 1);\n    sem_init(&empty, 0, BUFFER_SIZE);\n    sem_init(&full, 0, 0);\n    \n    int pnum = atoi(argv[2]), cnum = atoi(argv[3]);\n    int sl = atoi(argv[1]);\n    \n    pthread_t p[pnum], c[cnum];\n    pthread_attr_t attr;\n    pthread_attr_init(&attr);\n    \n    for (int i = 0; i < pnum; ++i) {\n        int *pid = (int *)malloc(sizeof(int));\n        *pid = i;\n        pthread_create(&p[i], &attr, producer, (void*)pid);\n    }\n    for (int i = 0; i < cnum; ++i) {\n        int *cid = (int *)malloc(sizeof(int));\n        *cid = i;\n        pthread_create(&c[i], &attr, consumer, (void*)cid);\n    }\n    \n    sleep(sl);\n    return 0;\n}\n```\n\n### **结果示例**\n\n![](1.png)\n![](2.png)\n\n## **读者-写者问题**\n\n创建一个进程，此进程包含n个线程。用这n个线程来表示n个读者或写者。每个线程按相应测试数据文件(后面有介绍)的要求进行读写操作。用信号量机制分别实现读者优先和写者优先的读者-写者问题。\n\n读者-写者问题的读写操作限制(仅读者优先或写者优先)：\n\n1)写-写互斥，即不能有两个写者同时进行写操作。\n\n2)读-写互斥，即不能同时有一个线程在读，而另一个线程在写。\n\n3)读-读允许，即可以有一个或多个读者在读。\n\n读者优先附加限制：如果一个读者申请进行读操作时已有另一个读者正在进行读操作，则该读者可直接开始读操作。\n\n写者优先的附加限制：如果一个读者申请进行读操作时已有另一写者在等待访问共享资源，则该读者必须等到没有写者处于等待状态后才能开始读操作。\n\n### **读者优先**\n\n使用mutex实现对readcount访问的互斥。使用wrt实现对临界区的同步。\n\n当读者占用临界区时：其他申请临界区的读者无需等待, 直接进入临界区, 执行读的操作；而写者等待, 直到所有读者退出临界区, 即readcount == 0时, 才能开始访问临界区, 执行写的操作。\n\n当写者占用临界区时：第一个申请的读者等待wrt信号, 其余读者阻塞在mutex信号上, 一直到当前写者退出临界区并获得临界区访问权；其他到来的写者等待, 直到当前写者退出临界区并获得临界区访问权。\n```\n\t1 W 2 5\n\t2 R 2 5\n\t3 R 3 2\n\t4 R 6 5\n\t5 W 4 3\n```\n```\n\t1 W 2 5\n\t2 W 2 5\n\t3 W 3 2\n\t4 R 5 4\n```\n以上为测试数据。每行测试数据包括四个字段，各个字段间用空格分隔。第一字段为一个正整数，表示线程序号。第二字段表示相应线程角色，R表示读者，W表示写者。第三字段为一个正数，表示读写操作的开始时间：线程创建后，延迟相应时间(单位为秒)后发出对共享资源的读写申请。第四字段为一个正数，表示读写操作的持续时间。\n\n``` cpp\n#include<cstdlib>\n#include<sstream>\n#include<string>\n#include<unistd.h>\n#include<semaphore.h>\n#include<pthread.h>\n#include<stdio.h>\n#include<fstream>\n#include<iostream>\n\nusing namespace std;\n\nstruct info {\n    int id;\n    int s_time;\n    int d_time;\n};\nint readcount;\nsem_t mutex, wrt;  // mutex对readcount实验互斥，wrt对写操作互斥 \n\n\nvoid *reader(void* param) {\n    struct info *data = (struct info*)param;\n    int id = data->id, s_time = data->s_time, d_time = data->d_time;\n    sleep(s_time);\n\n    sem_wait(&mutex);\n    cout << \"Reader \" << id << \" get.\" << endl;\n    readcount++;\n    if (readcount == 1) sem_wait(&wrt);\n    sem_post(&mutex);\n\n    cout << \"Reader \" << id << \" reading.\" << endl;\n    sleep(d_time);\n\n    cout << \"Reader \" << id << \" finish.\" << endl;\n    sem_wait(&mutex);\n    readcount--;\n    if (readcount == 0) {\n        cout << \"All readers finish.\" << endl;\n        sem_post(&wrt);\n    }\n    sem_post(&mutex);\n}\n\nvoid *writer(void* param) {\n    struct info *data = (struct info*)param;\n    int id = data->id, s_time = data->s_time, d_time = data->d_time;\n    sleep(s_time);\n\n    cout << \"Writer \" << id << \" apply.\" << endl;\n    sem_wait(&wrt);\n\n    cout << \"Writer \" << id << \" writing.\" << endl;\n    sleep(d_time);\n\n    cout << \"Writer \" << id << \" finish.\" << endl;\n    sem_post(&wrt);\n}\n\nvoid createThread(char *buffer) {\n    string s(buffer);\n    stringstream ss(s), stream;\n    string sss[4];\n    int i = 0;\n    while (getline(ss, sss[i], ' ')) ++i;\n    struct info *data = (struct info*)malloc(sizeof(struct info));\n    stream << sss[0]; stream >> data->id; stream.clear();\n    stream << sss[2]; stream >> data->s_time; stream.clear();\n    stream << sss[3]; stream >> data->d_time; stream.clear();\n    \n    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));\n    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));\n    pthread_attr_init(attr);\n    \n    if (sss[1] == \"R\") {\n        pthread_create(thread, attr, reader, (void *)data);\n        cout << \"Reader \" << data->id << \" is created.\" << endl;\n    } else {\n        pthread_create(thread, attr, writer, (void *)data);\n        cout << \"Writer \" << data->id << \" is created.\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    readcount = 0;\n    sem_init(&mutex, 0, 1);\n    sem_init(&wrt, 0, 1);\n    char buffer[16];\n\n    ifstream in(argv[1]);\n    if (!in.is_open()) {\n        cout << \"Error opening file\"<< endl;\n        exit(1);\n    }\n    while (in.peek() != EOF) {\n        in.getline(buffer, 16);\n        createThread(buffer);\n    }\n    sleep(20);\n    \n    return 0;\n}\n```\n\n![](3.png)\n![](4.png)\n注意：这里的输出会乱，原因不明，后来在管程的试验中，发现改为printf就不会乱。\n\n### **写者优先**\n\n写者优先与读者优先类似。不同之处在于一旦一个写者到来，它应该尽快对文件进行写操作，如果有一个写者在等待，则新到来的读者不允许进行读操作。为此应当添加一个整型变量write_count，用于记录正在等待的写者的数目，当write_count=0时，才可以释放等待的读者线程队列。\n\n为了对全局变量write_count实现互斥，必须增加一个互斥对象mutex3。\n\n为了实现写者优先，应当添加一个临界区对象read，当有写者在写文件或等待时，读者必须阻塞在read上。\n\n读者线程除了要对全局变量read_count实现操作上的互斥外，还必须有一个互斥对象对阻塞read这一过程实现互斥。这两个互斥对象分别命名为mutex1和mutex2。\n\n``` cpp\n#include<cstdlib>\n#include<sstream>\n#include<string>\n#include<unistd.h>\n#include<semaphore.h>\n#include<pthread.h>\n#include<stdio.h>\n#include<fstream>\n#include<iostream>\n\nusing namespace std;\n\nstruct info {\n    int id;\n    int s_time;\n    int d_time;\n};\nint readcount, writecount;\nsem_t mutex1, mutex2, mutex3, wrt, rea;\n// mutex3实现writecount互斥，mutex1对readcount互斥，mutex2对阻塞rea这一过程实现互斥 \n\nvoid *reader(void* param) {\n    struct info *data = (struct info*)param;\n    int id = data->id, s_time = data->s_time, d_time = data->d_time;\n    sleep(s_time);\n\n    sem_wait(&mutex2);\n    if (writecount != 0) sem_wait(&rea);\n    sem_post(&mutex2);\n    \n    cout << \"Reader \" << id << \" apply.\" << endl;\n    sem_wait(&mutex1);\n    readcount++;\n    if (readcount == 1) sem_wait(&wrt);\n    sem_post(&mutex1);\n    \n    cout << \"Reader \" << id << \" reading.\" << endl;\n    sleep(d_time);\n    \n    cout << \"Reader \" << id << \" finish.\" << endl;\n    sem_wait(&mutex1);\n    readcount--;\n    if (readcount == 0)\n        sem_post(&wrt);\n    sem_post(&mutex1);\n\n}\n\nvoid *writer(void* param) {\n    struct info *data = (struct info*)param;\n    int id = data->id, s_time = data->s_time, d_time = data->d_time;\n    sleep(s_time);\n    \n    cout << \"Writer \" << id << \" get.\" << endl;\n    sem_wait(&mutex3);\n    writecount++;\n    if (writecount == 1)\n        sem_init(&rea, 0, 0);\n    sem_post(&mutex3);\n    \n    sem_wait(&wrt);\n    cout << \"Writer \" << id << \" writing.\" << endl;\n    sleep(data->d_time);\n    sem_post(&wrt);\n    \n    cout << \"Writer \" << id << \" finish.\" << endl;\n    sem_wait(&mutex3);\n    writecount--;\n    if (writecount == 0) sem_post(&rea);\n    sem_post(&mutex3);\n\n}\n\nvoid createThread(char *buffer) {\n    string s(buffer);\n    stringstream ss(s), stream;\n    string sss[4];\n    int i = 0;\n    while (getline(ss, sss[i], ' ')) ++i;\n    struct info *data = (struct info*)malloc(sizeof(struct info));\n    stream << sss[0]; stream >> data->id; stream.clear();\n    stream << sss[2]; stream >> data->s_time; stream.clear();\n    stream << sss[3]; stream >> data->d_time; stream.clear();\n    \n    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));\n    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));\n    pthread_attr_init(attr);\n    \n    if (sss[1] == \"R\") {\n        pthread_create(thread, attr, reader, (void *)data);\n        cout << \"Reader \" << data->id << \" is created.\" << endl;\n    } else {\n        pthread_create(thread, attr, writer, (void *)data);\n        cout << \"Writer \" << data->id << \" is created.\" << endl;\n    }\n}\n\nint main(int argc, char *argv[]) {\n    readcount = 0;\n    writecount = 0;\n    sem_init(&mutex1, 0, 1);\n    sem_init(&mutex2, 0, 1);\n    sem_init(&mutex3, 0, 1);\n    sem_init(&wrt, 0, 1);\n    sem_init(&rea, 0, 0);\n    char buffer[16];\n\n    ifstream in(argv[1]);\n    if (!in.is_open()) {\n        cout << \"Error opening file\"<< endl;\n        exit(1);\n    }\n    while (in.peek() != EOF) {\n        in.getline(buffer, 16);\n        createThread(buffer);\n    }\n    sleep(20);\n    \n    return 0;\n}\n```\n\n![](5.png)\n![](6.png)\n\n这里使用c++的cout，输出也会混乱，没有在代码里面改为printf。\n\n\n\n\n\n","slug":"同步1","published":1,"updated":"2016-07-21T08:00:36.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzma000jgobkfjnhthxs","content":"<p>操作系统经典同步问题包括生产者-消费者问题、读者-写者问题、哲学家就餐问题等。下面讲的是生产者-消费者问题以及读者-写者问题。</p>\n<p>需要先弄清楚的是，wait()函数将信号量值-1，若值 大于0，则继续执行接下来的代码，否则等待；signal()函数将信号量+1。<br><a id=\"more\"></a></p>\n<h2 id=\"生产者-消费者问题\"><a href=\"#生产者-消费者问题\" class=\"headerlink\" title=\"生产者-消费者问题\"></a><strong>生产者-消费者问题</strong></h2><p>利用线程同步机制，实现生产者-消费者问题。设计一个程序来解决有限缓冲问题;代码中使用了三个信号量: empty (以记录有多少空位)、full (以记录有多少满位)以及mutex (二进制信号量或互斥信号量，以保护对缓冲插入与删除的操作)。empty与full采用标准计数信号量，而mutex 将采用二进制信号量。生产者与消费者作为独立线程，在empty、full、mutex的同步前提下，对缓冲进行插入与删除。</p>\n<h3 id=\"semaphore\"><a href=\"#semaphore\" class=\"headerlink\" title=\"semaphore\"></a><strong>semaphore</strong></h3><p>使用<semaphore.h>头文件中相应函数实现信号量的创建, 以创建mutex为例：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sem_t</span> mutex;</div><div class=\"line\">sem_init(&amp;mutex, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">sem_wait(&amp;mutex);</div><div class=\"line\"><span class=\"comment\">//访问临界区</span></div><div class=\"line\">sem_post(&amp;mutex);</div><div class=\"line\"><span class=\"comment\">//退出临界区</span></div></pre></td></tr></table></figure></semaphore.h></p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFFER_SIZE 5</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> buffer_item;</div><div class=\"line\">buffer_item buffer[BUFFER_SIZE];</div><div class=\"line\"><span class=\"keyword\">sem_t</span> full, empty, mutex;  <span class=\"comment\">// mutex保护对缓冲插入删除的互斥 </span></div><div class=\"line\"><span class=\"keyword\">int</span> in, out, count;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert_item</span><span class=\"params\">(buffer_item item)</span> </span>&#123;</div><div class=\"line\">    sem_wait(&amp;empty);</div><div class=\"line\">    sem_wait(&amp;mutex);</div><div class=\"line\">    </div><div class=\"line\">    buffer[in] = item;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Produce item \"</span> &lt;&lt; item &lt;&lt; <span class=\"string\">\" at \"</span> &lt;&lt; in &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    out = in;</div><div class=\"line\">    in = (in + <span class=\"number\">1</span>) % BUFFER_SIZE;</div><div class=\"line\">    count++;</div><div class=\"line\">    </div><div class=\"line\">    sem_post(&amp;mutex);</div><div class=\"line\">    sem_post(&amp;full);</div><div class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove_item</span><span class=\"params\">(buffer_item *item)</span> </span>&#123;</div><div class=\"line\">    sem_wait(&amp;full);</div><div class=\"line\">    sem_wait(&amp;mutex);</div><div class=\"line\">    </div><div class=\"line\">    *item = buffer[out];</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Consumed \"</span> &lt;&lt; *item &lt;&lt; <span class=\"string\">\" at \"</span> &lt;&lt; out &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    in = (in<span class=\"number\">-1</span>+BUFFER_SIZE)%BUFFER_SIZE;</div><div class=\"line\">    out = (out<span class=\"number\">-1</span>+BUFFER_SIZE)%BUFFER_SIZE;</div><div class=\"line\">    count--;</div><div class=\"line\">    </div><div class=\"line\">    sem_post(&amp;mutex);</div><div class=\"line\">    sem_post(&amp;empty);</div><div class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">producer</span><span class=\"params\">(<span class=\"keyword\">void</span> *param)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *id = (<span class=\"keyword\">int</span>*)param;</div><div class=\"line\">    buffer_item ran;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        sleep(rand()%<span class=\"number\">5</span>);</div><div class=\"line\">        ran = rand()%<span class=\"number\">100</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (insert_item(ran))</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Producer \"</span> &lt;&lt; *id &lt;&lt; <span class=\"string\">\" report error condition\\n\"</span>&lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">consumer</span><span class=\"params\">(<span class=\"keyword\">void</span> *param)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *id = (<span class=\"keyword\">int</span>*) param;</div><div class=\"line\">    buffer_item ran;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        sleep(rand()%<span class=\"number\">5</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (remove_item(&amp;ran))</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Consumer \"</span>&lt;&lt; *id &lt;&lt; <span class=\"string\">\" report error condition\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</div><div class=\"line\">    in = <span class=\"number\">0</span>, out = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>;</div><div class=\"line\">    sem_init(&amp;mutex, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    sem_init(&amp;empty, <span class=\"number\">0</span>, BUFFER_SIZE);</div><div class=\"line\">    sem_init(&amp;full, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> pnum = atoi(argv[<span class=\"number\">2</span>]), cnum = atoi(argv[<span class=\"number\">3</span>]);</div><div class=\"line\">    <span class=\"keyword\">int</span> sl = atoi(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> p[pnum], c[cnum];</div><div class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</div><div class=\"line\">    pthread_attr_init(&amp;attr);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pnum; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *pid = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</div><div class=\"line\">        *pid = i;</div><div class=\"line\">        pthread_create(&amp;p[i], &amp;attr, producer, (<span class=\"keyword\">void</span>*)pid);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnum; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *cid = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</div><div class=\"line\">        *cid = i;</div><div class=\"line\">        pthread_create(&amp;c[i], &amp;attr, consumer, (<span class=\"keyword\">void</span>*)cid);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    sleep(sl);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结果示例\"><a href=\"#结果示例\" class=\"headerlink\" title=\"结果示例\"></a><strong>结果示例</strong></h3><p><img src=\"1.png\" alt=\"\"><br><img src=\"2.png\" alt=\"\"></p>\n<h2 id=\"读者-写者问题\"><a href=\"#读者-写者问题\" class=\"headerlink\" title=\"读者-写者问题\"></a><strong>读者-写者问题</strong></h2><p>创建一个进程，此进程包含n个线程。用这n个线程来表示n个读者或写者。每个线程按相应测试数据文件(后面有介绍)的要求进行读写操作。用信号量机制分别实现读者优先和写者优先的读者-写者问题。</p>\n<p>读者-写者问题的读写操作限制(仅读者优先或写者优先)：</p>\n<p>1)写-写互斥，即不能有两个写者同时进行写操作。</p>\n<p>2)读-写互斥，即不能同时有一个线程在读，而另一个线程在写。</p>\n<p>3)读-读允许，即可以有一个或多个读者在读。</p>\n<p>读者优先附加限制：如果一个读者申请进行读操作时已有另一个读者正在进行读操作，则该读者可直接开始读操作。</p>\n<p>写者优先的附加限制：如果一个读者申请进行读操作时已有另一写者在等待访问共享资源，则该读者必须等到没有写者处于等待状态后才能开始读操作。</p>\n<h3 id=\"读者优先\"><a href=\"#读者优先\" class=\"headerlink\" title=\"读者优先\"></a><strong>读者优先</strong></h3><p>使用mutex实现对readcount访问的互斥。使用wrt实现对临界区的同步。</p>\n<p>当读者占用临界区时：其他申请临界区的读者无需等待, 直接进入临界区, 执行读的操作；而写者等待, 直到所有读者退出临界区, 即readcount == 0时, 才能开始访问临界区, 执行写的操作。</p>\n<p>当写者占用临界区时：第一个申请的读者等待wrt信号, 其余读者阻塞在mutex信号上, 一直到当前写者退出临界区并获得临界区访问权；其他到来的写者等待, 直到当前写者退出临界区并获得临界区访问权。<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">1 </span>W <span class=\"number\">2</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">2 </span>R <span class=\"number\">2</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">3 </span>R <span class=\"number\">3</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"symbol\">4 </span>R <span class=\"number\">6</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">5 </span>W <span class=\"number\">4</span> <span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">1 </span>W <span class=\"number\">2</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">2 </span>W <span class=\"number\">2</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">3 </span>W <span class=\"number\">3</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"symbol\">4 </span>R <span class=\"number\">5</span> <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>以上为测试数据。每行测试数据包括四个字段，各个字段间用空格分隔。第一字段为一个正整数，表示线程序号。第二字段表示相应线程角色，R表示读者，W表示写者。第三字段为一个正数，表示读写操作的开始时间：线程创建后，延迟相应时间(单位为秒)后发出对共享资源的读写申请。第四字段为一个正数，表示读写操作的持续时间。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;cstdlib&gt;</div><div class=\"line\">#include&lt;sstream&gt;</div><div class=\"line\">#include&lt;string&gt;</div><div class=\"line\">#include&lt;unistd.h&gt;</div><div class=\"line\">#include&lt;semaphore.h&gt;</div><div class=\"line\">#include&lt;pthread.h&gt;</div><div class=\"line\">#include&lt;stdio.h&gt;</div><div class=\"line\">#include&lt;fstream&gt;</div><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct info &#123;</div><div class=\"line\">    int id;</div><div class=\"line\">    int s_time;</div><div class=\"line\">    int d_time;</div><div class=\"line\">&#125;;</div><div class=\"line\">int readcount;</div><div class=\"line\">sem_t mutex, wrt;  // mutex对readcount实验互斥，wrt对写操作互斥 </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">void *reader(void* param) &#123;</div><div class=\"line\">    struct info *data = (struct info*)param;</div><div class=\"line\">    int id = data-&gt;id, s_time = data-&gt;s_time, d_time = data-&gt;d_time;</div><div class=\"line\">    sleep(s_time);</div><div class=\"line\"></div><div class=\"line\">    sem_wait(&amp;mutex);</div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" get.\" &lt;&lt; endl;</div><div class=\"line\">    readcount++;</div><div class=\"line\">    if (readcount == 1) sem_wait(&amp;wrt);</div><div class=\"line\">    sem_post(&amp;mutex);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" reading.\" &lt;&lt; endl;</div><div class=\"line\">    sleep(d_time);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" finish.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex);</div><div class=\"line\">    readcount--;</div><div class=\"line\">    if (readcount == 0) &#123;</div><div class=\"line\">        cout &lt;&lt; \"All readers finish.\" &lt;&lt; endl;</div><div class=\"line\">        sem_post(&amp;wrt);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sem_post(&amp;mutex);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void *writer(void* param) &#123;</div><div class=\"line\">    struct info *data = (struct info*)param;</div><div class=\"line\">    int id = data-&gt;id, s_time = data-&gt;s_time, d_time = data-&gt;d_time;</div><div class=\"line\">    sleep(s_time);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" apply.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;wrt);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" writing.\" &lt;&lt; endl;</div><div class=\"line\">    sleep(d_time);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" finish.\" &lt;&lt; endl;</div><div class=\"line\">    sem_post(&amp;wrt);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void createThread(char *buffer) &#123;</div><div class=\"line\">    string s(buffer);</div><div class=\"line\">    stringstream ss(s), stream;</div><div class=\"line\">    string sss[4];</div><div class=\"line\">    int i = 0;</div><div class=\"line\">    while (getline(ss, sss[i], ' ')) ++i;</div><div class=\"line\">    struct info *data = (struct info*)malloc(sizeof(struct info));</div><div class=\"line\">    stream &lt;&lt; sss[0]; stream &gt;&gt; data-&gt;id; stream.clear();</div><div class=\"line\">    stream &lt;&lt; sss[2]; stream &gt;&gt; data-&gt;s_time; stream.clear();</div><div class=\"line\">    stream &lt;&lt; sss[3]; stream &gt;&gt; data-&gt;d_time; stream.clear();</div><div class=\"line\">    </div><div class=\"line\">    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));</div><div class=\"line\">    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));</div><div class=\"line\">    pthread_attr_init(attr);</div><div class=\"line\">    </div><div class=\"line\">    if (sss[1] == \"R\") &#123;</div><div class=\"line\">        pthread_create(thread, attr, reader, (void *)data);</div><div class=\"line\">        cout &lt;&lt; \"Reader \" &lt;&lt; data-&gt;id &lt;&lt; \" is created.\" &lt;&lt; endl;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        pthread_create(thread, attr, writer, (void *)data);</div><div class=\"line\">        cout &lt;&lt; \"Writer \" &lt;&lt; data-&gt;id &lt;&lt; \" is created.\" &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[]) &#123;</div><div class=\"line\">    readcount = 0;</div><div class=\"line\">    sem_init(&amp;mutex, 0, 1);</div><div class=\"line\">    sem_init(&amp;wrt, 0, 1);</div><div class=\"line\">    char buffer[16];</div><div class=\"line\"></div><div class=\"line\">    ifstream in(argv[1]);</div><div class=\"line\">    if (!in.is_open()) &#123;</div><div class=\"line\">        cout &lt;&lt; \"Error opening file\"&lt;&lt; endl;</div><div class=\"line\">        exit(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    while (in.peek() != EOF) &#123;</div><div class=\"line\">        in.getline(buffer, 16);</div><div class=\"line\">        createThread(buffer);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sleep(20);</div><div class=\"line\">    </div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"3.png\" alt=\"\"><br><img src=\"4.png\" alt=\"\"><br>注意：这里的输出会乱，原因不明，后来在管程的试验中，发现改为printf就不会乱。</p>\n<h3 id=\"写者优先\"><a href=\"#写者优先\" class=\"headerlink\" title=\"写者优先\"></a><strong>写者优先</strong></h3><p>写者优先与读者优先类似。不同之处在于一旦一个写者到来，它应该尽快对文件进行写操作，如果有一个写者在等待，则新到来的读者不允许进行读操作。为此应当添加一个整型变量write_count，用于记录正在等待的写者的数目，当write_count=0时，才可以释放等待的读者线程队列。</p>\n<p>为了对全局变量write_count实现互斥，必须增加一个互斥对象mutex3。</p>\n<p>为了实现写者优先，应当添加一个临界区对象read，当有写者在写文件或等待时，读者必须阻塞在read上。</p>\n<p>读者线程除了要对全局变量read_count实现操作上的互斥外，还必须有一个互斥对象对阻塞read这一过程实现互斥。这两个互斥对象分别命名为mutex1和mutex2。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;cstdlib&gt;</div><div class=\"line\">#include&lt;sstream&gt;</div><div class=\"line\">#include&lt;string&gt;</div><div class=\"line\">#include&lt;unistd.h&gt;</div><div class=\"line\">#include&lt;semaphore.h&gt;</div><div class=\"line\">#include&lt;pthread.h&gt;</div><div class=\"line\">#include&lt;stdio.h&gt;</div><div class=\"line\">#include&lt;fstream&gt;</div><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct info &#123;</div><div class=\"line\">    int id;</div><div class=\"line\">    int s_time;</div><div class=\"line\">    int d_time;</div><div class=\"line\">&#125;;</div><div class=\"line\">int readcount, writecount;</div><div class=\"line\">sem_t mutex1, mutex2, mutex3, wrt, rea;</div><div class=\"line\">// mutex3实现writecount互斥，mutex1对readcount互斥，mutex2对阻塞rea这一过程实现互斥 </div><div class=\"line\"></div><div class=\"line\">void *reader(void* param) &#123;</div><div class=\"line\">    struct info *data = (struct info*)param;</div><div class=\"line\">    int id = data-&gt;id, s_time = data-&gt;s_time, d_time = data-&gt;d_time;</div><div class=\"line\">    sleep(s_time);</div><div class=\"line\"></div><div class=\"line\">    sem_wait(&amp;mutex2);</div><div class=\"line\">    if (writecount != 0) sem_wait(&amp;rea);</div><div class=\"line\">    sem_post(&amp;mutex2);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" apply.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex1);</div><div class=\"line\">    readcount++;</div><div class=\"line\">    if (readcount == 1) sem_wait(&amp;wrt);</div><div class=\"line\">    sem_post(&amp;mutex1);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" reading.\" &lt;&lt; endl;</div><div class=\"line\">    sleep(d_time);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" finish.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex1);</div><div class=\"line\">    readcount--;</div><div class=\"line\">    if (readcount == 0)</div><div class=\"line\">        sem_post(&amp;wrt);</div><div class=\"line\">    sem_post(&amp;mutex1);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void *writer(void* param) &#123;</div><div class=\"line\">    struct info *data = (struct info*)param;</div><div class=\"line\">    int id = data-&gt;id, s_time = data-&gt;s_time, d_time = data-&gt;d_time;</div><div class=\"line\">    sleep(s_time);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" get.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex3);</div><div class=\"line\">    writecount++;</div><div class=\"line\">    if (writecount == 1)</div><div class=\"line\">        sem_init(&amp;rea, 0, 0);</div><div class=\"line\">    sem_post(&amp;mutex3);</div><div class=\"line\">    </div><div class=\"line\">    sem_wait(&amp;wrt);</div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" writing.\" &lt;&lt; endl;</div><div class=\"line\">    sleep(data-&gt;d_time);</div><div class=\"line\">    sem_post(&amp;wrt);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" finish.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex3);</div><div class=\"line\">    writecount--;</div><div class=\"line\">    if (writecount == 0) sem_post(&amp;rea);</div><div class=\"line\">    sem_post(&amp;mutex3);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void createThread(char *buffer) &#123;</div><div class=\"line\">    string s(buffer);</div><div class=\"line\">    stringstream ss(s), stream;</div><div class=\"line\">    string sss[4];</div><div class=\"line\">    int i = 0;</div><div class=\"line\">    while (getline(ss, sss[i], ' ')) ++i;</div><div class=\"line\">    struct info *data = (struct info*)malloc(sizeof(struct info));</div><div class=\"line\">    stream &lt;&lt; sss[0]; stream &gt;&gt; data-&gt;id; stream.clear();</div><div class=\"line\">    stream &lt;&lt; sss[2]; stream &gt;&gt; data-&gt;s_time; stream.clear();</div><div class=\"line\">    stream &lt;&lt; sss[3]; stream &gt;&gt; data-&gt;d_time; stream.clear();</div><div class=\"line\">    </div><div class=\"line\">    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));</div><div class=\"line\">    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));</div><div class=\"line\">    pthread_attr_init(attr);</div><div class=\"line\">    </div><div class=\"line\">    if (sss[1] == \"R\") &#123;</div><div class=\"line\">        pthread_create(thread, attr, reader, (void *)data);</div><div class=\"line\">        cout &lt;&lt; \"Reader \" &lt;&lt; data-&gt;id &lt;&lt; \" is created.\" &lt;&lt; endl;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        pthread_create(thread, attr, writer, (void *)data);</div><div class=\"line\">        cout &lt;&lt; \"Writer \" &lt;&lt; data-&gt;id &lt;&lt; \" is created.\" &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[]) &#123;</div><div class=\"line\">    readcount = 0;</div><div class=\"line\">    writecount = 0;</div><div class=\"line\">    sem_init(&amp;mutex1, 0, 1);</div><div class=\"line\">    sem_init(&amp;mutex2, 0, 1);</div><div class=\"line\">    sem_init(&amp;mutex3, 0, 1);</div><div class=\"line\">    sem_init(&amp;wrt, 0, 1);</div><div class=\"line\">    sem_init(&amp;rea, 0, 0);</div><div class=\"line\">    char buffer[16];</div><div class=\"line\"></div><div class=\"line\">    ifstream in(argv[1]);</div><div class=\"line\">    if (!in.is_open()) &#123;</div><div class=\"line\">        cout &lt;&lt; \"Error opening file\"&lt;&lt; endl;</div><div class=\"line\">        exit(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    while (in.peek() != EOF) &#123;</div><div class=\"line\">        in.getline(buffer, 16);</div><div class=\"line\">        createThread(buffer);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sleep(20);</div><div class=\"line\">    </div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"5.png\" alt=\"\"><br><img src=\"6.png\" alt=\"\"></p>\n<p>这里使用c++的cout，输出也会混乱，没有在代码里面改为printf。</p>\n","excerpt":"<p>操作系统经典同步问题包括生产者-消费者问题、读者-写者问题、哲学家就餐问题等。下面讲的是生产者-消费者问题以及读者-写者问题。</p>\n<p>需要先弄清楚的是，wait()函数将信号量值-1，若值 大于0，则继续执行接下来的代码，否则等待；signal()函数将信号量+1。<br>","more":"</p>\n<h2 id=\"生产者-消费者问题\"><a href=\"#生产者-消费者问题\" class=\"headerlink\" title=\"生产者-消费者问题\"></a><strong>生产者-消费者问题</strong></h2><p>利用线程同步机制，实现生产者-消费者问题。设计一个程序来解决有限缓冲问题;代码中使用了三个信号量: empty (以记录有多少空位)、full (以记录有多少满位)以及mutex (二进制信号量或互斥信号量，以保护对缓冲插入与删除的操作)。empty与full采用标准计数信号量，而mutex 将采用二进制信号量。生产者与消费者作为独立线程，在empty、full、mutex的同步前提下，对缓冲进行插入与删除。</p>\n<h3 id=\"semaphore\"><a href=\"#semaphore\" class=\"headerlink\" title=\"semaphore\"></a><strong>semaphore</strong></h3><p>使用<semaphore.h>头文件中相应函数实现信号量的创建, 以创建mutex为例：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sem_t</span> mutex;</div><div class=\"line\">sem_init(&amp;mutex, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">sem_wait(&amp;mutex);</div><div class=\"line\"><span class=\"comment\">//访问临界区</span></div><div class=\"line\">sem_post(&amp;mutex);</div><div class=\"line\"><span class=\"comment\">//退出临界区</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFFER_SIZE 5</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> buffer_item;</div><div class=\"line\">buffer_item buffer[BUFFER_SIZE];</div><div class=\"line\"><span class=\"keyword\">sem_t</span> full, empty, mutex;  <span class=\"comment\">// mutex保护对缓冲插入删除的互斥 </span></div><div class=\"line\"><span class=\"keyword\">int</span> in, out, count;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert_item</span><span class=\"params\">(buffer_item item)</span> </span>&#123;</div><div class=\"line\">    sem_wait(&amp;empty);</div><div class=\"line\">    sem_wait(&amp;mutex);</div><div class=\"line\">    </div><div class=\"line\">    buffer[in] = item;</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Produce item \"</span> &lt;&lt; item &lt;&lt; <span class=\"string\">\" at \"</span> &lt;&lt; in &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    out = in;</div><div class=\"line\">    in = (in + <span class=\"number\">1</span>) % BUFFER_SIZE;</div><div class=\"line\">    count++;</div><div class=\"line\">    </div><div class=\"line\">    sem_post(&amp;mutex);</div><div class=\"line\">    sem_post(&amp;full);</div><div class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove_item</span><span class=\"params\">(buffer_item *item)</span> </span>&#123;</div><div class=\"line\">    sem_wait(&amp;full);</div><div class=\"line\">    sem_wait(&amp;mutex);</div><div class=\"line\">    </div><div class=\"line\">    *item = buffer[out];</div><div class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Consumed \"</span> &lt;&lt; *item &lt;&lt; <span class=\"string\">\" at \"</span> &lt;&lt; out &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    in = (in<span class=\"number\">-1</span>+BUFFER_SIZE)%BUFFER_SIZE;</div><div class=\"line\">    out = (out<span class=\"number\">-1</span>+BUFFER_SIZE)%BUFFER_SIZE;</div><div class=\"line\">    count--;</div><div class=\"line\">    </div><div class=\"line\">    sem_post(&amp;mutex);</div><div class=\"line\">    sem_post(&amp;empty);</div><div class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">producer</span><span class=\"params\">(<span class=\"keyword\">void</span> *param)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *id = (<span class=\"keyword\">int</span>*)param;</div><div class=\"line\">    buffer_item ran;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        sleep(rand()%<span class=\"number\">5</span>);</div><div class=\"line\">        ran = rand()%<span class=\"number\">100</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (insert_item(ran))</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Producer \"</span> &lt;&lt; *id &lt;&lt; <span class=\"string\">\" report error condition\\n\"</span>&lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">consumer</span><span class=\"params\">(<span class=\"keyword\">void</span> *param)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *id = (<span class=\"keyword\">int</span>*) param;</div><div class=\"line\">    buffer_item ran;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">        sleep(rand()%<span class=\"number\">5</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (remove_item(&amp;ran))</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Consumer \"</span>&lt;&lt; *id &lt;&lt; <span class=\"string\">\" report error condition\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</div><div class=\"line\">    in = <span class=\"number\">0</span>, out = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>;</div><div class=\"line\">    sem_init(&amp;mutex, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    sem_init(&amp;empty, <span class=\"number\">0</span>, BUFFER_SIZE);</div><div class=\"line\">    sem_init(&amp;full, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> pnum = atoi(argv[<span class=\"number\">2</span>]), cnum = atoi(argv[<span class=\"number\">3</span>]);</div><div class=\"line\">    <span class=\"keyword\">int</span> sl = atoi(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> p[pnum], c[cnum];</div><div class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</div><div class=\"line\">    pthread_attr_init(&amp;attr);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pnum; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *pid = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</div><div class=\"line\">        *pid = i;</div><div class=\"line\">        pthread_create(&amp;p[i], &amp;attr, producer, (<span class=\"keyword\">void</span>*)pid);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnum; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *cid = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</div><div class=\"line\">        *cid = i;</div><div class=\"line\">        pthread_create(&amp;c[i], &amp;attr, consumer, (<span class=\"keyword\">void</span>*)cid);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    sleep(sl);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结果示例\"><a href=\"#结果示例\" class=\"headerlink\" title=\"结果示例\"></a><strong>结果示例</strong></h3><p><img src=\"1.png\" alt=\"\"><br><img src=\"2.png\" alt=\"\"></p>\n<h2 id=\"读者-写者问题\"><a href=\"#读者-写者问题\" class=\"headerlink\" title=\"读者-写者问题\"></a><strong>读者-写者问题</strong></h2><p>创建一个进程，此进程包含n个线程。用这n个线程来表示n个读者或写者。每个线程按相应测试数据文件(后面有介绍)的要求进行读写操作。用信号量机制分别实现读者优先和写者优先的读者-写者问题。</p>\n<p>读者-写者问题的读写操作限制(仅读者优先或写者优先)：</p>\n<p>1)写-写互斥，即不能有两个写者同时进行写操作。</p>\n<p>2)读-写互斥，即不能同时有一个线程在读，而另一个线程在写。</p>\n<p>3)读-读允许，即可以有一个或多个读者在读。</p>\n<p>读者优先附加限制：如果一个读者申请进行读操作时已有另一个读者正在进行读操作，则该读者可直接开始读操作。</p>\n<p>写者优先的附加限制：如果一个读者申请进行读操作时已有另一写者在等待访问共享资源，则该读者必须等到没有写者处于等待状态后才能开始读操作。</p>\n<h3 id=\"读者优先\"><a href=\"#读者优先\" class=\"headerlink\" title=\"读者优先\"></a><strong>读者优先</strong></h3><p>使用mutex实现对readcount访问的互斥。使用wrt实现对临界区的同步。</p>\n<p>当读者占用临界区时：其他申请临界区的读者无需等待, 直接进入临界区, 执行读的操作；而写者等待, 直到所有读者退出临界区, 即readcount == 0时, 才能开始访问临界区, 执行写的操作。</p>\n<p>当写者占用临界区时：第一个申请的读者等待wrt信号, 其余读者阻塞在mutex信号上, 一直到当前写者退出临界区并获得临界区访问权；其他到来的写者等待, 直到当前写者退出临界区并获得临界区访问权。<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">1 </span>W <span class=\"number\">2</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">2 </span>R <span class=\"number\">2</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">3 </span>R <span class=\"number\">3</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"symbol\">4 </span>R <span class=\"number\">6</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">5 </span>W <span class=\"number\">4</span> <span class=\"number\">3</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">1 </span>W <span class=\"number\">2</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">2 </span>W <span class=\"number\">2</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"symbol\">3 </span>W <span class=\"number\">3</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"symbol\">4 </span>R <span class=\"number\">5</span> <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>以上为测试数据。每行测试数据包括四个字段，各个字段间用空格分隔。第一字段为一个正整数，表示线程序号。第二字段表示相应线程角色，R表示读者，W表示写者。第三字段为一个正数，表示读写操作的开始时间：线程创建后，延迟相应时间(单位为秒)后发出对共享资源的读写申请。第四字段为一个正数，表示读写操作的持续时间。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;cstdlib&gt;</div><div class=\"line\">#include&lt;sstream&gt;</div><div class=\"line\">#include&lt;string&gt;</div><div class=\"line\">#include&lt;unistd.h&gt;</div><div class=\"line\">#include&lt;semaphore.h&gt;</div><div class=\"line\">#include&lt;pthread.h&gt;</div><div class=\"line\">#include&lt;stdio.h&gt;</div><div class=\"line\">#include&lt;fstream&gt;</div><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct info &#123;</div><div class=\"line\">    int id;</div><div class=\"line\">    int s_time;</div><div class=\"line\">    int d_time;</div><div class=\"line\">&#125;;</div><div class=\"line\">int readcount;</div><div class=\"line\">sem_t mutex, wrt;  // mutex对readcount实验互斥，wrt对写操作互斥 </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">void *reader(void* param) &#123;</div><div class=\"line\">    struct info *data = (struct info*)param;</div><div class=\"line\">    int id = data-&gt;id, s_time = data-&gt;s_time, d_time = data-&gt;d_time;</div><div class=\"line\">    sleep(s_time);</div><div class=\"line\"></div><div class=\"line\">    sem_wait(&amp;mutex);</div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" get.\" &lt;&lt; endl;</div><div class=\"line\">    readcount++;</div><div class=\"line\">    if (readcount == 1) sem_wait(&amp;wrt);</div><div class=\"line\">    sem_post(&amp;mutex);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" reading.\" &lt;&lt; endl;</div><div class=\"line\">    sleep(d_time);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" finish.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex);</div><div class=\"line\">    readcount--;</div><div class=\"line\">    if (readcount == 0) &#123;</div><div class=\"line\">        cout &lt;&lt; \"All readers finish.\" &lt;&lt; endl;</div><div class=\"line\">        sem_post(&amp;wrt);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sem_post(&amp;mutex);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void *writer(void* param) &#123;</div><div class=\"line\">    struct info *data = (struct info*)param;</div><div class=\"line\">    int id = data-&gt;id, s_time = data-&gt;s_time, d_time = data-&gt;d_time;</div><div class=\"line\">    sleep(s_time);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" apply.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;wrt);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" writing.\" &lt;&lt; endl;</div><div class=\"line\">    sleep(d_time);</div><div class=\"line\"></div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" finish.\" &lt;&lt; endl;</div><div class=\"line\">    sem_post(&amp;wrt);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void createThread(char *buffer) &#123;</div><div class=\"line\">    string s(buffer);</div><div class=\"line\">    stringstream ss(s), stream;</div><div class=\"line\">    string sss[4];</div><div class=\"line\">    int i = 0;</div><div class=\"line\">    while (getline(ss, sss[i], ' ')) ++i;</div><div class=\"line\">    struct info *data = (struct info*)malloc(sizeof(struct info));</div><div class=\"line\">    stream &lt;&lt; sss[0]; stream &gt;&gt; data-&gt;id; stream.clear();</div><div class=\"line\">    stream &lt;&lt; sss[2]; stream &gt;&gt; data-&gt;s_time; stream.clear();</div><div class=\"line\">    stream &lt;&lt; sss[3]; stream &gt;&gt; data-&gt;d_time; stream.clear();</div><div class=\"line\">    </div><div class=\"line\">    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));</div><div class=\"line\">    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));</div><div class=\"line\">    pthread_attr_init(attr);</div><div class=\"line\">    </div><div class=\"line\">    if (sss[1] == \"R\") &#123;</div><div class=\"line\">        pthread_create(thread, attr, reader, (void *)data);</div><div class=\"line\">        cout &lt;&lt; \"Reader \" &lt;&lt; data-&gt;id &lt;&lt; \" is created.\" &lt;&lt; endl;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        pthread_create(thread, attr, writer, (void *)data);</div><div class=\"line\">        cout &lt;&lt; \"Writer \" &lt;&lt; data-&gt;id &lt;&lt; \" is created.\" &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[]) &#123;</div><div class=\"line\">    readcount = 0;</div><div class=\"line\">    sem_init(&amp;mutex, 0, 1);</div><div class=\"line\">    sem_init(&amp;wrt, 0, 1);</div><div class=\"line\">    char buffer[16];</div><div class=\"line\"></div><div class=\"line\">    ifstream in(argv[1]);</div><div class=\"line\">    if (!in.is_open()) &#123;</div><div class=\"line\">        cout &lt;&lt; \"Error opening file\"&lt;&lt; endl;</div><div class=\"line\">        exit(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    while (in.peek() != EOF) &#123;</div><div class=\"line\">        in.getline(buffer, 16);</div><div class=\"line\">        createThread(buffer);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sleep(20);</div><div class=\"line\">    </div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"3.png\" alt=\"\"><br><img src=\"4.png\" alt=\"\"><br>注意：这里的输出会乱，原因不明，后来在管程的试验中，发现改为printf就不会乱。</p>\n<h3 id=\"写者优先\"><a href=\"#写者优先\" class=\"headerlink\" title=\"写者优先\"></a><strong>写者优先</strong></h3><p>写者优先与读者优先类似。不同之处在于一旦一个写者到来，它应该尽快对文件进行写操作，如果有一个写者在等待，则新到来的读者不允许进行读操作。为此应当添加一个整型变量write_count，用于记录正在等待的写者的数目，当write_count=0时，才可以释放等待的读者线程队列。</p>\n<p>为了对全局变量write_count实现互斥，必须增加一个互斥对象mutex3。</p>\n<p>为了实现写者优先，应当添加一个临界区对象read，当有写者在写文件或等待时，读者必须阻塞在read上。</p>\n<p>读者线程除了要对全局变量read_count实现操作上的互斥外，还必须有一个互斥对象对阻塞read这一过程实现互斥。这两个互斥对象分别命名为mutex1和mutex2。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;cstdlib&gt;</div><div class=\"line\">#include&lt;sstream&gt;</div><div class=\"line\">#include&lt;string&gt;</div><div class=\"line\">#include&lt;unistd.h&gt;</div><div class=\"line\">#include&lt;semaphore.h&gt;</div><div class=\"line\">#include&lt;pthread.h&gt;</div><div class=\"line\">#include&lt;stdio.h&gt;</div><div class=\"line\">#include&lt;fstream&gt;</div><div class=\"line\">#include&lt;iostream&gt;</div><div class=\"line\"></div><div class=\"line\">using namespace std;</div><div class=\"line\"></div><div class=\"line\">struct info &#123;</div><div class=\"line\">    int id;</div><div class=\"line\">    int s_time;</div><div class=\"line\">    int d_time;</div><div class=\"line\">&#125;;</div><div class=\"line\">int readcount, writecount;</div><div class=\"line\">sem_t mutex1, mutex2, mutex3, wrt, rea;</div><div class=\"line\">// mutex3实现writecount互斥，mutex1对readcount互斥，mutex2对阻塞rea这一过程实现互斥 </div><div class=\"line\"></div><div class=\"line\">void *reader(void* param) &#123;</div><div class=\"line\">    struct info *data = (struct info*)param;</div><div class=\"line\">    int id = data-&gt;id, s_time = data-&gt;s_time, d_time = data-&gt;d_time;</div><div class=\"line\">    sleep(s_time);</div><div class=\"line\"></div><div class=\"line\">    sem_wait(&amp;mutex2);</div><div class=\"line\">    if (writecount != 0) sem_wait(&amp;rea);</div><div class=\"line\">    sem_post(&amp;mutex2);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" apply.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex1);</div><div class=\"line\">    readcount++;</div><div class=\"line\">    if (readcount == 1) sem_wait(&amp;wrt);</div><div class=\"line\">    sem_post(&amp;mutex1);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" reading.\" &lt;&lt; endl;</div><div class=\"line\">    sleep(d_time);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Reader \" &lt;&lt; id &lt;&lt; \" finish.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex1);</div><div class=\"line\">    readcount--;</div><div class=\"line\">    if (readcount == 0)</div><div class=\"line\">        sem_post(&amp;wrt);</div><div class=\"line\">    sem_post(&amp;mutex1);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void *writer(void* param) &#123;</div><div class=\"line\">    struct info *data = (struct info*)param;</div><div class=\"line\">    int id = data-&gt;id, s_time = data-&gt;s_time, d_time = data-&gt;d_time;</div><div class=\"line\">    sleep(s_time);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" get.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex3);</div><div class=\"line\">    writecount++;</div><div class=\"line\">    if (writecount == 1)</div><div class=\"line\">        sem_init(&amp;rea, 0, 0);</div><div class=\"line\">    sem_post(&amp;mutex3);</div><div class=\"line\">    </div><div class=\"line\">    sem_wait(&amp;wrt);</div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" writing.\" &lt;&lt; endl;</div><div class=\"line\">    sleep(data-&gt;d_time);</div><div class=\"line\">    sem_post(&amp;wrt);</div><div class=\"line\">    </div><div class=\"line\">    cout &lt;&lt; \"Writer \" &lt;&lt; id &lt;&lt; \" finish.\" &lt;&lt; endl;</div><div class=\"line\">    sem_wait(&amp;mutex3);</div><div class=\"line\">    writecount--;</div><div class=\"line\">    if (writecount == 0) sem_post(&amp;rea);</div><div class=\"line\">    sem_post(&amp;mutex3);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">void createThread(char *buffer) &#123;</div><div class=\"line\">    string s(buffer);</div><div class=\"line\">    stringstream ss(s), stream;</div><div class=\"line\">    string sss[4];</div><div class=\"line\">    int i = 0;</div><div class=\"line\">    while (getline(ss, sss[i], ' ')) ++i;</div><div class=\"line\">    struct info *data = (struct info*)malloc(sizeof(struct info));</div><div class=\"line\">    stream &lt;&lt; sss[0]; stream &gt;&gt; data-&gt;id; stream.clear();</div><div class=\"line\">    stream &lt;&lt; sss[2]; stream &gt;&gt; data-&gt;s_time; stream.clear();</div><div class=\"line\">    stream &lt;&lt; sss[3]; stream &gt;&gt; data-&gt;d_time; stream.clear();</div><div class=\"line\">    </div><div class=\"line\">    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));</div><div class=\"line\">    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));</div><div class=\"line\">    pthread_attr_init(attr);</div><div class=\"line\">    </div><div class=\"line\">    if (sss[1] == \"R\") &#123;</div><div class=\"line\">        pthread_create(thread, attr, reader, (void *)data);</div><div class=\"line\">        cout &lt;&lt; \"Reader \" &lt;&lt; data-&gt;id &lt;&lt; \" is created.\" &lt;&lt; endl;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        pthread_create(thread, attr, writer, (void *)data);</div><div class=\"line\">        cout &lt;&lt; \"Writer \" &lt;&lt; data-&gt;id &lt;&lt; \" is created.\" &lt;&lt; endl;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, char *argv[]) &#123;</div><div class=\"line\">    readcount = 0;</div><div class=\"line\">    writecount = 0;</div><div class=\"line\">    sem_init(&amp;mutex1, 0, 1);</div><div class=\"line\">    sem_init(&amp;mutex2, 0, 1);</div><div class=\"line\">    sem_init(&amp;mutex3, 0, 1);</div><div class=\"line\">    sem_init(&amp;wrt, 0, 1);</div><div class=\"line\">    sem_init(&amp;rea, 0, 0);</div><div class=\"line\">    char buffer[16];</div><div class=\"line\"></div><div class=\"line\">    ifstream in(argv[1]);</div><div class=\"line\">    if (!in.is_open()) &#123;</div><div class=\"line\">        cout &lt;&lt; \"Error opening file\"&lt;&lt; endl;</div><div class=\"line\">        exit(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    while (in.peek() != EOF) &#123;</div><div class=\"line\">        in.getline(buffer, 16);</div><div class=\"line\">        createThread(buffer);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sleep(20);</div><div class=\"line\">    </div><div class=\"line\">    return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"5.png\" alt=\"\"><br><img src=\"6.png\" alt=\"\"></p>\n<p>这里使用c++的cout，输出也会混乱，没有在代码里面改为printf。</p>"},{"title":"OS同步问题（二）","toc":true,"date":"2016-07-20T09:37:10.000Z","_content":"接下来利用管程实现五个哲学家就餐问题。每个哲学家或者拿到一双筷子，或者不拿。\n<!--more-->\n### **原理介绍**\n- Mutex：\n对每个管程，使用用于管程中过程互斥调用的信号量mutex（初值为1）。\n进程调用管程中的任何过程时，应执行wait(mutex)；进程退出管程时应执行signal(mutex)开放管程，以便让其他调用者进入。\n为了使进程在等待资源期间，其他进程能进入管程，故在mwait操作中也必须执行signal(mutex)，否则会妨碍其他进程进入管程，导致无法释放资源。\n- next和next\\_count：\n对每个管程，引入信号量next（初值为0），凡发出msignal操作的进程应该用wait(next)挂起自己，直到被释放进程退出管程或产生其他等待条件。\n进程在退出管程的过程前，须检查是否有别的进程在信号量next上等待，若有，则用signal(next)唤醒它。next_count（初值为0），用来记录在next上等待的进程个数。\n\n- x\\_sem和 x\\_count：\n引入信号量x_sem（初值为0），申请资源得不到满足时，执行wait(x\\_sem)挂起。由于释放资源时，需要知道是否有别的进程在等待资源，用计数器x\\_count（初值为0）记录等待资源的进程数。\n执行msignal操作时，应让等待资源的诸进程中的某个进程立即恢复运行，而不让其他进程抢先进入管程，这可以用signal(x\\_sem)来实现。\n\n### **完整代码**\n\n``` cpp\n#include<cstdlib>\n#include<string.h>\n#include<unistd.h>\n#include<semaphore.h>\n#include<pthread.h>\n#include<stdio.h>\n#include<fstream>\n#include<iostream>\nusing namespace std;\n\nsem_t mutex, next;  // mutex对使用管程实现互斥 \nint next_count;   // 在next上等待的进程个数 \n\nstruct IM {\n    int x_count;  // 记录等待资源的进程数 \n    sem_t x_sem;  // 申请资源得不到满足时，执行wait(x_sem)挂起\n    \n    void signal() {\n        if (x_count > 0) {\n            next_count++;\n            sem_post(&x_sem);\n            sem_wait(&next);\n            next_count--;\n        }\n    }\n           \n    void wait() {\n        x_count++;\n        if (next_count > 0)\n            sem_post(&next);\n        else\n            sem_post(&mutex);\n        sem_wait(&x_sem);\n        x_count--;\n    }\n          \n    void init() {\n        x_count = 0;\n        sem_init(&x_sem, 0, 0);\n    }\n};\n\nstruct monitor {\n    struct IM self[5];\n    enum { thinking, hungry, eating } state[5];\n    \n    void init() {\n        for (int i = 0; i < 5; i++) {\n            state[i] = thinking;\n            self[i].init();\n        }\n    }\n    \n    void menter() {\n        sem_wait(&mutex);\n    }\n          \n    void mleave() {\n        if (next_count > 0)\n            sem_post(&next);\n        else\n            sem_post(&mutex);\n    }\n    \n    void pickup(int i) {\n        menter();\n\n        state[i] = hungry;\n        test(i);\n        if (state[i] != eating) self[i].wait();\n\n        mleave();\n    }\n\n    void putdown(int i) {\n        menter();\n\n        state[i] = thinking;\n        test((i + 4) % 5);\n        test((i + 1) % 5);\n\n        mleave();\n    }\n          \n    void test(int i) {\n        if ((state[(i + 4) % 5]) != eating && \n            (state[(i + 1) % 5]) != eating && \n            (state[i] == hungry)) {\n            state[i] = eating;\n            self[i].signal();\n        }\n    }\n} moni;\n    \nvoid *philo(void *param) {\n    int i = *((int *)param);\n\n    printf(\"Philosopher is hungry->%d\\n\", i);\n    moni.pickup(i);\n\n    printf(\"Philosopher is eating->%d\\n\", i); \n    sleep(rand()%4);\n\n    printf(\"Philosopher finish->%d\\n\", i);\n    moni.putdown(i);\n}\n\nvoid createPhilo(int i) {\n    int *data = (int *)malloc(sizeof(int));\n    *data = i;\n\n    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));\n    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));\n    pthread_attr_init(attr);\n\n    pthread_create(thread, attr, philo, (void *)data);\n}\n\nint main() {\n    sem_init(&mutex, 0, 1);\n    sem_init(&next, 0, 0);\n    next_count = 0;\n    moni.init();\n    \n    for (int i = 0; i < 5; ++i) createPhilo(i);\n    sleep(20);\n    return 0;\n}\n```\n### **结果示例**\n![](1.png)","source":"_posts/同步2.md","raw":"---\ntitle: OS同步问题（二）\ntoc: true\ndate: 2016-07-20 17:37:10\ntags:\n- C/C++\n- thread\n- semaphore\ncategories:\n- Operating System\n- C/C++\n---\n接下来利用管程实现五个哲学家就餐问题。每个哲学家或者拿到一双筷子，或者不拿。\n<!--more-->\n### **原理介绍**\n- Mutex：\n对每个管程，使用用于管程中过程互斥调用的信号量mutex（初值为1）。\n进程调用管程中的任何过程时，应执行wait(mutex)；进程退出管程时应执行signal(mutex)开放管程，以便让其他调用者进入。\n为了使进程在等待资源期间，其他进程能进入管程，故在mwait操作中也必须执行signal(mutex)，否则会妨碍其他进程进入管程，导致无法释放资源。\n- next和next\\_count：\n对每个管程，引入信号量next（初值为0），凡发出msignal操作的进程应该用wait(next)挂起自己，直到被释放进程退出管程或产生其他等待条件。\n进程在退出管程的过程前，须检查是否有别的进程在信号量next上等待，若有，则用signal(next)唤醒它。next_count（初值为0），用来记录在next上等待的进程个数。\n\n- x\\_sem和 x\\_count：\n引入信号量x_sem（初值为0），申请资源得不到满足时，执行wait(x\\_sem)挂起。由于释放资源时，需要知道是否有别的进程在等待资源，用计数器x\\_count（初值为0）记录等待资源的进程数。\n执行msignal操作时，应让等待资源的诸进程中的某个进程立即恢复运行，而不让其他进程抢先进入管程，这可以用signal(x\\_sem)来实现。\n\n### **完整代码**\n\n``` cpp\n#include<cstdlib>\n#include<string.h>\n#include<unistd.h>\n#include<semaphore.h>\n#include<pthread.h>\n#include<stdio.h>\n#include<fstream>\n#include<iostream>\nusing namespace std;\n\nsem_t mutex, next;  // mutex对使用管程实现互斥 \nint next_count;   // 在next上等待的进程个数 \n\nstruct IM {\n    int x_count;  // 记录等待资源的进程数 \n    sem_t x_sem;  // 申请资源得不到满足时，执行wait(x_sem)挂起\n    \n    void signal() {\n        if (x_count > 0) {\n            next_count++;\n            sem_post(&x_sem);\n            sem_wait(&next);\n            next_count--;\n        }\n    }\n           \n    void wait() {\n        x_count++;\n        if (next_count > 0)\n            sem_post(&next);\n        else\n            sem_post(&mutex);\n        sem_wait(&x_sem);\n        x_count--;\n    }\n          \n    void init() {\n        x_count = 0;\n        sem_init(&x_sem, 0, 0);\n    }\n};\n\nstruct monitor {\n    struct IM self[5];\n    enum { thinking, hungry, eating } state[5];\n    \n    void init() {\n        for (int i = 0; i < 5; i++) {\n            state[i] = thinking;\n            self[i].init();\n        }\n    }\n    \n    void menter() {\n        sem_wait(&mutex);\n    }\n          \n    void mleave() {\n        if (next_count > 0)\n            sem_post(&next);\n        else\n            sem_post(&mutex);\n    }\n    \n    void pickup(int i) {\n        menter();\n\n        state[i] = hungry;\n        test(i);\n        if (state[i] != eating) self[i].wait();\n\n        mleave();\n    }\n\n    void putdown(int i) {\n        menter();\n\n        state[i] = thinking;\n        test((i + 4) % 5);\n        test((i + 1) % 5);\n\n        mleave();\n    }\n          \n    void test(int i) {\n        if ((state[(i + 4) % 5]) != eating && \n            (state[(i + 1) % 5]) != eating && \n            (state[i] == hungry)) {\n            state[i] = eating;\n            self[i].signal();\n        }\n    }\n} moni;\n    \nvoid *philo(void *param) {\n    int i = *((int *)param);\n\n    printf(\"Philosopher is hungry->%d\\n\", i);\n    moni.pickup(i);\n\n    printf(\"Philosopher is eating->%d\\n\", i); \n    sleep(rand()%4);\n\n    printf(\"Philosopher finish->%d\\n\", i);\n    moni.putdown(i);\n}\n\nvoid createPhilo(int i) {\n    int *data = (int *)malloc(sizeof(int));\n    *data = i;\n\n    pthread_t *thread = (pthread_t*)malloc(sizeof(pthread_t));\n    pthread_attr_t *attr = (pthread_attr_t*)malloc(sizeof(pthread_attr_t));\n    pthread_attr_init(attr);\n\n    pthread_create(thread, attr, philo, (void *)data);\n}\n\nint main() {\n    sem_init(&mutex, 0, 1);\n    sem_init(&next, 0, 0);\n    next_count = 0;\n    moni.init();\n    \n    for (int i = 0; i < 5; ++i) createPhilo(i);\n    sleep(20);\n    return 0;\n}\n```\n### **结果示例**\n![](1.png)","slug":"同步2","published":1,"updated":"2016-07-21T07:48:40.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzmw000ogobkd09fki7d","content":"<p>接下来利用管程实现五个哲学家就餐问题。每个哲学家或者拿到一双筷子，或者不拿。<br><a id=\"more\"></a></p>\n<h3 id=\"原理介绍\"><a href=\"#原理介绍\" class=\"headerlink\" title=\"原理介绍\"></a><strong>原理介绍</strong></h3><ul>\n<li>Mutex：<br>对每个管程，使用用于管程中过程互斥调用的信号量mutex（初值为1）。<br>进程调用管程中的任何过程时，应执行wait(mutex)；进程退出管程时应执行signal(mutex)开放管程，以便让其他调用者进入。<br>为了使进程在等待资源期间，其他进程能进入管程，故在mwait操作中也必须执行signal(mutex)，否则会妨碍其他进程进入管程，导致无法释放资源。</li>\n<li><p>next和next_count：<br>对每个管程，引入信号量next（初值为0），凡发出msignal操作的进程应该用wait(next)挂起自己，直到被释放进程退出管程或产生其他等待条件。<br>进程在退出管程的过程前，须检查是否有别的进程在信号量next上等待，若有，则用signal(next)唤醒它。next_count（初值为0），用来记录在next上等待的进程个数。</p>\n</li>\n<li><p>x_sem和 x_count：<br>引入信号量x_sem（初值为0），申请资源得不到满足时，执行wait(x_sem)挂起。由于释放资源时，需要知道是否有别的进程在等待资源，用计数器x_count（初值为0）记录等待资源的进程数。<br>执行msignal操作时，应让等待资源的诸进程中的某个进程立即恢复运行，而不让其他进程抢先进入管程，这可以用signal(x_sem)来实现。</p>\n</li>\n</ul>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">sem_t</span> mutex, next;  <span class=\"comment\">// mutex对使用管程实现互斥 </span></div><div class=\"line\"><span class=\"keyword\">int</span> next_count;   <span class=\"comment\">// 在next上等待的进程个数 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> IM &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x_count;  <span class=\"comment\">// 记录等待资源的进程数 </span></div><div class=\"line\">    <span class=\"keyword\">sem_t</span> x_sem;  <span class=\"comment\">// 申请资源得不到满足时，执行wait(x_sem)挂起</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signal</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x_count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            next_count++;</div><div class=\"line\">            sem_post(&amp;x_sem);</div><div class=\"line\">            sem_wait(&amp;next);</div><div class=\"line\">            next_count--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">           </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        x_count++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (next_count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            sem_post(&amp;next);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            sem_post(&amp;mutex);</div><div class=\"line\">        sem_wait(&amp;x_sem);</div><div class=\"line\">        x_count--;</div><div class=\"line\">    &#125;</div><div class=\"line\">          </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        x_count = <span class=\"number\">0</span>;</div><div class=\"line\">        sem_init(&amp;x_sem, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> monitor &#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> IM self[<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"keyword\">enum</span> &#123; thinking, hungry, eating &#125; state[<span class=\"number\">5</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            state[i] = thinking;</div><div class=\"line\">            self[i].init();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">menter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        sem_wait(&amp;mutex);</div><div class=\"line\">    &#125;</div><div class=\"line\">          </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mleave</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (next_count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            sem_post(&amp;next);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            sem_post(&amp;mutex);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pickup</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">        menter();</div><div class=\"line\"></div><div class=\"line\">        state[i] = hungry;</div><div class=\"line\">        test(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (state[i] != eating) self[i].wait();</div><div class=\"line\"></div><div class=\"line\">        mleave();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putdown</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">        menter();</div><div class=\"line\"></div><div class=\"line\">        state[i] = thinking;</div><div class=\"line\">        test((i + <span class=\"number\">4</span>) % <span class=\"number\">5</span>);</div><div class=\"line\">        test((i + <span class=\"number\">1</span>) % <span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">        mleave();</div><div class=\"line\">    &#125;</div><div class=\"line\">          </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((state[(i + <span class=\"number\">4</span>) % <span class=\"number\">5</span>]) != eating &amp;&amp; </div><div class=\"line\">            (state[(i + <span class=\"number\">1</span>) % <span class=\"number\">5</span>]) != eating &amp;&amp; </div><div class=\"line\">            (state[i] == hungry)) &#123;</div><div class=\"line\">            state[i] = eating;</div><div class=\"line\">            self[i].signal();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; moni;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">philo</span><span class=\"params\">(<span class=\"keyword\">void</span> *param)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = *((<span class=\"keyword\">int</span> *)param);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Philosopher is hungry-&gt;%d\\n\"</span>, i);</div><div class=\"line\">    moni.pickup(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Philosopher is eating-&gt;%d\\n\"</span>, i); </div><div class=\"line\">    sleep(rand()%<span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Philosopher finish-&gt;%d\\n\"</span>, i);</div><div class=\"line\">    moni.putdown(i);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createPhilo</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *data = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</div><div class=\"line\">    *data = i;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> *thread = (<span class=\"keyword\">pthread_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">pthread_t</span>));</div><div class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> *attr = (<span class=\"keyword\">pthread_attr_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">pthread_attr_t</span>));</div><div class=\"line\">    pthread_attr_init(attr);</div><div class=\"line\"></div><div class=\"line\">    pthread_create(thread, attr, philo, (<span class=\"keyword\">void</span> *)data);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    sem_init(&amp;mutex, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    sem_init(&amp;next, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    next_count = <span class=\"number\">0</span>;</div><div class=\"line\">    moni.init();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) createPhilo(i);</div><div class=\"line\">    sleep(<span class=\"number\">20</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结果示例\"><a href=\"#结果示例\" class=\"headerlink\" title=\"结果示例\"></a><strong>结果示例</strong></h3><p><img src=\"1.png\" alt=\"\"></p>\n","excerpt":"<p>接下来利用管程实现五个哲学家就餐问题。每个哲学家或者拿到一双筷子，或者不拿。<br>","more":"</p>\n<h3 id=\"原理介绍\"><a href=\"#原理介绍\" class=\"headerlink\" title=\"原理介绍\"></a><strong>原理介绍</strong></h3><ul>\n<li>Mutex：<br>对每个管程，使用用于管程中过程互斥调用的信号量mutex（初值为1）。<br>进程调用管程中的任何过程时，应执行wait(mutex)；进程退出管程时应执行signal(mutex)开放管程，以便让其他调用者进入。<br>为了使进程在等待资源期间，其他进程能进入管程，故在mwait操作中也必须执行signal(mutex)，否则会妨碍其他进程进入管程，导致无法释放资源。</li>\n<li><p>next和next_count：<br>对每个管程，引入信号量next（初值为0），凡发出msignal操作的进程应该用wait(next)挂起自己，直到被释放进程退出管程或产生其他等待条件。<br>进程在退出管程的过程前，须检查是否有别的进程在信号量next上等待，若有，则用signal(next)唤醒它。next_count（初值为0），用来记录在next上等待的进程个数。</p>\n</li>\n<li><p>x_sem和 x_count：<br>引入信号量x_sem（初值为0），申请资源得不到满足时，执行wait(x_sem)挂起。由于释放资源时，需要知道是否有别的进程在等待资源，用计数器x_count（初值为0）记录等待资源的进程数。<br>执行msignal操作时，应让等待资源的诸进程中的某个进程立即恢复运行，而不让其他进程抢先进入管程，这可以用signal(x_sem)来实现。</p>\n</li>\n</ul>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;semaphore.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">sem_t</span> mutex, next;  <span class=\"comment\">// mutex对使用管程实现互斥 </span></div><div class=\"line\"><span class=\"keyword\">int</span> next_count;   <span class=\"comment\">// 在next上等待的进程个数 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> IM &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> x_count;  <span class=\"comment\">// 记录等待资源的进程数 </span></div><div class=\"line\">    <span class=\"keyword\">sem_t</span> x_sem;  <span class=\"comment\">// 申请资源得不到满足时，执行wait(x_sem)挂起</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">signal</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (x_count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            next_count++;</div><div class=\"line\">            sem_post(&amp;x_sem);</div><div class=\"line\">            sem_wait(&amp;next);</div><div class=\"line\">            next_count--;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">           </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wait</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        x_count++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (next_count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            sem_post(&amp;next);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            sem_post(&amp;mutex);</div><div class=\"line\">        sem_wait(&amp;x_sem);</div><div class=\"line\">        x_count--;</div><div class=\"line\">    &#125;</div><div class=\"line\">          </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        x_count = <span class=\"number\">0</span>;</div><div class=\"line\">        sem_init(&amp;x_sem, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> monitor &#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> IM self[<span class=\"number\">5</span>];</div><div class=\"line\">    <span class=\"keyword\">enum</span> &#123; thinking, hungry, eating &#125; state[<span class=\"number\">5</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">            state[i] = thinking;</div><div class=\"line\">            self[i].init();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">menter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        sem_wait(&amp;mutex);</div><div class=\"line\">    &#125;</div><div class=\"line\">          </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mleave</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (next_count &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            sem_post(&amp;next);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            sem_post(&amp;mutex);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pickup</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">        menter();</div><div class=\"line\"></div><div class=\"line\">        state[i] = hungry;</div><div class=\"line\">        test(i);</div><div class=\"line\">        <span class=\"keyword\">if</span> (state[i] != eating) self[i].wait();</div><div class=\"line\"></div><div class=\"line\">        mleave();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putdown</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">        menter();</div><div class=\"line\"></div><div class=\"line\">        state[i] = thinking;</div><div class=\"line\">        test((i + <span class=\"number\">4</span>) % <span class=\"number\">5</span>);</div><div class=\"line\">        test((i + <span class=\"number\">1</span>) % <span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">        mleave();</div><div class=\"line\">    &#125;</div><div class=\"line\">          </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((state[(i + <span class=\"number\">4</span>) % <span class=\"number\">5</span>]) != eating &amp;&amp; </div><div class=\"line\">            (state[(i + <span class=\"number\">1</span>) % <span class=\"number\">5</span>]) != eating &amp;&amp; </div><div class=\"line\">            (state[i] == hungry)) &#123;</div><div class=\"line\">            state[i] = eating;</div><div class=\"line\">            self[i].signal();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; moni;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">philo</span><span class=\"params\">(<span class=\"keyword\">void</span> *param)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = *((<span class=\"keyword\">int</span> *)param);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Philosopher is hungry-&gt;%d\\n\"</span>, i);</div><div class=\"line\">    moni.pickup(i);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Philosopher is eating-&gt;%d\\n\"</span>, i); </div><div class=\"line\">    sleep(rand()%<span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Philosopher finish-&gt;%d\\n\"</span>, i);</div><div class=\"line\">    moni.putdown(i);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">createPhilo</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *data = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</div><div class=\"line\">    *data = i;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> *thread = (<span class=\"keyword\">pthread_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">pthread_t</span>));</div><div class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> *attr = (<span class=\"keyword\">pthread_attr_t</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">pthread_attr_t</span>));</div><div class=\"line\">    pthread_attr_init(attr);</div><div class=\"line\"></div><div class=\"line\">    pthread_create(thread, attr, philo, (<span class=\"keyword\">void</span> *)data);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    sem_init(&amp;mutex, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">    sem_init(&amp;next, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    next_count = <span class=\"number\">0</span>;</div><div class=\"line\">    moni.init();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) createPhilo(i);</div><div class=\"line\">    sleep(<span class=\"number\">20</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结果示例\"><a href=\"#结果示例\" class=\"headerlink\" title=\"结果示例\"></a><strong>结果示例</strong></h3><p><img src=\"1.png\" alt=\"\"></p>"},{"title":"图的最短路径","toc":true,"date":"2016-07-25T07:44:54.000Z","_content":"\n图的最短路径问题是一个比较经典的问题，以下介绍Floyd算法和Dijkstra两个算法解决此问题。\n<!--more-->\n\n## **Floyd算法**\n\nFloyd算法可用于解决无向图的最短路径问题。弗洛伊德（Floyd）算法过程：\n\n- 用D[v][w]记录每一对顶点的最短距离。\n- 依次扫描每一个点，并以其为基点再遍历所有每一对顶点D[][]的值，看看是否可用过该基点让这对顶点间的距离更小。\n\n最短距离有三种情况：\n\n１、两点的直达距离最短。（如下图<v,x>）\n\n２、两点间只通过一个中间点而距离最短。（图<v,u>）\n\n３、两点间用通过两各以上的顶点而距离最短。（图<v,w>）\n\n对于第一种情况：在初始化的时候就已经找出来了且以后也不会更改到。\n\n对于第二种情况：弗洛伊德算法的基本操作就是对于每一对顶点，遍历所有其它顶点，看看可否通过这一个顶点让这对顶点距离更短，也就是遍历了图中所有的三角形（算法中对同一个三角形扫描了九次，原则上只用扫描三次即可，但要加入判断，效率更低）。\n\n对于第三种情况：如下图的五边形，可先找一点（比如x，使<v,u>=2），就变成了四边形问题，再找一点（比如y,使<u,w>=2），可变成三角形问题了（v,u,w），也就变成第二种情况了，由此对于n边形也可以一步步转化成四边形三角形问题。（这里面不用担心哪个点要先找哪个点要后找，因为找了任一个点都可以使其变成（n－1）边形的问题）。\n![](a.png)\n\n以下代码中，可以进行多次测试，每次初始化二维数组，然后输入m对距离，最后输入某两点的参数可以得到两点间的最短距离：\n``` cpp\n#include<iostream>    // Floyd算法 无向图 \nusing namespace std;\n\nint main() {\n    int n, m;\n    while (cin >> n) {\n        cin >> m;\n        int ma[n][n], a, b, x;\n        \n        for (int i = 0; i < n; ++i)   // 初始化 \n        for (int j = 0; j < n; ++j) {\n            ma[i][j] = 999999;   // 代表不连通 \n            if (i == j) ma[i][j] = 0;\n        }\n        \n        while (m--) {   // a b 间距离为 x，给出m对 \n           cin >> a >> b >> x;\n           if (x < ma[a][b]) ma[a][b] = x;\n           ma[b][a] = ma[a][b];   // 无向图特征 \n        }\n                    \n        for (int i = 0; i < n; ++i)   // 算法核心 \n        for (int j = 0; j < n; ++j)\n        for (int k = 0; k < n; ++k) {\n            if (ma[j][k] > ma[j][i]+ma[i][k])\n            ma[j][k] = ma[j][i]+ma[i][k];\n        }\n                     \n        int s, t;   // 输出某对距离 \n        cin >> s >> t;\n        if (ma[s][t] == 999999) cout << -1 << endl;\n        else cout << ma[s][t] << endl;\n    }\n    return 0;\n}\n```\n\n## **Dijkstra算法**\n\nDijkstra算法应用了贪心算法模式，是目前公认的最好的求解最短路径的方法。算法解决的是有向图中单个源点到其他顶点的最短路径问题，其主要特点是每次迭代时选择的下一个顶点是标记点之外距离源点最近的顶点。但由于Dijkstra算法主要计算从源点到其他所有点的最短路径，所以算法的效率较低。\n\n### **基本原理**\n\n设置顶点集合S并不断地作贪心选择来扩充这个集合。一个顶点属于集合S当且仅当从源到该顶点的最短路径长度已知。\n\n初始时，S中仅含有源。设u是G的某一个顶点，把从源到u且中间只经过S中顶点的路称为从源到u的特殊路径，并用数组dist记录当前每个顶点所对应的最短特殊路径长度。Dijkstra算法每次从V-S中取出具有最短特殊路长度的顶点u，将u添加到S中，同时对数组dist作必要的修改。一旦S包含了所有V中顶点，dist就记录了从源到所有其它顶点之间的最短路径长度。\n\ndist[i]储存起点v0到i的最短距离，visited数组标记visited[i]是否被访问过。对于每一次查找，找出相连接的、未被访问过的边长度最短的顶点，设为u，遍历每个顶点k，若v0到k的已记录的距离大于v0通过u到k的距离，则更新dist，dist用这个比较短的距离。\n### **代码**\n``` cpp\nvoid DijkstraPath(int ma[][200], int n, int *dist, int v0, int t) {\n    int i, j, k;\n    bool *visited = new bool[n];\n    \n    for(i = 0; i < n; i++) {     // 初始化 dist\n        dist[i] = ma[v0][i];\n        visited[i] = false;\n        dist[v0] = 0;\n    }\n    visited[v0] = true;\n    \n    for(i = 1; i < n; i++) {       // n-1次查找 每次找出相连接的最小边以及下标\n        int min = 999999;          // 对于每个点若通过该点的距离更小则更新dist \n        int u;   // 最小边的下标 \n        for(j = 0; j < n; j++) {   // 最小边以及下标 \n            if(visited[j] == false && dist[j] < min) {\n                min = dist[j];\n                u = j;        \n            }\n        }\n        visited[u] = true;\n        \n        for(k = 0; k < n; k++) {   // 更改dist， min即代表ma[v0][u]  ma[v0][u]+ma[u][k] < ma[v0][k]\n            if(visited[k] == false && min+ma[u][k] < dist[k]) {   \n                dist[k] = min+ma[u][k];\n            }\n        }\n    }\n    \n    if (ma[v0][t] == 999999) cout << \"No way between \" << v0 << \" and \" << t << endl;\n    else cout << \"The shortest length is \" << ma[v0][t] << endl;\n}\n```\n","source":"_posts/图的最短路径.md","raw":"---\ntitle: 图的最短路径\ntoc: true\ndate: 2016-07-25 15:44:54\ntags: \n- C/C++\ncategories:\n- algorithm\n- Data Structure\n---\n\n图的最短路径问题是一个比较经典的问题，以下介绍Floyd算法和Dijkstra两个算法解决此问题。\n<!--more-->\n\n## **Floyd算法**\n\nFloyd算法可用于解决无向图的最短路径问题。弗洛伊德（Floyd）算法过程：\n\n- 用D[v][w]记录每一对顶点的最短距离。\n- 依次扫描每一个点，并以其为基点再遍历所有每一对顶点D[][]的值，看看是否可用过该基点让这对顶点间的距离更小。\n\n最短距离有三种情况：\n\n１、两点的直达距离最短。（如下图<v,x>）\n\n２、两点间只通过一个中间点而距离最短。（图<v,u>）\n\n３、两点间用通过两各以上的顶点而距离最短。（图<v,w>）\n\n对于第一种情况：在初始化的时候就已经找出来了且以后也不会更改到。\n\n对于第二种情况：弗洛伊德算法的基本操作就是对于每一对顶点，遍历所有其它顶点，看看可否通过这一个顶点让这对顶点距离更短，也就是遍历了图中所有的三角形（算法中对同一个三角形扫描了九次，原则上只用扫描三次即可，但要加入判断，效率更低）。\n\n对于第三种情况：如下图的五边形，可先找一点（比如x，使<v,u>=2），就变成了四边形问题，再找一点（比如y,使<u,w>=2），可变成三角形问题了（v,u,w），也就变成第二种情况了，由此对于n边形也可以一步步转化成四边形三角形问题。（这里面不用担心哪个点要先找哪个点要后找，因为找了任一个点都可以使其变成（n－1）边形的问题）。\n![](a.png)\n\n以下代码中，可以进行多次测试，每次初始化二维数组，然后输入m对距离，最后输入某两点的参数可以得到两点间的最短距离：\n``` cpp\n#include<iostream>    // Floyd算法 无向图 \nusing namespace std;\n\nint main() {\n    int n, m;\n    while (cin >> n) {\n        cin >> m;\n        int ma[n][n], a, b, x;\n        \n        for (int i = 0; i < n; ++i)   // 初始化 \n        for (int j = 0; j < n; ++j) {\n            ma[i][j] = 999999;   // 代表不连通 \n            if (i == j) ma[i][j] = 0;\n        }\n        \n        while (m--) {   // a b 间距离为 x，给出m对 \n           cin >> a >> b >> x;\n           if (x < ma[a][b]) ma[a][b] = x;\n           ma[b][a] = ma[a][b];   // 无向图特征 \n        }\n                    \n        for (int i = 0; i < n; ++i)   // 算法核心 \n        for (int j = 0; j < n; ++j)\n        for (int k = 0; k < n; ++k) {\n            if (ma[j][k] > ma[j][i]+ma[i][k])\n            ma[j][k] = ma[j][i]+ma[i][k];\n        }\n                     \n        int s, t;   // 输出某对距离 \n        cin >> s >> t;\n        if (ma[s][t] == 999999) cout << -1 << endl;\n        else cout << ma[s][t] << endl;\n    }\n    return 0;\n}\n```\n\n## **Dijkstra算法**\n\nDijkstra算法应用了贪心算法模式，是目前公认的最好的求解最短路径的方法。算法解决的是有向图中单个源点到其他顶点的最短路径问题，其主要特点是每次迭代时选择的下一个顶点是标记点之外距离源点最近的顶点。但由于Dijkstra算法主要计算从源点到其他所有点的最短路径，所以算法的效率较低。\n\n### **基本原理**\n\n设置顶点集合S并不断地作贪心选择来扩充这个集合。一个顶点属于集合S当且仅当从源到该顶点的最短路径长度已知。\n\n初始时，S中仅含有源。设u是G的某一个顶点，把从源到u且中间只经过S中顶点的路称为从源到u的特殊路径，并用数组dist记录当前每个顶点所对应的最短特殊路径长度。Dijkstra算法每次从V-S中取出具有最短特殊路长度的顶点u，将u添加到S中，同时对数组dist作必要的修改。一旦S包含了所有V中顶点，dist就记录了从源到所有其它顶点之间的最短路径长度。\n\ndist[i]储存起点v0到i的最短距离，visited数组标记visited[i]是否被访问过。对于每一次查找，找出相连接的、未被访问过的边长度最短的顶点，设为u，遍历每个顶点k，若v0到k的已记录的距离大于v0通过u到k的距离，则更新dist，dist用这个比较短的距离。\n### **代码**\n``` cpp\nvoid DijkstraPath(int ma[][200], int n, int *dist, int v0, int t) {\n    int i, j, k;\n    bool *visited = new bool[n];\n    \n    for(i = 0; i < n; i++) {     // 初始化 dist\n        dist[i] = ma[v0][i];\n        visited[i] = false;\n        dist[v0] = 0;\n    }\n    visited[v0] = true;\n    \n    for(i = 1; i < n; i++) {       // n-1次查找 每次找出相连接的最小边以及下标\n        int min = 999999;          // 对于每个点若通过该点的距离更小则更新dist \n        int u;   // 最小边的下标 \n        for(j = 0; j < n; j++) {   // 最小边以及下标 \n            if(visited[j] == false && dist[j] < min) {\n                min = dist[j];\n                u = j;        \n            }\n        }\n        visited[u] = true;\n        \n        for(k = 0; k < n; k++) {   // 更改dist， min即代表ma[v0][u]  ma[v0][u]+ma[u][k] < ma[v0][k]\n            if(visited[k] == false && min+ma[u][k] < dist[k]) {   \n                dist[k] = min+ma[u][k];\n            }\n        }\n    }\n    \n    if (ma[v0][t] == 999999) cout << \"No way between \" << v0 << \" and \" << t << endl;\n    else cout << \"The shortest length is \" << ma[v0][t] << endl;\n}\n```\n","slug":"图的最短路径","published":1,"updated":"2016-07-25T10:11:28.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjznh000qgobkew1k8bs6","content":"<p>图的最短路径问题是一个比较经典的问题，以下介绍Floyd算法和Dijkstra两个算法解决此问题。<br><a id=\"more\"></a></p>\n<h2 id=\"Floyd算法\"><a href=\"#Floyd算法\" class=\"headerlink\" title=\"Floyd算法\"></a><strong>Floyd算法</strong></h2><p>Floyd算法可用于解决无向图的最短路径问题。弗洛伊德（Floyd）算法过程：</p>\n<ul>\n<li>用D[v][w]记录每一对顶点的最短距离。</li>\n<li>依次扫描每一个点，并以其为基点再遍历所有每一对顶点D[][]的值，看看是否可用过该基点让这对顶点间的距离更小。</li>\n</ul>\n<p>最短距离有三种情况：</p>\n<p>１、两点的直达距离最短。（如下图<v,x>）</v,x></p>\n<p>２、两点间只通过一个中间点而距离最短。（图<v,u>）</v,u></p>\n<p>３、两点间用通过两各以上的顶点而距离最短。（图<v,w>）</v,w></p>\n<p>对于第一种情况：在初始化的时候就已经找出来了且以后也不会更改到。</p>\n<p>对于第二种情况：弗洛伊德算法的基本操作就是对于每一对顶点，遍历所有其它顶点，看看可否通过这一个顶点让这对顶点距离更短，也就是遍历了图中所有的三角形（算法中对同一个三角形扫描了九次，原则上只用扫描三次即可，但要加入判断，效率更低）。</p>\n<p>对于第三种情况：如下图的五边形，可先找一点（比如x，使<v,u>=2），就变成了四边形问题，再找一点（比如y,使<u,w>=2），可变成三角形问题了（v,u,w），也就变成第二种情况了，由此对于n边形也可以一步步转化成四边形三角形问题。（这里面不用担心哪个点要先找哪个点要后找，因为找了任一个点都可以使其变成（n－1）边形的问题）。<br><img src=\"a.png\" alt=\"\"></u,w></v,u></p>\n<p>以下代码中，可以进行多次测试，每次初始化二维数组，然后输入m对距离，最后输入某两点的参数可以得到两点间的最短距离：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span>    <span class=\"comment\">// Floyd算法 无向图 </span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n) &#123;</div><div class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</div><div class=\"line\">        <span class=\"keyword\">int</span> ma[n][n], a, b, x;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)   <span class=\"comment\">// 初始化 </span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</div><div class=\"line\">            ma[i][j] = <span class=\"number\">999999</span>;   <span class=\"comment\">// 代表不连通 </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (i == j) ma[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">while</span> (m--) &#123;   <span class=\"comment\">// a b 间距离为 x，给出m对 </span></div><div class=\"line\">           <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; x;</div><div class=\"line\">           <span class=\"keyword\">if</span> (x &lt; ma[a][b]) ma[a][b] = x;</div><div class=\"line\">           ma[b][a] = ma[a][b];   <span class=\"comment\">// 无向图特征 </span></div><div class=\"line\">        &#125;</div><div class=\"line\">                    </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)   <span class=\"comment\">// 算法核心 </span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (ma[j][k] &gt; ma[j][i]+ma[i][k])</div><div class=\"line\">            ma[j][k] = ma[j][i]+ma[i][k];</div><div class=\"line\">        &#125;</div><div class=\"line\">                     </div><div class=\"line\">        <span class=\"keyword\">int</span> s, t;   <span class=\"comment\">// 输出某对距离 </span></div><div class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s &gt;&gt; t;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ma[s][t] == <span class=\"number\">999999</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; ma[s][t] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a><strong>Dijkstra算法</strong></h2><p>Dijkstra算法应用了贪心算法模式，是目前公认的最好的求解最短路径的方法。算法解决的是有向图中单个源点到其他顶点的最短路径问题，其主要特点是每次迭代时选择的下一个顶点是标记点之外距离源点最近的顶点。但由于Dijkstra算法主要计算从源点到其他所有点的最短路径，所以算法的效率较低。</p>\n<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a><strong>基本原理</strong></h3><p>设置顶点集合S并不断地作贪心选择来扩充这个集合。一个顶点属于集合S当且仅当从源到该顶点的最短路径长度已知。</p>\n<p>初始时，S中仅含有源。设u是G的某一个顶点，把从源到u且中间只经过S中顶点的路称为从源到u的特殊路径，并用数组dist记录当前每个顶点所对应的最短特殊路径长度。Dijkstra算法每次从V-S中取出具有最短特殊路长度的顶点u，将u添加到S中，同时对数组dist作必要的修改。一旦S包含了所有V中顶点，dist就记录了从源到所有其它顶点之间的最短路径长度。</p>\n<p>dist[i]储存起点v0到i的最短距离，visited数组标记visited[i]是否被访问过。对于每一次查找，找出相连接的、未被访问过的边长度最短的顶点，设为u，遍历每个顶点k，若v0到k的已记录的距离大于v0通过u到k的距离，则更新dist，dist用这个比较短的距离。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DijkstraPath</span><span class=\"params\">(<span class=\"keyword\">int</span> ma[][<span class=\"number\">200</span>], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> *dist, <span class=\"keyword\">int</span> v0, <span class=\"keyword\">int</span> t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j, k;</div><div class=\"line\">    <span class=\"keyword\">bool</span> *visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[n];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;     <span class=\"comment\">// 初始化 dist</span></div><div class=\"line\">        dist[i] = ma[v0][i];</div><div class=\"line\">        visited[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">        dist[v0] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    visited[v0] = <span class=\"literal\">true</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;       <span class=\"comment\">// n-1次查找 每次找出相连接的最小边以及下标</span></div><div class=\"line\">        <span class=\"keyword\">int</span> min = <span class=\"number\">999999</span>;          <span class=\"comment\">// 对于每个点若通过该点的距离更小则更新dist </span></div><div class=\"line\">        <span class=\"keyword\">int</span> u;   <span class=\"comment\">// 最小边的下标 </span></div><div class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;   <span class=\"comment\">// 最小边以及下标 </span></div><div class=\"line\">            <span class=\"keyword\">if</span>(visited[j] == <span class=\"literal\">false</span> &amp;&amp; dist[j] &lt; min) &#123;</div><div class=\"line\">                min = dist[j];</div><div class=\"line\">                u = j;        </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        visited[u] = <span class=\"literal\">true</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span>(k = <span class=\"number\">0</span>; k &lt; n; k++) &#123;   <span class=\"comment\">// 更改dist， min即代表ma[v0][u]  ma[v0][u]+ma[u][k] &lt; ma[v0][k]</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(visited[k] == <span class=\"literal\">false</span> &amp;&amp; min+ma[u][k] &lt; dist[k]) &#123;   </div><div class=\"line\">                dist[k] = min+ma[u][k];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (ma[v0][t] == <span class=\"number\">999999</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No way between \"</span> &lt;&lt; v0 &lt;&lt; <span class=\"string\">\" and \"</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The shortest length is \"</span> &lt;&lt; ma[v0][t] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>图的最短路径问题是一个比较经典的问题，以下介绍Floyd算法和Dijkstra两个算法解决此问题。<br>","more":"</p>\n<h2 id=\"Floyd算法\"><a href=\"#Floyd算法\" class=\"headerlink\" title=\"Floyd算法\"></a><strong>Floyd算法</strong></h2><p>Floyd算法可用于解决无向图的最短路径问题。弗洛伊德（Floyd）算法过程：</p>\n<ul>\n<li>用D[v][w]记录每一对顶点的最短距离。</li>\n<li>依次扫描每一个点，并以其为基点再遍历所有每一对顶点D[][]的值，看看是否可用过该基点让这对顶点间的距离更小。</li>\n</ul>\n<p>最短距离有三种情况：</p>\n<p>１、两点的直达距离最短。（如下图<v,x>）</p>\n<p>２、两点间只通过一个中间点而距离最短。（图<v,u>）</p>\n<p>３、两点间用通过两各以上的顶点而距离最短。（图<v,w>）</p>\n<p>对于第一种情况：在初始化的时候就已经找出来了且以后也不会更改到。</p>\n<p>对于第二种情况：弗洛伊德算法的基本操作就是对于每一对顶点，遍历所有其它顶点，看看可否通过这一个顶点让这对顶点距离更短，也就是遍历了图中所有的三角形（算法中对同一个三角形扫描了九次，原则上只用扫描三次即可，但要加入判断，效率更低）。</p>\n<p>对于第三种情况：如下图的五边形，可先找一点（比如x，使<v,u>=2），就变成了四边形问题，再找一点（比如y,使<u,w>=2），可变成三角形问题了（v,u,w），也就变成第二种情况了，由此对于n边形也可以一步步转化成四边形三角形问题。（这里面不用担心哪个点要先找哪个点要后找，因为找了任一个点都可以使其变成（n－1）边形的问题）。<br><img src=\"a.png\" alt=\"\"></p>\n<p>以下代码中，可以进行多次测试，每次初始化二维数组，然后输入m对距离，最后输入某两点的参数可以得到两点间的最短距离：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span>    <span class=\"comment\">// Floyd算法 无向图 </span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n) &#123;</div><div class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; m;</div><div class=\"line\">        <span class=\"keyword\">int</span> ma[n][n], a, b, x;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)   <span class=\"comment\">// 初始化 </span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</div><div class=\"line\">            ma[i][j] = <span class=\"number\">999999</span>;   <span class=\"comment\">// 代表不连通 </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (i == j) ma[i][j] = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">while</span> (m--) &#123;   <span class=\"comment\">// a b 间距离为 x，给出m对 </span></div><div class=\"line\">           <span class=\"built_in\">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; x;</div><div class=\"line\">           <span class=\"keyword\">if</span> (x &lt; ma[a][b]) ma[a][b] = x;</div><div class=\"line\">           ma[b][a] = ma[a][b];   <span class=\"comment\">// 无向图特征 </span></div><div class=\"line\">        &#125;</div><div class=\"line\">                    </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)   <span class=\"comment\">// 算法核心 </span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (ma[j][k] &gt; ma[j][i]+ma[i][k])</div><div class=\"line\">            ma[j][k] = ma[j][i]+ma[i][k];</div><div class=\"line\">        &#125;</div><div class=\"line\">                     </div><div class=\"line\">        <span class=\"keyword\">int</span> s, t;   <span class=\"comment\">// 输出某对距离 </span></div><div class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; s &gt;&gt; t;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ma[s][t] == <span class=\"number\">999999</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; ma[s][t] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a><strong>Dijkstra算法</strong></h2><p>Dijkstra算法应用了贪心算法模式，是目前公认的最好的求解最短路径的方法。算法解决的是有向图中单个源点到其他顶点的最短路径问题，其主要特点是每次迭代时选择的下一个顶点是标记点之外距离源点最近的顶点。但由于Dijkstra算法主要计算从源点到其他所有点的最短路径，所以算法的效率较低。</p>\n<h3 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a><strong>基本原理</strong></h3><p>设置顶点集合S并不断地作贪心选择来扩充这个集合。一个顶点属于集合S当且仅当从源到该顶点的最短路径长度已知。</p>\n<p>初始时，S中仅含有源。设u是G的某一个顶点，把从源到u且中间只经过S中顶点的路称为从源到u的特殊路径，并用数组dist记录当前每个顶点所对应的最短特殊路径长度。Dijkstra算法每次从V-S中取出具有最短特殊路长度的顶点u，将u添加到S中，同时对数组dist作必要的修改。一旦S包含了所有V中顶点，dist就记录了从源到所有其它顶点之间的最短路径长度。</p>\n<p>dist[i]储存起点v0到i的最短距离，visited数组标记visited[i]是否被访问过。对于每一次查找，找出相连接的、未被访问过的边长度最短的顶点，设为u，遍历每个顶点k，若v0到k的已记录的距离大于v0通过u到k的距离，则更新dist，dist用这个比较短的距离。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DijkstraPath</span><span class=\"params\">(<span class=\"keyword\">int</span> ma[][<span class=\"number\">200</span>], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> *dist, <span class=\"keyword\">int</span> v0, <span class=\"keyword\">int</span> t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j, k;</div><div class=\"line\">    <span class=\"keyword\">bool</span> *visited = <span class=\"keyword\">new</span> <span class=\"keyword\">bool</span>[n];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;     <span class=\"comment\">// 初始化 dist</span></div><div class=\"line\">        dist[i] = ma[v0][i];</div><div class=\"line\">        visited[i] = <span class=\"literal\">false</span>;</div><div class=\"line\">        dist[v0] = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    visited[v0] = <span class=\"literal\">true</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;       <span class=\"comment\">// n-1次查找 每次找出相连接的最小边以及下标</span></div><div class=\"line\">        <span class=\"keyword\">int</span> min = <span class=\"number\">999999</span>;          <span class=\"comment\">// 对于每个点若通过该点的距离更小则更新dist </span></div><div class=\"line\">        <span class=\"keyword\">int</span> u;   <span class=\"comment\">// 最小边的下标 </span></div><div class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;   <span class=\"comment\">// 最小边以及下标 </span></div><div class=\"line\">            <span class=\"keyword\">if</span>(visited[j] == <span class=\"literal\">false</span> &amp;&amp; dist[j] &lt; min) &#123;</div><div class=\"line\">                min = dist[j];</div><div class=\"line\">                u = j;        </div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        visited[u] = <span class=\"literal\">true</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span>(k = <span class=\"number\">0</span>; k &lt; n; k++) &#123;   <span class=\"comment\">// 更改dist， min即代表ma[v0][u]  ma[v0][u]+ma[u][k] &lt; ma[v0][k]</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(visited[k] == <span class=\"literal\">false</span> &amp;&amp; min+ma[u][k] &lt; dist[k]) &#123;   </div><div class=\"line\">                dist[k] = min+ma[u][k];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (ma[v0][t] == <span class=\"number\">999999</span>) <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"No way between \"</span> &lt;&lt; v0 &lt;&lt; <span class=\"string\">\" and \"</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The shortest length is \"</span> &lt;&lt; ma[v0][t] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"MIPS多周期CPU","toc":true,"date":"2016-07-18T03:53:28.000Z","_content":"在对单周期CPU有一定了解后，现在我们来看看多周期CPU。多周期CPU指的是将整个CPU的执行过程分成几个阶段，每个阶段用一个时钟去完成，然后开始下一条指令的执行，而每种指令执行时所用的时钟数不尽相同，这就是所谓的多周期CPU。需要注意的是，在本设计中，不同指令的操作码跟单周期CPU会有所不同；指令存储器和数据存储器的存储单元是字节宽度，而不是使用32位。\n<!--more-->\n## **MIPS32指令格式**\n同单周期CPU的指令格式，指令有三种类型：R型、J型、I型\n## **多周期CPU执行的指令**\n### **算术运算指令**\n![](suansu.png)\n### **逻辑运算指令**\n![](luoji.png)\n### **移位指令**\n![](yiwei.png)\n功能：rd<－rs<<(zero-extend)sa，左移sa位 ，(zero-extend)sa\n### **传送指令**\n![](chuansong.png)\n### **比较指令**\n![](bijiao.png)\n### **存储器读写指令**\n![](duxie.png)\n### **分支指令**\n![](fenzhi.png)\n### **跳转指令**\n![](tiaozhuan.png)\n### **调用子程序指令**\n![](zi.png)\n功能：调用子程序，pc <－ {pc[31..28],addr[27..2],0,0}；$31<－pc+4，返回地址设置；子程序返回，需用指令 jr  $31。\n### **停机指令**\n![](tingji.png)\n## **设计原理**\n### **处理过程**\nCPU在处理指令时，一般需要经过以下几个阶段：\n\n- 取指令(IF)：根据程序计数器pc中的指令地址，从存储器中取出一条指令，同时，pc根据指令字长度自动递增产生下一条指令所需要的指令地址，但遇到“地址转移”指令时，则控制器把“转移地址”送入pc，当然得到的“地址”需要做些变换才送入pc。\n- 指令译码(ID)：对取指令操作中得到的指令进行分析并译码，确定这条指令需要完成的操作，从而产生相应的操作控制信号，用于驱动执行状态中的各种操作。\n- 指令执行(EXE)：根据指令译码得到的操作控制信号，具体地执行指令动作，然后转移到结果写回状态。\n- 存储器访问(MEM)：所有需要访问存储器的操作都将在这个步骤中执行，该步骤给出存储器的数据地址，把数据写入到存储器中数据地址所指定的存储单元或者从存储器中得到数据地址单元中的数据。\n- 结果写回(WB)：指令执行的结果或者访问存储器中得到的数据写回相应的目的寄存器中。\n![](guoc.png)\n### **状态转移**\n状态的转移有的是无条件的，例如从IF状态转移到ID 和 EXE状态就是无条件的；有些是有条件的，例如ID 或 EXE状态之后不止一个状态，到底转向哪个状态由该指令功能，即指令操作码决定。每个状态代表一个时钟周期。\n![](zhuanyi.png)\n## **数据通路及其控制**\n### **控制部件**\n下图是多周期CPU控制部件的电路结构，三个D触发器用于保存当前状态，是时序逻辑电路，RST用于初始化状态“000“，另外两个部分都是组合逻辑电路，一个用于产生下一个阶段的状态，另一个用于产生每个阶段的控制信号。从图上可看出，下个状态取决于指令操作码和当前状态；而每个阶段的控制信号取决于指令操作码、当前状态和反映运算结果的状态zero标志等。\n![](kongzhi.png)\n### **数据通路**\n下图是一个简单的基本上能够在单周期上完成所要求设计的指令功能的数据通路和必要的控制线路图。其中指令和数据各存储在不同存储器中，即有指令存储器和数据存储器。访问存储器时，先给出地址，然后由读/写信号控制（1-写，0-读。当然，也可以由时钟信号控制，但必须在图上画出来）。对于寄存器组，读操作时，给出寄存器地址（编号），输出端就直接输出相应数据；而在写操作时，在 WE使能信号为1时，在时钟边沿触发写入。\n特别提示，图上增加IR指令寄存器，目的是使指令代码保持稳定，还有pc增加写使能控制信号pcWre，也是确保pc适时修改，原因都是和多周期工作的CPU有关。ADR、BDR、ALUout、ALUM2DR四个寄存器不需要写使能信号，其作用是切分数据通路，将大组合逻辑切分为若干个小组合逻辑，大延时变为多个分段小延时。\n![](tonglu.png)\n### **控制信号**\n控制信号和单周期CPU大同小异\n![](xinhao1.png)\n![](xinhao2.png)\n\n- Instruction Memory：指令存储器，\n - Iaddr，指令地址输入端口\n - DataIn，存储器数据输入端口\n - DataOut，存储器数据输出端口\n - RW，指令存储器读写控制信号，为1写，为0读\n- Data Memory：数据存储器，\n - Daddr，数据地址输入端口\n - DataIn，存储器数据输入端口\n - DataOut，存储器数据输出端口\n - RW，数据存储器读写控制信号，为1写，为0读\n- Register File：（寄存器组）\n - Read Reg1，rs寄存器地址输入端口\n - Read Reg2，rt寄存器地址输入端口\n - Write Reg，将数据写入的寄存器，其地址输入端口（rt、rd）\n - Write Data，写入寄存器的数据输入端口\n - Read Data1，rs寄存器数据输出端口\n - Read Data2，rt寄存器数据输出端口\n - WE，写使能信号，为1时，在时钟上升沿写入\n- IR：指令寄存器，用于存放正在执行的指令代码\n\n### **ALU运算功能表**\nALU：\n- result，ALU运算结果\n- zero，运算结果标志，结果为0输出1，否则输出0\n![](alu.png)\n\n## **设计方法**\n采用模块设计的思想，设计的模块和单周期CPU的模块一样，但添加了IR模块（用于在时钟下降沿到来时将InsMem模块输出的指令传出到registerFile模块，图中用的是上升沿，但上升沿到来时CU的控制信号才发出，信号送达需要时间，因此改为下降沿），所以总共设计了InsMEM模块、ControlUnit模块、registerFile模块（ALUM2DR归入本模块，时钟上升沿到来时才将内存的数据传入本模块）、Extend模块（加入了一个功能：跳转指令执行时计算要改变的PC0的值）、ALU模块（ADR和BDR归入这个模块，时钟上升沿到来时数据才传入）、DataMEM模块（ALUOut归入本模块，时钟上升沿到来时数据才传入）、IR模块，最后设计CPU总模块，需要注意的是，PC没有独立作为一个模块，免去参数传递的麻烦，直接写在总模块中。\n另外一个思路时，由于CU的控制信号很多，但是很多信号在指令执行的多个阶段中是一样的，因此在取完指令后，ID阶段就改变CU控制信号的值为正确的值，在其他的阶段，需要改变的信号再改变。\n还有一点是，PC0的改变是在控制信号PCWre为1时改变的，在每条指令执行的最后阶段将控制信号PCWre改为1，这就保证执行下一条指令时，PC0已经正确改变。\n### **IF阶段控制信号表**\n![](if.png)\n### **ID阶段控制信号表**\n![](id.png)\n### **EXE阶段控制信号表**\n![](exe.png)\n### **MEM阶段控制信号表**\n![](mem.png)\n### **WB阶段控制信号表**\n![](wb.png)\n此外，jal指令也要设置RegWre = 1\n### **InsMEM模块**\n把将要执行的指令my_test_rom.txt加载到储存指令的内存中。根据PC的值返回相应的指令。注意这里指令是按照字节存储的。\n``` verilog\nmodule InsMEM(\n    input [31:0] PC0,\n\tinput InsMemRW,\n    output reg [31:0] instruction\n    );\n    reg [7:0] mem [0:127];\n\t \n    initial begin\n        $readmemb(\"my_test_rom.txt\", mem);\n    end\n\n    always @* begin\n        instruction[31:0] <= {mem[PC0-8'b11111000], mem[PC0-8'b11111000+1], mem[PC0-8'b11111000+2], mem[PC0-8'b11111000+3]};  // 初始化为2'hF8\n    end\n\t \nendmodule\n```\n### **ControlUnit模块**\n包含两个变量state和next_state，next_state初始化为sif，控制单元根据state的不同，执行不同的操作，注意控制单元在state为ID时，根据指令的不同改变各个控制信号量的值，在其他state时，根据需要改变相应的控制信号的值，以达到正确的控制目的，记得在每个状态中，根据状态机，改变next_state的值。代码可能有点长，然后其实并不难，都是重复的代码。\n``` verilog\nmodule ControlUnit(\n    input [5:0] Opcode,\n    input zero,\n\t input clk,\n\t \n    output reg PCWre,\n    output reg ALUSrcB,\n    output reg ALUM2Reg,\n    output reg RegWre,\n    output reg InsMemRW,\n\t output reg IRWre,\n    output reg DataMemRW,\n\t output reg WrRegData,\n    output reg [1:0] ExtSel,\n    output reg [1:0] PCSrc,\n    output reg [1:0] RegOut,\n    output reg [2:0] ALUOp,\n\t \n\t output reg [2:0] state\n    );\n\t \n\t reg [2:0] next_state;\n\t \n\t parameter ADD = 6'b000000, ADDI = 6'b000010, SUB = 6'b000001, ORI = 6'b010010,\n              AND = 6'b010001, OR = 6'b010000, MOVE = 6'b100000, SW = 6'b110000,\n              LW = 6'b110001, BEQ = 6'b110100, HALT = 6'b111111, SLL = 6'b011000,\n\t\t\t\t  SLT = 6'b100111, J = 6'b111000, JR = 6'b111001, JAL = 6'b111010;\n    parameter sif = 3'b000, sid = 3'b001, sexe1 = 3'b110, sexe2 = 3'b101,\n\t\t\t\t  sexe3 = 3'b010, smem = 3'b011, swb1 = 3'b111, swb2 = 3'b100;\n\t \n\t initial begin\n\t     next_state = sif;\n\t\t  InsMemRW = 0;  // 这个变量在本次实验中没有用处\n\t\t  \n\t\t  ALUSrcB = 0;   // 初始化，不初始化也可以但会出现红框\n\t\t  ALUM2Reg = 1;\n\t\t  WrRegData = 0;\n\t\t  ExtSel = 0;\n\t\t  PCSrc = 0;\n\t\t  RegOut = 2'b10;\n\t\t  ALUOp = 0;\n\t\t  \n\t end\n\t \n\t always @(posedge clk) begin\n\t     state <= next_state;\n\t end\n\t \n\t always @(state or zero or Opcode) begin\n\t     case(state)\n\t\t      sif: begin\n\t\t\t\t\tIRWre = 1; PCWre = 0;\n\t\t\t\t\tRegWre = 0; DataMemRW = 0;\n\t\t\t\t\tnext_state = sid;\n\t\t\t\tend\n\t\t\t\tsid: begin\n\t\t\t\t   if (Opcode == ADD || Opcode == SUB || Opcode == ADDI ||\n     \t\t\t\t\t Opcode == OR || Opcode == AND || Opcode == ORI ||\n\t\t\t\t\t\t Opcode == SLL || Opcode == MOVE || Opcode == SLT)\n\t\t\t\t\t\t next_state = sexe1;\n\t\t\t\t\telse if (Opcode == BEQ) next_state = sexe2;\n\t\t\t\t\telse if (Opcode == SW || Opcode == LW) next_state = sexe3;\n\t\t\t\t\telse next_state = sif;\n\t\t\t\t\t\n\t\t\t\t\tWrRegData <= (Opcode == JAL) ? 0 : 1;\n\t\t\t\t   ALUM2Reg <= (Opcode == LW) ? 1 : 0;\n\t\t\t\t\n\t\t\t\t\tcase(Opcode)\n\t\t\t\t\t    ADD: begin\n\t\t\t\t\t\t     ALUSrcB = 0;\n\t\t\t\t\t\t\t  ALUOp = 3'b000;\n\t\t\t\t\t\t\t  PCSrc = 2'b00; RegOut = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t SUB: begin\n\t\t\t\t\t\t     ALUSrcB = 0;\n\t\t\t\t\t\t\t  ALUOp = 3'b001;\n\t\t\t\t\t\t\t  PCSrc = 2'b00; RegOut = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t ADDI: begin\n\t\t\t\t\t\t     ALUSrcB = 1; RegOut = 2'b01; ALUOp = 3'b000;\n\t\t\t\t\t\t     PCSrc = 2'b00; ExtSel  = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t OR: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b10; ALUOp = 3'b101;\n\t\t\t\t\t\t     PCSrc = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t AND: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b10; ALUOp = 3'b110;\n\t\t\t\t\t\t     PCSrc = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t ORI: begin\n\t\t\t\t\t\t     ALUSrcB = 1; RegOut = 2'b01; ALUOp = 3'b101;\n\t\t\t\t\t\t     PCSrc = 2'b00; ExtSel = 2'b01;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t SLL: begin\n\t\t\t\t\t\t     ALUSrcB = 1; RegOut = 2'b10; ALUOp = 3'b100;\n\t\t\t\t\t\t     PCSrc = 2'b00; ExtSel = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t MOVE: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b10; ALUOp = 3'b000;\n\t\t\t\t\t\t     PCSrc = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t SLT: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b10; ALUOp = 3'b010;\n\t\t\t\t\t\t     PCSrc = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t SW: begin\n\t\t\t\t\t\t     ALUSrcB = 1; ALUOp = 3'b000; PCSrc = 2'b00;\n\t\t\t\t\t\t     ExtSel = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t LW: begin\n\t\t\t\t\t\t     ALUSrcB = 1; RegOut = 2'b01; ALUOp = 3'b000;\n\t\t\t\t\t\t     PCSrc = 2'b00; ExtSel = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t BEQ: begin\n\t\t\t\t\t\t     ALUSrcB = 0; ALUOp = 3'b001;\n\t\t\t\t\t\t     ExtSel = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t J: begin\n\t\t\t\t\t\t     ALUSrcB = 0; PCSrc = 2'b11; PCWre = 1;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t JR: begin\n\t\t\t\t\t\t     ALUSrcB = 0; PCSrc = 2'b10; PCWre = 1;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t JAL: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b00; RegWre = 1;\n\t\t\t\t\t\t     PCSrc = 2'b11; PCWre = 1;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t HALT: begin\n\t\t\t\t\t\t     ALUSrcB = 0;\n\t\t\t\t\t\t end\n\t\t\t\t\tendcase\n\t\t\t\tend\n\t\t\t   sexe1: begin\n\t\t\t\t\tIRWre = 0;\n\t\t\t\t\tnext_state = swb1;\n\t\t\t\tend\n\t\t\t\tsexe2: begin\n\t\t\t\t\t PCWre = 1; IRWre = 0;\n\t\t\t\t\t PCSrc <= (zero == 0) ?  2'b00 : 2'b01;\n\t\t\t\t\t next_state = sif;\n\t\t\t\tend\n\t\t\t\tsexe3: begin\n\t\t\t\t\t IRWre = 0;\n\t\t\t\t\t next_state = smem;\n\t\t\t\tend\n\t\t\t\tswb1: begin\n\t\t\t\t\t RegWre = 1;\n\t\t\t\t\t PCWre = 1;\n\t\t\t\t\t next_state = sif;\n\t\t\t\tend\n\t\t\t\tsmem: begin\n\t\t\t\t    if (Opcode == SW) begin\n\t\t\t\t\t     PCWre = 1;\n\t\t\t\t\t\t  DataMemRW = 1;\n\t\t\t\t\t\t  next_state = sif;\n\t\t\t\t\t end\n\t\t\t\t\t if (Opcode == LW) begin\n\t\t\t\t\t\t  next_state = swb2;\n\t\t\t\t\t end\n\t\t\t\tend\n\t\t\t\tswb2: begin\n\t\t\t\t\t RegWre = 1;\n\t\t\t\t\t PCWre = 1;\n\t\t\t\t\t next_state = sif;\n\t\t\t\tend\n        endcase\n    end\n\t \nendmodule\n```\n### **registerFile模块**\n申明31个寄存器并初始化为0，0号寄存器一直当做0处理；寄存器的值在这个模块中取出，同时也可以在时钟下降沿到来时向寄存器写值，由CU相应的控制信号控制，这里与图中不同，图中是上升沿，是在下个周期上升沿到来时才将值写入，我是在本周期的下降沿写入值的。还有一点，ALUM2DR归入这个模块，数据存储器的输出值write_data在时钟上升沿到来时才能传入本模块中。\n``` verilog\nmodule registerFile(\n    input [4:0] rs, rt, rd,  // 相应的赋值在主模块实现,write_data是内存输出的数据，write_data是上升沿后的数据\n    input [31:0] write_data, PC4,  // writedata是本模块的选择的输入\n    input RegWre, clk, WrRegData,\n\t input [1:0] RegOut,\n    output [31:0] readData1, readData2\n    );\n    \n\t wire [4:0] write_reg;\n\t assign write_reg = (RegOut == 0) ? 5'b11111 : ((RegOut == 1) ? rt : rd);\n\t \n\t reg [31:0] write_data_1;\n\t always @(posedge clk) begin\n\t     write_data_1 = write_data;\n\t end\n\t \n\t wire [31:0] writedata;\n\t assign writedata = (WrRegData == 0) ? PC4 : write_data_1;\n\t \n\t reg [31:0] register [1:31];  // 声明r1~r31\n    integer i;\n    initial begin\n        for (i = 0; i < 32; i = i + 1)\n            register[i] = 0;\n    end\n\t \n\t // 0号寄存器值固定为0\n    assign readData1 = (rs == 0)? 0 : register[rs];\n    assign readData2 = (rt == 0)? 0 : register[rt];\n\t \n\t always @(negedge clk) begin\n\t     if ((RegWre == 1) && (write_reg != 0)) begin\n\t\t      register[write_reg] <= writedata;\n\t\t  end\n\t end\n\nendmodule\n```\n### **Extend模块**\n本模块比较简单，在单周期的基础上加入了跳转指令需要计算的PC的值；同时，在零拓展时，控制信号ExtSel的值为00时，只取imme_16的[10:6]位，拓展后这个值是供左移右移指令使用的。\n``` verilog\nmodule Extend(\n    input [15:0] imme_16,\n    input [1:0] ExtSel,\n\t input [31:0] PC0,\n\t input [25:0] imme_26,\n    output [31:0] imme_32,\n\t output [31:0] PCnew\n    );\n    // 10为符号拓展，00,01为零拓展, 00只取[10:6]\n    assign imme_32 = (ExtSel == 2'b10) ? {{16{imme_16[15]}}, imme_16[15:0]} : ((ExtSel == 2'b00) ? {{27{1'b0}}, imme_16[10:6]} : {{16{1'b0}}, imme_16[15:0]});\n\t assign PCnew = {PC0[31:28], imme_26, 2'b00};\n\nendmodule\n```\n### ** ALU模块**\n根据CU发出的控制信号ALUOp的不同，ALU对传进去的值执行不同的操作。还有就是ADR和BDR归入本模块，在时钟上升沿到来时才将数据传入ALU模块。\n``` verilog\nmodule ALU(\n    input [31:0] readData1,\n    input [31:0] readData2,\n    input [31:0] imme_32,\n    input ALUSrcB,\n\t input clk,\n    input [2:0] ALUOp,\n    output wire zero,\n    output reg [31:0] result\n    );\n\t \n\t /*initial begin\n\t     result = 0;\n\t end*/\n\t \n\t reg [31:0] readData1_1, readData2_1;\n\t always @(posedge clk) begin\n\t     readData1_1 = readData1;\n\t\t  readData2_1 = readData2;\n\t end\n\t \n\t wire [31:0] alub;\n    assign alub = (ALUSrcB == 0) ? readData2_1 : imme_32;\n\t \n\t always@(readData1_1 or alub or ALUOp) begin\n        case (ALUOp)\n            3'b000: result <= readData1_1 + alub;\n            3'b001: result <= readData1_1 - alub;\n            3'b010: begin\n\t\t\t\t    if (readData1_1 < alub) result <= 1;\n\t\t\t\t\t else result <= 0;\n\t\t\t   end\n            3'b011: result <= readData1_1 >> alub;\n            3'b100: result <= readData1_1 << alub;\n            3'b101: result <= readData1_1 | alub;\n            3'b110: result <= readData1_1 & alub;\n            3'b111: result <= (readData1_1 & ~alub) | (~readData1_1 & alub);\n        endcase\n    end\n    assign zero = (result == 0) ? 1 : 0;\n\nendmodule\n```\n### **DataMEM模块**\n数据储存在模块申请的数组当中，并根据控制信号的不同，可以存值也可以取值。BDR和ALUOut归入本模块中，以控制在时钟上升沿到来时才将数据传入。数据储存在本次多周期CPU中是按字节存储的，与单周期不同。\n``` verilog\nmodule DataMEM(\n    input clk,\n    input [31:0] result,\n    input [31:0] readData2,\n    input DataMemRW,\n    input ALUM2Reg,\n    output [31:0] write_data\n    );\n\n    reg [31:0] DAddr, DataIn;\n\t reg [31:0] DataOut;\n\t \n\t initial begin\n\t     DataOut = 0;\n\t end\n\t \n\t always @(posedge clk) begin\n\t     DataIn = readData2;\n\t\t  DAddr = result;\n\t end\n\t \n    reg [7:0] DataMem [0:511];  // 声明内存\n    integer i;\n    initial begin\n        for (i = 0; i < 512; i = i + 1)\n            DataMem[i] = 0;\n    end\n\t \n\t always@(DAddr or DataMemRW) begin\n        if (DataMemRW == 0)  // 取字\n            DataOut[31:0] = {DataMem[DAddr], DataMem[DAddr+1], DataMem[DAddr+2], DataMem[DAddr+3]};\n        else begin  // 存字\n            DataMem[DAddr] = DataIn[31:24];\n\t\t\t\tDataMem[DAddr+1] = DataIn[23:16];\n\t\t\t\tDataMem[DAddr+2] = DataIn[15:8];\n\t\t\t\tDataMem[DAddr+3] = DataIn[7:0];\n\t\t  end\n    end\n\t assign write_data = (ALUM2Reg == 0) ? result : DataOut;\n\nendmodule\n```\n### ** IR模块**\n控制在时钟下降沿到来时才将指令传到registerFile模块中。同时根据控制信号的不同，可以使传出的指令保持不变或者变更为InsMEM中传过来的指令。没有其他作用，至于为什么用下降沿，前文有解释。\n``` verilog\nmodule IR(\n    input [31:0] instruction,\n\t input IRWre,\n\t input clk,\n\t output reg [31:0] instruction2\n    );\n    \n\t initial begin\n\t     instruction2 = 0;\n\t end\n\t \n\t always @(negedge clk) begin\n\t     case(IRWre)\n\t\t\t\t1: instruction2 <= instruction;\n\t\t\t\t// 0: instruction2 <= instruction2;\n\t\t  endcase\n\t end\n\nendmodule\n```\n### **CPU总模块**\n总模块中将各个模块之间的线连起来，并且将IR输出的指令拆分为几个部分，传入不同的模块；然后实例化各个模块，需要注意的是，实例化模块时，变量名和顺序一定一定要和小模块申明时相同；此外，总模块中根据具体情况改变PC的值。PC值初始化为十六进制F8，假设程序从这里开始执行。\n``` verilog\nmodule CPU();\n\n    // 模块间的连线\n    wire PCWre;\n    wire ALUSrcB;\n    wire ALUM2Reg;\n    wire RegWre;\n    wire InsMemRW;\n\t wire IRWre;\n\t wire WrRegData;\n    wire DataMemRW;\n    wire [1:0] ExtSel;\n    wire [1:0] PCSrc;\n    wire [1:0] RegOut;\n    wire [2:0] ALUOp;\n\t \n\t reg [31:0] PC0;\n\t wire [31:0] instruction;\n\t wire [31:0] instruction2;\n\t wire [31:0] write_data;\n\t wire [31:0] PC4;\n    wire [31:0] imme_32;\n\t wire [31:0] PCnew;\n    wire [31:0] readData1;\n    wire [31:0] readData2;\n    wire zero;\n\t wire [31:0] result;\n\t wire [2:0] state;\n    \n    reg clk;\n\t \n    // 指令拆分成的变量\n    wire [5:0] Opcode;\n    wire [4:0] rs;\n    wire [4:0] rt;\n    wire [4:0] rd;\n    wire [15:0] imme_16;\n\t wire [25:0] imme_26;\n\t \n\t // 给拆分变量赋值\n\t assign Opcode[5:0] = instruction2[31:26];\n    assign rs = instruction2[25:21];\n    assign rt = instruction2[20:16];\n    assign rd = instruction2[15:11];\n    assign imme_16 = instruction2[15:0];\n\t assign imme_26 = instruction2[25:0];\n\t \n\t assign PC4 = PC0+4;\n\t \n\t // 初始化PC和时钟，设置时钟周期\n\t initial begin\n        PC0 = 8'b11111000;\n        clk = 1;\n    end\n\t \n    always #500\n        clk = ~clk;\n\t \n\t // 实例化各个模块（变量名不能拼写错误！！！）\n\t InsMEM insmem(PC0, InsMemRW, instruction);\n\t ControlUnit controlunit(Opcode, zero, clk, PCWre, ALUSrcB, ALUM2Reg, RegWre, InsMemRW, IRWre, DataMemRW, WrRegData, ExtSel, PCSrc, RegOut, ALUOp, state);\n    registerFile registerfile(rs, rt, rd, write_data, PC4, RegWre, clk, WrRegData, RegOut, readData1, readData2);\n    Extend extend(imme_16, ExtSel, PC0, imme_26, imme_32, PCnew);\n\t ALU alu(readData1, readData2, imme_32, ALUSrcB, clk, ALUOp, zero, result);\n\t DataMEM datamem(clk, result, readData2, DataMemRW, ALUM2Reg, write_data);\n\t IR ir(instruction, IRWre, clk, instruction2);\n\t \n\t // PC模块\n\t always@(posedge clk) begin\n\t     if (PCWre == 1) begin\n\t\t      if (PCSrc == 0) PC0 <= PC4;\n\t\t\t\telse if (PCSrc == 1) PC0 <= PC4+imme_32*4;\n\t\t\t\telse if (PCSrc == 2) PC0 <= readData1;\n\t\t\t\telse PC0 <= PCnew;\n\t\t  end\n    end\n\nendmodule\n\n```\n## **验证方法**\n以下表格方便大家测试。将指令写到my_test_rom.txt文件，文件放在project的根文件夹，接着仿真验证。注意指令存储是按照字存储的，8位二进制位一行。\n![](ceshi.png)\n\n","source":"_posts/多周期CPU.md","raw":"---\ntitle: MIPS多周期CPU\ntoc: true\ndate: 2016-07-18 11:53:28\ntags: \n- CPU\n- MIPS\n- verilog\ncategories: 计算机组成原理\n---\n在对单周期CPU有一定了解后，现在我们来看看多周期CPU。多周期CPU指的是将整个CPU的执行过程分成几个阶段，每个阶段用一个时钟去完成，然后开始下一条指令的执行，而每种指令执行时所用的时钟数不尽相同，这就是所谓的多周期CPU。需要注意的是，在本设计中，不同指令的操作码跟单周期CPU会有所不同；指令存储器和数据存储器的存储单元是字节宽度，而不是使用32位。\n<!--more-->\n## **MIPS32指令格式**\n同单周期CPU的指令格式，指令有三种类型：R型、J型、I型\n## **多周期CPU执行的指令**\n### **算术运算指令**\n![](suansu.png)\n### **逻辑运算指令**\n![](luoji.png)\n### **移位指令**\n![](yiwei.png)\n功能：rd<－rs<<(zero-extend)sa，左移sa位 ，(zero-extend)sa\n### **传送指令**\n![](chuansong.png)\n### **比较指令**\n![](bijiao.png)\n### **存储器读写指令**\n![](duxie.png)\n### **分支指令**\n![](fenzhi.png)\n### **跳转指令**\n![](tiaozhuan.png)\n### **调用子程序指令**\n![](zi.png)\n功能：调用子程序，pc <－ {pc[31..28],addr[27..2],0,0}；$31<－pc+4，返回地址设置；子程序返回，需用指令 jr  $31。\n### **停机指令**\n![](tingji.png)\n## **设计原理**\n### **处理过程**\nCPU在处理指令时，一般需要经过以下几个阶段：\n\n- 取指令(IF)：根据程序计数器pc中的指令地址，从存储器中取出一条指令，同时，pc根据指令字长度自动递增产生下一条指令所需要的指令地址，但遇到“地址转移”指令时，则控制器把“转移地址”送入pc，当然得到的“地址”需要做些变换才送入pc。\n- 指令译码(ID)：对取指令操作中得到的指令进行分析并译码，确定这条指令需要完成的操作，从而产生相应的操作控制信号，用于驱动执行状态中的各种操作。\n- 指令执行(EXE)：根据指令译码得到的操作控制信号，具体地执行指令动作，然后转移到结果写回状态。\n- 存储器访问(MEM)：所有需要访问存储器的操作都将在这个步骤中执行，该步骤给出存储器的数据地址，把数据写入到存储器中数据地址所指定的存储单元或者从存储器中得到数据地址单元中的数据。\n- 结果写回(WB)：指令执行的结果或者访问存储器中得到的数据写回相应的目的寄存器中。\n![](guoc.png)\n### **状态转移**\n状态的转移有的是无条件的，例如从IF状态转移到ID 和 EXE状态就是无条件的；有些是有条件的，例如ID 或 EXE状态之后不止一个状态，到底转向哪个状态由该指令功能，即指令操作码决定。每个状态代表一个时钟周期。\n![](zhuanyi.png)\n## **数据通路及其控制**\n### **控制部件**\n下图是多周期CPU控制部件的电路结构，三个D触发器用于保存当前状态，是时序逻辑电路，RST用于初始化状态“000“，另外两个部分都是组合逻辑电路，一个用于产生下一个阶段的状态，另一个用于产生每个阶段的控制信号。从图上可看出，下个状态取决于指令操作码和当前状态；而每个阶段的控制信号取决于指令操作码、当前状态和反映运算结果的状态zero标志等。\n![](kongzhi.png)\n### **数据通路**\n下图是一个简单的基本上能够在单周期上完成所要求设计的指令功能的数据通路和必要的控制线路图。其中指令和数据各存储在不同存储器中，即有指令存储器和数据存储器。访问存储器时，先给出地址，然后由读/写信号控制（1-写，0-读。当然，也可以由时钟信号控制，但必须在图上画出来）。对于寄存器组，读操作时，给出寄存器地址（编号），输出端就直接输出相应数据；而在写操作时，在 WE使能信号为1时，在时钟边沿触发写入。\n特别提示，图上增加IR指令寄存器，目的是使指令代码保持稳定，还有pc增加写使能控制信号pcWre，也是确保pc适时修改，原因都是和多周期工作的CPU有关。ADR、BDR、ALUout、ALUM2DR四个寄存器不需要写使能信号，其作用是切分数据通路，将大组合逻辑切分为若干个小组合逻辑，大延时变为多个分段小延时。\n![](tonglu.png)\n### **控制信号**\n控制信号和单周期CPU大同小异\n![](xinhao1.png)\n![](xinhao2.png)\n\n- Instruction Memory：指令存储器，\n - Iaddr，指令地址输入端口\n - DataIn，存储器数据输入端口\n - DataOut，存储器数据输出端口\n - RW，指令存储器读写控制信号，为1写，为0读\n- Data Memory：数据存储器，\n - Daddr，数据地址输入端口\n - DataIn，存储器数据输入端口\n - DataOut，存储器数据输出端口\n - RW，数据存储器读写控制信号，为1写，为0读\n- Register File：（寄存器组）\n - Read Reg1，rs寄存器地址输入端口\n - Read Reg2，rt寄存器地址输入端口\n - Write Reg，将数据写入的寄存器，其地址输入端口（rt、rd）\n - Write Data，写入寄存器的数据输入端口\n - Read Data1，rs寄存器数据输出端口\n - Read Data2，rt寄存器数据输出端口\n - WE，写使能信号，为1时，在时钟上升沿写入\n- IR：指令寄存器，用于存放正在执行的指令代码\n\n### **ALU运算功能表**\nALU：\n- result，ALU运算结果\n- zero，运算结果标志，结果为0输出1，否则输出0\n![](alu.png)\n\n## **设计方法**\n采用模块设计的思想，设计的模块和单周期CPU的模块一样，但添加了IR模块（用于在时钟下降沿到来时将InsMem模块输出的指令传出到registerFile模块，图中用的是上升沿，但上升沿到来时CU的控制信号才发出，信号送达需要时间，因此改为下降沿），所以总共设计了InsMEM模块、ControlUnit模块、registerFile模块（ALUM2DR归入本模块，时钟上升沿到来时才将内存的数据传入本模块）、Extend模块（加入了一个功能：跳转指令执行时计算要改变的PC0的值）、ALU模块（ADR和BDR归入这个模块，时钟上升沿到来时数据才传入）、DataMEM模块（ALUOut归入本模块，时钟上升沿到来时数据才传入）、IR模块，最后设计CPU总模块，需要注意的是，PC没有独立作为一个模块，免去参数传递的麻烦，直接写在总模块中。\n另外一个思路时，由于CU的控制信号很多，但是很多信号在指令执行的多个阶段中是一样的，因此在取完指令后，ID阶段就改变CU控制信号的值为正确的值，在其他的阶段，需要改变的信号再改变。\n还有一点是，PC0的改变是在控制信号PCWre为1时改变的，在每条指令执行的最后阶段将控制信号PCWre改为1，这就保证执行下一条指令时，PC0已经正确改变。\n### **IF阶段控制信号表**\n![](if.png)\n### **ID阶段控制信号表**\n![](id.png)\n### **EXE阶段控制信号表**\n![](exe.png)\n### **MEM阶段控制信号表**\n![](mem.png)\n### **WB阶段控制信号表**\n![](wb.png)\n此外，jal指令也要设置RegWre = 1\n### **InsMEM模块**\n把将要执行的指令my_test_rom.txt加载到储存指令的内存中。根据PC的值返回相应的指令。注意这里指令是按照字节存储的。\n``` verilog\nmodule InsMEM(\n    input [31:0] PC0,\n\tinput InsMemRW,\n    output reg [31:0] instruction\n    );\n    reg [7:0] mem [0:127];\n\t \n    initial begin\n        $readmemb(\"my_test_rom.txt\", mem);\n    end\n\n    always @* begin\n        instruction[31:0] <= {mem[PC0-8'b11111000], mem[PC0-8'b11111000+1], mem[PC0-8'b11111000+2], mem[PC0-8'b11111000+3]};  // 初始化为2'hF8\n    end\n\t \nendmodule\n```\n### **ControlUnit模块**\n包含两个变量state和next_state，next_state初始化为sif，控制单元根据state的不同，执行不同的操作，注意控制单元在state为ID时，根据指令的不同改变各个控制信号量的值，在其他state时，根据需要改变相应的控制信号的值，以达到正确的控制目的，记得在每个状态中，根据状态机，改变next_state的值。代码可能有点长，然后其实并不难，都是重复的代码。\n``` verilog\nmodule ControlUnit(\n    input [5:0] Opcode,\n    input zero,\n\t input clk,\n\t \n    output reg PCWre,\n    output reg ALUSrcB,\n    output reg ALUM2Reg,\n    output reg RegWre,\n    output reg InsMemRW,\n\t output reg IRWre,\n    output reg DataMemRW,\n\t output reg WrRegData,\n    output reg [1:0] ExtSel,\n    output reg [1:0] PCSrc,\n    output reg [1:0] RegOut,\n    output reg [2:0] ALUOp,\n\t \n\t output reg [2:0] state\n    );\n\t \n\t reg [2:0] next_state;\n\t \n\t parameter ADD = 6'b000000, ADDI = 6'b000010, SUB = 6'b000001, ORI = 6'b010010,\n              AND = 6'b010001, OR = 6'b010000, MOVE = 6'b100000, SW = 6'b110000,\n              LW = 6'b110001, BEQ = 6'b110100, HALT = 6'b111111, SLL = 6'b011000,\n\t\t\t\t  SLT = 6'b100111, J = 6'b111000, JR = 6'b111001, JAL = 6'b111010;\n    parameter sif = 3'b000, sid = 3'b001, sexe1 = 3'b110, sexe2 = 3'b101,\n\t\t\t\t  sexe3 = 3'b010, smem = 3'b011, swb1 = 3'b111, swb2 = 3'b100;\n\t \n\t initial begin\n\t     next_state = sif;\n\t\t  InsMemRW = 0;  // 这个变量在本次实验中没有用处\n\t\t  \n\t\t  ALUSrcB = 0;   // 初始化，不初始化也可以但会出现红框\n\t\t  ALUM2Reg = 1;\n\t\t  WrRegData = 0;\n\t\t  ExtSel = 0;\n\t\t  PCSrc = 0;\n\t\t  RegOut = 2'b10;\n\t\t  ALUOp = 0;\n\t\t  \n\t end\n\t \n\t always @(posedge clk) begin\n\t     state <= next_state;\n\t end\n\t \n\t always @(state or zero or Opcode) begin\n\t     case(state)\n\t\t      sif: begin\n\t\t\t\t\tIRWre = 1; PCWre = 0;\n\t\t\t\t\tRegWre = 0; DataMemRW = 0;\n\t\t\t\t\tnext_state = sid;\n\t\t\t\tend\n\t\t\t\tsid: begin\n\t\t\t\t   if (Opcode == ADD || Opcode == SUB || Opcode == ADDI ||\n     \t\t\t\t\t Opcode == OR || Opcode == AND || Opcode == ORI ||\n\t\t\t\t\t\t Opcode == SLL || Opcode == MOVE || Opcode == SLT)\n\t\t\t\t\t\t next_state = sexe1;\n\t\t\t\t\telse if (Opcode == BEQ) next_state = sexe2;\n\t\t\t\t\telse if (Opcode == SW || Opcode == LW) next_state = sexe3;\n\t\t\t\t\telse next_state = sif;\n\t\t\t\t\t\n\t\t\t\t\tWrRegData <= (Opcode == JAL) ? 0 : 1;\n\t\t\t\t   ALUM2Reg <= (Opcode == LW) ? 1 : 0;\n\t\t\t\t\n\t\t\t\t\tcase(Opcode)\n\t\t\t\t\t    ADD: begin\n\t\t\t\t\t\t     ALUSrcB = 0;\n\t\t\t\t\t\t\t  ALUOp = 3'b000;\n\t\t\t\t\t\t\t  PCSrc = 2'b00; RegOut = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t SUB: begin\n\t\t\t\t\t\t     ALUSrcB = 0;\n\t\t\t\t\t\t\t  ALUOp = 3'b001;\n\t\t\t\t\t\t\t  PCSrc = 2'b00; RegOut = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t ADDI: begin\n\t\t\t\t\t\t     ALUSrcB = 1; RegOut = 2'b01; ALUOp = 3'b000;\n\t\t\t\t\t\t     PCSrc = 2'b00; ExtSel  = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t OR: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b10; ALUOp = 3'b101;\n\t\t\t\t\t\t     PCSrc = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t AND: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b10; ALUOp = 3'b110;\n\t\t\t\t\t\t     PCSrc = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t ORI: begin\n\t\t\t\t\t\t     ALUSrcB = 1; RegOut = 2'b01; ALUOp = 3'b101;\n\t\t\t\t\t\t     PCSrc = 2'b00; ExtSel = 2'b01;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t SLL: begin\n\t\t\t\t\t\t     ALUSrcB = 1; RegOut = 2'b10; ALUOp = 3'b100;\n\t\t\t\t\t\t     PCSrc = 2'b00; ExtSel = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t MOVE: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b10; ALUOp = 3'b000;\n\t\t\t\t\t\t     PCSrc = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t SLT: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b10; ALUOp = 3'b010;\n\t\t\t\t\t\t     PCSrc = 2'b00;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t SW: begin\n\t\t\t\t\t\t     ALUSrcB = 1; ALUOp = 3'b000; PCSrc = 2'b00;\n\t\t\t\t\t\t     ExtSel = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t LW: begin\n\t\t\t\t\t\t     ALUSrcB = 1; RegOut = 2'b01; ALUOp = 3'b000;\n\t\t\t\t\t\t     PCSrc = 2'b00; ExtSel = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t BEQ: begin\n\t\t\t\t\t\t     ALUSrcB = 0; ALUOp = 3'b001;\n\t\t\t\t\t\t     ExtSel = 2'b10;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t J: begin\n\t\t\t\t\t\t     ALUSrcB = 0; PCSrc = 2'b11; PCWre = 1;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t JR: begin\n\t\t\t\t\t\t     ALUSrcB = 0; PCSrc = 2'b10; PCWre = 1;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t JAL: begin\n\t\t\t\t\t\t     ALUSrcB = 0; RegOut = 2'b00; RegWre = 1;\n\t\t\t\t\t\t     PCSrc = 2'b11; PCWre = 1;\n\t\t\t\t\t\t end\n\t\t\t\t\t\t HALT: begin\n\t\t\t\t\t\t     ALUSrcB = 0;\n\t\t\t\t\t\t end\n\t\t\t\t\tendcase\n\t\t\t\tend\n\t\t\t   sexe1: begin\n\t\t\t\t\tIRWre = 0;\n\t\t\t\t\tnext_state = swb1;\n\t\t\t\tend\n\t\t\t\tsexe2: begin\n\t\t\t\t\t PCWre = 1; IRWre = 0;\n\t\t\t\t\t PCSrc <= (zero == 0) ?  2'b00 : 2'b01;\n\t\t\t\t\t next_state = sif;\n\t\t\t\tend\n\t\t\t\tsexe3: begin\n\t\t\t\t\t IRWre = 0;\n\t\t\t\t\t next_state = smem;\n\t\t\t\tend\n\t\t\t\tswb1: begin\n\t\t\t\t\t RegWre = 1;\n\t\t\t\t\t PCWre = 1;\n\t\t\t\t\t next_state = sif;\n\t\t\t\tend\n\t\t\t\tsmem: begin\n\t\t\t\t    if (Opcode == SW) begin\n\t\t\t\t\t     PCWre = 1;\n\t\t\t\t\t\t  DataMemRW = 1;\n\t\t\t\t\t\t  next_state = sif;\n\t\t\t\t\t end\n\t\t\t\t\t if (Opcode == LW) begin\n\t\t\t\t\t\t  next_state = swb2;\n\t\t\t\t\t end\n\t\t\t\tend\n\t\t\t\tswb2: begin\n\t\t\t\t\t RegWre = 1;\n\t\t\t\t\t PCWre = 1;\n\t\t\t\t\t next_state = sif;\n\t\t\t\tend\n        endcase\n    end\n\t \nendmodule\n```\n### **registerFile模块**\n申明31个寄存器并初始化为0，0号寄存器一直当做0处理；寄存器的值在这个模块中取出，同时也可以在时钟下降沿到来时向寄存器写值，由CU相应的控制信号控制，这里与图中不同，图中是上升沿，是在下个周期上升沿到来时才将值写入，我是在本周期的下降沿写入值的。还有一点，ALUM2DR归入这个模块，数据存储器的输出值write_data在时钟上升沿到来时才能传入本模块中。\n``` verilog\nmodule registerFile(\n    input [4:0] rs, rt, rd,  // 相应的赋值在主模块实现,write_data是内存输出的数据，write_data是上升沿后的数据\n    input [31:0] write_data, PC4,  // writedata是本模块的选择的输入\n    input RegWre, clk, WrRegData,\n\t input [1:0] RegOut,\n    output [31:0] readData1, readData2\n    );\n    \n\t wire [4:0] write_reg;\n\t assign write_reg = (RegOut == 0) ? 5'b11111 : ((RegOut == 1) ? rt : rd);\n\t \n\t reg [31:0] write_data_1;\n\t always @(posedge clk) begin\n\t     write_data_1 = write_data;\n\t end\n\t \n\t wire [31:0] writedata;\n\t assign writedata = (WrRegData == 0) ? PC4 : write_data_1;\n\t \n\t reg [31:0] register [1:31];  // 声明r1~r31\n    integer i;\n    initial begin\n        for (i = 0; i < 32; i = i + 1)\n            register[i] = 0;\n    end\n\t \n\t // 0号寄存器值固定为0\n    assign readData1 = (rs == 0)? 0 : register[rs];\n    assign readData2 = (rt == 0)? 0 : register[rt];\n\t \n\t always @(negedge clk) begin\n\t     if ((RegWre == 1) && (write_reg != 0)) begin\n\t\t      register[write_reg] <= writedata;\n\t\t  end\n\t end\n\nendmodule\n```\n### **Extend模块**\n本模块比较简单，在单周期的基础上加入了跳转指令需要计算的PC的值；同时，在零拓展时，控制信号ExtSel的值为00时，只取imme_16的[10:6]位，拓展后这个值是供左移右移指令使用的。\n``` verilog\nmodule Extend(\n    input [15:0] imme_16,\n    input [1:0] ExtSel,\n\t input [31:0] PC0,\n\t input [25:0] imme_26,\n    output [31:0] imme_32,\n\t output [31:0] PCnew\n    );\n    // 10为符号拓展，00,01为零拓展, 00只取[10:6]\n    assign imme_32 = (ExtSel == 2'b10) ? {{16{imme_16[15]}}, imme_16[15:0]} : ((ExtSel == 2'b00) ? {{27{1'b0}}, imme_16[10:6]} : {{16{1'b0}}, imme_16[15:0]});\n\t assign PCnew = {PC0[31:28], imme_26, 2'b00};\n\nendmodule\n```\n### ** ALU模块**\n根据CU发出的控制信号ALUOp的不同，ALU对传进去的值执行不同的操作。还有就是ADR和BDR归入本模块，在时钟上升沿到来时才将数据传入ALU模块。\n``` verilog\nmodule ALU(\n    input [31:0] readData1,\n    input [31:0] readData2,\n    input [31:0] imme_32,\n    input ALUSrcB,\n\t input clk,\n    input [2:0] ALUOp,\n    output wire zero,\n    output reg [31:0] result\n    );\n\t \n\t /*initial begin\n\t     result = 0;\n\t end*/\n\t \n\t reg [31:0] readData1_1, readData2_1;\n\t always @(posedge clk) begin\n\t     readData1_1 = readData1;\n\t\t  readData2_1 = readData2;\n\t end\n\t \n\t wire [31:0] alub;\n    assign alub = (ALUSrcB == 0) ? readData2_1 : imme_32;\n\t \n\t always@(readData1_1 or alub or ALUOp) begin\n        case (ALUOp)\n            3'b000: result <= readData1_1 + alub;\n            3'b001: result <= readData1_1 - alub;\n            3'b010: begin\n\t\t\t\t    if (readData1_1 < alub) result <= 1;\n\t\t\t\t\t else result <= 0;\n\t\t\t   end\n            3'b011: result <= readData1_1 >> alub;\n            3'b100: result <= readData1_1 << alub;\n            3'b101: result <= readData1_1 | alub;\n            3'b110: result <= readData1_1 & alub;\n            3'b111: result <= (readData1_1 & ~alub) | (~readData1_1 & alub);\n        endcase\n    end\n    assign zero = (result == 0) ? 1 : 0;\n\nendmodule\n```\n### **DataMEM模块**\n数据储存在模块申请的数组当中，并根据控制信号的不同，可以存值也可以取值。BDR和ALUOut归入本模块中，以控制在时钟上升沿到来时才将数据传入。数据储存在本次多周期CPU中是按字节存储的，与单周期不同。\n``` verilog\nmodule DataMEM(\n    input clk,\n    input [31:0] result,\n    input [31:0] readData2,\n    input DataMemRW,\n    input ALUM2Reg,\n    output [31:0] write_data\n    );\n\n    reg [31:0] DAddr, DataIn;\n\t reg [31:0] DataOut;\n\t \n\t initial begin\n\t     DataOut = 0;\n\t end\n\t \n\t always @(posedge clk) begin\n\t     DataIn = readData2;\n\t\t  DAddr = result;\n\t end\n\t \n    reg [7:0] DataMem [0:511];  // 声明内存\n    integer i;\n    initial begin\n        for (i = 0; i < 512; i = i + 1)\n            DataMem[i] = 0;\n    end\n\t \n\t always@(DAddr or DataMemRW) begin\n        if (DataMemRW == 0)  // 取字\n            DataOut[31:0] = {DataMem[DAddr], DataMem[DAddr+1], DataMem[DAddr+2], DataMem[DAddr+3]};\n        else begin  // 存字\n            DataMem[DAddr] = DataIn[31:24];\n\t\t\t\tDataMem[DAddr+1] = DataIn[23:16];\n\t\t\t\tDataMem[DAddr+2] = DataIn[15:8];\n\t\t\t\tDataMem[DAddr+3] = DataIn[7:0];\n\t\t  end\n    end\n\t assign write_data = (ALUM2Reg == 0) ? result : DataOut;\n\nendmodule\n```\n### ** IR模块**\n控制在时钟下降沿到来时才将指令传到registerFile模块中。同时根据控制信号的不同，可以使传出的指令保持不变或者变更为InsMEM中传过来的指令。没有其他作用，至于为什么用下降沿，前文有解释。\n``` verilog\nmodule IR(\n    input [31:0] instruction,\n\t input IRWre,\n\t input clk,\n\t output reg [31:0] instruction2\n    );\n    \n\t initial begin\n\t     instruction2 = 0;\n\t end\n\t \n\t always @(negedge clk) begin\n\t     case(IRWre)\n\t\t\t\t1: instruction2 <= instruction;\n\t\t\t\t// 0: instruction2 <= instruction2;\n\t\t  endcase\n\t end\n\nendmodule\n```\n### **CPU总模块**\n总模块中将各个模块之间的线连起来，并且将IR输出的指令拆分为几个部分，传入不同的模块；然后实例化各个模块，需要注意的是，实例化模块时，变量名和顺序一定一定要和小模块申明时相同；此外，总模块中根据具体情况改变PC的值。PC值初始化为十六进制F8，假设程序从这里开始执行。\n``` verilog\nmodule CPU();\n\n    // 模块间的连线\n    wire PCWre;\n    wire ALUSrcB;\n    wire ALUM2Reg;\n    wire RegWre;\n    wire InsMemRW;\n\t wire IRWre;\n\t wire WrRegData;\n    wire DataMemRW;\n    wire [1:0] ExtSel;\n    wire [1:0] PCSrc;\n    wire [1:0] RegOut;\n    wire [2:0] ALUOp;\n\t \n\t reg [31:0] PC0;\n\t wire [31:0] instruction;\n\t wire [31:0] instruction2;\n\t wire [31:0] write_data;\n\t wire [31:0] PC4;\n    wire [31:0] imme_32;\n\t wire [31:0] PCnew;\n    wire [31:0] readData1;\n    wire [31:0] readData2;\n    wire zero;\n\t wire [31:0] result;\n\t wire [2:0] state;\n    \n    reg clk;\n\t \n    // 指令拆分成的变量\n    wire [5:0] Opcode;\n    wire [4:0] rs;\n    wire [4:0] rt;\n    wire [4:0] rd;\n    wire [15:0] imme_16;\n\t wire [25:0] imme_26;\n\t \n\t // 给拆分变量赋值\n\t assign Opcode[5:0] = instruction2[31:26];\n    assign rs = instruction2[25:21];\n    assign rt = instruction2[20:16];\n    assign rd = instruction2[15:11];\n    assign imme_16 = instruction2[15:0];\n\t assign imme_26 = instruction2[25:0];\n\t \n\t assign PC4 = PC0+4;\n\t \n\t // 初始化PC和时钟，设置时钟周期\n\t initial begin\n        PC0 = 8'b11111000;\n        clk = 1;\n    end\n\t \n    always #500\n        clk = ~clk;\n\t \n\t // 实例化各个模块（变量名不能拼写错误！！！）\n\t InsMEM insmem(PC0, InsMemRW, instruction);\n\t ControlUnit controlunit(Opcode, zero, clk, PCWre, ALUSrcB, ALUM2Reg, RegWre, InsMemRW, IRWre, DataMemRW, WrRegData, ExtSel, PCSrc, RegOut, ALUOp, state);\n    registerFile registerfile(rs, rt, rd, write_data, PC4, RegWre, clk, WrRegData, RegOut, readData1, readData2);\n    Extend extend(imme_16, ExtSel, PC0, imme_26, imme_32, PCnew);\n\t ALU alu(readData1, readData2, imme_32, ALUSrcB, clk, ALUOp, zero, result);\n\t DataMEM datamem(clk, result, readData2, DataMemRW, ALUM2Reg, write_data);\n\t IR ir(instruction, IRWre, clk, instruction2);\n\t \n\t // PC模块\n\t always@(posedge clk) begin\n\t     if (PCWre == 1) begin\n\t\t      if (PCSrc == 0) PC0 <= PC4;\n\t\t\t\telse if (PCSrc == 1) PC0 <= PC4+imme_32*4;\n\t\t\t\telse if (PCSrc == 2) PC0 <= readData1;\n\t\t\t\telse PC0 <= PCnew;\n\t\t  end\n    end\n\nendmodule\n\n```\n## **验证方法**\n以下表格方便大家测试。将指令写到my_test_rom.txt文件，文件放在project的根文件夹，接着仿真验证。注意指令存储是按照字存储的，8位二进制位一行。\n![](ceshi.png)\n\n","slug":"多周期CPU","published":1,"updated":"2016-07-18T05:00:26.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzoj000ugobkxjic2a72","content":"<p>在对单周期CPU有一定了解后，现在我们来看看多周期CPU。多周期CPU指的是将整个CPU的执行过程分成几个阶段，每个阶段用一个时钟去完成，然后开始下一条指令的执行，而每种指令执行时所用的时钟数不尽相同，这就是所谓的多周期CPU。需要注意的是，在本设计中，不同指令的操作码跟单周期CPU会有所不同；指令存储器和数据存储器的存储单元是字节宽度，而不是使用32位。<br><a id=\"more\"></a></p>\n<h2 id=\"MIPS32指令格式\"><a href=\"#MIPS32指令格式\" class=\"headerlink\" title=\"MIPS32指令格式\"></a><strong>MIPS32指令格式</strong></h2><p>同单周期CPU的指令格式，指令有三种类型：R型、J型、I型</p>\n<h2 id=\"多周期CPU执行的指令\"><a href=\"#多周期CPU执行的指令\" class=\"headerlink\" title=\"多周期CPU执行的指令\"></a><strong>多周期CPU执行的指令</strong></h2><h3 id=\"算术运算指令\"><a href=\"#算术运算指令\" class=\"headerlink\" title=\"算术运算指令\"></a><strong>算术运算指令</strong></h3><p><img src=\"suansu.png\" alt=\"\"></p>\n<h3 id=\"逻辑运算指令\"><a href=\"#逻辑运算指令\" class=\"headerlink\" title=\"逻辑运算指令\"></a><strong>逻辑运算指令</strong></h3><p><img src=\"luoji.png\" alt=\"\"></p>\n<h3 id=\"移位指令\"><a href=\"#移位指令\" class=\"headerlink\" title=\"移位指令\"></a><strong>移位指令</strong></h3><p><img src=\"yiwei.png\" alt=\"\"><br>功能：rd&lt;－rs&lt;&lt;(zero-extend)sa，左移sa位 ，(zero-extend)sa</p>\n<h3 id=\"传送指令\"><a href=\"#传送指令\" class=\"headerlink\" title=\"传送指令\"></a><strong>传送指令</strong></h3><p><img src=\"chuansong.png\" alt=\"\"></p>\n<h3 id=\"比较指令\"><a href=\"#比较指令\" class=\"headerlink\" title=\"比较指令\"></a><strong>比较指令</strong></h3><p><img src=\"bijiao.png\" alt=\"\"></p>\n<h3 id=\"存储器读写指令\"><a href=\"#存储器读写指令\" class=\"headerlink\" title=\"存储器读写指令\"></a><strong>存储器读写指令</strong></h3><p><img src=\"duxie.png\" alt=\"\"></p>\n<h3 id=\"分支指令\"><a href=\"#分支指令\" class=\"headerlink\" title=\"分支指令\"></a><strong>分支指令</strong></h3><p><img src=\"fenzhi.png\" alt=\"\"></p>\n<h3 id=\"跳转指令\"><a href=\"#跳转指令\" class=\"headerlink\" title=\"跳转指令\"></a><strong>跳转指令</strong></h3><p><img src=\"tiaozhuan.png\" alt=\"\"></p>\n<h3 id=\"调用子程序指令\"><a href=\"#调用子程序指令\" class=\"headerlink\" title=\"调用子程序指令\"></a><strong>调用子程序指令</strong></h3><p><img src=\"zi.png\" alt=\"\"><br>功能：调用子程序，pc &lt;－ {pc[31..28],addr[27..2],0,0}；$31&lt;－pc+4，返回地址设置；子程序返回，需用指令 jr  $31。</p>\n<h3 id=\"停机指令\"><a href=\"#停机指令\" class=\"headerlink\" title=\"停机指令\"></a><strong>停机指令</strong></h3><p><img src=\"tingji.png\" alt=\"\"></p>\n<h2 id=\"设计原理\"><a href=\"#设计原理\" class=\"headerlink\" title=\"设计原理\"></a><strong>设计原理</strong></h2><h3 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a><strong>处理过程</strong></h3><p>CPU在处理指令时，一般需要经过以下几个阶段：</p>\n<ul>\n<li>取指令(IF)：根据程序计数器pc中的指令地址，从存储器中取出一条指令，同时，pc根据指令字长度自动递增产生下一条指令所需要的指令地址，但遇到“地址转移”指令时，则控制器把“转移地址”送入pc，当然得到的“地址”需要做些变换才送入pc。</li>\n<li>指令译码(ID)：对取指令操作中得到的指令进行分析并译码，确定这条指令需要完成的操作，从而产生相应的操作控制信号，用于驱动执行状态中的各种操作。</li>\n<li>指令执行(EXE)：根据指令译码得到的操作控制信号，具体地执行指令动作，然后转移到结果写回状态。</li>\n<li>存储器访问(MEM)：所有需要访问存储器的操作都将在这个步骤中执行，该步骤给出存储器的数据地址，把数据写入到存储器中数据地址所指定的存储单元或者从存储器中得到数据地址单元中的数据。</li>\n<li><p>结果写回(WB)：指令执行的结果或者访问存储器中得到的数据写回相应的目的寄存器中。<br><img src=\"guoc.png\" alt=\"\"></p>\n<h3 id=\"状态转移\"><a href=\"#状态转移\" class=\"headerlink\" title=\"状态转移\"></a><strong>状态转移</strong></h3><p>状态的转移有的是无条件的，例如从IF状态转移到ID 和 EXE状态就是无条件的；有些是有条件的，例如ID 或 EXE状态之后不止一个状态，到底转向哪个状态由该指令功能，即指令操作码决定。每个状态代表一个时钟周期。<br><img src=\"zhuanyi.png\" alt=\"\"></p>\n<h2 id=\"数据通路及其控制\"><a href=\"#数据通路及其控制\" class=\"headerlink\" title=\"数据通路及其控制\"></a><strong>数据通路及其控制</strong></h2><h3 id=\"控制部件\"><a href=\"#控制部件\" class=\"headerlink\" title=\"控制部件\"></a><strong>控制部件</strong></h3><p>下图是多周期CPU控制部件的电路结构，三个D触发器用于保存当前状态，是时序逻辑电路，RST用于初始化状态“000“，另外两个部分都是组合逻辑电路，一个用于产生下一个阶段的状态，另一个用于产生每个阶段的控制信号。从图上可看出，下个状态取决于指令操作码和当前状态；而每个阶段的控制信号取决于指令操作码、当前状态和反映运算结果的状态zero标志等。<br><img src=\"kongzhi.png\" alt=\"\"></p>\n<h3 id=\"数据通路\"><a href=\"#数据通路\" class=\"headerlink\" title=\"数据通路\"></a><strong>数据通路</strong></h3><p>下图是一个简单的基本上能够在单周期上完成所要求设计的指令功能的数据通路和必要的控制线路图。其中指令和数据各存储在不同存储器中，即有指令存储器和数据存储器。访问存储器时，先给出地址，然后由读/写信号控制（1-写，0-读。当然，也可以由时钟信号控制，但必须在图上画出来）。对于寄存器组，读操作时，给出寄存器地址（编号），输出端就直接输出相应数据；而在写操作时，在 WE使能信号为1时，在时钟边沿触发写入。<br>特别提示，图上增加IR指令寄存器，目的是使指令代码保持稳定，还有pc增加写使能控制信号pcWre，也是确保pc适时修改，原因都是和多周期工作的CPU有关。ADR、BDR、ALUout、ALUM2DR四个寄存器不需要写使能信号，其作用是切分数据通路，将大组合逻辑切分为若干个小组合逻辑，大延时变为多个分段小延时。<br><img src=\"tonglu.png\" alt=\"\"></p>\n<h3 id=\"控制信号\"><a href=\"#控制信号\" class=\"headerlink\" title=\"控制信号\"></a><strong>控制信号</strong></h3><p>控制信号和单周期CPU大同小异<br><img src=\"xinhao1.png\" alt=\"\"><br><img src=\"xinhao2.png\" alt=\"\"></p>\n</li>\n<li><p>Instruction Memory：指令存储器，</p>\n<ul>\n<li>Iaddr，指令地址输入端口</li>\n<li>DataIn，存储器数据输入端口</li>\n<li>DataOut，存储器数据输出端口</li>\n<li>RW，指令存储器读写控制信号，为1写，为0读</li>\n</ul>\n</li>\n<li>Data Memory：数据存储器，<ul>\n<li>Daddr，数据地址输入端口</li>\n<li>DataIn，存储器数据输入端口</li>\n<li>DataOut，存储器数据输出端口</li>\n<li>RW，数据存储器读写控制信号，为1写，为0读</li>\n</ul>\n</li>\n<li>Register File：（寄存器组）<ul>\n<li>Read Reg1，rs寄存器地址输入端口</li>\n<li>Read Reg2，rt寄存器地址输入端口</li>\n<li>Write Reg，将数据写入的寄存器，其地址输入端口（rt、rd）</li>\n<li>Write Data，写入寄存器的数据输入端口</li>\n<li>Read Data1，rs寄存器数据输出端口</li>\n<li>Read Data2，rt寄存器数据输出端口</li>\n<li>WE，写使能信号，为1时，在时钟上升沿写入</li>\n</ul>\n</li>\n<li>IR：指令寄存器，用于存放正在执行的指令代码</li>\n</ul>\n<h3 id=\"ALU运算功能表\"><a href=\"#ALU运算功能表\" class=\"headerlink\" title=\"ALU运算功能表\"></a><strong>ALU运算功能表</strong></h3><p>ALU：</p>\n<ul>\n<li>result，ALU运算结果</li>\n<li>zero，运算结果标志，结果为0输出1，否则输出0<br><img src=\"alu.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"设计方法\"><a href=\"#设计方法\" class=\"headerlink\" title=\"设计方法\"></a><strong>设计方法</strong></h2><p>采用模块设计的思想，设计的模块和单周期CPU的模块一样，但添加了IR模块（用于在时钟下降沿到来时将InsMem模块输出的指令传出到registerFile模块，图中用的是上升沿，但上升沿到来时CU的控制信号才发出，信号送达需要时间，因此改为下降沿），所以总共设计了InsMEM模块、ControlUnit模块、registerFile模块（ALUM2DR归入本模块，时钟上升沿到来时才将内存的数据传入本模块）、Extend模块（加入了一个功能：跳转指令执行时计算要改变的PC0的值）、ALU模块（ADR和BDR归入这个模块，时钟上升沿到来时数据才传入）、DataMEM模块（ALUOut归入本模块，时钟上升沿到来时数据才传入）、IR模块，最后设计CPU总模块，需要注意的是，PC没有独立作为一个模块，免去参数传递的麻烦，直接写在总模块中。<br>另外一个思路时，由于CU的控制信号很多，但是很多信号在指令执行的多个阶段中是一样的，因此在取完指令后，ID阶段就改变CU控制信号的值为正确的值，在其他的阶段，需要改变的信号再改变。<br>还有一点是，PC0的改变是在控制信号PCWre为1时改变的，在每条指令执行的最后阶段将控制信号PCWre改为1，这就保证执行下一条指令时，PC0已经正确改变。</p>\n<h3 id=\"IF阶段控制信号表\"><a href=\"#IF阶段控制信号表\" class=\"headerlink\" title=\"IF阶段控制信号表\"></a><strong>IF阶段控制信号表</strong></h3><p><img src=\"if.png\" alt=\"\"></p>\n<h3 id=\"ID阶段控制信号表\"><a href=\"#ID阶段控制信号表\" class=\"headerlink\" title=\"ID阶段控制信号表\"></a><strong>ID阶段控制信号表</strong></h3><p><img src=\"id.png\" alt=\"\"></p>\n<h3 id=\"EXE阶段控制信号表\"><a href=\"#EXE阶段控制信号表\" class=\"headerlink\" title=\"EXE阶段控制信号表\"></a><strong>EXE阶段控制信号表</strong></h3><p><img src=\"exe.png\" alt=\"\"></p>\n<h3 id=\"MEM阶段控制信号表\"><a href=\"#MEM阶段控制信号表\" class=\"headerlink\" title=\"MEM阶段控制信号表\"></a><strong>MEM阶段控制信号表</strong></h3><p><img src=\"mem.png\" alt=\"\"></p>\n<h3 id=\"WB阶段控制信号表\"><a href=\"#WB阶段控制信号表\" class=\"headerlink\" title=\"WB阶段控制信号表\"></a><strong>WB阶段控制信号表</strong></h3><p><img src=\"wb.png\" alt=\"\"><br>此外，jal指令也要设置RegWre = 1</p>\n<h3 id=\"InsMEM模块\"><a href=\"#InsMEM模块\" class=\"headerlink\" title=\"InsMEM模块\"></a><strong>InsMEM模块</strong></h3><p>把将要执行的指令my_test_rom.txt加载到储存指令的内存中。根据PC的值返回相应的指令。注意这里指令是按照字节存储的。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> InsMEM(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC0,</div><div class=\"line\">\t<span class=\"keyword\">input</span> InsMemRW,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] mem [<span class=\"number\">0</span>:<span class=\"number\">127</span>];</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"built_in\">$readmemb</span>(<span class=\"string\">\"my_test_rom.txt\"</span>, mem);</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">always</span> @* <span class=\"keyword\">begin</span></div><div class=\"line\">        instruction[<span class=\"number\">31</span>:<span class=\"number\">0</span>] &lt;= &#123;mem[PC0-<span class=\"number\">8'b11111000</span>], mem[PC0-<span class=\"number\">8'b11111000</span>+<span class=\"number\">1</span>], mem[PC0-<span class=\"number\">8'b11111000</span>+<span class=\"number\">2</span>], mem[PC0-<span class=\"number\">8'b11111000</span>+<span class=\"number\">3</span>]&#125;;  <span class=\"comment\">// 初始化为2'hF8</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ControlUnit模块\"><a href=\"#ControlUnit模块\" class=\"headerlink\" title=\"ControlUnit模块\"></a><strong>ControlUnit模块</strong></h3><p>包含两个变量state和next_state，next_state初始化为sif，控制单元根据state的不同，执行不同的操作，注意控制单元在state为ID时，根据指令的不同改变各个控制信号量的值，在其他state时，根据需要改变相应的控制信号的值，以达到正确的控制目的，记得在每个状态中，根据状态机，改变next_state的值。代码可能有点长，然后其实并不难，都是重复的代码。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> ControlUnit(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">5</span>:<span class=\"number\">0</span>] Opcode,</div><div class=\"line\">    <span class=\"keyword\">input</span> zero,</div><div class=\"line\">\t <span class=\"keyword\">input</span> clk,</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> PCWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> ALUSrcB,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> ALUM2Reg,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> RegWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> InsMemRW,</div><div class=\"line\">\t <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> IRWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> DataMemRW,</div><div class=\"line\">\t <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> WrRegData,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] ExtSel,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] PCSrc,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] RegOut,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp,</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] state</div><div class=\"line\">    );</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] next_state;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">parameter</span> ADD = <span class=\"number\">6'b000000</span>, ADDI = <span class=\"number\">6'b000010</span>, SUB = <span class=\"number\">6'b000001</span>, ORI = <span class=\"number\">6'b010010</span>,</div><div class=\"line\">              AND = <span class=\"number\">6'b010001</span>, OR = <span class=\"number\">6'b010000</span>, MOVE = <span class=\"number\">6'b100000</span>, SW = <span class=\"number\">6'b110000</span>,</div><div class=\"line\">              LW = <span class=\"number\">6'b110001</span>, BEQ = <span class=\"number\">6'b110100</span>, HALT = <span class=\"number\">6'b111111</span>, SLL = <span class=\"number\">6'b011000</span>,</div><div class=\"line\">\t\t\t\t  SLT = <span class=\"number\">6'b100111</span>, J = <span class=\"number\">6'b111000</span>, JR = <span class=\"number\">6'b111001</span>, JAL = <span class=\"number\">6'b111010</span>;</div><div class=\"line\">    <span class=\"keyword\">parameter</span> sif = <span class=\"number\">3'b000</span>, sid = <span class=\"number\">3'b001</span>, sexe1 = <span class=\"number\">3'b110</span>, sexe2 = <span class=\"number\">3'b101</span>,</div><div class=\"line\">\t\t\t\t  sexe3 = <span class=\"number\">3'b010</span>, smem = <span class=\"number\">3'b011</span>, swb1 = <span class=\"number\">3'b111</span>, swb2 = <span class=\"number\">3'b100</span>;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t     next_state = sif;</div><div class=\"line\">\t\t  InsMemRW = <span class=\"number\">0</span>;  <span class=\"comment\">// 这个变量在本次实验中没有用处</span></div><div class=\"line\">\t\t  </div><div class=\"line\">\t\t  ALUSrcB = <span class=\"number\">0</span>;   <span class=\"comment\">// 初始化，不初始化也可以但会出现红框</span></div><div class=\"line\">\t\t  ALUM2Reg = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t  WrRegData = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  ExtSel = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  PCSrc = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  RegOut = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t  ALUOp = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  </div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     state &lt;= next_state;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(state <span class=\"keyword\">or</span> zero <span class=\"keyword\">or</span> Opcode) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">case</span>(state)</div><div class=\"line\">\t\t      sif: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\tIRWre = <span class=\"number\">1</span>; PCWre = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\tRegWre = <span class=\"number\">0</span>; DataMemRW = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\tnext_state = sid;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tsid: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t   <span class=\"keyword\">if</span> (Opcode == ADD || Opcode == SUB || Opcode == ADDI ||</div><div class=\"line\">     \t\t\t\t\t Opcode == OR || Opcode == AND || Opcode == ORI ||</div><div class=\"line\">\t\t\t\t\t\t Opcode == SLL || Opcode == MOVE || Opcode == SLT)</div><div class=\"line\">\t\t\t\t\t\t next_state = sexe1;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Opcode == BEQ) next_state = sexe2;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Opcode == SW || Opcode == LW) next_state = sexe3;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> next_state = sif;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\tWrRegData &lt;= (Opcode == JAL) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t   ALUM2Reg &lt;= (Opcode == LW) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span>(Opcode)</div><div class=\"line\">\t\t\t\t\t    ADD: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t\t\t  ALUOp = <span class=\"number\">3'b000</span>;</div><div class=\"line\">\t\t\t\t\t\t\t  PCSrc = <span class=\"number\">2'b00</span>; RegOut = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t SUB: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t\t\t  ALUOp = <span class=\"number\">3'b001</span>;</div><div class=\"line\">\t\t\t\t\t\t\t  PCSrc = <span class=\"number\">2'b00</span>; RegOut = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t ADDI: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; RegOut = <span class=\"number\">2'b01</span>; ALUOp = <span class=\"number\">3'b000</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>; ExtSel  = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t OR: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b101</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t AND: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b110</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t ORI: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; RegOut = <span class=\"number\">2'b01</span>; ALUOp = <span class=\"number\">3'b101</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>; ExtSel = <span class=\"number\">2'b01</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t SLL: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b100</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>; ExtSel = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t MOVE: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b000</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t SLT: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b010</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t SW: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; ALUOp = <span class=\"number\">3'b000</span>; PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t     ExtSel = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t LW: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; RegOut = <span class=\"number\">2'b01</span>; ALUOp = <span class=\"number\">3'b000</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>; ExtSel = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t BEQ: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; ALUOp = <span class=\"number\">3'b001</span>;</div><div class=\"line\">\t\t\t\t\t\t     ExtSel = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t J: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; PCSrc = <span class=\"number\">2'b11</span>; PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t JR: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; PCSrc = <span class=\"number\">2'b10</span>; PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t JAL: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b00</span>; RegWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b11</span>; PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t HALT: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">endcase</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t   sexe1: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\tIRWre = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\tnext_state = swb1;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tsexe2: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t PCWre = <span class=\"number\">1</span>; IRWre = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t PCSrc &lt;= (zero == <span class=\"number\">0</span>) ?  <span class=\"number\">2'b00</span> : <span class=\"number\">2'b01</span>;</div><div class=\"line\">\t\t\t\t\t next_state = sif;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tsexe3: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t IRWre = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t next_state = smem;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tswb1: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t RegWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t next_state = sif;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tsmem: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t    <span class=\"keyword\">if</span> (Opcode == SW) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t     PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t  DataMemRW = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t  next_state = sif;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">if</span> (Opcode == LW) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t  next_state = swb2;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tswb2: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t RegWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t next_state = sif;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">        <span class=\"keyword\">endcase</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"registerFile模块\"><a href=\"#registerFile模块\" class=\"headerlink\" title=\"registerFile模块\"></a><strong>registerFile模块</strong></h3><p>申明31个寄存器并初始化为0，0号寄存器一直当做0处理；寄存器的值在这个模块中取出，同时也可以在时钟下降沿到来时向寄存器写值，由CU相应的控制信号控制，这里与图中不同，图中是上升沿，是在下个周期上升沿到来时才将值写入，我是在本周期的下降沿写入值的。还有一点，ALUM2DR归入这个模块，数据存储器的输出值write_data在时钟上升沿到来时才能传入本模块中。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> registerFile(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rs, rt, rd,  <span class=\"comment\">// 相应的赋值在主模块实现,write_data是内存输出的数据，write_data是上升沿后的数据</span></div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data, PC4,  <span class=\"comment\">// writedata是本模块的选择的输入</span></div><div class=\"line\">    <span class=\"keyword\">input</span> RegWre, clk, WrRegData,</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] RegOut,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1, readData2</div><div class=\"line\">    );</div><div class=\"line\">    </div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] write_reg;</div><div class=\"line\">\t <span class=\"keyword\">assign</span> write_reg = (RegOut == <span class=\"number\">0</span>) ? <span class=\"number\">5'b11111</span> : ((RegOut == <span class=\"number\">1</span>) ? rt : rd);</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data_1;</div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     write_data_1 = write_data;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] writedata;</div><div class=\"line\">\t <span class=\"keyword\">assign</span> writedata = (WrRegData == <span class=\"number\">0</span>) ? PC4 : write_data_1;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] register [<span class=\"number\">1</span>:<span class=\"number\">31</span>];  <span class=\"comment\">// 声明r1~r31</span></div><div class=\"line\">    <span class=\"keyword\">integer</span> i;</div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i = i + <span class=\"number\">1</span>)</div><div class=\"line\">            register[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 0号寄存器值固定为0</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> readData1 = (rs == <span class=\"number\">0</span>)? <span class=\"number\">0</span> : register[rs];</div><div class=\"line\">    <span class=\"keyword\">assign</span> readData2 = (rt == <span class=\"number\">0</span>)? <span class=\"number\">0</span> : register[rt];</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">negedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">if</span> ((RegWre == <span class=\"number\">1</span>) &amp;&amp; (write_reg != <span class=\"number\">0</span>)) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t      register[write_reg] &lt;= writedata;</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Extend模块\"><a href=\"#Extend模块\" class=\"headerlink\" title=\"Extend模块\"></a><strong>Extend模块</strong></h3><p>本模块比较简单，在单周期的基础上加入了跳转指令需要计算的PC的值；同时，在零拓展时，控制信号ExtSel的值为00时，只取imme_16的[10:6]位，拓展后这个值是供左移右移指令使用的。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> Extend(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] imme_16,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] ExtSel,</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC0,</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">25</span>:<span class=\"number\">0</span>] imme_26,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32,</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PCnew</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"comment\">// 10为符号拓展，00,01为零拓展, 00只取[10:6]</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> imme_32 = (ExtSel == <span class=\"number\">2'b10</span>) ? &#123;&#123;<span class=\"number\">16</span>&#123;imme_16[<span class=\"number\">15</span>]&#125;&#125;, imme_16[<span class=\"number\">15</span>:<span class=\"number\">0</span>]&#125; : ((ExtSel == <span class=\"number\">2'b00</span>) ? &#123;&#123;<span class=\"number\">27</span>&#123;<span class=\"number\">1'b0</span>&#125;&#125;, imme_16[<span class=\"number\">10</span>:<span class=\"number\">6</span>]&#125; : &#123;&#123;<span class=\"number\">16</span>&#123;<span class=\"number\">1'b0</span>&#125;&#125;, imme_16[<span class=\"number\">15</span>:<span class=\"number\">0</span>]&#125;);</div><div class=\"line\">\t <span class=\"keyword\">assign</span> PCnew = &#123;PC0[<span class=\"number\">31</span>:<span class=\"number\">28</span>], imme_26, <span class=\"number\">2'b00</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ALU模块\"><a href=\"#ALU模块\" class=\"headerlink\" title=\" ALU模块\"></a><strong> ALU模块</strong></h3><p>根据CU发出的控制信号ALUOp的不同，ALU对传进去的值执行不同的操作。还有就是ADR和BDR归入本模块，在时钟上升沿到来时才将数据传入ALU模块。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> ALU(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32,</div><div class=\"line\">    <span class=\"keyword\">input</span> ALUSrcB,</div><div class=\"line\">\t <span class=\"keyword\">input</span> clk,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">wire</span> zero,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result</div><div class=\"line\">    );</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">/*initial begin</span></div><div class=\"line\">\t     result = 0;</div><div class=\"line\">\t end*/</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1_1, readData2_1;</div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     readData1_1 = readData1;</div><div class=\"line\">\t\t  readData2_1 = readData2;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] alub;</div><div class=\"line\">    <span class=\"keyword\">assign</span> alub = (ALUSrcB == <span class=\"number\">0</span>) ? readData2_1 : imme_32;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span>@(readData1_1 <span class=\"keyword\">or</span> alub <span class=\"keyword\">or</span> ALUOp) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">case</span> (ALUOp)</div><div class=\"line\">            <span class=\"number\">3'b000</span>: result &lt;= readData1_1 + alub;</div><div class=\"line\">            <span class=\"number\">3'b001</span>: result &lt;= readData1_1 - alub;</div><div class=\"line\">            <span class=\"number\">3'b010</span>: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t    <span class=\"keyword\">if</span> (readData1_1 &lt; alub) result &lt;= <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">else</span> result &lt;= <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t   <span class=\"keyword\">end</span></div><div class=\"line\">            <span class=\"number\">3'b011</span>: result &lt;= readData1_1 &gt;&gt; alub;</div><div class=\"line\">            <span class=\"number\">3'b100</span>: result &lt;= readData1_1 &lt;&lt; alub;</div><div class=\"line\">            <span class=\"number\">3'b101</span>: result &lt;= readData1_1 | alub;</div><div class=\"line\">            <span class=\"number\">3'b110</span>: result &lt;= readData1_1 &amp; alub;</div><div class=\"line\">            <span class=\"number\">3'b111</span>: result &lt;= (readData1_1 &amp; ~alub) | (~readData1_1 &amp; alub);</div><div class=\"line\">        <span class=\"keyword\">endcase</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> zero = (result == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"DataMEM模块\"><a href=\"#DataMEM模块\" class=\"headerlink\" title=\"DataMEM模块\"></a><strong>DataMEM模块</strong></h3><p>数据储存在模块申请的数组当中，并根据控制信号的不同，可以存值也可以取值。BDR和ALUOut归入本模块中，以控制在时钟上升沿到来时才将数据传入。数据储存在本次多周期CPU中是按字节存储的，与单周期不同。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> DataMEM(</div><div class=\"line\">    <span class=\"keyword\">input</span> clk,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2,</div><div class=\"line\">    <span class=\"keyword\">input</span> DataMemRW,</div><div class=\"line\">    <span class=\"keyword\">input</span> ALUM2Reg,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DAddr, DataIn;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataOut;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t     DataOut = <span class=\"number\">0</span>;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     DataIn = readData2;</div><div class=\"line\">\t\t  DAddr = result;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] DataMem [<span class=\"number\">0</span>:<span class=\"number\">511</span>];  <span class=\"comment\">// 声明内存</span></div><div class=\"line\">    <span class=\"keyword\">integer</span> i;</div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">512</span>; i = i + <span class=\"number\">1</span>)</div><div class=\"line\">            DataMem[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span>@(DAddr <span class=\"keyword\">or</span> DataMemRW) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (DataMemRW == <span class=\"number\">0</span>)  <span class=\"comment\">// 取字</span></div><div class=\"line\">            DataOut[<span class=\"number\">31</span>:<span class=\"number\">0</span>] = &#123;DataMem[DAddr], DataMem[DAddr+<span class=\"number\">1</span>], DataMem[DAddr+<span class=\"number\">2</span>], DataMem[DAddr+<span class=\"number\">3</span>]&#125;;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span>  <span class=\"comment\">// 存字</span></div><div class=\"line\">            DataMem[DAddr] = DataIn[<span class=\"number\">31</span>:<span class=\"number\">24</span>];</div><div class=\"line\">\t\t\t\tDataMem[DAddr+<span class=\"number\">1</span>] = DataIn[<span class=\"number\">23</span>:<span class=\"number\">16</span>];</div><div class=\"line\">\t\t\t\tDataMem[DAddr+<span class=\"number\">2</span>] = DataIn[<span class=\"number\">15</span>:<span class=\"number\">8</span>];</div><div class=\"line\">\t\t\t\tDataMem[DAddr+<span class=\"number\">3</span>] = DataIn[<span class=\"number\">7</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t <span class=\"keyword\">assign</span> write_data = (ALUM2Reg == <span class=\"number\">0</span>) ? result : DataOut;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"IR模块\"><a href=\"#IR模块\" class=\"headerlink\" title=\" IR模块\"></a><strong> IR模块</strong></h3><p>控制在时钟下降沿到来时才将指令传到registerFile模块中。同时根据控制信号的不同，可以使传出的指令保持不变或者变更为InsMEM中传过来的指令。没有其他作用，至于为什么用下降沿，前文有解释。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> IR(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction,</div><div class=\"line\">\t <span class=\"keyword\">input</span> IRWre,</div><div class=\"line\">\t <span class=\"keyword\">input</span> clk,</div><div class=\"line\">\t <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction2</div><div class=\"line\">    );</div><div class=\"line\">    </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t     instruction2 = <span class=\"number\">0</span>;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">negedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">case</span>(IRWre)</div><div class=\"line\">\t\t\t\t<span class=\"number\">1</span>: instruction2 &lt;= instruction;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 0: instruction2 &lt;= instruction2;</span></div><div class=\"line\">\t\t  <span class=\"keyword\">endcase</span></div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"CPU总模块\"><a href=\"#CPU总模块\" class=\"headerlink\" title=\"CPU总模块\"></a><strong>CPU总模块</strong></h3><p>总模块中将各个模块之间的线连起来，并且将IR输出的指令拆分为几个部分，传入不同的模块；然后实例化各个模块，需要注意的是，实例化模块时，变量名和顺序一定一定要和小模块申明时相同；此外，总模块中根据具体情况改变PC的值。PC值初始化为十六进制F8，假设程序从这里开始执行。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> CPU();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 模块间的连线</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> PCWre;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ALUSrcB;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ALUM2Reg;</div><div class=\"line\">    <span class=\"keyword\">wire</span> RegWre;</div><div class=\"line\">    <span class=\"keyword\">wire</span> InsMemRW;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> IRWre;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> WrRegData;</div><div class=\"line\">    <span class=\"keyword\">wire</span> DataMemRW;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] ExtSel;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] PCSrc;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] RegOut;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC0;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction2;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC4;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PCnew;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2;</div><div class=\"line\">    <span class=\"keyword\">wire</span> zero;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] state;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">reg</span> clk;</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"comment\">// 指令拆分成的变量</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">5</span>:<span class=\"number\">0</span>] Opcode;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rs;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rt;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rd;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] imme_16;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">25</span>:<span class=\"number\">0</span>] imme_26;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 给拆分变量赋值</span></div><div class=\"line\">\t <span class=\"keyword\">assign</span> Opcode[<span class=\"number\">5</span>:<span class=\"number\">0</span>] = instruction2[<span class=\"number\">31</span>:<span class=\"number\">26</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rs = instruction2[<span class=\"number\">25</span>:<span class=\"number\">21</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rt = instruction2[<span class=\"number\">20</span>:<span class=\"number\">16</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rd = instruction2[<span class=\"number\">15</span>:<span class=\"number\">11</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> imme_16 = instruction2[<span class=\"number\">15</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t <span class=\"keyword\">assign</span> imme_26 = instruction2[<span class=\"number\">25</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">assign</span> PC4 = PC0+<span class=\"number\">4</span>;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 初始化PC和时钟，设置时钟周期</span></div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        PC0 = <span class=\"number\">8'b11111000</span>;</div><div class=\"line\">        clk = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">always</span> #<span class=\"number\">500</span></div><div class=\"line\">        clk = ~clk;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 实例化各个模块（变量名不能拼写错误！！！）</span></div><div class=\"line\">\t InsMEM insmem(PC0, InsMemRW, instruction);</div><div class=\"line\">\t ControlUnit controlunit(Opcode, zero, clk, PCWre, ALUSrcB, ALUM2Reg, RegWre, InsMemRW, IRWre, DataMemRW, WrRegData, ExtSel, PCSrc, RegOut, ALUOp, state);</div><div class=\"line\">    registerFile registerfile(rs, rt, rd, write_data, PC4, RegWre, clk, WrRegData, RegOut, readData1, readData2);</div><div class=\"line\">    Extend extend(imme_16, ExtSel, PC0, imme_26, imme_32, PCnew);</div><div class=\"line\">\t ALU alu(readData1, readData2, imme_32, ALUSrcB, clk, ALUOp, zero, result);</div><div class=\"line\">\t DataMEM datamem(clk, result, readData2, DataMemRW, ALUM2Reg, write_data);</div><div class=\"line\">\t IR ir(instruction, IRWre, clk, instruction2);</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// PC模块</span></div><div class=\"line\">\t <span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">if</span> (PCWre == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t      <span class=\"keyword\">if</span> (PCSrc == <span class=\"number\">0</span>) PC0 &lt;= PC4;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PCSrc == <span class=\"number\">1</span>) PC0 &lt;= PC4+imme_32*<span class=\"number\">4</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PCSrc == <span class=\"number\">2</span>) PC0 &lt;= readData1;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> PC0 &lt;= PCnew;</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"验证方法\"><a href=\"#验证方法\" class=\"headerlink\" title=\"验证方法\"></a><strong>验证方法</strong></h2><p>以下表格方便大家测试。将指令写到my_test_rom.txt文件，文件放在project的根文件夹，接着仿真验证。注意指令存储是按照字存储的，8位二进制位一行。<br><img src=\"ceshi.png\" alt=\"\"></p>\n","excerpt":"<p>在对单周期CPU有一定了解后，现在我们来看看多周期CPU。多周期CPU指的是将整个CPU的执行过程分成几个阶段，每个阶段用一个时钟去完成，然后开始下一条指令的执行，而每种指令执行时所用的时钟数不尽相同，这就是所谓的多周期CPU。需要注意的是，在本设计中，不同指令的操作码跟单周期CPU会有所不同；指令存储器和数据存储器的存储单元是字节宽度，而不是使用32位。<br>","more":"</p>\n<h2 id=\"MIPS32指令格式\"><a href=\"#MIPS32指令格式\" class=\"headerlink\" title=\"MIPS32指令格式\"></a><strong>MIPS32指令格式</strong></h2><p>同单周期CPU的指令格式，指令有三种类型：R型、J型、I型</p>\n<h2 id=\"多周期CPU执行的指令\"><a href=\"#多周期CPU执行的指令\" class=\"headerlink\" title=\"多周期CPU执行的指令\"></a><strong>多周期CPU执行的指令</strong></h2><h3 id=\"算术运算指令\"><a href=\"#算术运算指令\" class=\"headerlink\" title=\"算术运算指令\"></a><strong>算术运算指令</strong></h3><p><img src=\"suansu.png\" alt=\"\"></p>\n<h3 id=\"逻辑运算指令\"><a href=\"#逻辑运算指令\" class=\"headerlink\" title=\"逻辑运算指令\"></a><strong>逻辑运算指令</strong></h3><p><img src=\"luoji.png\" alt=\"\"></p>\n<h3 id=\"移位指令\"><a href=\"#移位指令\" class=\"headerlink\" title=\"移位指令\"></a><strong>移位指令</strong></h3><p><img src=\"yiwei.png\" alt=\"\"><br>功能：rd&lt;－rs&lt;&lt;(zero-extend)sa，左移sa位 ，(zero-extend)sa</p>\n<h3 id=\"传送指令\"><a href=\"#传送指令\" class=\"headerlink\" title=\"传送指令\"></a><strong>传送指令</strong></h3><p><img src=\"chuansong.png\" alt=\"\"></p>\n<h3 id=\"比较指令\"><a href=\"#比较指令\" class=\"headerlink\" title=\"比较指令\"></a><strong>比较指令</strong></h3><p><img src=\"bijiao.png\" alt=\"\"></p>\n<h3 id=\"存储器读写指令\"><a href=\"#存储器读写指令\" class=\"headerlink\" title=\"存储器读写指令\"></a><strong>存储器读写指令</strong></h3><p><img src=\"duxie.png\" alt=\"\"></p>\n<h3 id=\"分支指令\"><a href=\"#分支指令\" class=\"headerlink\" title=\"分支指令\"></a><strong>分支指令</strong></h3><p><img src=\"fenzhi.png\" alt=\"\"></p>\n<h3 id=\"跳转指令\"><a href=\"#跳转指令\" class=\"headerlink\" title=\"跳转指令\"></a><strong>跳转指令</strong></h3><p><img src=\"tiaozhuan.png\" alt=\"\"></p>\n<h3 id=\"调用子程序指令\"><a href=\"#调用子程序指令\" class=\"headerlink\" title=\"调用子程序指令\"></a><strong>调用子程序指令</strong></h3><p><img src=\"zi.png\" alt=\"\"><br>功能：调用子程序，pc &lt;－ {pc[31..28],addr[27..2],0,0}；$31&lt;－pc+4，返回地址设置；子程序返回，需用指令 jr  $31。</p>\n<h3 id=\"停机指令\"><a href=\"#停机指令\" class=\"headerlink\" title=\"停机指令\"></a><strong>停机指令</strong></h3><p><img src=\"tingji.png\" alt=\"\"></p>\n<h2 id=\"设计原理\"><a href=\"#设计原理\" class=\"headerlink\" title=\"设计原理\"></a><strong>设计原理</strong></h2><h3 id=\"处理过程\"><a href=\"#处理过程\" class=\"headerlink\" title=\"处理过程\"></a><strong>处理过程</strong></h3><p>CPU在处理指令时，一般需要经过以下几个阶段：</p>\n<ul>\n<li>取指令(IF)：根据程序计数器pc中的指令地址，从存储器中取出一条指令，同时，pc根据指令字长度自动递增产生下一条指令所需要的指令地址，但遇到“地址转移”指令时，则控制器把“转移地址”送入pc，当然得到的“地址”需要做些变换才送入pc。</li>\n<li>指令译码(ID)：对取指令操作中得到的指令进行分析并译码，确定这条指令需要完成的操作，从而产生相应的操作控制信号，用于驱动执行状态中的各种操作。</li>\n<li>指令执行(EXE)：根据指令译码得到的操作控制信号，具体地执行指令动作，然后转移到结果写回状态。</li>\n<li>存储器访问(MEM)：所有需要访问存储器的操作都将在这个步骤中执行，该步骤给出存储器的数据地址，把数据写入到存储器中数据地址所指定的存储单元或者从存储器中得到数据地址单元中的数据。</li>\n<li><p>结果写回(WB)：指令执行的结果或者访问存储器中得到的数据写回相应的目的寄存器中。<br><img src=\"guoc.png\" alt=\"\"></p>\n<h3 id=\"状态转移\"><a href=\"#状态转移\" class=\"headerlink\" title=\"状态转移\"></a><strong>状态转移</strong></h3><p>状态的转移有的是无条件的，例如从IF状态转移到ID 和 EXE状态就是无条件的；有些是有条件的，例如ID 或 EXE状态之后不止一个状态，到底转向哪个状态由该指令功能，即指令操作码决定。每个状态代表一个时钟周期。<br><img src=\"zhuanyi.png\" alt=\"\"></p>\n<h2 id=\"数据通路及其控制\"><a href=\"#数据通路及其控制\" class=\"headerlink\" title=\"数据通路及其控制\"></a><strong>数据通路及其控制</strong></h2><h3 id=\"控制部件\"><a href=\"#控制部件\" class=\"headerlink\" title=\"控制部件\"></a><strong>控制部件</strong></h3><p>下图是多周期CPU控制部件的电路结构，三个D触发器用于保存当前状态，是时序逻辑电路，RST用于初始化状态“000“，另外两个部分都是组合逻辑电路，一个用于产生下一个阶段的状态，另一个用于产生每个阶段的控制信号。从图上可看出，下个状态取决于指令操作码和当前状态；而每个阶段的控制信号取决于指令操作码、当前状态和反映运算结果的状态zero标志等。<br><img src=\"kongzhi.png\" alt=\"\"></p>\n<h3 id=\"数据通路\"><a href=\"#数据通路\" class=\"headerlink\" title=\"数据通路\"></a><strong>数据通路</strong></h3><p>下图是一个简单的基本上能够在单周期上完成所要求设计的指令功能的数据通路和必要的控制线路图。其中指令和数据各存储在不同存储器中，即有指令存储器和数据存储器。访问存储器时，先给出地址，然后由读/写信号控制（1-写，0-读。当然，也可以由时钟信号控制，但必须在图上画出来）。对于寄存器组，读操作时，给出寄存器地址（编号），输出端就直接输出相应数据；而在写操作时，在 WE使能信号为1时，在时钟边沿触发写入。<br>特别提示，图上增加IR指令寄存器，目的是使指令代码保持稳定，还有pc增加写使能控制信号pcWre，也是确保pc适时修改，原因都是和多周期工作的CPU有关。ADR、BDR、ALUout、ALUM2DR四个寄存器不需要写使能信号，其作用是切分数据通路，将大组合逻辑切分为若干个小组合逻辑，大延时变为多个分段小延时。<br><img src=\"tonglu.png\" alt=\"\"></p>\n<h3 id=\"控制信号\"><a href=\"#控制信号\" class=\"headerlink\" title=\"控制信号\"></a><strong>控制信号</strong></h3><p>控制信号和单周期CPU大同小异<br><img src=\"xinhao1.png\" alt=\"\"><br><img src=\"xinhao2.png\" alt=\"\"></p>\n</li>\n<li><p>Instruction Memory：指令存储器，</p>\n<ul>\n<li>Iaddr，指令地址输入端口</li>\n<li>DataIn，存储器数据输入端口</li>\n<li>DataOut，存储器数据输出端口</li>\n<li>RW，指令存储器读写控制信号，为1写，为0读</li>\n</ul>\n</li>\n<li>Data Memory：数据存储器，<ul>\n<li>Daddr，数据地址输入端口</li>\n<li>DataIn，存储器数据输入端口</li>\n<li>DataOut，存储器数据输出端口</li>\n<li>RW，数据存储器读写控制信号，为1写，为0读</li>\n</ul>\n</li>\n<li>Register File：（寄存器组）<ul>\n<li>Read Reg1，rs寄存器地址输入端口</li>\n<li>Read Reg2，rt寄存器地址输入端口</li>\n<li>Write Reg，将数据写入的寄存器，其地址输入端口（rt、rd）</li>\n<li>Write Data，写入寄存器的数据输入端口</li>\n<li>Read Data1，rs寄存器数据输出端口</li>\n<li>Read Data2，rt寄存器数据输出端口</li>\n<li>WE，写使能信号，为1时，在时钟上升沿写入</li>\n</ul>\n</li>\n<li>IR：指令寄存器，用于存放正在执行的指令代码</li>\n</ul>\n<h3 id=\"ALU运算功能表\"><a href=\"#ALU运算功能表\" class=\"headerlink\" title=\"ALU运算功能表\"></a><strong>ALU运算功能表</strong></h3><p>ALU：</p>\n<ul>\n<li>result，ALU运算结果</li>\n<li>zero，运算结果标志，结果为0输出1，否则输出0<br><img src=\"alu.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"设计方法\"><a href=\"#设计方法\" class=\"headerlink\" title=\"设计方法\"></a><strong>设计方法</strong></h2><p>采用模块设计的思想，设计的模块和单周期CPU的模块一样，但添加了IR模块（用于在时钟下降沿到来时将InsMem模块输出的指令传出到registerFile模块，图中用的是上升沿，但上升沿到来时CU的控制信号才发出，信号送达需要时间，因此改为下降沿），所以总共设计了InsMEM模块、ControlUnit模块、registerFile模块（ALUM2DR归入本模块，时钟上升沿到来时才将内存的数据传入本模块）、Extend模块（加入了一个功能：跳转指令执行时计算要改变的PC0的值）、ALU模块（ADR和BDR归入这个模块，时钟上升沿到来时数据才传入）、DataMEM模块（ALUOut归入本模块，时钟上升沿到来时数据才传入）、IR模块，最后设计CPU总模块，需要注意的是，PC没有独立作为一个模块，免去参数传递的麻烦，直接写在总模块中。<br>另外一个思路时，由于CU的控制信号很多，但是很多信号在指令执行的多个阶段中是一样的，因此在取完指令后，ID阶段就改变CU控制信号的值为正确的值，在其他的阶段，需要改变的信号再改变。<br>还有一点是，PC0的改变是在控制信号PCWre为1时改变的，在每条指令执行的最后阶段将控制信号PCWre改为1，这就保证执行下一条指令时，PC0已经正确改变。</p>\n<h3 id=\"IF阶段控制信号表\"><a href=\"#IF阶段控制信号表\" class=\"headerlink\" title=\"IF阶段控制信号表\"></a><strong>IF阶段控制信号表</strong></h3><p><img src=\"if.png\" alt=\"\"></p>\n<h3 id=\"ID阶段控制信号表\"><a href=\"#ID阶段控制信号表\" class=\"headerlink\" title=\"ID阶段控制信号表\"></a><strong>ID阶段控制信号表</strong></h3><p><img src=\"id.png\" alt=\"\"></p>\n<h3 id=\"EXE阶段控制信号表\"><a href=\"#EXE阶段控制信号表\" class=\"headerlink\" title=\"EXE阶段控制信号表\"></a><strong>EXE阶段控制信号表</strong></h3><p><img src=\"exe.png\" alt=\"\"></p>\n<h3 id=\"MEM阶段控制信号表\"><a href=\"#MEM阶段控制信号表\" class=\"headerlink\" title=\"MEM阶段控制信号表\"></a><strong>MEM阶段控制信号表</strong></h3><p><img src=\"mem.png\" alt=\"\"></p>\n<h3 id=\"WB阶段控制信号表\"><a href=\"#WB阶段控制信号表\" class=\"headerlink\" title=\"WB阶段控制信号表\"></a><strong>WB阶段控制信号表</strong></h3><p><img src=\"wb.png\" alt=\"\"><br>此外，jal指令也要设置RegWre = 1</p>\n<h3 id=\"InsMEM模块\"><a href=\"#InsMEM模块\" class=\"headerlink\" title=\"InsMEM模块\"></a><strong>InsMEM模块</strong></h3><p>把将要执行的指令my_test_rom.txt加载到储存指令的内存中。根据PC的值返回相应的指令。注意这里指令是按照字节存储的。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> InsMEM(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC0,</div><div class=\"line\">\t<span class=\"keyword\">input</span> InsMemRW,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] mem [<span class=\"number\">0</span>:<span class=\"number\">127</span>];</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"built_in\">$readmemb</span>(<span class=\"string\">\"my_test_rom.txt\"</span>, mem);</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">always</span> @* <span class=\"keyword\">begin</span></div><div class=\"line\">        instruction[<span class=\"number\">31</span>:<span class=\"number\">0</span>] &lt;= &#123;mem[PC0-<span class=\"number\">8'b11111000</span>], mem[PC0-<span class=\"number\">8'b11111000</span>+<span class=\"number\">1</span>], mem[PC0-<span class=\"number\">8'b11111000</span>+<span class=\"number\">2</span>], mem[PC0-<span class=\"number\">8'b11111000</span>+<span class=\"number\">3</span>]&#125;;  <span class=\"comment\">// 初始化为2'hF8</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ControlUnit模块\"><a href=\"#ControlUnit模块\" class=\"headerlink\" title=\"ControlUnit模块\"></a><strong>ControlUnit模块</strong></h3><p>包含两个变量state和next_state，next_state初始化为sif，控制单元根据state的不同，执行不同的操作，注意控制单元在state为ID时，根据指令的不同改变各个控制信号量的值，在其他state时，根据需要改变相应的控制信号的值，以达到正确的控制目的，记得在每个状态中，根据状态机，改变next_state的值。代码可能有点长，然后其实并不难，都是重复的代码。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> ControlUnit(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">5</span>:<span class=\"number\">0</span>] Opcode,</div><div class=\"line\">    <span class=\"keyword\">input</span> zero,</div><div class=\"line\">\t <span class=\"keyword\">input</span> clk,</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> PCWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> ALUSrcB,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> ALUM2Reg,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> RegWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> InsMemRW,</div><div class=\"line\">\t <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> IRWre,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> DataMemRW,</div><div class=\"line\">\t <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> WrRegData,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] ExtSel,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] PCSrc,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] RegOut,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp,</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] state</div><div class=\"line\">    );</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] next_state;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">parameter</span> ADD = <span class=\"number\">6'b000000</span>, ADDI = <span class=\"number\">6'b000010</span>, SUB = <span class=\"number\">6'b000001</span>, ORI = <span class=\"number\">6'b010010</span>,</div><div class=\"line\">              AND = <span class=\"number\">6'b010001</span>, OR = <span class=\"number\">6'b010000</span>, MOVE = <span class=\"number\">6'b100000</span>, SW = <span class=\"number\">6'b110000</span>,</div><div class=\"line\">              LW = <span class=\"number\">6'b110001</span>, BEQ = <span class=\"number\">6'b110100</span>, HALT = <span class=\"number\">6'b111111</span>, SLL = <span class=\"number\">6'b011000</span>,</div><div class=\"line\">\t\t\t\t  SLT = <span class=\"number\">6'b100111</span>, J = <span class=\"number\">6'b111000</span>, JR = <span class=\"number\">6'b111001</span>, JAL = <span class=\"number\">6'b111010</span>;</div><div class=\"line\">    <span class=\"keyword\">parameter</span> sif = <span class=\"number\">3'b000</span>, sid = <span class=\"number\">3'b001</span>, sexe1 = <span class=\"number\">3'b110</span>, sexe2 = <span class=\"number\">3'b101</span>,</div><div class=\"line\">\t\t\t\t  sexe3 = <span class=\"number\">3'b010</span>, smem = <span class=\"number\">3'b011</span>, swb1 = <span class=\"number\">3'b111</span>, swb2 = <span class=\"number\">3'b100</span>;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t     next_state = sif;</div><div class=\"line\">\t\t  InsMemRW = <span class=\"number\">0</span>;  <span class=\"comment\">// 这个变量在本次实验中没有用处</span></div><div class=\"line\">\t\t  </div><div class=\"line\">\t\t  ALUSrcB = <span class=\"number\">0</span>;   <span class=\"comment\">// 初始化，不初始化也可以但会出现红框</span></div><div class=\"line\">\t\t  ALUM2Reg = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t  WrRegData = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  ExtSel = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  PCSrc = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  RegOut = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t  ALUOp = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  </div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     state &lt;= next_state;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(state <span class=\"keyword\">or</span> zero <span class=\"keyword\">or</span> Opcode) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">case</span>(state)</div><div class=\"line\">\t\t      sif: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\tIRWre = <span class=\"number\">1</span>; PCWre = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\tRegWre = <span class=\"number\">0</span>; DataMemRW = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\tnext_state = sid;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tsid: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t   <span class=\"keyword\">if</span> (Opcode == ADD || Opcode == SUB || Opcode == ADDI ||</div><div class=\"line\">     \t\t\t\t\t Opcode == OR || Opcode == AND || Opcode == ORI ||</div><div class=\"line\">\t\t\t\t\t\t Opcode == SLL || Opcode == MOVE || Opcode == SLT)</div><div class=\"line\">\t\t\t\t\t\t next_state = sexe1;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Opcode == BEQ) next_state = sexe2;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Opcode == SW || Opcode == LW) next_state = sexe3;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> next_state = sif;</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">\t\t\t\t\tWrRegData &lt;= (Opcode == JAL) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t   ALUM2Reg &lt;= (Opcode == LW) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span>(Opcode)</div><div class=\"line\">\t\t\t\t\t    ADD: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t\t\t  ALUOp = <span class=\"number\">3'b000</span>;</div><div class=\"line\">\t\t\t\t\t\t\t  PCSrc = <span class=\"number\">2'b00</span>; RegOut = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t SUB: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t\t\t  ALUOp = <span class=\"number\">3'b001</span>;</div><div class=\"line\">\t\t\t\t\t\t\t  PCSrc = <span class=\"number\">2'b00</span>; RegOut = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t ADDI: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; RegOut = <span class=\"number\">2'b01</span>; ALUOp = <span class=\"number\">3'b000</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>; ExtSel  = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t OR: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b101</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t AND: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b110</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t ORI: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; RegOut = <span class=\"number\">2'b01</span>; ALUOp = <span class=\"number\">3'b101</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>; ExtSel = <span class=\"number\">2'b01</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t SLL: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b100</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>; ExtSel = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t MOVE: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b000</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t SLT: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b10</span>; ALUOp = <span class=\"number\">3'b010</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t SW: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; ALUOp = <span class=\"number\">3'b000</span>; PCSrc = <span class=\"number\">2'b00</span>;</div><div class=\"line\">\t\t\t\t\t\t     ExtSel = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t LW: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">1</span>; RegOut = <span class=\"number\">2'b01</span>; ALUOp = <span class=\"number\">3'b000</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b00</span>; ExtSel = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t BEQ: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; ALUOp = <span class=\"number\">3'b001</span>;</div><div class=\"line\">\t\t\t\t\t\t     ExtSel = <span class=\"number\">2'b10</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t J: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; PCSrc = <span class=\"number\">2'b11</span>; PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t JR: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; PCSrc = <span class=\"number\">2'b10</span>; PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t JAL: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>; RegOut = <span class=\"number\">2'b00</span>; RegWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t     PCSrc = <span class=\"number\">2'b11</span>; PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t\t HALT: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t     ALUSrcB = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">endcase</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t   sexe1: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\tIRWre = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\tnext_state = swb1;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tsexe2: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t PCWre = <span class=\"number\">1</span>; IRWre = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t PCSrc &lt;= (zero == <span class=\"number\">0</span>) ?  <span class=\"number\">2'b00</span> : <span class=\"number\">2'b01</span>;</div><div class=\"line\">\t\t\t\t\t next_state = sif;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tsexe3: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t IRWre = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t next_state = smem;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tswb1: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t RegWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t next_state = sif;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tsmem: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t    <span class=\"keyword\">if</span> (Opcode == SW) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t     PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t  DataMemRW = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t\t  next_state = sif;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">if</span> (Opcode == LW) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t\t  next_state = swb2;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t\tswb2: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t\t RegWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t PCWre = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t next_state = sif;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">        <span class=\"keyword\">endcase</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"registerFile模块\"><a href=\"#registerFile模块\" class=\"headerlink\" title=\"registerFile模块\"></a><strong>registerFile模块</strong></h3><p>申明31个寄存器并初始化为0，0号寄存器一直当做0处理；寄存器的值在这个模块中取出，同时也可以在时钟下降沿到来时向寄存器写值，由CU相应的控制信号控制，这里与图中不同，图中是上升沿，是在下个周期上升沿到来时才将值写入，我是在本周期的下降沿写入值的。还有一点，ALUM2DR归入这个模块，数据存储器的输出值write_data在时钟上升沿到来时才能传入本模块中。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> registerFile(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rs, rt, rd,  <span class=\"comment\">// 相应的赋值在主模块实现,write_data是内存输出的数据，write_data是上升沿后的数据</span></div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data, PC4,  <span class=\"comment\">// writedata是本模块的选择的输入</span></div><div class=\"line\">    <span class=\"keyword\">input</span> RegWre, clk, WrRegData,</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] RegOut,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1, readData2</div><div class=\"line\">    );</div><div class=\"line\">    </div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] write_reg;</div><div class=\"line\">\t <span class=\"keyword\">assign</span> write_reg = (RegOut == <span class=\"number\">0</span>) ? <span class=\"number\">5'b11111</span> : ((RegOut == <span class=\"number\">1</span>) ? rt : rd);</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data_1;</div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     write_data_1 = write_data;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] writedata;</div><div class=\"line\">\t <span class=\"keyword\">assign</span> writedata = (WrRegData == <span class=\"number\">0</span>) ? PC4 : write_data_1;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] register [<span class=\"number\">1</span>:<span class=\"number\">31</span>];  <span class=\"comment\">// 声明r1~r31</span></div><div class=\"line\">    <span class=\"keyword\">integer</span> i;</div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i = i + <span class=\"number\">1</span>)</div><div class=\"line\">            register[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 0号寄存器值固定为0</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> readData1 = (rs == <span class=\"number\">0</span>)? <span class=\"number\">0</span> : register[rs];</div><div class=\"line\">    <span class=\"keyword\">assign</span> readData2 = (rt == <span class=\"number\">0</span>)? <span class=\"number\">0</span> : register[rt];</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">negedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">if</span> ((RegWre == <span class=\"number\">1</span>) &amp;&amp; (write_reg != <span class=\"number\">0</span>)) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t      register[write_reg] &lt;= writedata;</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Extend模块\"><a href=\"#Extend模块\" class=\"headerlink\" title=\"Extend模块\"></a><strong>Extend模块</strong></h3><p>本模块比较简单，在单周期的基础上加入了跳转指令需要计算的PC的值；同时，在零拓展时，控制信号ExtSel的值为00时，只取imme_16的[10:6]位，拓展后这个值是供左移右移指令使用的。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> Extend(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] imme_16,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] ExtSel,</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC0,</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">25</span>:<span class=\"number\">0</span>] imme_26,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32,</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PCnew</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"comment\">// 10为符号拓展，00,01为零拓展, 00只取[10:6]</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> imme_32 = (ExtSel == <span class=\"number\">2'b10</span>) ? &#123;&#123;<span class=\"number\">16</span>&#123;imme_16[<span class=\"number\">15</span>]&#125;&#125;, imme_16[<span class=\"number\">15</span>:<span class=\"number\">0</span>]&#125; : ((ExtSel == <span class=\"number\">2'b00</span>) ? &#123;&#123;<span class=\"number\">27</span>&#123;<span class=\"number\">1'b0</span>&#125;&#125;, imme_16[<span class=\"number\">10</span>:<span class=\"number\">6</span>]&#125; : &#123;&#123;<span class=\"number\">16</span>&#123;<span class=\"number\">1'b0</span>&#125;&#125;, imme_16[<span class=\"number\">15</span>:<span class=\"number\">0</span>]&#125;);</div><div class=\"line\">\t <span class=\"keyword\">assign</span> PCnew = &#123;PC0[<span class=\"number\">31</span>:<span class=\"number\">28</span>], imme_26, <span class=\"number\">2'b00</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"ALU模块\"><a href=\"#ALU模块\" class=\"headerlink\" title=\" ALU模块\"></a><strong> ALU模块</strong></h3><p>根据CU发出的控制信号ALUOp的不同，ALU对传进去的值执行不同的操作。还有就是ADR和BDR归入本模块，在时钟上升沿到来时才将数据传入ALU模块。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> ALU(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32,</div><div class=\"line\">    <span class=\"keyword\">input</span> ALUSrcB,</div><div class=\"line\">\t <span class=\"keyword\">input</span> clk,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">wire</span> zero,</div><div class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result</div><div class=\"line\">    );</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">/*initial begin</div><div class=\"line\">\t     result = 0;</div><div class=\"line\">\t end*/</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1_1, readData2_1;</div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     readData1_1 = readData1;</div><div class=\"line\">\t\t  readData2_1 = readData2;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] alub;</div><div class=\"line\">    <span class=\"keyword\">assign</span> alub = (ALUSrcB == <span class=\"number\">0</span>) ? readData2_1 : imme_32;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span>@(readData1_1 <span class=\"keyword\">or</span> alub <span class=\"keyword\">or</span> ALUOp) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">case</span> (ALUOp)</div><div class=\"line\">            <span class=\"number\">3'b000</span>: result &lt;= readData1_1 + alub;</div><div class=\"line\">            <span class=\"number\">3'b001</span>: result &lt;= readData1_1 - alub;</div><div class=\"line\">            <span class=\"number\">3'b010</span>: <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t    <span class=\"keyword\">if</span> (readData1_1 &lt; alub) result &lt;= <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t <span class=\"keyword\">else</span> result &lt;= <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t   <span class=\"keyword\">end</span></div><div class=\"line\">            <span class=\"number\">3'b011</span>: result &lt;= readData1_1 &gt;&gt; alub;</div><div class=\"line\">            <span class=\"number\">3'b100</span>: result &lt;= readData1_1 &lt;&lt; alub;</div><div class=\"line\">            <span class=\"number\">3'b101</span>: result &lt;= readData1_1 | alub;</div><div class=\"line\">            <span class=\"number\">3'b110</span>: result &lt;= readData1_1 &amp; alub;</div><div class=\"line\">            <span class=\"number\">3'b111</span>: result &lt;= (readData1_1 &amp; ~alub) | (~readData1_1 &amp; alub);</div><div class=\"line\">        <span class=\"keyword\">endcase</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">assign</span> zero = (result == <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"DataMEM模块\"><a href=\"#DataMEM模块\" class=\"headerlink\" title=\"DataMEM模块\"></a><strong>DataMEM模块</strong></h3><p>数据储存在模块申请的数组当中，并根据控制信号的不同，可以存值也可以取值。BDR和ALUOut归入本模块中，以控制在时钟上升沿到来时才将数据传入。数据储存在本次多周期CPU中是按字节存储的，与单周期不同。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> DataMEM(</div><div class=\"line\">    <span class=\"keyword\">input</span> clk,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result,</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2,</div><div class=\"line\">    <span class=\"keyword\">input</span> DataMemRW,</div><div class=\"line\">    <span class=\"keyword\">input</span> ALUM2Reg,</div><div class=\"line\">    <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DAddr, DataIn;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataOut;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t     DataOut = <span class=\"number\">0</span>;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     DataIn = readData2;</div><div class=\"line\">\t\t  DAddr = result;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] DataMem [<span class=\"number\">0</span>:<span class=\"number\">511</span>];  <span class=\"comment\">// 声明内存</span></div><div class=\"line\">    <span class=\"keyword\">integer</span> i;</div><div class=\"line\">    <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">512</span>; i = i + <span class=\"number\">1</span>)</div><div class=\"line\">            DataMem[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span>@(DAddr <span class=\"keyword\">or</span> DataMemRW) <span class=\"keyword\">begin</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (DataMemRW == <span class=\"number\">0</span>)  <span class=\"comment\">// 取字</span></div><div class=\"line\">            DataOut[<span class=\"number\">31</span>:<span class=\"number\">0</span>] = &#123;DataMem[DAddr], DataMem[DAddr+<span class=\"number\">1</span>], DataMem[DAddr+<span class=\"number\">2</span>], DataMem[DAddr+<span class=\"number\">3</span>]&#125;;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span>  <span class=\"comment\">// 存字</span></div><div class=\"line\">            DataMem[DAddr] = DataIn[<span class=\"number\">31</span>:<span class=\"number\">24</span>];</div><div class=\"line\">\t\t\t\tDataMem[DAddr+<span class=\"number\">1</span>] = DataIn[<span class=\"number\">23</span>:<span class=\"number\">16</span>];</div><div class=\"line\">\t\t\t\tDataMem[DAddr+<span class=\"number\">2</span>] = DataIn[<span class=\"number\">15</span>:<span class=\"number\">8</span>];</div><div class=\"line\">\t\t\t\tDataMem[DAddr+<span class=\"number\">3</span>] = DataIn[<span class=\"number\">7</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t <span class=\"keyword\">assign</span> write_data = (ALUM2Reg == <span class=\"number\">0</span>) ? result : DataOut;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"IR模块\"><a href=\"#IR模块\" class=\"headerlink\" title=\" IR模块\"></a><strong> IR模块</strong></h3><p>控制在时钟下降沿到来时才将指令传到registerFile模块中。同时根据控制信号的不同，可以使传出的指令保持不变或者变更为InsMEM中传过来的指令。没有其他作用，至于为什么用下降沿，前文有解释。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> IR(</div><div class=\"line\">    <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction,</div><div class=\"line\">\t <span class=\"keyword\">input</span> IRWre,</div><div class=\"line\">\t <span class=\"keyword\">input</span> clk,</div><div class=\"line\">\t <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction2</div><div class=\"line\">    );</div><div class=\"line\">    </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t     instruction2 = <span class=\"number\">0</span>;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(<span class=\"keyword\">negedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">case</span>(IRWre)</div><div class=\"line\">\t\t\t\t<span class=\"number\">1</span>: instruction2 &lt;= instruction;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 0: instruction2 &lt;= instruction2;</span></div><div class=\"line\">\t\t  <span class=\"keyword\">endcase</span></div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"CPU总模块\"><a href=\"#CPU总模块\" class=\"headerlink\" title=\"CPU总模块\"></a><strong>CPU总模块</strong></h3><p>总模块中将各个模块之间的线连起来，并且将IR输出的指令拆分为几个部分，传入不同的模块；然后实例化各个模块，需要注意的是，实例化模块时，变量名和顺序一定一定要和小模块申明时相同；此外，总模块中根据具体情况改变PC的值。PC值初始化为十六进制F8，假设程序从这里开始执行。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> CPU();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 模块间的连线</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> PCWre;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ALUSrcB;</div><div class=\"line\">    <span class=\"keyword\">wire</span> ALUM2Reg;</div><div class=\"line\">    <span class=\"keyword\">wire</span> RegWre;</div><div class=\"line\">    <span class=\"keyword\">wire</span> InsMemRW;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> IRWre;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> WrRegData;</div><div class=\"line\">    <span class=\"keyword\">wire</span> DataMemRW;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] ExtSel;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] PCSrc;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] RegOut;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] ALUOp;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC0;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] instruction2;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] write_data;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PC4;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] imme_32;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] PCnew;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData1;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] readData2;</div><div class=\"line\">    <span class=\"keyword\">wire</span> zero;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] result;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] state;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">reg</span> clk;</div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"comment\">// 指令拆分成的变量</span></div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">5</span>:<span class=\"number\">0</span>] Opcode;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rs;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rt;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">4</span>:<span class=\"number\">0</span>] rd;</div><div class=\"line\">    <span class=\"keyword\">wire</span> [<span class=\"number\">15</span>:<span class=\"number\">0</span>] imme_16;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">25</span>:<span class=\"number\">0</span>] imme_26;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 给拆分变量赋值</span></div><div class=\"line\">\t <span class=\"keyword\">assign</span> Opcode[<span class=\"number\">5</span>:<span class=\"number\">0</span>] = instruction2[<span class=\"number\">31</span>:<span class=\"number\">26</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rs = instruction2[<span class=\"number\">25</span>:<span class=\"number\">21</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rt = instruction2[<span class=\"number\">20</span>:<span class=\"number\">16</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> rd = instruction2[<span class=\"number\">15</span>:<span class=\"number\">11</span>];</div><div class=\"line\">    <span class=\"keyword\">assign</span> imme_16 = instruction2[<span class=\"number\">15</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t <span class=\"keyword\">assign</span> imme_26 = instruction2[<span class=\"number\">25</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">assign</span> PC4 = PC0+<span class=\"number\">4</span>;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 初始化PC和时钟，设置时钟周期</span></div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">        PC0 = <span class=\"number\">8'b11111000</span>;</div><div class=\"line\">        clk = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">    <span class=\"keyword\">always</span> #<span class=\"number\">500</span></div><div class=\"line\">        clk = ~clk;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 实例化各个模块（变量名不能拼写错误！！！）</span></div><div class=\"line\">\t InsMEM insmem(PC0, InsMemRW, instruction);</div><div class=\"line\">\t ControlUnit controlunit(Opcode, zero, clk, PCWre, ALUSrcB, ALUM2Reg, RegWre, InsMemRW, IRWre, DataMemRW, WrRegData, ExtSel, PCSrc, RegOut, ALUOp, state);</div><div class=\"line\">    registerFile registerfile(rs, rt, rd, write_data, PC4, RegWre, clk, WrRegData, RegOut, readData1, readData2);</div><div class=\"line\">    Extend extend(imme_16, ExtSel, PC0, imme_26, imme_32, PCnew);</div><div class=\"line\">\t ALU alu(readData1, readData2, imme_32, ALUSrcB, clk, ALUOp, zero, result);</div><div class=\"line\">\t DataMEM datamem(clk, result, readData2, DataMemRW, ALUM2Reg, write_data);</div><div class=\"line\">\t IR ir(instruction, IRWre, clk, instruction2);</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// PC模块</span></div><div class=\"line\">\t <span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">if</span> (PCWre == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t      <span class=\"keyword\">if</span> (PCSrc == <span class=\"number\">0</span>) PC0 &lt;= PC4;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PCSrc == <span class=\"number\">1</span>) PC0 &lt;= PC4+imme_32*<span class=\"number\">4</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PCSrc == <span class=\"number\">2</span>) PC0 &lt;= readData1;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> PC0 &lt;= PCnew;</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">    <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"验证方法\"><a href=\"#验证方法\" class=\"headerlink\" title=\"验证方法\"></a><strong>验证方法</strong></h2><p>以下表格方便大家测试。将指令写到my_test_rom.txt文件，文件放在project的根文件夹，接着仿真验证。注意指令存储是按照字存储的，8位二进制位一行。<br><img src=\"ceshi.png\" alt=\"\"></p>"},{"title":"飞碟游戏序列化","toc":true,"date":"2016-07-23T04:53:23.000Z","_content":"什么是序列化呢？序列化就是把一个内存对象变为与地址无关的可传输的数据格式，通常是文本格式；反序列化反之。更通俗一点说，就是把游戏运行时保存在内存中的对象或数据输出为文本，如json等；反序列化就是把这些文本重新转换为内存中对象的数据。<!--more-->像本次飞碟的序列化，就是把每个关卡中飞碟的颜色，大小，发射位置和方向等等数据，转换为json文件保存在根文件夹的Data目录中，每次游戏启动都会读取序列文本，将读取到的数据作为初始化飞碟的函数的参数。现在许多大型的游戏如LOL，更新周期短，每次更新时要更新代码是不可能的，他们每次更新的是资源而不是程序，生成的exe文件是不会改变的，更改的只是json之类的文本文件。在一个类前面加上[SerializeField]说明这个类是可序列化的，也就是要和文本文件打交道的。\n## **序列化过程**\n 首先，在Assets目录下新建Data文件夹，在Data文件夹下新建disk_level_1、disk_level_2、disk_level_3保存三个关卡的具体文本，新建game_info保存游戏版本信息，具体如下：\n![](a.png)   ![](b.png)\n原先的飞碟版本中，游戏信息在Basecode.cs文件中，现在不需要这些内容了，删除。\n![](c.png)\n更改后Basecode类为空。\n\n在Basecode.cs中添加两个新类：\n``` cpp\npublic class GameInfo\n{\n    public string version;\n    public int totalRound;\n\n    public static GameInfo CreateFromJSON(string json)\n    {\n        return JsonUtility.FromJson<GameInfo>(json);\n    }\n}\n\n[SerializeField]\npublic class LevelData\n{\n    public string color;\n    public int emitNum;\n    public float emitPosX, emitPosY, emitPosZ;\n    public float emitDirX, emitDirY, emitDirZ;\n    public float speed;\n    public int round;\n\n    public static LevelData CreateFromJSON(string json)\n    {\n        return JsonUtility.FromJson<LevelData>(json);\n    }\n}\n```\n\n然后，需要有一个负责文件读取的类，将json文件的信息读取进来并返回读到的 json 字符串，同样在游戏进行过程中读取游戏关卡文件，返回读到的 json 字符串。将新添加的FileManager.cs挂到主摄像机上。下面是代码：\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\npublic class FileManager : MonoBehaviour\n{\n    public string url;\n    SceneController scene = SceneController.getInstance();\n\n    void Awake()\n    {\n        scene.setFileManager(this);    //  注册到场景控制器\n        LoadGameInfoJson(\"game_info.json\");   //  获取游戏版本等信息\n    }\n\n    // 输入关卡文件名，启动协程读取文件\n    public void loadLevelJson(string name)\n    {\n        url = \"file://\" + Application.dataPath + \"/Data/\" + name;\n        StartCoroutine(LoadLevel());\n    }\n\n    IEnumerator LoadLevel()\n    {\n        if (url.Length > 0)\n        {\n            WWW www = new WWW(url);\n            yield return www;\n            if (!string.IsNullOrEmpty(www.error))\n                Debug.Log(www.error);\n            else\n                scene.stageLevel(www.text.ToString());   //  返回json字符串给scene\n        }\n    }\n\n    // 输入游戏信息文件名，启动协程读取文件\n    public void LoadGameInfoJson(string name)\n    {\n        url = \"file://\" + Application.dataPath + \"/Data/\" + name;\n        StartCoroutine(LoadGameInfo());\n    }\n\n    IEnumerator LoadGameInfo()\n    {\n        if (url.Length > 0)\n        {\n            WWW www = new WWW(url);\n            yield return www;\n            if (!string.IsNullOrEmpty(www.error))\n                Debug.Log(www.error);\n            else\n                scene.stageGameInfo(www.text.ToString());   // 返回json字符串给scene\n        }\n    }\n}\n```\n\n由于需要将FileManager注册到场景控制器，在SceneController中添加相应注册函数\n\n``` cpp\nprivate FileManager _fileManager;\n\npublic void setFileManager(FileManager fileManager)\n{\n    _fileManager = fileManager;\n}\n```\n\n在FileManager的场景控制器中，需要用到stageLevel函数（返回json字符串给scene）、stageGameInfo函数（返回json字符串给scene），在场景控制器中完善它。\n``` cpp\npublic void stageGameInfo(string json)\n{\n    GameInfo data = GameInfo.CreateFromJSON(json);\n    _version = data.version;\n    _totalRound = data.totalRound;\n}\n\npublic void stageLevel(string json)    // 把读到的字符串转换为实例对象然后通过_gameModel的setting方法初始化关卡设置\n{\n    LevelData data = LevelData.CreateFromJSON(json);\n\n    Color color;\n    if (!ColorUtility.TryParseHtmlString(data.color, out color))\n    {\n        color = Color.gray;\n    }\n\n    int emitNum = data.emitNum;\n    Vector3 emitPos = new Vector3(data.emitPosX, data.emitPosY, data.emitPosZ);\n    Vector3 emitDir = new Vector3(data.emitDirX, data.emitDirY, data.emitDirZ);\n    float speed = data.speed;\n\n    _gameModel.setting(1, color, emitPos, emitDir.normalized, speed, emitNum);\n    _judge.disksEachRound = emitNum;\n    _judge.round = data.round;\n }\n```\n\n 同时需要在SceneController中添加两个私有变量来保存版本信息以及保存总关卡数：\n``` cpp\n        private string _version;\n        private int _totalRound;\n        private FileManager _fileManager;\n```\n\n由于游戏的关卡是游戏过程中读取的，所以修改SceneController的 nextRound() 方法：\n``` cpp\npublic void nextRound()\n{\n    _point = 0;\n    if (++_round > _totalRound)\n    {\n        _round = 1; // 循环  \n    }\n    string file = \"disk_level_\" + _round.ToString() + \".json\";\n    _fileManager.loadLevelJson(file);\n}\n```\n\n 接着，修改SceneController的接口方便UI的使用，如下：\n``` cpp\npublic interface IQueryStatus\n{\n    bool isCounting();\n    bool isShooting();\n    int getRound();\n    int getPoint();\n    int getEmitTime();\n    int getTotalRound();\n    string getVersion();\n}\n```\n``` cpp\npublic int getTotalRound()\n{\n    return _totalRound;\n}\npublic string getVersion()\n{\n    return _version;\n}\n```\n\nFileManager执行LoadGameInfoJson函数读取指定位置文件的内容传给场景控制器的stageGameInfo，在stageGameInfo完成json对象的序列化。在游戏关卡执行下一关的函数nextRound()的时候会执行loadLevelJson，把读到的字符串转换为实例对象，然后通过GameModel的setting方法初始化关卡设置，下一次发射就是新的关卡了。\n\n最后，修改UserInterface.cs文件：\n``` cpp\n    // 在UserInterface 中添加文本变量versionText来显示版本号\n    public Text versionText;\n```\n``` cpp\n    // roundText.text = \"Round: \" + queryInt.getRound().ToString();\n    roundText.text = \"Round: \" + queryInt.getRound().ToString() + \"/\" + queryInt.getTotalRound().ToString();\n    scoreText.text = \"Score: \" + queryInt.getPoint().ToString();\n    versionText.text = \"Version: \" + queryInt.getVersion();\n```\n\n 在游戏场景里新建一个Text命名为Version，并拖到UserInterface.cs中的versionText：\n![](d.png)   ![](f.png)\n\n这样，飞碟游戏的序列化已经完成了，以后想修改游戏的关卡难度系数等等就只需要编辑json文本就好了。\n","source":"_posts/序列化.md","raw":"---\ntitle: 飞碟游戏序列化\ntoc: true\ndate: 2016-07-23 12:53:23\ntags:\n- C#\n- unity3d\n- 序列化\n- MVC\n- 工厂模式\ncategories: 3D游戏开发\n---\n什么是序列化呢？序列化就是把一个内存对象变为与地址无关的可传输的数据格式，通常是文本格式；反序列化反之。更通俗一点说，就是把游戏运行时保存在内存中的对象或数据输出为文本，如json等；反序列化就是把这些文本重新转换为内存中对象的数据。<!--more-->像本次飞碟的序列化，就是把每个关卡中飞碟的颜色，大小，发射位置和方向等等数据，转换为json文件保存在根文件夹的Data目录中，每次游戏启动都会读取序列文本，将读取到的数据作为初始化飞碟的函数的参数。现在许多大型的游戏如LOL，更新周期短，每次更新时要更新代码是不可能的，他们每次更新的是资源而不是程序，生成的exe文件是不会改变的，更改的只是json之类的文本文件。在一个类前面加上[SerializeField]说明这个类是可序列化的，也就是要和文本文件打交道的。\n## **序列化过程**\n 首先，在Assets目录下新建Data文件夹，在Data文件夹下新建disk_level_1、disk_level_2、disk_level_3保存三个关卡的具体文本，新建game_info保存游戏版本信息，具体如下：\n![](a.png)   ![](b.png)\n原先的飞碟版本中，游戏信息在Basecode.cs文件中，现在不需要这些内容了，删除。\n![](c.png)\n更改后Basecode类为空。\n\n在Basecode.cs中添加两个新类：\n``` cpp\npublic class GameInfo\n{\n    public string version;\n    public int totalRound;\n\n    public static GameInfo CreateFromJSON(string json)\n    {\n        return JsonUtility.FromJson<GameInfo>(json);\n    }\n}\n\n[SerializeField]\npublic class LevelData\n{\n    public string color;\n    public int emitNum;\n    public float emitPosX, emitPosY, emitPosZ;\n    public float emitDirX, emitDirY, emitDirZ;\n    public float speed;\n    public int round;\n\n    public static LevelData CreateFromJSON(string json)\n    {\n        return JsonUtility.FromJson<LevelData>(json);\n    }\n}\n```\n\n然后，需要有一个负责文件读取的类，将json文件的信息读取进来并返回读到的 json 字符串，同样在游戏进行过程中读取游戏关卡文件，返回读到的 json 字符串。将新添加的FileManager.cs挂到主摄像机上。下面是代码：\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\npublic class FileManager : MonoBehaviour\n{\n    public string url;\n    SceneController scene = SceneController.getInstance();\n\n    void Awake()\n    {\n        scene.setFileManager(this);    //  注册到场景控制器\n        LoadGameInfoJson(\"game_info.json\");   //  获取游戏版本等信息\n    }\n\n    // 输入关卡文件名，启动协程读取文件\n    public void loadLevelJson(string name)\n    {\n        url = \"file://\" + Application.dataPath + \"/Data/\" + name;\n        StartCoroutine(LoadLevel());\n    }\n\n    IEnumerator LoadLevel()\n    {\n        if (url.Length > 0)\n        {\n            WWW www = new WWW(url);\n            yield return www;\n            if (!string.IsNullOrEmpty(www.error))\n                Debug.Log(www.error);\n            else\n                scene.stageLevel(www.text.ToString());   //  返回json字符串给scene\n        }\n    }\n\n    // 输入游戏信息文件名，启动协程读取文件\n    public void LoadGameInfoJson(string name)\n    {\n        url = \"file://\" + Application.dataPath + \"/Data/\" + name;\n        StartCoroutine(LoadGameInfo());\n    }\n\n    IEnumerator LoadGameInfo()\n    {\n        if (url.Length > 0)\n        {\n            WWW www = new WWW(url);\n            yield return www;\n            if (!string.IsNullOrEmpty(www.error))\n                Debug.Log(www.error);\n            else\n                scene.stageGameInfo(www.text.ToString());   // 返回json字符串给scene\n        }\n    }\n}\n```\n\n由于需要将FileManager注册到场景控制器，在SceneController中添加相应注册函数\n\n``` cpp\nprivate FileManager _fileManager;\n\npublic void setFileManager(FileManager fileManager)\n{\n    _fileManager = fileManager;\n}\n```\n\n在FileManager的场景控制器中，需要用到stageLevel函数（返回json字符串给scene）、stageGameInfo函数（返回json字符串给scene），在场景控制器中完善它。\n``` cpp\npublic void stageGameInfo(string json)\n{\n    GameInfo data = GameInfo.CreateFromJSON(json);\n    _version = data.version;\n    _totalRound = data.totalRound;\n}\n\npublic void stageLevel(string json)    // 把读到的字符串转换为实例对象然后通过_gameModel的setting方法初始化关卡设置\n{\n    LevelData data = LevelData.CreateFromJSON(json);\n\n    Color color;\n    if (!ColorUtility.TryParseHtmlString(data.color, out color))\n    {\n        color = Color.gray;\n    }\n\n    int emitNum = data.emitNum;\n    Vector3 emitPos = new Vector3(data.emitPosX, data.emitPosY, data.emitPosZ);\n    Vector3 emitDir = new Vector3(data.emitDirX, data.emitDirY, data.emitDirZ);\n    float speed = data.speed;\n\n    _gameModel.setting(1, color, emitPos, emitDir.normalized, speed, emitNum);\n    _judge.disksEachRound = emitNum;\n    _judge.round = data.round;\n }\n```\n\n 同时需要在SceneController中添加两个私有变量来保存版本信息以及保存总关卡数：\n``` cpp\n        private string _version;\n        private int _totalRound;\n        private FileManager _fileManager;\n```\n\n由于游戏的关卡是游戏过程中读取的，所以修改SceneController的 nextRound() 方法：\n``` cpp\npublic void nextRound()\n{\n    _point = 0;\n    if (++_round > _totalRound)\n    {\n        _round = 1; // 循环  \n    }\n    string file = \"disk_level_\" + _round.ToString() + \".json\";\n    _fileManager.loadLevelJson(file);\n}\n```\n\n 接着，修改SceneController的接口方便UI的使用，如下：\n``` cpp\npublic interface IQueryStatus\n{\n    bool isCounting();\n    bool isShooting();\n    int getRound();\n    int getPoint();\n    int getEmitTime();\n    int getTotalRound();\n    string getVersion();\n}\n```\n``` cpp\npublic int getTotalRound()\n{\n    return _totalRound;\n}\npublic string getVersion()\n{\n    return _version;\n}\n```\n\nFileManager执行LoadGameInfoJson函数读取指定位置文件的内容传给场景控制器的stageGameInfo，在stageGameInfo完成json对象的序列化。在游戏关卡执行下一关的函数nextRound()的时候会执行loadLevelJson，把读到的字符串转换为实例对象，然后通过GameModel的setting方法初始化关卡设置，下一次发射就是新的关卡了。\n\n最后，修改UserInterface.cs文件：\n``` cpp\n    // 在UserInterface 中添加文本变量versionText来显示版本号\n    public Text versionText;\n```\n``` cpp\n    // roundText.text = \"Round: \" + queryInt.getRound().ToString();\n    roundText.text = \"Round: \" + queryInt.getRound().ToString() + \"/\" + queryInt.getTotalRound().ToString();\n    scoreText.text = \"Score: \" + queryInt.getPoint().ToString();\n    versionText.text = \"Version: \" + queryInt.getVersion();\n```\n\n 在游戏场景里新建一个Text命名为Version，并拖到UserInterface.cs中的versionText：\n![](d.png)   ![](f.png)\n\n这样，飞碟游戏的序列化已经完成了，以后想修改游戏的关卡难度系数等等就只需要编辑json文本就好了。\n","slug":"序列化","published":1,"updated":"2016-07-23T05:18:11.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzox000wgobkc7mb2bce","content":"<p>什么是序列化呢？序列化就是把一个内存对象变为与地址无关的可传输的数据格式，通常是文本格式；反序列化反之。更通俗一点说，就是把游戏运行时保存在内存中的对象或数据输出为文本，如json等；反序列化就是把这些文本重新转换为内存中对象的数据。<a id=\"more\"></a>像本次飞碟的序列化，就是把每个关卡中飞碟的颜色，大小，发射位置和方向等等数据，转换为json文件保存在根文件夹的Data目录中，每次游戏启动都会读取序列文本，将读取到的数据作为初始化飞碟的函数的参数。现在许多大型的游戏如LOL，更新周期短，每次更新时要更新代码是不可能的，他们每次更新的是资源而不是程序，生成的exe文件是不会改变的，更改的只是json之类的文本文件。在一个类前面加上[SerializeField]说明这个类是可序列化的，也就是要和文本文件打交道的。</p>\n<h2 id=\"序列化过程\"><a href=\"#序列化过程\" class=\"headerlink\" title=\"序列化过程\"></a><strong>序列化过程</strong></h2><p> 首先，在Assets目录下新建Data文件夹，在Data文件夹下新建disk_level_1、disk_level_2、disk_level_3保存三个关卡的具体文本，新建game_info保存游戏版本信息，具体如下：<br><img src=\"a.png\" alt=\"\">   <img src=\"b.png\" alt=\"\"><br>原先的飞碟版本中，游戏信息在Basecode.cs文件中，现在不需要这些内容了，删除。<br><img src=\"c.png\" alt=\"\"><br>更改后Basecode类为空。</p>\n<p>在Basecode.cs中添加两个新类：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameInfo</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> version;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> totalRound;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GameInfo <span class=\"title\">CreateFromJSON</span><span class=\"params\">(<span class=\"built_in\">string</span> json)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonUtility.FromJson&lt;GameInfo&gt;(json);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[SerializeField]</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> LevelData</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> color;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> emitNum;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> emitPosX, emitPosY, emitPosZ;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> emitDirX, emitDirY, emitDirZ;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> round;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LevelData <span class=\"title\">CreateFromJSON</span><span class=\"params\">(<span class=\"built_in\">string</span> json)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonUtility.FromJson&lt;LevelData&gt;(json);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后，需要有一个负责文件读取的类，将json文件的信息读取进来并返回读到的 json 字符串，同样在游戏进行过程中读取游戏关卡文件，返回读到的 json 字符串。将新添加的FileManager.cs挂到主摄像机上。下面是代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> FileManager : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> url;</div><div class=\"line\">    SceneController scene = SceneController.getInstance();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        scene.setFileManager(<span class=\"keyword\">this</span>);    <span class=\"comment\">//  注册到场景控制器</span></div><div class=\"line\">        LoadGameInfoJson(<span class=\"string\">\"game_info.json\"</span>);   <span class=\"comment\">//  获取游戏版本等信息</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 输入关卡文件名，启动协程读取文件</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadLevelJson</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        url = <span class=\"string\">\"file://\"</span> + Application.dataPath + <span class=\"string\">\"/Data/\"</span> + name;</div><div class=\"line\">        StartCoroutine(LoadLevel());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">IEnumerator <span class=\"title\">LoadLevel</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (url.Length &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WWW www = <span class=\"keyword\">new</span> WWW(url);</div><div class=\"line\">            yield <span class=\"keyword\">return</span> www;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(www.error))</div><div class=\"line\">                Debug.Log(www.error);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                scene.stageLevel(www.text.ToString());   <span class=\"comment\">//  返回json字符串给scene</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 输入游戏信息文件名，启动协程读取文件</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">LoadGameInfoJson</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        url = <span class=\"string\">\"file://\"</span> + Application.dataPath + <span class=\"string\">\"/Data/\"</span> + name;</div><div class=\"line\">        StartCoroutine(LoadGameInfo());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">IEnumerator <span class=\"title\">LoadGameInfo</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (url.Length &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WWW www = <span class=\"keyword\">new</span> WWW(url);</div><div class=\"line\">            yield <span class=\"keyword\">return</span> www;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(www.error))</div><div class=\"line\">                Debug.Log(www.error);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                scene.stageGameInfo(www.text.ToString());   <span class=\"comment\">// 返回json字符串给scene</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由于需要将FileManager注册到场景控制器，在SceneController中添加相应注册函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> FileManager <span class=\"number\">_f</span>ileManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFileManager</span><span class=\"params\">(FileManager fileManager)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"number\">_f</span>ileManager = fileManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在FileManager的场景控制器中，需要用到stageLevel函数（返回json字符串给scene）、stageGameInfo函数（返回json字符串给scene），在场景控制器中完善它。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stageGameInfo</span><span class=\"params\">(<span class=\"built_in\">string</span> json)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    GameInfo data = GameInfo.CreateFromJSON(json);</div><div class=\"line\">    <span class=\"number\">_</span>version = data.version;</div><div class=\"line\">    <span class=\"number\">_</span>totalRound = data.totalRound;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stageLevel</span><span class=\"params\">(<span class=\"built_in\">string</span> json)</span>    <span class=\"comment\">// 把读到的字符串转换为实例对象然后通过_gameModel的setting方法初始化关卡设置</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    LevelData data = LevelData.CreateFromJSON(json);</div><div class=\"line\"></div><div class=\"line\">    Color color;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!ColorUtility.TryParseHtmlString(data.color, out color))</div><div class=\"line\">    &#123;</div><div class=\"line\">        color = Color.gray;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> emitNum = data.emitNum;</div><div class=\"line\">    Vector3 emitPos = <span class=\"keyword\">new</span> Vector3(data.emitPosX, data.emitPosY, data.emitPosZ);</div><div class=\"line\">    Vector3 emitDir = <span class=\"keyword\">new</span> Vector3(data.emitDirX, data.emitDirY, data.emitDirZ);</div><div class=\"line\">    <span class=\"keyword\">float</span> speed = data.speed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"number\">_</span>gameModel.setting(<span class=\"number\">1</span>, color, emitPos, emitDir.normalized, speed, emitNum);</div><div class=\"line\">    <span class=\"number\">_</span>judge.disksEachRound = emitNum;</div><div class=\"line\">    <span class=\"number\">_</span>judge.round = data.round;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p> 同时需要在SceneController中添加两个私有变量来保存版本信息以及保存总关卡数：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"number\">_</span>version;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"number\">_</span>totalRound;</div><div class=\"line\"><span class=\"keyword\">private</span> FileManager <span class=\"number\">_f</span>ileManager;</div></pre></td></tr></table></figure></p>\n<p>由于游戏的关卡是游戏过程中读取的，所以修改SceneController的 nextRound() 方法：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nextRound</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"number\">_</span>point = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (++<span class=\"number\">_</span>round &gt; <span class=\"number\">_</span>totalRound)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"number\">_</span>round = <span class=\"number\">1</span>; <span class=\"comment\">// 循环  </span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">string</span> file = <span class=\"string\">\"disk_level_\"</span> + <span class=\"number\">_</span>round.ToString() + <span class=\"string\">\".json\"</span>;</div><div class=\"line\">    <span class=\"number\">_f</span>ileManager.loadLevelJson(file);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 接着，修改SceneController的接口方便UI的使用，如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> interface IQueryStatus</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isCounting</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isShooting</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRound</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPoint</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getEmitTime</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getTotalRound</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getVersion</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getTotalRound</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">_</span>totalRound;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">getVersion</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">_</span>version;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>FileManager执行LoadGameInfoJson函数读取指定位置文件的内容传给场景控制器的stageGameInfo，在stageGameInfo完成json对象的序列化。在游戏关卡执行下一关的函数nextRound()的时候会执行loadLevelJson，把读到的字符串转换为实例对象，然后通过GameModel的setting方法初始化关卡设置，下一次发射就是新的关卡了。</p>\n<p>最后，修改UserInterface.cs文件：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在UserInterface 中添加文本变量versionText来显示版本号</span></div><div class=\"line\"><span class=\"keyword\">public</span> Text versionText;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// roundText.text = \"Round: \" + queryInt.getRound().ToString();</span></div><div class=\"line\">roundText.text = <span class=\"string\">\"Round: \"</span> + queryInt.getRound().ToString() + <span class=\"string\">\"/\"</span> + queryInt.getTotalRound().ToString();</div><div class=\"line\">scoreText.text = <span class=\"string\">\"Score: \"</span> + queryInt.getPoint().ToString();</div><div class=\"line\">versionText.text = <span class=\"string\">\"Version: \"</span> + queryInt.getVersion();</div></pre></td></tr></table></figure>\n<p> 在游戏场景里新建一个Text命名为Version，并拖到UserInterface.cs中的versionText：<br><img src=\"d.png\" alt=\"\">   <img src=\"f.png\" alt=\"\"></p>\n<p>这样，飞碟游戏的序列化已经完成了，以后想修改游戏的关卡难度系数等等就只需要编辑json文本就好了。</p>\n","excerpt":"<p>什么是序列化呢？序列化就是把一个内存对象变为与地址无关的可传输的数据格式，通常是文本格式；反序列化反之。更通俗一点说，就是把游戏运行时保存在内存中的对象或数据输出为文本，如json等；反序列化就是把这些文本重新转换为内存中对象的数据。","more":"像本次飞碟的序列化，就是把每个关卡中飞碟的颜色，大小，发射位置和方向等等数据，转换为json文件保存在根文件夹的Data目录中，每次游戏启动都会读取序列文本，将读取到的数据作为初始化飞碟的函数的参数。现在许多大型的游戏如LOL，更新周期短，每次更新时要更新代码是不可能的，他们每次更新的是资源而不是程序，生成的exe文件是不会改变的，更改的只是json之类的文本文件。在一个类前面加上[SerializeField]说明这个类是可序列化的，也就是要和文本文件打交道的。</p>\n<h2 id=\"序列化过程\"><a href=\"#序列化过程\" class=\"headerlink\" title=\"序列化过程\"></a><strong>序列化过程</strong></h2><p> 首先，在Assets目录下新建Data文件夹，在Data文件夹下新建disk_level_1、disk_level_2、disk_level_3保存三个关卡的具体文本，新建game_info保存游戏版本信息，具体如下：<br><img src=\"a.png\" alt=\"\">   <img src=\"b.png\" alt=\"\"><br>原先的飞碟版本中，游戏信息在Basecode.cs文件中，现在不需要这些内容了，删除。<br><img src=\"c.png\" alt=\"\"><br>更改后Basecode类为空。</p>\n<p>在Basecode.cs中添加两个新类：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameInfo</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> version;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> totalRound;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GameInfo <span class=\"title\">CreateFromJSON</span><span class=\"params\">(<span class=\"built_in\">string</span> json)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonUtility.FromJson&lt;GameInfo&gt;(json);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[SerializeField]</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> LevelData</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> color;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> emitNum;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> emitPosX, emitPosY, emitPosZ;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> emitDirX, emitDirY, emitDirZ;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> round;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LevelData <span class=\"title\">CreateFromJSON</span><span class=\"params\">(<span class=\"built_in\">string</span> json)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonUtility.FromJson&lt;LevelData&gt;(json);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后，需要有一个负责文件读取的类，将json文件的信息读取进来并返回读到的 json 字符串，同样在游戏进行过程中读取游戏关卡文件，返回读到的 json 字符串。将新添加的FileManager.cs挂到主摄像机上。下面是代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> FileManager : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> url;</div><div class=\"line\">    SceneController scene = SceneController.getInstance();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        scene.setFileManager(<span class=\"keyword\">this</span>);    <span class=\"comment\">//  注册到场景控制器</span></div><div class=\"line\">        LoadGameInfoJson(<span class=\"string\">\"game_info.json\"</span>);   <span class=\"comment\">//  获取游戏版本等信息</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 输入关卡文件名，启动协程读取文件</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadLevelJson</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        url = <span class=\"string\">\"file://\"</span> + Application.dataPath + <span class=\"string\">\"/Data/\"</span> + name;</div><div class=\"line\">        StartCoroutine(LoadLevel());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">IEnumerator <span class=\"title\">LoadLevel</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (url.Length &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WWW www = <span class=\"keyword\">new</span> WWW(url);</div><div class=\"line\">            yield <span class=\"keyword\">return</span> www;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(www.error))</div><div class=\"line\">                Debug.Log(www.error);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                scene.stageLevel(www.text.ToString());   <span class=\"comment\">//  返回json字符串给scene</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 输入游戏信息文件名，启动协程读取文件</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">LoadGameInfoJson</span><span class=\"params\">(<span class=\"built_in\">string</span> name)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        url = <span class=\"string\">\"file://\"</span> + Application.dataPath + <span class=\"string\">\"/Data/\"</span> + name;</div><div class=\"line\">        StartCoroutine(LoadGameInfo());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">IEnumerator <span class=\"title\">LoadGameInfo</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (url.Length &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            WWW www = <span class=\"keyword\">new</span> WWW(url);</div><div class=\"line\">            yield <span class=\"keyword\">return</span> www;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(www.error))</div><div class=\"line\">                Debug.Log(www.error);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                scene.stageGameInfo(www.text.ToString());   <span class=\"comment\">// 返回json字符串给scene</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>由于需要将FileManager注册到场景控制器，在SceneController中添加相应注册函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> FileManager <span class=\"number\">_f</span>ileManager;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFileManager</span><span class=\"params\">(FileManager fileManager)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"number\">_f</span>ileManager = fileManager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在FileManager的场景控制器中，需要用到stageLevel函数（返回json字符串给scene）、stageGameInfo函数（返回json字符串给scene），在场景控制器中完善它。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stageGameInfo</span><span class=\"params\">(<span class=\"built_in\">string</span> json)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    GameInfo data = GameInfo.CreateFromJSON(json);</div><div class=\"line\">    <span class=\"number\">_</span>version = data.version;</div><div class=\"line\">    <span class=\"number\">_</span>totalRound = data.totalRound;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stageLevel</span><span class=\"params\">(<span class=\"built_in\">string</span> json)</span>    <span class=\"comment\">// 把读到的字符串转换为实例对象然后通过_gameModel的setting方法初始化关卡设置</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    LevelData data = LevelData.CreateFromJSON(json);</div><div class=\"line\"></div><div class=\"line\">    Color color;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!ColorUtility.TryParseHtmlString(data.color, out color))</div><div class=\"line\">    &#123;</div><div class=\"line\">        color = Color.gray;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> emitNum = data.emitNum;</div><div class=\"line\">    Vector3 emitPos = <span class=\"keyword\">new</span> Vector3(data.emitPosX, data.emitPosY, data.emitPosZ);</div><div class=\"line\">    Vector3 emitDir = <span class=\"keyword\">new</span> Vector3(data.emitDirX, data.emitDirY, data.emitDirZ);</div><div class=\"line\">    <span class=\"keyword\">float</span> speed = data.speed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"number\">_</span>gameModel.setting(<span class=\"number\">1</span>, color, emitPos, emitDir.normalized, speed, emitNum);</div><div class=\"line\">    <span class=\"number\">_</span>judge.disksEachRound = emitNum;</div><div class=\"line\">    <span class=\"number\">_</span>judge.round = data.round;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p> 同时需要在SceneController中添加两个私有变量来保存版本信息以及保存总关卡数：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"number\">_</span>version;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"number\">_</span>totalRound;</div><div class=\"line\"><span class=\"keyword\">private</span> FileManager <span class=\"number\">_f</span>ileManager;</div></pre></td></tr></table></figure></p>\n<p>由于游戏的关卡是游戏过程中读取的，所以修改SceneController的 nextRound() 方法：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nextRound</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"number\">_</span>point = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (++<span class=\"number\">_</span>round &gt; <span class=\"number\">_</span>totalRound)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"number\">_</span>round = <span class=\"number\">1</span>; <span class=\"comment\">// 循环  </span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">string</span> file = <span class=\"string\">\"disk_level_\"</span> + <span class=\"number\">_</span>round.ToString() + <span class=\"string\">\".json\"</span>;</div><div class=\"line\">    <span class=\"number\">_f</span>ileManager.loadLevelJson(file);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 接着，修改SceneController的接口方便UI的使用，如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> interface IQueryStatus</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isCounting</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isShooting</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRound</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPoint</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getEmitTime</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getTotalRound</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">getVersion</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getTotalRound</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">_</span>totalRound;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">getVersion</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">_</span>version;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>FileManager执行LoadGameInfoJson函数读取指定位置文件的内容传给场景控制器的stageGameInfo，在stageGameInfo完成json对象的序列化。在游戏关卡执行下一关的函数nextRound()的时候会执行loadLevelJson，把读到的字符串转换为实例对象，然后通过GameModel的setting方法初始化关卡设置，下一次发射就是新的关卡了。</p>\n<p>最后，修改UserInterface.cs文件：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 在UserInterface 中添加文本变量versionText来显示版本号</span></div><div class=\"line\"><span class=\"keyword\">public</span> Text versionText;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// roundText.text = \"Round: \" + queryInt.getRound().ToString();</span></div><div class=\"line\">roundText.text = <span class=\"string\">\"Round: \"</span> + queryInt.getRound().ToString() + <span class=\"string\">\"/\"</span> + queryInt.getTotalRound().ToString();</div><div class=\"line\">scoreText.text = <span class=\"string\">\"Score: \"</span> + queryInt.getPoint().ToString();</div><div class=\"line\">versionText.text = <span class=\"string\">\"Version: \"</span> + queryInt.getVersion();</div></pre></td></tr></table></figure>\n<p> 在游戏场景里新建一个Text命名为Version，并拖到UserInterface.cs中的versionText：<br><img src=\"d.png\" alt=\"\">   <img src=\"f.png\" alt=\"\"></p>\n<p>这样，飞碟游戏的序列化已经完成了，以后想修改游戏的关卡难度系数等等就只需要编辑json文本就好了。</p>"},{"title":"打飞碟","toc":true,"date":"2016-07-22T08:30:02.000Z","_content":"下面编写简单打飞碟游戏。游戏分多个回合，每个回合有N个飞碟，选择游戏回合后，飞碟飞出，点击鼠标，子弹飞出。飞碟落地或被击中，则准备下一次射击。每回合飞碟的大小、颜色、发射位置、发射角度、每次发射的数量以及速度等等可以变化。\n<!--more-->\n## **初始准备**\n\n创建Terrian；创建Cylinder并设置其大小(10, 0.1, 10)，将其拉到Assert/Resources/Prefabs下，设置标签为Finish, 往后的代码需要用到这个标签，删除层次块中的Cylinder。调整摄像机（0， 175， 0）、Terrain（0， 15， 0），大小为（29， 1， 30）。\n## **BaseCode\\.cs**\n\n![](aa.png)\n其命名空间Mygame中包含Factory类工厂，工厂能控制飞碟的移动，让飞碟消失，即回收飞碟；包含disappear组件，飞碟加载这个组件后自动消失；包含autodisappear组件，当飞碟到达某位置后自动消失，位置可自由设置。\n### **Factory类**\n\n变量的用途，根据变量名即可知道；简单的获取实例的函数。\n![](f1.png)\n![](f2.png)\n通过添加组件控制飞盘的消失：\n![](f3.png)\n接下来是工厂的核心类：ApplyUFO（int）。当未使用的飞盘队列还储存有飞盘时，取出来，根据游戏的关卡，给飞盘不同的属性和动作。每个飞盘都需要AutoDisappear组件和Rigibody组件。\n![](f4.png)\n 第一关：速度较小，黄色的飞盘，向下抛。\n![](f5.png)\n第二关：速度较大，蓝色，飞盘抛出方向随机。\n![](f6.png)\n 第三关：速度大而且随机，抛出位置有两个，抛出方向随机，黑色。\n![](f7.png)\n### **Disappear类**\n\n对两个list进行适当操作，去除要消失的飞盘的相关组件。\n![](d.png)\n### **AutoDisappear类**\n\n同Disappear类似，但加上消失的条件。\n![](a1.png)\n## **GenGameObject类**\n\n用于生成n个飞碟并放在unused list里面，以供使用。注意当代码挂载到相机上后，要将Prefabs中的飞盘挂载到相机的GenGameObject组件的UFO上，这样才能Instantiate。同时记得设置N的大小，即每次存到队列中的飞盘个数.\n![](g1.png)\n## **UserInterface类**\n在界面布置相关按钮，并检测鼠标点击，当鼠标点击到飞盘时，飞盘消失，分数增加；并控制一定时间间隔后才能抛出一个飞盘。\n![](u1.png)\n点击时用射线检测，射线从摄像机发射，射到鼠标点击的屏幕位置在3d中的坐标，碰\n撞到物体的具体信息存储在hit中，并检测碰撞到的是不是飞盘，是的话，添加相关动\n作。此处用到上面的Finish标签。\n![](u2.png)\n\n\n至此，代码基本完成以下是游戏界面图：\n![](all.png)\n\n## **完整代码**\n\n### **BaseCode.cs**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Mygame;\nusing System.Collections.Generic;\n\nnamespace Mygame\n{\n    public class Factory : MonoBehaviour\n    {\n        private static Factory instance;\n        public static List<GameObject> used = new List<GameObject>();\n        public static List<GameObject> unused = new List<GameObject>();\n        public static int round;\n\n        public static Factory Getinstance()  // 获取实例\n        {\n            if (instance == null)\n            {\n                instance = new Factory();\n            }\n            return instance;\n        }\n\n        public void add(GameObject x)       // 在GenGameObject中生成飞碟到unused中\n        {\n            unused.Add(x);\n        }\n\n        public GameObject ApplyUFO(int r)   // 游戏有三个关卡，每个关卡飞碟属性不同，给飞碟添加力\n        {\n            if (unused.Count != 0)          // 数目不超过GenGameObject中的n时才给飞碟添加力\n            {\n                GameObject t = unused[0];\n                unused.Remove(t);\n                used.Add(t);\n                t.AddComponent<Rigidbody>();  // 刚体，添加力，移动\n                t.AddComponent<AutoDisappear>();\n\n                if (r == 1)                // 第一关\n                {\n                    float x = Random.Range(-40, 40);\n                    t.transform.position = new Vector3(x, 20, 50);\n                    Vector3 v = new Vector3(0, 0, -1);\n                    t.GetComponent<Renderer>().material.color = new Color(255, 255, 0);\n                    t.GetComponent<Rigidbody>().AddForce(3000 * v);\n                    Debug.Log(\"111111\");\n                }\n                else if (r == 2)           // 第二关\n                {\n                    float x = Random.Range(-40, 40);\n                    t.transform.position = new Vector3(x, 20, 50);\n                    t.GetComponent<Renderer>().material.color = new Color(0, 0, 255);\n                    t.GetComponent<Transform>().localScale = new Vector3(7, 0.1f, 7);\n                    float xx = Random.Range(-1, 1);\n                    float z = Random.Range(-1, -0.5f);\n                    Vector3 v = new Vector3(xx, 0, z);\n                    t.GetComponent<Rigidbody>().AddForce(3000 * v);\n                    Debug.Log(\"2222222\");\n                }\n                else                      // 第三关\n                {\n                    float q = Random.Range(-1, 1);\n                    if (q >= 0) q = 20;\n                    else q = -20;\n                    t.transform.position = new Vector3(q, 20, 50);\n                    t.GetComponent<Renderer>().material.color = new Color(0, 0, 0);\n                    float px = Random.Range(-1, 1);\n                    float z = Random.Range(-1, -0.5f);\n                    float power = Random.Range(3000, 4500);\n                    Vector3 v = new Vector3(px, 0, z);\n                    t.GetComponent<Rigidbody>().AddForce(power * v);\n                    Debug.Log(\"3333333\");\n                }\n                return t;\n            }\n            return null;\n        }\n\n        public void setDisappear(GameObject x)\n        {\n            x.AddComponent<Disappear>();\n        }\n    }\n\n    public class Disappear : Factory\n    {\n        void Start()\n        {\n            used.Remove(gameObject);\n            unused.Add(gameObject);\n            Destroy(GetComponent<Rigidbody>());\n            Destroy(GetComponent<AutoDisappear>());\n            Destroy(this);\n            gameObject.transform.position = new Vector3(100, 100, 100);\n        }\n    }\n    \n    public class AutoDisappear : Factory\n    {\n        void Update()\n        {\n            if (gameObject.transform.position.z < -40)\n            {\n                used.Remove(gameObject);\n                unused.Add(gameObject);\n                Destroy(GetComponent<Rigidbody>());\n                Destroy(this);\n                gameObject.transform.position = new Vector3(100, 100, 100);\n            }\n        }\n    }\n}\n\n\npublic class BaseCode : MonoBehaviour {\n\n\tvoid Start () {\n\t\n\t}\n\tvoid Update () {\n\t\n\t}\n}\n```\n\n### **GenGameObject.cs**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Mygame;\n\n\npublic class GenGameObject : MonoBehaviour {\n\n    public int n;  // 游戏面板可以设置\n    public GameObject UFO;  // 游戏面板拖入\n\n\tvoid Start () {\n\t    for (int i = 0; i < n; i++)\n        {\n            GameObject temp = Instantiate(UFO);\n            temp.transform.position = new Vector3(100, 100, 100);\n            Factory.Getinstance().add(temp);\n        }\n\t}\n}\n```\n\n### **UserInterface.cs**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Mygame;\n\npublic class UserInterface : MonoBehaviour {\n\n    public int round = 0;       // 关卡\n    float time = 1;             // 产生飞碟时间间隔\n    private GameObject cam;\n    int score = 0;\n\n\tvoid Start () {\n        cam = GameObject.Find(\"Main Camera\");\n\t}\n\t\n\tvoid Update () {\n        if (Input.GetMouseButtonDown(0))\n        {\n            Ray ray = cam.GetComponent<Camera>().ScreenPointToRay(Input.mousePosition);\n            RaycastHit hit;\n            if (Physics.Raycast(ray, out hit))\n            {\n                if (hit.collider.gameObject.tag.Contains(\"Finish\"))\n                {\n                    Factory.Getinstance().setDisappear(hit.collider.gameObject);\n                    score += round;\n                }\n            }\n        }\n        time -= Time.deltaTime;\n        if (time <= 0)\n        {\n            time = 1;\n            if (round == 1)\n                Factory.Getinstance().ApplyUFO(1);\n            else if (round == 2)\n                Factory.Getinstance().ApplyUFO(2);\n            else if (round == 3)\n                Factory.Getinstance().ApplyUFO(3);\n        }\n    }\n\n    void OnGUI()\n    {\n        if (GUILayout.Button(\"level1\"))\n        {\n            round = 1;\n        }\n        if (GUILayout.Button(\"level2\"))\n        {\n            round = 2;\n        }\n        if (GUILayout.Button(\"level3\"))\n        {\n            round = 3;\n        }\n        GUILayout.Label(\"SCORE: \" + score);\n    }\n}\n```\n\n\n","source":"_posts/打飞碟.md","raw":"---\ntitle: 打飞碟\ntoc: true\ndate: 2016-07-22 16:30:02\ntags:\n- MVC\n- C#\n- 工厂模式\n- unity3d\ncategories: 3D游戏开发\n---\n下面编写简单打飞碟游戏。游戏分多个回合，每个回合有N个飞碟，选择游戏回合后，飞碟飞出，点击鼠标，子弹飞出。飞碟落地或被击中，则准备下一次射击。每回合飞碟的大小、颜色、发射位置、发射角度、每次发射的数量以及速度等等可以变化。\n<!--more-->\n## **初始准备**\n\n创建Terrian；创建Cylinder并设置其大小(10, 0.1, 10)，将其拉到Assert/Resources/Prefabs下，设置标签为Finish, 往后的代码需要用到这个标签，删除层次块中的Cylinder。调整摄像机（0， 175， 0）、Terrain（0， 15， 0），大小为（29， 1， 30）。\n## **BaseCode\\.cs**\n\n![](aa.png)\n其命名空间Mygame中包含Factory类工厂，工厂能控制飞碟的移动，让飞碟消失，即回收飞碟；包含disappear组件，飞碟加载这个组件后自动消失；包含autodisappear组件，当飞碟到达某位置后自动消失，位置可自由设置。\n### **Factory类**\n\n变量的用途，根据变量名即可知道；简单的获取实例的函数。\n![](f1.png)\n![](f2.png)\n通过添加组件控制飞盘的消失：\n![](f3.png)\n接下来是工厂的核心类：ApplyUFO（int）。当未使用的飞盘队列还储存有飞盘时，取出来，根据游戏的关卡，给飞盘不同的属性和动作。每个飞盘都需要AutoDisappear组件和Rigibody组件。\n![](f4.png)\n 第一关：速度较小，黄色的飞盘，向下抛。\n![](f5.png)\n第二关：速度较大，蓝色，飞盘抛出方向随机。\n![](f6.png)\n 第三关：速度大而且随机，抛出位置有两个，抛出方向随机，黑色。\n![](f7.png)\n### **Disappear类**\n\n对两个list进行适当操作，去除要消失的飞盘的相关组件。\n![](d.png)\n### **AutoDisappear类**\n\n同Disappear类似，但加上消失的条件。\n![](a1.png)\n## **GenGameObject类**\n\n用于生成n个飞碟并放在unused list里面，以供使用。注意当代码挂载到相机上后，要将Prefabs中的飞盘挂载到相机的GenGameObject组件的UFO上，这样才能Instantiate。同时记得设置N的大小，即每次存到队列中的飞盘个数.\n![](g1.png)\n## **UserInterface类**\n在界面布置相关按钮，并检测鼠标点击，当鼠标点击到飞盘时，飞盘消失，分数增加；并控制一定时间间隔后才能抛出一个飞盘。\n![](u1.png)\n点击时用射线检测，射线从摄像机发射，射到鼠标点击的屏幕位置在3d中的坐标，碰\n撞到物体的具体信息存储在hit中，并检测碰撞到的是不是飞盘，是的话，添加相关动\n作。此处用到上面的Finish标签。\n![](u2.png)\n\n\n至此，代码基本完成以下是游戏界面图：\n![](all.png)\n\n## **完整代码**\n\n### **BaseCode.cs**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Mygame;\nusing System.Collections.Generic;\n\nnamespace Mygame\n{\n    public class Factory : MonoBehaviour\n    {\n        private static Factory instance;\n        public static List<GameObject> used = new List<GameObject>();\n        public static List<GameObject> unused = new List<GameObject>();\n        public static int round;\n\n        public static Factory Getinstance()  // 获取实例\n        {\n            if (instance == null)\n            {\n                instance = new Factory();\n            }\n            return instance;\n        }\n\n        public void add(GameObject x)       // 在GenGameObject中生成飞碟到unused中\n        {\n            unused.Add(x);\n        }\n\n        public GameObject ApplyUFO(int r)   // 游戏有三个关卡，每个关卡飞碟属性不同，给飞碟添加力\n        {\n            if (unused.Count != 0)          // 数目不超过GenGameObject中的n时才给飞碟添加力\n            {\n                GameObject t = unused[0];\n                unused.Remove(t);\n                used.Add(t);\n                t.AddComponent<Rigidbody>();  // 刚体，添加力，移动\n                t.AddComponent<AutoDisappear>();\n\n                if (r == 1)                // 第一关\n                {\n                    float x = Random.Range(-40, 40);\n                    t.transform.position = new Vector3(x, 20, 50);\n                    Vector3 v = new Vector3(0, 0, -1);\n                    t.GetComponent<Renderer>().material.color = new Color(255, 255, 0);\n                    t.GetComponent<Rigidbody>().AddForce(3000 * v);\n                    Debug.Log(\"111111\");\n                }\n                else if (r == 2)           // 第二关\n                {\n                    float x = Random.Range(-40, 40);\n                    t.transform.position = new Vector3(x, 20, 50);\n                    t.GetComponent<Renderer>().material.color = new Color(0, 0, 255);\n                    t.GetComponent<Transform>().localScale = new Vector3(7, 0.1f, 7);\n                    float xx = Random.Range(-1, 1);\n                    float z = Random.Range(-1, -0.5f);\n                    Vector3 v = new Vector3(xx, 0, z);\n                    t.GetComponent<Rigidbody>().AddForce(3000 * v);\n                    Debug.Log(\"2222222\");\n                }\n                else                      // 第三关\n                {\n                    float q = Random.Range(-1, 1);\n                    if (q >= 0) q = 20;\n                    else q = -20;\n                    t.transform.position = new Vector3(q, 20, 50);\n                    t.GetComponent<Renderer>().material.color = new Color(0, 0, 0);\n                    float px = Random.Range(-1, 1);\n                    float z = Random.Range(-1, -0.5f);\n                    float power = Random.Range(3000, 4500);\n                    Vector3 v = new Vector3(px, 0, z);\n                    t.GetComponent<Rigidbody>().AddForce(power * v);\n                    Debug.Log(\"3333333\");\n                }\n                return t;\n            }\n            return null;\n        }\n\n        public void setDisappear(GameObject x)\n        {\n            x.AddComponent<Disappear>();\n        }\n    }\n\n    public class Disappear : Factory\n    {\n        void Start()\n        {\n            used.Remove(gameObject);\n            unused.Add(gameObject);\n            Destroy(GetComponent<Rigidbody>());\n            Destroy(GetComponent<AutoDisappear>());\n            Destroy(this);\n            gameObject.transform.position = new Vector3(100, 100, 100);\n        }\n    }\n    \n    public class AutoDisappear : Factory\n    {\n        void Update()\n        {\n            if (gameObject.transform.position.z < -40)\n            {\n                used.Remove(gameObject);\n                unused.Add(gameObject);\n                Destroy(GetComponent<Rigidbody>());\n                Destroy(this);\n                gameObject.transform.position = new Vector3(100, 100, 100);\n            }\n        }\n    }\n}\n\n\npublic class BaseCode : MonoBehaviour {\n\n\tvoid Start () {\n\t\n\t}\n\tvoid Update () {\n\t\n\t}\n}\n```\n\n### **GenGameObject.cs**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Mygame;\n\n\npublic class GenGameObject : MonoBehaviour {\n\n    public int n;  // 游戏面板可以设置\n    public GameObject UFO;  // 游戏面板拖入\n\n\tvoid Start () {\n\t    for (int i = 0; i < n; i++)\n        {\n            GameObject temp = Instantiate(UFO);\n            temp.transform.position = new Vector3(100, 100, 100);\n            Factory.Getinstance().add(temp);\n        }\n\t}\n}\n```\n\n### **UserInterface.cs**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Mygame;\n\npublic class UserInterface : MonoBehaviour {\n\n    public int round = 0;       // 关卡\n    float time = 1;             // 产生飞碟时间间隔\n    private GameObject cam;\n    int score = 0;\n\n\tvoid Start () {\n        cam = GameObject.Find(\"Main Camera\");\n\t}\n\t\n\tvoid Update () {\n        if (Input.GetMouseButtonDown(0))\n        {\n            Ray ray = cam.GetComponent<Camera>().ScreenPointToRay(Input.mousePosition);\n            RaycastHit hit;\n            if (Physics.Raycast(ray, out hit))\n            {\n                if (hit.collider.gameObject.tag.Contains(\"Finish\"))\n                {\n                    Factory.Getinstance().setDisappear(hit.collider.gameObject);\n                    score += round;\n                }\n            }\n        }\n        time -= Time.deltaTime;\n        if (time <= 0)\n        {\n            time = 1;\n            if (round == 1)\n                Factory.Getinstance().ApplyUFO(1);\n            else if (round == 2)\n                Factory.Getinstance().ApplyUFO(2);\n            else if (round == 3)\n                Factory.Getinstance().ApplyUFO(3);\n        }\n    }\n\n    void OnGUI()\n    {\n        if (GUILayout.Button(\"level1\"))\n        {\n            round = 1;\n        }\n        if (GUILayout.Button(\"level2\"))\n        {\n            round = 2;\n        }\n        if (GUILayout.Button(\"level3\"))\n        {\n            round = 3;\n        }\n        GUILayout.Label(\"SCORE: \" + score);\n    }\n}\n```\n\n\n","slug":"打飞碟","published":1,"updated":"2016-07-22T09:05:29.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzp70010gobkvzzkpu1t","content":"<p>下面编写简单打飞碟游戏。游戏分多个回合，每个回合有N个飞碟，选择游戏回合后，飞碟飞出，点击鼠标，子弹飞出。飞碟落地或被击中，则准备下一次射击。每回合飞碟的大小、颜色、发射位置、发射角度、每次发射的数量以及速度等等可以变化。<br><a id=\"more\"></a></p>\n<h2 id=\"初始准备\"><a href=\"#初始准备\" class=\"headerlink\" title=\"初始准备\"></a><strong>初始准备</strong></h2><p>创建Terrian；创建Cylinder并设置其大小(10, 0.1, 10)，将其拉到Assert/Resources/Prefabs下，设置标签为Finish, 往后的代码需要用到这个标签，删除层次块中的Cylinder。调整摄像机（0， 175， 0）、Terrain（0， 15， 0），大小为（29， 1， 30）。</p>\n<h2 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h2><p><img src=\"aa.png\" alt=\"\"><br>其命名空间Mygame中包含Factory类工厂，工厂能控制飞碟的移动，让飞碟消失，即回收飞碟；包含disappear组件，飞碟加载这个组件后自动消失；包含autodisappear组件，当飞碟到达某位置后自动消失，位置可自由设置。</p>\n<h3 id=\"Factory类\"><a href=\"#Factory类\" class=\"headerlink\" title=\"Factory类\"></a><strong>Factory类</strong></h3><p>变量的用途，根据变量名即可知道；简单的获取实例的函数。<br><img src=\"f1.png\" alt=\"\"><br><img src=\"f2.png\" alt=\"\"><br>通过添加组件控制飞盘的消失：<br><img src=\"f3.png\" alt=\"\"><br>接下来是工厂的核心类：ApplyUFO（int）。当未使用的飞盘队列还储存有飞盘时，取出来，根据游戏的关卡，给飞盘不同的属性和动作。每个飞盘都需要AutoDisappear组件和Rigibody组件。<br><img src=\"f4.png\" alt=\"\"><br> 第一关：速度较小，黄色的飞盘，向下抛。<br><img src=\"f5.png\" alt=\"\"><br>第二关：速度较大，蓝色，飞盘抛出方向随机。<br><img src=\"f6.png\" alt=\"\"><br> 第三关：速度大而且随机，抛出位置有两个，抛出方向随机，黑色。<br><img src=\"f7.png\" alt=\"\"></p>\n<h3 id=\"Disappear类\"><a href=\"#Disappear类\" class=\"headerlink\" title=\"Disappear类\"></a><strong>Disappear类</strong></h3><p>对两个list进行适当操作，去除要消失的飞盘的相关组件。<br><img src=\"d.png\" alt=\"\"></p>\n<h3 id=\"AutoDisappear类\"><a href=\"#AutoDisappear类\" class=\"headerlink\" title=\"AutoDisappear类\"></a><strong>AutoDisappear类</strong></h3><p>同Disappear类似，但加上消失的条件。<br><img src=\"a1.png\" alt=\"\"></p>\n<h2 id=\"GenGameObject类\"><a href=\"#GenGameObject类\" class=\"headerlink\" title=\"GenGameObject类\"></a><strong>GenGameObject类</strong></h2><p>用于生成n个飞碟并放在unused list里面，以供使用。注意当代码挂载到相机上后，要将Prefabs中的飞盘挂载到相机的GenGameObject组件的UFO上，这样才能Instantiate。同时记得设置N的大小，即每次存到队列中的飞盘个数.<br><img src=\"g1.png\" alt=\"\"></p>\n<h2 id=\"UserInterface类\"><a href=\"#UserInterface类\" class=\"headerlink\" title=\"UserInterface类\"></a><strong>UserInterface类</strong></h2><p>在界面布置相关按钮，并检测鼠标点击，当鼠标点击到飞盘时，飞盘消失，分数增加；并控制一定时间间隔后才能抛出一个飞盘。<br><img src=\"u1.png\" alt=\"\"><br>点击时用射线检测，射线从摄像机发射，射到鼠标点击的屏幕位置在3d中的坐标，碰<br>撞到物体的具体信息存储在hit中，并检测碰撞到的是不是飞盘，是的话，添加相关动<br>作。此处用到上面的Finish标签。<br><img src=\"u2.png\" alt=\"\"></p>\n<p>至此，代码基本完成以下是游戏界面图：<br><img src=\"all.png\" alt=\"\"></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><h3 id=\"BaseCode-cs-1\"><a href=\"#BaseCode-cs-1\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Mygame;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Factory : MonoBehaviour</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Factory instance;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;GameObject&gt; used = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;GameObject&gt; unused = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> round;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Factory <span class=\"title\">Getinstance</span><span class=\"params\">()</span>  <span class=\"comment\">// 获取实例</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> Factory();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(GameObject x)</span>       <span class=\"comment\">// 在GenGameObject中生成飞碟到unused中</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            unused.Add(x);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GameObject <span class=\"title\">ApplyUFO</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span>   <span class=\"comment\">// 游戏有三个关卡，每个关卡飞碟属性不同，给飞碟添加力</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (unused.Count != <span class=\"number\">0</span>)          <span class=\"comment\">// 数目不超过GenGameObject中的n时才给飞碟添加力</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                GameObject t = unused[<span class=\"number\">0</span>];</div><div class=\"line\">                unused.Remove(t);</div><div class=\"line\">                used.Add(t);</div><div class=\"line\">                t.AddComponent&lt;Rigidbody&gt;();  <span class=\"comment\">// 刚体，添加力，移动</span></div><div class=\"line\">                t.AddComponent&lt;AutoDisappear&gt;();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (r == <span class=\"number\">1</span>)                <span class=\"comment\">// 第一关</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">float</span> x = Random.Range(<span class=\"number\">-40</span>, <span class=\"number\">40</span>);</div><div class=\"line\">                    t.transform.position = <span class=\"keyword\">new</span> Vector3(x, <span class=\"number\">20</span>, <span class=\"number\">50</span>);</div><div class=\"line\">                    Vector3 v = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">                    t.GetComponent&lt;Renderer&gt;().material.color = <span class=\"keyword\">new</span> Color(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>);</div><div class=\"line\">                    t.GetComponent&lt;Rigidbody&gt;().AddForce(<span class=\"number\">3000</span> * v);</div><div class=\"line\">                    Debug.Log(<span class=\"string\">\"111111\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (r == <span class=\"number\">2</span>)           <span class=\"comment\">// 第二关</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">float</span> x = Random.Range(<span class=\"number\">-40</span>, <span class=\"number\">40</span>);</div><div class=\"line\">                    t.transform.position = <span class=\"keyword\">new</span> Vector3(x, <span class=\"number\">20</span>, <span class=\"number\">50</span>);</div><div class=\"line\">                    t.GetComponent&lt;Renderer&gt;().material.color = <span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>);</div><div class=\"line\">                    t.GetComponent&lt;Transform&gt;().localScale = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">7</span>, <span class=\"number\">0.1f</span>, <span class=\"number\">7</span>);</div><div class=\"line\">                    <span class=\"keyword\">float</span> xx = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">                    <span class=\"keyword\">float</span> z = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">-0.5</span>f);</div><div class=\"line\">                    Vector3 v = <span class=\"keyword\">new</span> Vector3(xx, <span class=\"number\">0</span>, z);</div><div class=\"line\">                    t.GetComponent&lt;Rigidbody&gt;().AddForce(<span class=\"number\">3000</span> * v);</div><div class=\"line\">                    Debug.Log(<span class=\"string\">\"2222222\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span>                      <span class=\"comment\">// 第三关</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">float</span> q = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (q &gt;= <span class=\"number\">0</span>) q = <span class=\"number\">20</span>;</div><div class=\"line\">                    <span class=\"keyword\">else</span> q = <span class=\"number\">-20</span>;</div><div class=\"line\">                    t.transform.position = <span class=\"keyword\">new</span> Vector3(q, <span class=\"number\">20</span>, <span class=\"number\">50</span>);</div><div class=\"line\">                    t.GetComponent&lt;Renderer&gt;().material.color = <span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">                    <span class=\"keyword\">float</span> px = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">                    <span class=\"keyword\">float</span> z = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">-0.5</span>f);</div><div class=\"line\">                    <span class=\"keyword\">float</span> power = Random.Range(<span class=\"number\">3000</span>, <span class=\"number\">4500</span>);</div><div class=\"line\">                    Vector3 v = <span class=\"keyword\">new</span> Vector3(px, <span class=\"number\">0</span>, z);</div><div class=\"line\">                    t.GetComponent&lt;Rigidbody&gt;().AddForce(power * v);</div><div class=\"line\">                    Debug.Log(<span class=\"string\">\"3333333\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> t;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDisappear</span><span class=\"params\">(GameObject x)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            x.AddComponent&lt;Disappear&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Disappear : Factory</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            used.Remove(gameObject);</div><div class=\"line\">            unused.Add(gameObject);</div><div class=\"line\">            Destroy(GetComponent&lt;Rigidbody&gt;());</div><div class=\"line\">            Destroy(GetComponent&lt;AutoDisappear&gt;());</div><div class=\"line\">            Destroy(<span class=\"keyword\">this</span>);</div><div class=\"line\">            gameObject.transform.position = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> AutoDisappear : Factory</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (gameObject.transform.position.z &lt; <span class=\"number\">-40</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                used.Remove(gameObject);</div><div class=\"line\">                unused.Add(gameObject);</div><div class=\"line\">                Destroy(GetComponent&lt;Rigidbody&gt;());</div><div class=\"line\">                Destroy(<span class=\"keyword\">this</span>);</div><div class=\"line\">                gameObject.transform.position = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"GenGameObject-cs\"><a href=\"#GenGameObject-cs\" class=\"headerlink\" title=\"GenGameObject.cs\"></a><strong>GenGameObject.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Mygame;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenGameObject : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> n;  <span class=\"comment\">// 游戏面板可以设置</span></div><div class=\"line\">    <span class=\"keyword\">public</span> GameObject UFO;  <span class=\"comment\">// 游戏面板拖入</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            GameObject temp = Instantiate(UFO);</div><div class=\"line\">            temp.transform.position = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">            Factory.Getinstance().add(temp);</div><div class=\"line\">        &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"UserInterface-cs\"><a href=\"#UserInterface-cs\" class=\"headerlink\" title=\"UserInterface.cs\"></a><strong>UserInterface.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> UserInterface : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> round = <span class=\"number\">0</span>;       <span class=\"comment\">// 关卡</span></div><div class=\"line\">    <span class=\"keyword\">float</span> time = <span class=\"number\">1</span>;             <span class=\"comment\">// 产生飞碟时间间隔</span></div><div class=\"line\">    <span class=\"keyword\">private</span> GameObject cam;</div><div class=\"line\">    <span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        cam = GameObject.Find(<span class=\"string\">\"Main Camera\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Input.GetMouseButtonDown(<span class=\"number\">0</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            Ray ray = cam.GetComponent&lt;Camera&gt;().ScreenPointToRay(Input.mousePosition);</div><div class=\"line\">            RaycastHit hit;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Physics.Raycast(ray, out hit))</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (hit.collider.gameObject.tag.Contains(<span class=\"string\">\"Finish\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    Factory.Getinstance().setDisappear(hit.collider.gameObject);</div><div class=\"line\">                    score += round;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        time -= Time.deltaTime;</div><div class=\"line\">        <span class=\"keyword\">if</span> (time &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            time = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (round == <span class=\"number\">1</span>)</div><div class=\"line\">                Factory.Getinstance().ApplyUFO(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (round == <span class=\"number\">2</span>)</div><div class=\"line\">                Factory.Getinstance().ApplyUFO(<span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (round == <span class=\"number\">3</span>)</div><div class=\"line\">                Factory.Getinstance().ApplyUFO(<span class=\"number\">3</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnGUI</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GUILayout.Button(<span class=\"string\">\"level1\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            round = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GUILayout.Button(<span class=\"string\">\"level2\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            round = <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GUILayout.Button(<span class=\"string\">\"level3\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            round = <span class=\"number\">3</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        GUILayout.Label(<span class=\"string\">\"SCORE: \"</span> + score);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>下面编写简单打飞碟游戏。游戏分多个回合，每个回合有N个飞碟，选择游戏回合后，飞碟飞出，点击鼠标，子弹飞出。飞碟落地或被击中，则准备下一次射击。每回合飞碟的大小、颜色、发射位置、发射角度、每次发射的数量以及速度等等可以变化。<br>","more":"</p>\n<h2 id=\"初始准备\"><a href=\"#初始准备\" class=\"headerlink\" title=\"初始准备\"></a><strong>初始准备</strong></h2><p>创建Terrian；创建Cylinder并设置其大小(10, 0.1, 10)，将其拉到Assert/Resources/Prefabs下，设置标签为Finish, 往后的代码需要用到这个标签，删除层次块中的Cylinder。调整摄像机（0， 175， 0）、Terrain（0， 15， 0），大小为（29， 1， 30）。</p>\n<h2 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h2><p><img src=\"aa.png\" alt=\"\"><br>其命名空间Mygame中包含Factory类工厂，工厂能控制飞碟的移动，让飞碟消失，即回收飞碟；包含disappear组件，飞碟加载这个组件后自动消失；包含autodisappear组件，当飞碟到达某位置后自动消失，位置可自由设置。</p>\n<h3 id=\"Factory类\"><a href=\"#Factory类\" class=\"headerlink\" title=\"Factory类\"></a><strong>Factory类</strong></h3><p>变量的用途，根据变量名即可知道；简单的获取实例的函数。<br><img src=\"f1.png\" alt=\"\"><br><img src=\"f2.png\" alt=\"\"><br>通过添加组件控制飞盘的消失：<br><img src=\"f3.png\" alt=\"\"><br>接下来是工厂的核心类：ApplyUFO（int）。当未使用的飞盘队列还储存有飞盘时，取出来，根据游戏的关卡，给飞盘不同的属性和动作。每个飞盘都需要AutoDisappear组件和Rigibody组件。<br><img src=\"f4.png\" alt=\"\"><br> 第一关：速度较小，黄色的飞盘，向下抛。<br><img src=\"f5.png\" alt=\"\"><br>第二关：速度较大，蓝色，飞盘抛出方向随机。<br><img src=\"f6.png\" alt=\"\"><br> 第三关：速度大而且随机，抛出位置有两个，抛出方向随机，黑色。<br><img src=\"f7.png\" alt=\"\"></p>\n<h3 id=\"Disappear类\"><a href=\"#Disappear类\" class=\"headerlink\" title=\"Disappear类\"></a><strong>Disappear类</strong></h3><p>对两个list进行适当操作，去除要消失的飞盘的相关组件。<br><img src=\"d.png\" alt=\"\"></p>\n<h3 id=\"AutoDisappear类\"><a href=\"#AutoDisappear类\" class=\"headerlink\" title=\"AutoDisappear类\"></a><strong>AutoDisappear类</strong></h3><p>同Disappear类似，但加上消失的条件。<br><img src=\"a1.png\" alt=\"\"></p>\n<h2 id=\"GenGameObject类\"><a href=\"#GenGameObject类\" class=\"headerlink\" title=\"GenGameObject类\"></a><strong>GenGameObject类</strong></h2><p>用于生成n个飞碟并放在unused list里面，以供使用。注意当代码挂载到相机上后，要将Prefabs中的飞盘挂载到相机的GenGameObject组件的UFO上，这样才能Instantiate。同时记得设置N的大小，即每次存到队列中的飞盘个数.<br><img src=\"g1.png\" alt=\"\"></p>\n<h2 id=\"UserInterface类\"><a href=\"#UserInterface类\" class=\"headerlink\" title=\"UserInterface类\"></a><strong>UserInterface类</strong></h2><p>在界面布置相关按钮，并检测鼠标点击，当鼠标点击到飞盘时，飞盘消失，分数增加；并控制一定时间间隔后才能抛出一个飞盘。<br><img src=\"u1.png\" alt=\"\"><br>点击时用射线检测，射线从摄像机发射，射到鼠标点击的屏幕位置在3d中的坐标，碰<br>撞到物体的具体信息存储在hit中，并检测碰撞到的是不是飞盘，是的话，添加相关动<br>作。此处用到上面的Finish标签。<br><img src=\"u2.png\" alt=\"\"></p>\n<p>至此，代码基本完成以下是游戏界面图：<br><img src=\"all.png\" alt=\"\"></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><h3 id=\"BaseCode-cs-1\"><a href=\"#BaseCode-cs-1\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Mygame;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Factory : MonoBehaviour</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Factory instance;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;GameObject&gt; used = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;GameObject&gt; unused = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> round;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Factory <span class=\"title\">Getinstance</span><span class=\"params\">()</span>  <span class=\"comment\">// 获取实例</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                instance = <span class=\"keyword\">new</span> Factory();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(GameObject x)</span>       <span class=\"comment\">// 在GenGameObject中生成飞碟到unused中</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            unused.Add(x);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GameObject <span class=\"title\">ApplyUFO</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span>   <span class=\"comment\">// 游戏有三个关卡，每个关卡飞碟属性不同，给飞碟添加力</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (unused.Count != <span class=\"number\">0</span>)          <span class=\"comment\">// 数目不超过GenGameObject中的n时才给飞碟添加力</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                GameObject t = unused[<span class=\"number\">0</span>];</div><div class=\"line\">                unused.Remove(t);</div><div class=\"line\">                used.Add(t);</div><div class=\"line\">                t.AddComponent&lt;Rigidbody&gt;();  <span class=\"comment\">// 刚体，添加力，移动</span></div><div class=\"line\">                t.AddComponent&lt;AutoDisappear&gt;();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (r == <span class=\"number\">1</span>)                <span class=\"comment\">// 第一关</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">float</span> x = Random.Range(<span class=\"number\">-40</span>, <span class=\"number\">40</span>);</div><div class=\"line\">                    t.transform.position = <span class=\"keyword\">new</span> Vector3(x, <span class=\"number\">20</span>, <span class=\"number\">50</span>);</div><div class=\"line\">                    Vector3 v = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">                    t.GetComponent&lt;Renderer&gt;().material.color = <span class=\"keyword\">new</span> Color(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">0</span>);</div><div class=\"line\">                    t.GetComponent&lt;Rigidbody&gt;().AddForce(<span class=\"number\">3000</span> * v);</div><div class=\"line\">                    Debug.Log(<span class=\"string\">\"111111\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (r == <span class=\"number\">2</span>)           <span class=\"comment\">// 第二关</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">float</span> x = Random.Range(<span class=\"number\">-40</span>, <span class=\"number\">40</span>);</div><div class=\"line\">                    t.transform.position = <span class=\"keyword\">new</span> Vector3(x, <span class=\"number\">20</span>, <span class=\"number\">50</span>);</div><div class=\"line\">                    t.GetComponent&lt;Renderer&gt;().material.color = <span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">255</span>);</div><div class=\"line\">                    t.GetComponent&lt;Transform&gt;().localScale = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">7</span>, <span class=\"number\">0.1f</span>, <span class=\"number\">7</span>);</div><div class=\"line\">                    <span class=\"keyword\">float</span> xx = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">                    <span class=\"keyword\">float</span> z = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">-0.5</span>f);</div><div class=\"line\">                    Vector3 v = <span class=\"keyword\">new</span> Vector3(xx, <span class=\"number\">0</span>, z);</div><div class=\"line\">                    t.GetComponent&lt;Rigidbody&gt;().AddForce(<span class=\"number\">3000</span> * v);</div><div class=\"line\">                    Debug.Log(<span class=\"string\">\"2222222\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span>                      <span class=\"comment\">// 第三关</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">float</span> q = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (q &gt;= <span class=\"number\">0</span>) q = <span class=\"number\">20</span>;</div><div class=\"line\">                    <span class=\"keyword\">else</span> q = <span class=\"number\">-20</span>;</div><div class=\"line\">                    t.transform.position = <span class=\"keyword\">new</span> Vector3(q, <span class=\"number\">20</span>, <span class=\"number\">50</span>);</div><div class=\"line\">                    t.GetComponent&lt;Renderer&gt;().material.color = <span class=\"keyword\">new</span> Color(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">                    <span class=\"keyword\">float</span> px = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">                    <span class=\"keyword\">float</span> z = Random.Range(<span class=\"number\">-1</span>, <span class=\"number\">-0.5</span>f);</div><div class=\"line\">                    <span class=\"keyword\">float</span> power = Random.Range(<span class=\"number\">3000</span>, <span class=\"number\">4500</span>);</div><div class=\"line\">                    Vector3 v = <span class=\"keyword\">new</span> Vector3(px, <span class=\"number\">0</span>, z);</div><div class=\"line\">                    t.GetComponent&lt;Rigidbody&gt;().AddForce(power * v);</div><div class=\"line\">                    Debug.Log(<span class=\"string\">\"3333333\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">return</span> t;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDisappear</span><span class=\"params\">(GameObject x)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            x.AddComponent&lt;Disappear&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Disappear : Factory</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            used.Remove(gameObject);</div><div class=\"line\">            unused.Add(gameObject);</div><div class=\"line\">            Destroy(GetComponent&lt;Rigidbody&gt;());</div><div class=\"line\">            Destroy(GetComponent&lt;AutoDisappear&gt;());</div><div class=\"line\">            Destroy(<span class=\"keyword\">this</span>);</div><div class=\"line\">            gameObject.transform.position = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> AutoDisappear : Factory</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (gameObject.transform.position.z &lt; <span class=\"number\">-40</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                used.Remove(gameObject);</div><div class=\"line\">                unused.Add(gameObject);</div><div class=\"line\">                Destroy(GetComponent&lt;Rigidbody&gt;());</div><div class=\"line\">                Destroy(<span class=\"keyword\">this</span>);</div><div class=\"line\">                gameObject.transform.position = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"GenGameObject-cs\"><a href=\"#GenGameObject-cs\" class=\"headerlink\" title=\"GenGameObject.cs\"></a><strong>GenGameObject.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Mygame;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenGameObject : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> n;  <span class=\"comment\">// 游戏面板可以设置</span></div><div class=\"line\">    <span class=\"keyword\">public</span> GameObject UFO;  <span class=\"comment\">// 游戏面板拖入</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            GameObject temp = Instantiate(UFO);</div><div class=\"line\">            temp.transform.position = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>);</div><div class=\"line\">            Factory.Getinstance().add(temp);</div><div class=\"line\">        &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"UserInterface-cs\"><a href=\"#UserInterface-cs\" class=\"headerlink\" title=\"UserInterface.cs\"></a><strong>UserInterface.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> UserInterface : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> round = <span class=\"number\">0</span>;       <span class=\"comment\">// 关卡</span></div><div class=\"line\">    <span class=\"keyword\">float</span> time = <span class=\"number\">1</span>;             <span class=\"comment\">// 产生飞碟时间间隔</span></div><div class=\"line\">    <span class=\"keyword\">private</span> GameObject cam;</div><div class=\"line\">    <span class=\"keyword\">int</span> score = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        cam = GameObject.Find(<span class=\"string\">\"Main Camera\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Input.GetMouseButtonDown(<span class=\"number\">0</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            Ray ray = cam.GetComponent&lt;Camera&gt;().ScreenPointToRay(Input.mousePosition);</div><div class=\"line\">            RaycastHit hit;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Physics.Raycast(ray, out hit))</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (hit.collider.gameObject.tag.Contains(<span class=\"string\">\"Finish\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    Factory.Getinstance().setDisappear(hit.collider.gameObject);</div><div class=\"line\">                    score += round;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        time -= Time.deltaTime;</div><div class=\"line\">        <span class=\"keyword\">if</span> (time &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            time = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (round == <span class=\"number\">1</span>)</div><div class=\"line\">                Factory.Getinstance().ApplyUFO(<span class=\"number\">1</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (round == <span class=\"number\">2</span>)</div><div class=\"line\">                Factory.Getinstance().ApplyUFO(<span class=\"number\">2</span>);</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (round == <span class=\"number\">3</span>)</div><div class=\"line\">                Factory.Getinstance().ApplyUFO(<span class=\"number\">3</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnGUI</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GUILayout.Button(<span class=\"string\">\"level1\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            round = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GUILayout.Button(<span class=\"string\">\"level2\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            round = <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (GUILayout.Button(<span class=\"string\">\"level3\"</span>))</div><div class=\"line\">        &#123;</div><div class=\"line\">            round = <span class=\"number\">3</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        GUILayout.Label(<span class=\"string\">\"SCORE: \"</span> + score);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"打飞碟改进","toc":true,"date":"2016-07-22T11:12:32.000Z","_content":"上次写的飞碟游戏确实很丑陋，这次改进一下。游戏分多个回合，每个回合有N个飞碟，玩家按空格后，321倒数3秒，飞碟飞出，点击鼠标，子弹飞出。飞碟落地或被击中，则准备下一次射击。每回合飞碟的大小、颜色、发射位置、发射角度、每次发射的数量可以变化。\n<!--more-->\n## **DFactory.cs**\n\n![](df.png)\nDFactory和SceneController以及BaseCode都定义在自己的命名空间Com.Mygame中。代码中当且仅当请求队列里的所有对象都在被使用（飞碟在场景中活跃）时，才会发生实例化，此时队列会变长；getDisk返回的是可用飞碟在队列里的index，方便移除；free通过index找到飞碟在队列中的位置，并将飞碟设置为不活跃的。由于飞碟使用了刚体组件，回收时需要把速度重置，并且大小可能会被改变，也应该重置。\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.Mygame;\n\nnamespace Com.Mygame\n{\n    public class DiskFactory : System.Object\n    {\n        private static DiskFactory _instance;\n        private static List<GameObject> diskList;\n        public GameObject template;\n\n        public static DiskFactory getInstance()\n        {\n            if (_instance == null)\n            {\n                _instance = new DiskFactory();\n                diskList = new List<GameObject>();\n            }\n            return _instance;\n        }\n\n        public int getDisk()       // 获取可用飞碟id\n        {\n            for (int i = 0; i < diskList.Count; ++i)\n            {\n                if (!diskList[i].activeInHierarchy)\n                {\n                    return i;\n                }\n            }\n            diskList.Add(GameObject.Instantiate(template) as GameObject);  // 无空闲飞碟，则实例新的飞碟预设\n            return diskList.Count - 1;\n        }\n\n        public GameObject getDiskObject(int id)  // 获取飞碟对象\n        {\n            if (id > -1 && id < diskList.Count)\n            {\n                return diskList[id];\n            }\n            return null;\n        }\n\n        public void free(int id)        // 回收飞碟，重置飞碟速度和大小\n        {\n            if (id > -1 && id < diskList.Count)\n            {\n                diskList[id].GetComponent<Rigidbody>().velocity = Vector3.zero;\n                diskList[id].transform.localScale = template.transform.localScale;\n                diskList[id].SetActive(false);\n            }\n        }\n    }\n}\n\npublic class DFactory : MonoBehaviour\n{\n    public GameObject disk;   // 预设\n\n    void Awake()\n    {\n        DiskFactory.getInstance().template = disk;\n    }\n}\n\n```\n## **UserInterface.cs**\n\n![](ui.png)\n发射飞碟时，通过UI中的emitDisk()到BaseCode中的emitDisk，其调用model中的prepareToEmitDisk从而改变emitEnable的值，使得FixedUpdated判断是否发射飞碟而调用emitDisk。\n\n子弹射击的思路：当用户点击鼠标时，从摄像机到鼠标创建一条射线，射线的方向即是子弹发射的方向，子弹采用刚体组件，因此发射子弹只需要给子弹施加一个力。子弹对象只有一个，下一次发射子弹时，必须改变子弹的位置（虽然有了刚体组件不建议修改transform，但也没有其它方法改变子弹位置了吧）。为了不让子弹继承上一次发射的速度，必须将子弹的速度归零重置。\n\n子弹的击中判断：采用射线而不是物理引擎，因为物理引擎在高速物体碰撞时经常不能百分百检测得到。\n\n显示的思路：得分和回合直接通过查询接口获得。倒计时显示前通过查询接口判断是否正在倒计时，如果是，那么再通过查询接口获得倒计时时间。如果回合发生改变，则显示新的回合，直到用户按下空格。\n``` cpp\nusing UnityEngine;                    // 发射飞碟时，通过UI中的emitDisk()到BaseCode中的emitDisk，其调用model中的prepareToEmitDisk\nusing UnityEngine.UI;                 // 从而改变emitEnable的值，使FixedUpdated判断是否发射飞碟而调用emitDisk\nusing System.Collections;\nusing Com.Mygame;\n\npublic class UserInterface : MonoBehaviour\n{\n    public Text mainText;   // 显示倒计时、新回合\n    public Text scoreText;\n    public Text roundText;\n    private int round;\n    public GameObject bullet;\n    public ParticleSystem explosion;\n    public float fireRate = .25f;       // 开枪间隔\n    public float speed = 500f;\n    private float nextFireTime;\n    private IUserInterface userInt;     // 用户接口\n    private IQueryStatus queryInt;      // 查询接口\n\n    void Start()\n    {\n        bullet = GameObject.Instantiate(bullet) as GameObject;\n        explosion = GameObject.Instantiate(explosion) as ParticleSystem;\n        userInt = SceneController.getInstance() as IUserInterface;\n        queryInt = SceneController.getInstance() as IQueryStatus;\n    }\n\n    void Update()\n    {\n        if (queryInt.isCounting())      // 显示倒计时\n        {\n            mainText.text = ((int)queryInt.getEmitTime()).ToString();\n        }\n        else {\n            if (Input.GetKeyDown(\"space\"))\n            {\n                userInt.emitDisk();\n            }\n            if (queryInt.isShooting())     // 射击开始，隐藏主提示\n            {\n                mainText.text = \"\";\n            }\n\n            if (queryInt.isShooting() && Input.GetMouseButtonDown(0) && Time.time > nextFireTime) // 发射子弹\n            {\n                nextFireTime = Time.time + fireRate;\n                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\n                bullet.GetComponent<Rigidbody>().velocity = Vector3.zero;       // 子弹刚体速度重置\n                bullet.transform.position = transform.position;                 // 子弹从摄像机位置射出\n                bullet.GetComponent<Rigidbody>().AddForce(ray.direction * speed, ForceMode.Impulse);\n\n                RaycastHit hit;\n                if (Physics.Raycast(ray, out hit) && hit.collider.gameObject.tag == \"Disk\")\n                {\n                    explosion.transform.position = hit.collider.gameObject.transform.position;\n                    explosion.GetComponent<Renderer>().material.color = hit.collider.gameObject.GetComponent<Renderer>().material.color;\n                    explosion.Play();\n\n                    hit.collider.gameObject.SetActive(false); // 击中飞碟设置为不活跃，自动调用GameModel中update中的freedisk()回收\n                }\n            }\n        }\n        roundText.text = \"Round: \" + queryInt.getRound().ToString();\n        scoreText.text = \"Score: \" + queryInt.getPoint().ToString();\n\n        if (round != queryInt.getRound())        // 如果回合更新，主提示显示新回合\n        {\n            round = queryInt.getRound();\n            mainText.text = \"Round \" + round.ToString() + \" !\";\n        }\n    }\n}\n\n```\n## **BaseCode.cs**\n\n![](bc.png)\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\nnamespace Com.Mygame\n{\n    public interface IUserInterface { void emitDisk(); }\n\n    public interface IQueryStatus\n    {\n        bool isCounting();\n        bool isShooting();\n        int getRound();\n        int getPoint();\n        int getEmitTime();\n    }\n\n    public interface IJudgeEvent\n    {\n        void nextRound();\n        void setPoint(int point);\n    }\n\n    public class SceneController : System.Object, IQueryStatus, IUserInterface, IJudgeEvent\n    {\n        private static SceneController _instance;\n        private BaseCode _baseCode;\n        private GameModel _gameModel;\n        private Judge _judge;\n        private int _round = 0;\n        private int _point;\n\n        public static SceneController getInstance()\n        {\n            if (_instance == null)\n            {\n                _instance = new SceneController();\n            }\n            return _instance;\n        }\n\n        public void emitDisk() { _gameModel.prepareToEmitDisk(); }\n        public void setGameModel(GameModel obj) { _gameModel = obj; }\n        internal GameModel getGameModel() { return _gameModel; }\n\n        public void setJudge(Judge obj) { _judge = obj; }\n        internal Judge getJudge() { return _judge; }\n\n        public void setBaseCode(BaseCode obj) { _baseCode = obj; }\n        internal BaseCode getBaseCode() { return _baseCode; }\n\n        public bool isCounting() { return _gameModel.isCounting(); }\n        public bool isShooting() { return _gameModel.isShooting(); }\n        public int getRound() { return _round; }\n        public int getPoint() { return _point; }\n        public int getEmitTime() { return (int)_gameModel.timeToEmit + 1; } // 用于显示倒计时\n\n        public void setPoint(int point) { _point = point; }\n        public void nextRound() { _point = 0; _baseCode.loadRoundData(++_round); }\n    }\n}\n\npublic class BaseCode : MonoBehaviour\n{\n    private Color color;\n    private Vector3 emitPos;\n    private Vector3 emitDir;\n    private float speed;\n\n    void Awake()\n    {\n        SceneController.getInstance().setBaseCode(this);\n    }\n\n    public void loadRoundData(int round)\n    {\n        switch (round)\n        {\n            case 1:\n                color = Color.green;\n                emitPos = new Vector3(2.5f, 0.2f, -5f);\n                emitDir = new Vector3(-24.5f, 35.0f, 67f);\n                speed = 4;\n                SceneController.getInstance().getGameModel().setting(1, color, emitPos, emitDir.normalized, speed, 1);\n                break;\n            case 2:\n                color = Color.red;\n                emitPos = new Vector3(-2.5f, 0.2f, -5f);\n                emitDir = new Vector3(24.5f, 40.0f, 67f);\n                speed = 4;\n                SceneController.getInstance().getGameModel().setting(1, color, emitPos, emitDir.normalized, speed, 2);\n                break;\n            case 3:\n                color = Color.blue;\n                emitPos = new Vector3(0, 0.2f, -5f);\n                emitDir = new Vector3(0, 30, 67);\n                speed = 6;\n                SceneController.getInstance().getGameModel().setting(2, color, emitPos, emitDir.normalized, speed, 3);\n                break;\n        }\n    }\n}\n\n```\n\n## **Judge.cs**\n\n![](j.png)\n游戏规则单独作为一个类，有利于日后修改。这里需要处理的规则无非就两个，得分和失分。另外，得分需要判断是否能晋级下一关。能就调用接口函数nextRound()。\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\npublic class Judge : MonoBehaviour\n{\n    public int score = 5;\n    public int lose = 5;\n    public int winNum = 2;\n    private SceneController scene;\n\n    void Awake()\n    {\n        scene = SceneController.getInstance();\n        scene.setJudge(this);\n    }\n\n    void Start()\n    {\n        scene.nextRound();\n    }\n\n    public void scoreADisk()    // 击中飞碟得分\n    {\n        scene.setPoint(scene.getPoint() + score);\n        if (scene.getPoint() == winNum*score)\n        {\n            scene.nextRound();\n        }\n    }\n\n    public void failADisk()    // 掉落飞碟失分\n    {\n        scene.setPoint(scene.getPoint() - lose);\n    }\n}\n```\n\n## **GameModel.cs**\n\n![](gm.png)\n核心类，主要负责飞碟动作的处理。首先需要倒计时功能，可以通过几个整型变量和布尔变量完成。另外需要飞碟发射功能，通过setting函数保存好飞碟的发射信息，每次倒计时完成后，通过emitDisks获取飞碟对象，并通过发射信息初始化飞碟，再给飞碟一个力就可以发射了。而飞碟的回收在Update里完成，一种是飞碟被击中（飞碟不在场景中）了，需要调用Judge获得分数。另一种是飞碟在场景中，但是掉在地上了，需要调用Judge丢失分数。\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.Mygame;\n\npublic class GameModel : MonoBehaviour\n{\n    public float countDown = 3f;    // 发射倒计时\n    public float timeToEmit;        // 倒计时剩余时间\n    private bool counting;\n    private bool shooting;\n    private List<GameObject> disks = new List<GameObject>();    // 发射的飞碟对象列表\n    private List<int> diskIds = new List<int>();                // 发射的飞碟id列表\n    private int diskScale;\n    private Color diskColor;\n    private Vector3 emitPosition;\n    private Vector3 emitDirection;\n    private float emitSpeed;\n    private int emitNumber;\n    private bool emitEnable;  // 允许新的发射事件\n    private SceneController scene;\n\n    public bool isCounting() { return counting; }\n    public bool isShooting() { return shooting; }\n\n    void Awake()\n    {\n        scene = SceneController.getInstance();\n        scene.setGameModel(this);\n    }\n\n    public void setting(int scale, Color color, Vector3 emitPos, Vector3 emitDir, float speed, int num)\n    {\n        diskScale = scale;\n        diskColor = color;\n        emitPosition = emitPos;\n        emitDirection = emitDir;\n        emitSpeed = speed;\n        emitNumber = num;\n    }\n\n    public void prepareToEmitDisk()    // 准备下一次发射\n    {\n        if (!counting && !shooting)\n        {\n            timeToEmit = countDown;\n            emitEnable = true;\n        }\n    }\n\n    void emitDisks()    // 发射飞碟\n    {\n        for (int i = 0; i < emitNumber; ++i)\n        {\n            diskIds.Add(DiskFactory.getInstance().getDisk());\n            disks.Add(DiskFactory.getInstance().getDiskObject(diskIds[i]));\n            disks[i].transform.localScale *= diskScale;\n            disks[i].GetComponent<Renderer>().material.color = diskColor;\n            disks[i].transform.position = new Vector3(emitPosition.x, emitPosition.y + i, emitPosition.z);\n            disks[i].SetActive(true);\n            disks[i].GetComponent<Rigidbody>().AddForce(emitDirection * Random.Range(emitSpeed*5, emitSpeed*10)/10, ForceMode.Impulse);\n        }\n    }\n\n    void freeADisk(int i)     // 回收飞碟\n    {\n        DiskFactory.getInstance().free(diskIds[i]);\n        disks.RemoveAt(i);\n        diskIds.RemoveAt(i);\n    }\n\n    void FixedUpdate()\n    {\n        if (timeToEmit > 0)\n        {\n            counting = true;\n            timeToEmit -= Time.deltaTime;\n        }\n        else {\n            counting = false;\n            if (emitEnable)\n            {\n                emitDisks();\n                emitEnable = false;\n                shooting = true;\n            }\n        }\n    }\n\n    void Update()\n    {\n        for (int i = 0; i < disks.Count; ++i)\n        {\n            if (!disks[i].activeInHierarchy)   // 飞碟不在场景中\n            {\n                scene.getJudge().scoreADisk();  // 得分\n                freeADisk(i);\n            }\n            else if (disks[i].transform.position.y < 0)   // 飞碟落地\n            {\n                scene.getJudge().failADisk();   // 失分\n                freeADisk(i);\n            }\n        }\n        if (disks.Count == 0)\n        {\n            shooting = false;\n        }\n    }\n}\n```\n## **其他设置**\n![](all.png)\n摄像机参数：\n![](sxj.png)\n子弹和飞碟预设：\n![](zd.png)  ![](fd.png)\n\n最后，将5个脚本挂载在组摄像机上，将预设拖入相应的脚本中即可。","source":"_posts/打飞碟改进.md","raw":"---\ntitle: 打飞碟改进\ntoc: true\ndate: 2016-07-22 19:12:32\ntags:\n- C#\n- unity3d\n- MVC\n- 工厂模式\ncategories: 3D游戏开发\n---\n上次写的飞碟游戏确实很丑陋，这次改进一下。游戏分多个回合，每个回合有N个飞碟，玩家按空格后，321倒数3秒，飞碟飞出，点击鼠标，子弹飞出。飞碟落地或被击中，则准备下一次射击。每回合飞碟的大小、颜色、发射位置、发射角度、每次发射的数量可以变化。\n<!--more-->\n## **DFactory.cs**\n\n![](df.png)\nDFactory和SceneController以及BaseCode都定义在自己的命名空间Com.Mygame中。代码中当且仅当请求队列里的所有对象都在被使用（飞碟在场景中活跃）时，才会发生实例化，此时队列会变长；getDisk返回的是可用飞碟在队列里的index，方便移除；free通过index找到飞碟在队列中的位置，并将飞碟设置为不活跃的。由于飞碟使用了刚体组件，回收时需要把速度重置，并且大小可能会被改变，也应该重置。\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.Mygame;\n\nnamespace Com.Mygame\n{\n    public class DiskFactory : System.Object\n    {\n        private static DiskFactory _instance;\n        private static List<GameObject> diskList;\n        public GameObject template;\n\n        public static DiskFactory getInstance()\n        {\n            if (_instance == null)\n            {\n                _instance = new DiskFactory();\n                diskList = new List<GameObject>();\n            }\n            return _instance;\n        }\n\n        public int getDisk()       // 获取可用飞碟id\n        {\n            for (int i = 0; i < diskList.Count; ++i)\n            {\n                if (!diskList[i].activeInHierarchy)\n                {\n                    return i;\n                }\n            }\n            diskList.Add(GameObject.Instantiate(template) as GameObject);  // 无空闲飞碟，则实例新的飞碟预设\n            return diskList.Count - 1;\n        }\n\n        public GameObject getDiskObject(int id)  // 获取飞碟对象\n        {\n            if (id > -1 && id < diskList.Count)\n            {\n                return diskList[id];\n            }\n            return null;\n        }\n\n        public void free(int id)        // 回收飞碟，重置飞碟速度和大小\n        {\n            if (id > -1 && id < diskList.Count)\n            {\n                diskList[id].GetComponent<Rigidbody>().velocity = Vector3.zero;\n                diskList[id].transform.localScale = template.transform.localScale;\n                diskList[id].SetActive(false);\n            }\n        }\n    }\n}\n\npublic class DFactory : MonoBehaviour\n{\n    public GameObject disk;   // 预设\n\n    void Awake()\n    {\n        DiskFactory.getInstance().template = disk;\n    }\n}\n\n```\n## **UserInterface.cs**\n\n![](ui.png)\n发射飞碟时，通过UI中的emitDisk()到BaseCode中的emitDisk，其调用model中的prepareToEmitDisk从而改变emitEnable的值，使得FixedUpdated判断是否发射飞碟而调用emitDisk。\n\n子弹射击的思路：当用户点击鼠标时，从摄像机到鼠标创建一条射线，射线的方向即是子弹发射的方向，子弹采用刚体组件，因此发射子弹只需要给子弹施加一个力。子弹对象只有一个，下一次发射子弹时，必须改变子弹的位置（虽然有了刚体组件不建议修改transform，但也没有其它方法改变子弹位置了吧）。为了不让子弹继承上一次发射的速度，必须将子弹的速度归零重置。\n\n子弹的击中判断：采用射线而不是物理引擎，因为物理引擎在高速物体碰撞时经常不能百分百检测得到。\n\n显示的思路：得分和回合直接通过查询接口获得。倒计时显示前通过查询接口判断是否正在倒计时，如果是，那么再通过查询接口获得倒计时时间。如果回合发生改变，则显示新的回合，直到用户按下空格。\n``` cpp\nusing UnityEngine;                    // 发射飞碟时，通过UI中的emitDisk()到BaseCode中的emitDisk，其调用model中的prepareToEmitDisk\nusing UnityEngine.UI;                 // 从而改变emitEnable的值，使FixedUpdated判断是否发射飞碟而调用emitDisk\nusing System.Collections;\nusing Com.Mygame;\n\npublic class UserInterface : MonoBehaviour\n{\n    public Text mainText;   // 显示倒计时、新回合\n    public Text scoreText;\n    public Text roundText;\n    private int round;\n    public GameObject bullet;\n    public ParticleSystem explosion;\n    public float fireRate = .25f;       // 开枪间隔\n    public float speed = 500f;\n    private float nextFireTime;\n    private IUserInterface userInt;     // 用户接口\n    private IQueryStatus queryInt;      // 查询接口\n\n    void Start()\n    {\n        bullet = GameObject.Instantiate(bullet) as GameObject;\n        explosion = GameObject.Instantiate(explosion) as ParticleSystem;\n        userInt = SceneController.getInstance() as IUserInterface;\n        queryInt = SceneController.getInstance() as IQueryStatus;\n    }\n\n    void Update()\n    {\n        if (queryInt.isCounting())      // 显示倒计时\n        {\n            mainText.text = ((int)queryInt.getEmitTime()).ToString();\n        }\n        else {\n            if (Input.GetKeyDown(\"space\"))\n            {\n                userInt.emitDisk();\n            }\n            if (queryInt.isShooting())     // 射击开始，隐藏主提示\n            {\n                mainText.text = \"\";\n            }\n\n            if (queryInt.isShooting() && Input.GetMouseButtonDown(0) && Time.time > nextFireTime) // 发射子弹\n            {\n                nextFireTime = Time.time + fireRate;\n                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\n                bullet.GetComponent<Rigidbody>().velocity = Vector3.zero;       // 子弹刚体速度重置\n                bullet.transform.position = transform.position;                 // 子弹从摄像机位置射出\n                bullet.GetComponent<Rigidbody>().AddForce(ray.direction * speed, ForceMode.Impulse);\n\n                RaycastHit hit;\n                if (Physics.Raycast(ray, out hit) && hit.collider.gameObject.tag == \"Disk\")\n                {\n                    explosion.transform.position = hit.collider.gameObject.transform.position;\n                    explosion.GetComponent<Renderer>().material.color = hit.collider.gameObject.GetComponent<Renderer>().material.color;\n                    explosion.Play();\n\n                    hit.collider.gameObject.SetActive(false); // 击中飞碟设置为不活跃，自动调用GameModel中update中的freedisk()回收\n                }\n            }\n        }\n        roundText.text = \"Round: \" + queryInt.getRound().ToString();\n        scoreText.text = \"Score: \" + queryInt.getPoint().ToString();\n\n        if (round != queryInt.getRound())        // 如果回合更新，主提示显示新回合\n        {\n            round = queryInt.getRound();\n            mainText.text = \"Round \" + round.ToString() + \" !\";\n        }\n    }\n}\n\n```\n## **BaseCode.cs**\n\n![](bc.png)\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\nnamespace Com.Mygame\n{\n    public interface IUserInterface { void emitDisk(); }\n\n    public interface IQueryStatus\n    {\n        bool isCounting();\n        bool isShooting();\n        int getRound();\n        int getPoint();\n        int getEmitTime();\n    }\n\n    public interface IJudgeEvent\n    {\n        void nextRound();\n        void setPoint(int point);\n    }\n\n    public class SceneController : System.Object, IQueryStatus, IUserInterface, IJudgeEvent\n    {\n        private static SceneController _instance;\n        private BaseCode _baseCode;\n        private GameModel _gameModel;\n        private Judge _judge;\n        private int _round = 0;\n        private int _point;\n\n        public static SceneController getInstance()\n        {\n            if (_instance == null)\n            {\n                _instance = new SceneController();\n            }\n            return _instance;\n        }\n\n        public void emitDisk() { _gameModel.prepareToEmitDisk(); }\n        public void setGameModel(GameModel obj) { _gameModel = obj; }\n        internal GameModel getGameModel() { return _gameModel; }\n\n        public void setJudge(Judge obj) { _judge = obj; }\n        internal Judge getJudge() { return _judge; }\n\n        public void setBaseCode(BaseCode obj) { _baseCode = obj; }\n        internal BaseCode getBaseCode() { return _baseCode; }\n\n        public bool isCounting() { return _gameModel.isCounting(); }\n        public bool isShooting() { return _gameModel.isShooting(); }\n        public int getRound() { return _round; }\n        public int getPoint() { return _point; }\n        public int getEmitTime() { return (int)_gameModel.timeToEmit + 1; } // 用于显示倒计时\n\n        public void setPoint(int point) { _point = point; }\n        public void nextRound() { _point = 0; _baseCode.loadRoundData(++_round); }\n    }\n}\n\npublic class BaseCode : MonoBehaviour\n{\n    private Color color;\n    private Vector3 emitPos;\n    private Vector3 emitDir;\n    private float speed;\n\n    void Awake()\n    {\n        SceneController.getInstance().setBaseCode(this);\n    }\n\n    public void loadRoundData(int round)\n    {\n        switch (round)\n        {\n            case 1:\n                color = Color.green;\n                emitPos = new Vector3(2.5f, 0.2f, -5f);\n                emitDir = new Vector3(-24.5f, 35.0f, 67f);\n                speed = 4;\n                SceneController.getInstance().getGameModel().setting(1, color, emitPos, emitDir.normalized, speed, 1);\n                break;\n            case 2:\n                color = Color.red;\n                emitPos = new Vector3(-2.5f, 0.2f, -5f);\n                emitDir = new Vector3(24.5f, 40.0f, 67f);\n                speed = 4;\n                SceneController.getInstance().getGameModel().setting(1, color, emitPos, emitDir.normalized, speed, 2);\n                break;\n            case 3:\n                color = Color.blue;\n                emitPos = new Vector3(0, 0.2f, -5f);\n                emitDir = new Vector3(0, 30, 67);\n                speed = 6;\n                SceneController.getInstance().getGameModel().setting(2, color, emitPos, emitDir.normalized, speed, 3);\n                break;\n        }\n    }\n}\n\n```\n\n## **Judge.cs**\n\n![](j.png)\n游戏规则单独作为一个类，有利于日后修改。这里需要处理的规则无非就两个，得分和失分。另外，得分需要判断是否能晋级下一关。能就调用接口函数nextRound()。\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\npublic class Judge : MonoBehaviour\n{\n    public int score = 5;\n    public int lose = 5;\n    public int winNum = 2;\n    private SceneController scene;\n\n    void Awake()\n    {\n        scene = SceneController.getInstance();\n        scene.setJudge(this);\n    }\n\n    void Start()\n    {\n        scene.nextRound();\n    }\n\n    public void scoreADisk()    // 击中飞碟得分\n    {\n        scene.setPoint(scene.getPoint() + score);\n        if (scene.getPoint() == winNum*score)\n        {\n            scene.nextRound();\n        }\n    }\n\n    public void failADisk()    // 掉落飞碟失分\n    {\n        scene.setPoint(scene.getPoint() - lose);\n    }\n}\n```\n\n## **GameModel.cs**\n\n![](gm.png)\n核心类，主要负责飞碟动作的处理。首先需要倒计时功能，可以通过几个整型变量和布尔变量完成。另外需要飞碟发射功能，通过setting函数保存好飞碟的发射信息，每次倒计时完成后，通过emitDisks获取飞碟对象，并通过发射信息初始化飞碟，再给飞碟一个力就可以发射了。而飞碟的回收在Update里完成，一种是飞碟被击中（飞碟不在场景中）了，需要调用Judge获得分数。另一种是飞碟在场景中，但是掉在地上了，需要调用Judge丢失分数。\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.Mygame;\n\npublic class GameModel : MonoBehaviour\n{\n    public float countDown = 3f;    // 发射倒计时\n    public float timeToEmit;        // 倒计时剩余时间\n    private bool counting;\n    private bool shooting;\n    private List<GameObject> disks = new List<GameObject>();    // 发射的飞碟对象列表\n    private List<int> diskIds = new List<int>();                // 发射的飞碟id列表\n    private int diskScale;\n    private Color diskColor;\n    private Vector3 emitPosition;\n    private Vector3 emitDirection;\n    private float emitSpeed;\n    private int emitNumber;\n    private bool emitEnable;  // 允许新的发射事件\n    private SceneController scene;\n\n    public bool isCounting() { return counting; }\n    public bool isShooting() { return shooting; }\n\n    void Awake()\n    {\n        scene = SceneController.getInstance();\n        scene.setGameModel(this);\n    }\n\n    public void setting(int scale, Color color, Vector3 emitPos, Vector3 emitDir, float speed, int num)\n    {\n        diskScale = scale;\n        diskColor = color;\n        emitPosition = emitPos;\n        emitDirection = emitDir;\n        emitSpeed = speed;\n        emitNumber = num;\n    }\n\n    public void prepareToEmitDisk()    // 准备下一次发射\n    {\n        if (!counting && !shooting)\n        {\n            timeToEmit = countDown;\n            emitEnable = true;\n        }\n    }\n\n    void emitDisks()    // 发射飞碟\n    {\n        for (int i = 0; i < emitNumber; ++i)\n        {\n            diskIds.Add(DiskFactory.getInstance().getDisk());\n            disks.Add(DiskFactory.getInstance().getDiskObject(diskIds[i]));\n            disks[i].transform.localScale *= diskScale;\n            disks[i].GetComponent<Renderer>().material.color = diskColor;\n            disks[i].transform.position = new Vector3(emitPosition.x, emitPosition.y + i, emitPosition.z);\n            disks[i].SetActive(true);\n            disks[i].GetComponent<Rigidbody>().AddForce(emitDirection * Random.Range(emitSpeed*5, emitSpeed*10)/10, ForceMode.Impulse);\n        }\n    }\n\n    void freeADisk(int i)     // 回收飞碟\n    {\n        DiskFactory.getInstance().free(diskIds[i]);\n        disks.RemoveAt(i);\n        diskIds.RemoveAt(i);\n    }\n\n    void FixedUpdate()\n    {\n        if (timeToEmit > 0)\n        {\n            counting = true;\n            timeToEmit -= Time.deltaTime;\n        }\n        else {\n            counting = false;\n            if (emitEnable)\n            {\n                emitDisks();\n                emitEnable = false;\n                shooting = true;\n            }\n        }\n    }\n\n    void Update()\n    {\n        for (int i = 0; i < disks.Count; ++i)\n        {\n            if (!disks[i].activeInHierarchy)   // 飞碟不在场景中\n            {\n                scene.getJudge().scoreADisk();  // 得分\n                freeADisk(i);\n            }\n            else if (disks[i].transform.position.y < 0)   // 飞碟落地\n            {\n                scene.getJudge().failADisk();   // 失分\n                freeADisk(i);\n            }\n        }\n        if (disks.Count == 0)\n        {\n            shooting = false;\n        }\n    }\n}\n```\n## **其他设置**\n![](all.png)\n摄像机参数：\n![](sxj.png)\n子弹和飞碟预设：\n![](zd.png)  ![](fd.png)\n\n最后，将5个脚本挂载在组摄像机上，将预设拖入相应的脚本中即可。","slug":"打飞碟改进","published":1,"updated":"2016-07-22T12:03:33.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzpi0012gobkzjxwwlfz","content":"<p>上次写的飞碟游戏确实很丑陋，这次改进一下。游戏分多个回合，每个回合有N个飞碟，玩家按空格后，321倒数3秒，飞碟飞出，点击鼠标，子弹飞出。飞碟落地或被击中，则准备下一次射击。每回合飞碟的大小、颜色、发射位置、发射角度、每次发射的数量可以变化。<br><a id=\"more\"></a></p>\n<h2 id=\"DFactory-cs\"><a href=\"#DFactory-cs\" class=\"headerlink\" title=\"DFactory.cs\"></a><strong>DFactory.cs</strong></h2><p><img src=\"df.png\" alt=\"\"><br>DFactory和SceneController以及BaseCode都定义在自己的命名空间Com.Mygame中。代码中当且仅当请求队列里的所有对象都在被使用（飞碟在场景中活跃）时，才会发生实例化，此时队列会变长；getDisk返回的是可用飞碟在队列里的index，方便移除；free通过index找到飞碟在队列中的位置，并将飞碟设置为不活跃的。由于飞碟使用了刚体组件，回收时需要把速度重置，并且大小可能会被改变，也应该重置。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> DiskFactory : System.Object</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DiskFactory <span class=\"number\">_</span>instance;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;GameObject&gt; diskList;</div><div class=\"line\">        <span class=\"keyword\">public</span> GameObject <span class=\"keyword\">template</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DiskFactory <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">_</span>instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> DiskFactory();</div><div class=\"line\">                diskList = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDisk</span><span class=\"params\">()</span>       <span class=\"comment\">// 获取可用飞碟id</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; diskList.Count; ++i)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!diskList[i].activeInHierarchy)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> i;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            diskList.Add(GameObject.Instantiate(<span class=\"keyword\">template</span>) as GameObject);  <span class=\"comment\">// 无空闲飞碟，则实例新的飞碟预设</span></div><div class=\"line\">            <span class=\"keyword\">return</span> diskList.Count - <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GameObject <span class=\"title\">getDiskObject</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span>  <span class=\"comment\">// 获取飞碟对象</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (id &gt; <span class=\"number\">-1</span> &amp;&amp; id &lt; diskList.Count)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> diskList[id];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">free</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span>        <span class=\"comment\">// 回收飞碟，重置飞碟速度和大小</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (id &gt; <span class=\"number\">-1</span> &amp;&amp; id &lt; diskList.Count)</div><div class=\"line\">            &#123;</div><div class=\"line\">                diskList[id].GetComponent&lt;Rigidbody&gt;().velocity = Vector3.zero;</div><div class=\"line\">                diskList[id].transform.localScale = <span class=\"keyword\">template</span>.transform.localScale;</div><div class=\"line\">                diskList[id].SetActive(<span class=\"literal\">false</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> DFactory : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> GameObject disk;   <span class=\"comment\">// 预设</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        DiskFactory.getInstance().<span class=\"keyword\">template</span> = disk;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UserInterface-cs\"><a href=\"#UserInterface-cs\" class=\"headerlink\" title=\"UserInterface.cs\"></a><strong>UserInterface.cs</strong></h2><p><img src=\"ui.png\" alt=\"\"><br>发射飞碟时，通过UI中的emitDisk()到BaseCode中的emitDisk，其调用model中的prepareToEmitDisk从而改变emitEnable的值，使得FixedUpdated判断是否发射飞碟而调用emitDisk。</p>\n<p>子弹射击的思路：当用户点击鼠标时，从摄像机到鼠标创建一条射线，射线的方向即是子弹发射的方向，子弹采用刚体组件，因此发射子弹只需要给子弹施加一个力。子弹对象只有一个，下一次发射子弹时，必须改变子弹的位置（虽然有了刚体组件不建议修改transform，但也没有其它方法改变子弹位置了吧）。为了不让子弹继承上一次发射的速度，必须将子弹的速度归零重置。</p>\n<p>子弹的击中判断：采用射线而不是物理引擎，因为物理引擎在高速物体碰撞时经常不能百分百检测得到。</p>\n<p>显示的思路：得分和回合直接通过查询接口获得。倒计时显示前通过查询接口判断是否正在倒计时，如果是，那么再通过查询接口获得倒计时时间。如果回合发生改变，则显示新的回合，直到用户按下空格。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;                    <span class=\"comment\">// 发射飞碟时，通过UI中的emitDisk()到BaseCode中的emitDisk，其调用model中的prepareToEmitDisk</span></div><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine.UI;                 <span class=\"comment\">// 从而改变emitEnable的值，使FixedUpdated判断是否发射飞碟而调用emitDisk</span></div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> UserInterface : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> Text mainText;   <span class=\"comment\">// 显示倒计时、新回合</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Text scoreText;</div><div class=\"line\">    <span class=\"keyword\">public</span> Text roundText;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> round;</div><div class=\"line\">    <span class=\"keyword\">public</span> GameObject bullet;</div><div class=\"line\">    <span class=\"keyword\">public</span> ParticleSystem explosion;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> fireRate = <span class=\"number\">.25</span>f;       <span class=\"comment\">// 开枪间隔</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">500f</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> nextFireTime;</div><div class=\"line\">    <span class=\"keyword\">private</span> IUserInterface userInt;     <span class=\"comment\">// 用户接口</span></div><div class=\"line\">    <span class=\"keyword\">private</span> IQueryStatus queryInt;      <span class=\"comment\">// 查询接口</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        bullet = GameObject.Instantiate(bullet) as GameObject;</div><div class=\"line\">        explosion = GameObject.Instantiate(explosion) as ParticleSystem;</div><div class=\"line\">        userInt = SceneController.getInstance() as IUserInterface;</div><div class=\"line\">        queryInt = SceneController.getInstance() as IQueryStatus;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (queryInt.isCounting())      <span class=\"comment\">// 显示倒计时</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            mainText.text = ((<span class=\"keyword\">int</span>)queryInt.getEmitTime()).ToString();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Input.GetKeyDown(<span class=\"string\">\"space\"</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                userInt.emitDisk();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (queryInt.isShooting())     <span class=\"comment\">// 射击开始，隐藏主提示</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                mainText.text = <span class=\"string\">\"\"</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (queryInt.isShooting() &amp;&amp; Input.GetMouseButtonDown(<span class=\"number\">0</span>) &amp;&amp; Time.time &gt; nextFireTime) <span class=\"comment\">// 发射子弹</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                nextFireTime = Time.time + fireRate;</div><div class=\"line\">                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</div><div class=\"line\">                bullet.GetComponent&lt;Rigidbody&gt;().velocity = Vector3.zero;       <span class=\"comment\">// 子弹刚体速度重置</span></div><div class=\"line\">                bullet.transform.position = transform.position;                 <span class=\"comment\">// 子弹从摄像机位置射出</span></div><div class=\"line\">                bullet.GetComponent&lt;Rigidbody&gt;().AddForce(ray.direction * speed, ForceMode.Impulse);</div><div class=\"line\"></div><div class=\"line\">                RaycastHit hit;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Physics.Raycast(ray, out hit) &amp;&amp; hit.collider.gameObject.tag == <span class=\"string\">\"Disk\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    explosion.transform.position = hit.collider.gameObject.transform.position;</div><div class=\"line\">                    explosion.GetComponent&lt;Renderer&gt;().material.color = hit.collider.gameObject.GetComponent&lt;Renderer&gt;().material.color;</div><div class=\"line\">                    explosion.Play();</div><div class=\"line\"></div><div class=\"line\">                    hit.collider.gameObject.SetActive(<span class=\"literal\">false</span>); <span class=\"comment\">// 击中飞碟设置为不活跃，自动调用GameModel中update中的freedisk()回收</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        roundText.text = <span class=\"string\">\"Round: \"</span> + queryInt.getRound().ToString();</div><div class=\"line\">        scoreText.text = <span class=\"string\">\"Score: \"</span> + queryInt.getPoint().ToString();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (round != queryInt.getRound())        <span class=\"comment\">// 如果回合更新，主提示显示新回合</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            round = queryInt.getRound();</div><div class=\"line\">            mainText.text = <span class=\"string\">\"Round \"</span> + round.ToString() + <span class=\"string\">\" !\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h2><p><img src=\"bc.png\" alt=\"\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> interface IUserInterface &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">emitDisk</span><span class=\"params\">()</span></span>; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IQueryStatus</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isCounting</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isShooting</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRound</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPoint</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getEmitTime</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IJudgeEvent</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">nextRound</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPoint</span><span class=\"params\">(<span class=\"keyword\">int</span> point)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> SceneController : System.Object, IQueryStatus, IUserInterface, IJudgeEvent</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SceneController <span class=\"number\">_</span>instance;</div><div class=\"line\">        <span class=\"keyword\">private</span> BaseCode <span class=\"number\">_b</span>aseCode;</div><div class=\"line\">        <span class=\"keyword\">private</span> GameModel <span class=\"number\">_</span>gameModel;</div><div class=\"line\">        <span class=\"keyword\">private</span> Judge <span class=\"number\">_</span>judge;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"number\">_</span>round = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"number\">_</span>point;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SceneController <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">_</span>instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> SceneController();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">emitDisk</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gameModel.prepareToEmitDisk(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGameModel</span><span class=\"params\">(GameModel obj)</span> </span>&#123; <span class=\"number\">_</span>gameModel = obj; &#125;</div><div class=\"line\">        <span class=\"function\">internal GameModel <span class=\"title\">getGameModel</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>gameModel; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJudge</span><span class=\"params\">(Judge obj)</span> </span>&#123; <span class=\"number\">_</span>judge = obj; &#125;</div><div class=\"line\">        <span class=\"function\">internal Judge <span class=\"title\">getJudge</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>judge; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBaseCode</span><span class=\"params\">(BaseCode obj)</span> </span>&#123; <span class=\"number\">_b</span>aseCode = obj; &#125;</div><div class=\"line\">        <span class=\"function\">internal BaseCode <span class=\"title\">getBaseCode</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_b</span>aseCode; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isCounting</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>gameModel.isCounting(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isShooting</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>gameModel.isShooting(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRound</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>round; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPoint</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>point; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getEmitTime</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)<span class=\"number\">_</span>gameModel.timeToEmit + <span class=\"number\">1</span>; &#125; <span class=\"comment\">// 用于显示倒计时</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPoint</span><span class=\"params\">(<span class=\"keyword\">int</span> point)</span> </span>&#123; <span class=\"number\">_</span>point = point; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nextRound</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>point = <span class=\"number\">0</span>; <span class=\"number\">_b</span>aseCode.loadRoundData(++<span class=\"number\">_</span>round); &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Color color;</div><div class=\"line\">    <span class=\"keyword\">private</span> Vector3 emitPos;</div><div class=\"line\">    <span class=\"keyword\">private</span> Vector3 emitDir;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> speed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        SceneController.getInstance().setBaseCode(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadRoundData</span><span class=\"params\">(<span class=\"keyword\">int</span> round)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (round)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                color = Color.green;</div><div class=\"line\">                emitPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">2.5f</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">-5</span>f);</div><div class=\"line\">                emitDir = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">-24.5</span>f, <span class=\"number\">35.0f</span>, <span class=\"number\">67f</span>);</div><div class=\"line\">                speed = <span class=\"number\">4</span>;</div><div class=\"line\">                SceneController.getInstance().getGameModel().setting(<span class=\"number\">1</span>, color, emitPos, emitDir.normalized, speed, <span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                color = Color.red;</div><div class=\"line\">                emitPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">-2.5</span>f, <span class=\"number\">0.2f</span>, <span class=\"number\">-5</span>f);</div><div class=\"line\">                emitDir = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">24.5f</span>, <span class=\"number\">40.0f</span>, <span class=\"number\">67f</span>);</div><div class=\"line\">                speed = <span class=\"number\">4</span>;</div><div class=\"line\">                SceneController.getInstance().getGameModel().setting(<span class=\"number\">1</span>, color, emitPos, emitDir.normalized, speed, <span class=\"number\">2</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                color = Color.blue;</div><div class=\"line\">                emitPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">-5</span>f);</div><div class=\"line\">                emitDir = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">67</span>);</div><div class=\"line\">                speed = <span class=\"number\">6</span>;</div><div class=\"line\">                SceneController.getInstance().getGameModel().setting(<span class=\"number\">2</span>, color, emitPos, emitDir.normalized, speed, <span class=\"number\">3</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Judge-cs\"><a href=\"#Judge-cs\" class=\"headerlink\" title=\"Judge.cs\"></a><strong>Judge.cs</strong></h2><p><img src=\"j.png\" alt=\"\"><br>游戏规则单独作为一个类，有利于日后修改。这里需要处理的规则无非就两个，得分和失分。另外，得分需要判断是否能晋级下一关。能就调用接口函数nextRound()。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Judge : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> score = <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lose = <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> winNum = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> SceneController scene;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        scene = SceneController.getInstance();</div><div class=\"line\">        scene.setJudge(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        scene.nextRound();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scoreADisk</span><span class=\"params\">()</span>    <span class=\"comment\">// 击中飞碟得分</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        scene.setPoint(scene.getPoint() + score);</div><div class=\"line\">        <span class=\"keyword\">if</span> (scene.getPoint() == winNum*score)</div><div class=\"line\">        &#123;</div><div class=\"line\">            scene.nextRound();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failADisk</span><span class=\"params\">()</span>    <span class=\"comment\">// 掉落飞碟失分</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        scene.setPoint(scene.getPoint() - lose);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"GameModel-cs\"><a href=\"#GameModel-cs\" class=\"headerlink\" title=\"GameModel.cs\"></a><strong>GameModel.cs</strong></h2><p><img src=\"gm.png\" alt=\"\"><br>核心类，主要负责飞碟动作的处理。首先需要倒计时功能，可以通过几个整型变量和布尔变量完成。另外需要飞碟发射功能，通过setting函数保存好飞碟的发射信息，每次倒计时完成后，通过emitDisks获取飞碟对象，并通过发射信息初始化飞碟，再给飞碟一个力就可以发射了。而飞碟的回收在Update里完成，一种是飞碟被击中（飞碟不在场景中）了，需要调用Judge获得分数。另一种是飞碟在场景中，但是掉在地上了，需要调用Judge丢失分数。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameModel : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> countDown = <span class=\"number\">3f</span>;    <span class=\"comment\">// 发射倒计时</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> timeToEmit;        <span class=\"comment\">// 倒计时剩余时间</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> counting;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> shooting;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;GameObject&gt; disks = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();    <span class=\"comment\">// 发射的飞碟对象列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">int</span>&gt; diskIds = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();                <span class=\"comment\">// 发射的飞碟id列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> diskScale;</div><div class=\"line\">    <span class=\"keyword\">private</span> Color diskColor;</div><div class=\"line\">    <span class=\"keyword\">private</span> Vector3 emitPosition;</div><div class=\"line\">    <span class=\"keyword\">private</span> Vector3 emitDirection;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> emitSpeed;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> emitNumber;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> emitEnable;  <span class=\"comment\">// 允许新的发射事件</span></div><div class=\"line\">    <span class=\"keyword\">private</span> SceneController scene;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isCounting</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> counting; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isShooting</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> shooting; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        scene = SceneController.getInstance();</div><div class=\"line\">        scene.setGameModel(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setting</span><span class=\"params\">(<span class=\"keyword\">int</span> scale, Color color, Vector3 emitPos, Vector3 emitDir, <span class=\"keyword\">float</span> speed, <span class=\"keyword\">int</span> num)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        diskScale = scale;</div><div class=\"line\">        diskColor = color;</div><div class=\"line\">        emitPosition = emitPos;</div><div class=\"line\">        emitDirection = emitDir;</div><div class=\"line\">        emitSpeed = speed;</div><div class=\"line\">        emitNumber = num;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareToEmitDisk</span><span class=\"params\">()</span>    <span class=\"comment\">// 准备下一次发射</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!counting &amp;&amp; !shooting)</div><div class=\"line\">        &#123;</div><div class=\"line\">            timeToEmit = countDown;</div><div class=\"line\">            emitEnable = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">emitDisks</span><span class=\"params\">()</span>    <span class=\"comment\">// 发射飞碟</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; emitNumber; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            diskIds.Add(DiskFactory.getInstance().getDisk());</div><div class=\"line\">            disks.Add(DiskFactory.getInstance().getDiskObject(diskIds[i]));</div><div class=\"line\">            disks[i].transform.localScale *= diskScale;</div><div class=\"line\">            disks[i].GetComponent&lt;Renderer&gt;().material.color = diskColor;</div><div class=\"line\">            disks[i].transform.position = <span class=\"keyword\">new</span> Vector3(emitPosition.x, emitPosition.y + i, emitPosition.z);</div><div class=\"line\">            disks[i].SetActive(<span class=\"literal\">true</span>);</div><div class=\"line\">            disks[i].GetComponent&lt;Rigidbody&gt;().AddForce(emitDirection * Random.Range(emitSpeed*<span class=\"number\">5</span>, emitSpeed*<span class=\"number\">10</span>)/<span class=\"number\">10</span>, ForceMode.Impulse);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeADisk</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span>     <span class=\"comment\">// 回收飞碟</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        DiskFactory.getInstance().<span class=\"built_in\">free</span>(diskIds[i]);</div><div class=\"line\">        disks.RemoveAt(i);</div><div class=\"line\">        diskIds.RemoveAt(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (timeToEmit &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            counting = <span class=\"literal\">true</span>;</div><div class=\"line\">            timeToEmit -= Time.deltaTime;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            counting = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (emitEnable)</div><div class=\"line\">            &#123;</div><div class=\"line\">                emitDisks();</div><div class=\"line\">                emitEnable = <span class=\"literal\">false</span>;</div><div class=\"line\">                shooting = <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; disks.Count; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!disks[i].activeInHierarchy)   <span class=\"comment\">// 飞碟不在场景中</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                scene.getJudge().scoreADisk();  <span class=\"comment\">// 得分</span></div><div class=\"line\">                freeADisk(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (disks[i].transform.position.y &lt; <span class=\"number\">0</span>)   <span class=\"comment\">// 飞碟落地</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                scene.getJudge().failADisk();   <span class=\"comment\">// 失分</span></div><div class=\"line\">                freeADisk(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (disks.Count == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            shooting = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a><strong>其他设置</strong></h2><p><img src=\"all.png\" alt=\"\"><br>摄像机参数：<br><img src=\"sxj.png\" alt=\"\"><br>子弹和飞碟预设：<br><img src=\"zd.png\" alt=\"\">  <img src=\"fd.png\" alt=\"\"></p>\n<p>最后，将5个脚本挂载在组摄像机上，将预设拖入相应的脚本中即可。</p>\n","excerpt":"<p>上次写的飞碟游戏确实很丑陋，这次改进一下。游戏分多个回合，每个回合有N个飞碟，玩家按空格后，321倒数3秒，飞碟飞出，点击鼠标，子弹飞出。飞碟落地或被击中，则准备下一次射击。每回合飞碟的大小、颜色、发射位置、发射角度、每次发射的数量可以变化。<br>","more":"</p>\n<h2 id=\"DFactory-cs\"><a href=\"#DFactory-cs\" class=\"headerlink\" title=\"DFactory.cs\"></a><strong>DFactory.cs</strong></h2><p><img src=\"df.png\" alt=\"\"><br>DFactory和SceneController以及BaseCode都定义在自己的命名空间Com.Mygame中。代码中当且仅当请求队列里的所有对象都在被使用（飞碟在场景中活跃）时，才会发生实例化，此时队列会变长；getDisk返回的是可用飞碟在队列里的index，方便移除；free通过index找到飞碟在队列中的位置，并将飞碟设置为不活跃的。由于飞碟使用了刚体组件，回收时需要把速度重置，并且大小可能会被改变，也应该重置。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> DiskFactory : System.Object</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DiskFactory <span class=\"number\">_</span>instance;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;GameObject&gt; diskList;</div><div class=\"line\">        <span class=\"keyword\">public</span> GameObject <span class=\"keyword\">template</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DiskFactory <span class=\"title\">getInstance</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">_</span>instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> DiskFactory();</div><div class=\"line\">                diskList = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getDisk</span><span class=\"params\">()</span>       <span class=\"comment\">// 获取可用飞碟id</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; diskList.Count; ++i)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!diskList[i].activeInHierarchy)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> i;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            diskList.Add(GameObject.Instantiate(<span class=\"keyword\">template</span>) as GameObject);  <span class=\"comment\">// 无空闲飞碟，则实例新的飞碟预设</span></div><div class=\"line\">            <span class=\"keyword\">return</span> diskList.Count - <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GameObject <span class=\"title\">getDiskObject</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span>  <span class=\"comment\">// 获取飞碟对象</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (id &gt; <span class=\"number\">-1</span> &amp;&amp; id &lt; diskList.Count)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> diskList[id];</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> null;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">free</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span>        <span class=\"comment\">// 回收飞碟，重置飞碟速度和大小</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (id &gt; <span class=\"number\">-1</span> &amp;&amp; id &lt; diskList.Count)</div><div class=\"line\">            &#123;</div><div class=\"line\">                diskList[id].GetComponent&lt;Rigidbody&gt;().velocity = Vector3.zero;</div><div class=\"line\">                diskList[id].transform.localScale = <span class=\"keyword\">template</span>.transform.localScale;</div><div class=\"line\">                diskList[id].SetActive(<span class=\"literal\">false</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> DFactory : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> GameObject disk;   <span class=\"comment\">// 预设</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        DiskFactory.getInstance().<span class=\"keyword\">template</span> = disk;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"UserInterface-cs\"><a href=\"#UserInterface-cs\" class=\"headerlink\" title=\"UserInterface.cs\"></a><strong>UserInterface.cs</strong></h2><p><img src=\"ui.png\" alt=\"\"><br>发射飞碟时，通过UI中的emitDisk()到BaseCode中的emitDisk，其调用model中的prepareToEmitDisk从而改变emitEnable的值，使得FixedUpdated判断是否发射飞碟而调用emitDisk。</p>\n<p>子弹射击的思路：当用户点击鼠标时，从摄像机到鼠标创建一条射线，射线的方向即是子弹发射的方向，子弹采用刚体组件，因此发射子弹只需要给子弹施加一个力。子弹对象只有一个，下一次发射子弹时，必须改变子弹的位置（虽然有了刚体组件不建议修改transform，但也没有其它方法改变子弹位置了吧）。为了不让子弹继承上一次发射的速度，必须将子弹的速度归零重置。</p>\n<p>子弹的击中判断：采用射线而不是物理引擎，因为物理引擎在高速物体碰撞时经常不能百分百检测得到。</p>\n<p>显示的思路：得分和回合直接通过查询接口获得。倒计时显示前通过查询接口判断是否正在倒计时，如果是，那么再通过查询接口获得倒计时时间。如果回合发生改变，则显示新的回合，直到用户按下空格。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;                    <span class=\"comment\">// 发射飞碟时，通过UI中的emitDisk()到BaseCode中的emitDisk，其调用model中的prepareToEmitDisk</span></div><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine.UI;                 <span class=\"comment\">// 从而改变emitEnable的值，使FixedUpdated判断是否发射飞碟而调用emitDisk</span></div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> UserInterface : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> Text mainText;   <span class=\"comment\">// 显示倒计时、新回合</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Text scoreText;</div><div class=\"line\">    <span class=\"keyword\">public</span> Text roundText;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> round;</div><div class=\"line\">    <span class=\"keyword\">public</span> GameObject bullet;</div><div class=\"line\">    <span class=\"keyword\">public</span> ParticleSystem explosion;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> fireRate = <span class=\"number\">.25</span>f;       <span class=\"comment\">// 开枪间隔</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">500f</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> nextFireTime;</div><div class=\"line\">    <span class=\"keyword\">private</span> IUserInterface userInt;     <span class=\"comment\">// 用户接口</span></div><div class=\"line\">    <span class=\"keyword\">private</span> IQueryStatus queryInt;      <span class=\"comment\">// 查询接口</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        bullet = GameObject.Instantiate(bullet) as GameObject;</div><div class=\"line\">        explosion = GameObject.Instantiate(explosion) as ParticleSystem;</div><div class=\"line\">        userInt = SceneController.getInstance() as IUserInterface;</div><div class=\"line\">        queryInt = SceneController.getInstance() as IQueryStatus;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (queryInt.isCounting())      <span class=\"comment\">// 显示倒计时</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            mainText.text = ((<span class=\"keyword\">int</span>)queryInt.getEmitTime()).ToString();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (Input.GetKeyDown(<span class=\"string\">\"space\"</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                userInt.emitDisk();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (queryInt.isShooting())     <span class=\"comment\">// 射击开始，隐藏主提示</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                mainText.text = <span class=\"string\">\"\"</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (queryInt.isShooting() &amp;&amp; Input.GetMouseButtonDown(<span class=\"number\">0</span>) &amp;&amp; Time.time &gt; nextFireTime) <span class=\"comment\">// 发射子弹</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                nextFireTime = Time.time + fireRate;</div><div class=\"line\">                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</div><div class=\"line\">                bullet.GetComponent&lt;Rigidbody&gt;().velocity = Vector3.zero;       <span class=\"comment\">// 子弹刚体速度重置</span></div><div class=\"line\">                bullet.transform.position = transform.position;                 <span class=\"comment\">// 子弹从摄像机位置射出</span></div><div class=\"line\">                bullet.GetComponent&lt;Rigidbody&gt;().AddForce(ray.direction * speed, ForceMode.Impulse);</div><div class=\"line\"></div><div class=\"line\">                RaycastHit hit;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Physics.Raycast(ray, out hit) &amp;&amp; hit.collider.gameObject.tag == <span class=\"string\">\"Disk\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    explosion.transform.position = hit.collider.gameObject.transform.position;</div><div class=\"line\">                    explosion.GetComponent&lt;Renderer&gt;().material.color = hit.collider.gameObject.GetComponent&lt;Renderer&gt;().material.color;</div><div class=\"line\">                    explosion.Play();</div><div class=\"line\"></div><div class=\"line\">                    hit.collider.gameObject.SetActive(<span class=\"literal\">false</span>); <span class=\"comment\">// 击中飞碟设置为不活跃，自动调用GameModel中update中的freedisk()回收</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        roundText.text = <span class=\"string\">\"Round: \"</span> + queryInt.getRound().ToString();</div><div class=\"line\">        scoreText.text = <span class=\"string\">\"Score: \"</span> + queryInt.getPoint().ToString();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (round != queryInt.getRound())        <span class=\"comment\">// 如果回合更新，主提示显示新回合</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            round = queryInt.getRound();</div><div class=\"line\">            mainText.text = <span class=\"string\">\"Round \"</span> + round.ToString() + <span class=\"string\">\" !\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h2><p><img src=\"bc.png\" alt=\"\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> interface IUserInterface &#123; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">emitDisk</span><span class=\"params\">()</span></span>; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IQueryStatus</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isCounting</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isShooting</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getRound</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPoint</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getEmitTime</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IJudgeEvent</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">nextRound</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPoint</span><span class=\"params\">(<span class=\"keyword\">int</span> point)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> SceneController : System.Object, IQueryStatus, IUserInterface, IJudgeEvent</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SceneController <span class=\"number\">_</span>instance;</div><div class=\"line\">        <span class=\"keyword\">private</span> BaseCode <span class=\"number\">_b</span>aseCode;</div><div class=\"line\">        <span class=\"keyword\">private</span> GameModel <span class=\"number\">_</span>gameModel;</div><div class=\"line\">        <span class=\"keyword\">private</span> Judge <span class=\"number\">_</span>judge;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"number\">_</span>round = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"number\">_</span>point;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SceneController <span class=\"title\">getInstance</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">_</span>instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> SceneController();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">emitDisk</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gameModel.prepareToEmitDisk(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGameModel</span><span class=\"params\">(GameModel obj)</span> </span>&#123; <span class=\"number\">_</span>gameModel = obj; &#125;</div><div class=\"line\">        <span class=\"function\">internal GameModel <span class=\"title\">getGameModel</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>gameModel; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJudge</span><span class=\"params\">(Judge obj)</span> </span>&#123; <span class=\"number\">_</span>judge = obj; &#125;</div><div class=\"line\">        <span class=\"function\">internal Judge <span class=\"title\">getJudge</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>judge; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBaseCode</span><span class=\"params\">(BaseCode obj)</span> </span>&#123; <span class=\"number\">_b</span>aseCode = obj; &#125;</div><div class=\"line\">        <span class=\"function\">internal BaseCode <span class=\"title\">getBaseCode</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_b</span>aseCode; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isCounting</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>gameModel.isCounting(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isShooting</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>gameModel.isShooting(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRound</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>round; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPoint</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>point; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getEmitTime</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)<span class=\"number\">_</span>gameModel.timeToEmit + <span class=\"number\">1</span>; &#125; <span class=\"comment\">// 用于显示倒计时</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPoint</span><span class=\"params\">(<span class=\"keyword\">int</span> point)</span> </span>&#123; <span class=\"number\">_</span>point = point; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nextRound</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>point = <span class=\"number\">0</span>; <span class=\"number\">_b</span>aseCode.loadRoundData(++<span class=\"number\">_</span>round); &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Color color;</div><div class=\"line\">    <span class=\"keyword\">private</span> Vector3 emitPos;</div><div class=\"line\">    <span class=\"keyword\">private</span> Vector3 emitDir;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> speed;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        SceneController.getInstance().setBaseCode(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadRoundData</span><span class=\"params\">(<span class=\"keyword\">int</span> round)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (round)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">                color = Color.green;</div><div class=\"line\">                emitPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">2.5f</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">-5</span>f);</div><div class=\"line\">                emitDir = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">-24.5</span>f, <span class=\"number\">35.0f</span>, <span class=\"number\">67f</span>);</div><div class=\"line\">                speed = <span class=\"number\">4</span>;</div><div class=\"line\">                SceneController.getInstance().getGameModel().setting(<span class=\"number\">1</span>, color, emitPos, emitDir.normalized, speed, <span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">                color = Color.red;</div><div class=\"line\">                emitPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">-2.5</span>f, <span class=\"number\">0.2f</span>, <span class=\"number\">-5</span>f);</div><div class=\"line\">                emitDir = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">24.5f</span>, <span class=\"number\">40.0f</span>, <span class=\"number\">67f</span>);</div><div class=\"line\">                speed = <span class=\"number\">4</span>;</div><div class=\"line\">                SceneController.getInstance().getGameModel().setting(<span class=\"number\">1</span>, color, emitPos, emitDir.normalized, speed, <span class=\"number\">2</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                color = Color.blue;</div><div class=\"line\">                emitPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0.2f</span>, <span class=\"number\">-5</span>f);</div><div class=\"line\">                emitDir = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">67</span>);</div><div class=\"line\">                speed = <span class=\"number\">6</span>;</div><div class=\"line\">                SceneController.getInstance().getGameModel().setting(<span class=\"number\">2</span>, color, emitPos, emitDir.normalized, speed, <span class=\"number\">3</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Judge-cs\"><a href=\"#Judge-cs\" class=\"headerlink\" title=\"Judge.cs\"></a><strong>Judge.cs</strong></h2><p><img src=\"j.png\" alt=\"\"><br>游戏规则单独作为一个类，有利于日后修改。这里需要处理的规则无非就两个，得分和失分。另外，得分需要判断是否能晋级下一关。能就调用接口函数nextRound()。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Judge : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> score = <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lose = <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> winNum = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> SceneController scene;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        scene = SceneController.getInstance();</div><div class=\"line\">        scene.setJudge(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        scene.nextRound();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scoreADisk</span><span class=\"params\">()</span>    <span class=\"comment\">// 击中飞碟得分</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        scene.setPoint(scene.getPoint() + score);</div><div class=\"line\">        <span class=\"keyword\">if</span> (scene.getPoint() == winNum*score)</div><div class=\"line\">        &#123;</div><div class=\"line\">            scene.nextRound();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">failADisk</span><span class=\"params\">()</span>    <span class=\"comment\">// 掉落飞碟失分</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        scene.setPoint(scene.getPoint() - lose);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"GameModel-cs\"><a href=\"#GameModel-cs\" class=\"headerlink\" title=\"GameModel.cs\"></a><strong>GameModel.cs</strong></h2><p><img src=\"gm.png\" alt=\"\"><br>核心类，主要负责飞碟动作的处理。首先需要倒计时功能，可以通过几个整型变量和布尔变量完成。另外需要飞碟发射功能，通过setting函数保存好飞碟的发射信息，每次倒计时完成后，通过emitDisks获取飞碟对象，并通过发射信息初始化飞碟，再给飞碟一个力就可以发射了。而飞碟的回收在Update里完成，一种是飞碟被击中（飞碟不在场景中）了，需要调用Judge获得分数。另一种是飞碟在场景中，但是掉在地上了，需要调用Judge丢失分数。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameModel : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> countDown = <span class=\"number\">3f</span>;    <span class=\"comment\">// 发射倒计时</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> timeToEmit;        <span class=\"comment\">// 倒计时剩余时间</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> counting;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> shooting;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;GameObject&gt; disks = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();    <span class=\"comment\">// 发射的飞碟对象列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;<span class=\"keyword\">int</span>&gt; diskIds = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();                <span class=\"comment\">// 发射的飞碟id列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> diskScale;</div><div class=\"line\">    <span class=\"keyword\">private</span> Color diskColor;</div><div class=\"line\">    <span class=\"keyword\">private</span> Vector3 emitPosition;</div><div class=\"line\">    <span class=\"keyword\">private</span> Vector3 emitDirection;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> emitSpeed;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> emitNumber;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> emitEnable;  <span class=\"comment\">// 允许新的发射事件</span></div><div class=\"line\">    <span class=\"keyword\">private</span> SceneController scene;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isCounting</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> counting; &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isShooting</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> shooting; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Awake</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        scene = SceneController.getInstance();</div><div class=\"line\">        scene.setGameModel(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setting</span><span class=\"params\">(<span class=\"keyword\">int</span> scale, Color color, Vector3 emitPos, Vector3 emitDir, <span class=\"keyword\">float</span> speed, <span class=\"keyword\">int</span> num)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        diskScale = scale;</div><div class=\"line\">        diskColor = color;</div><div class=\"line\">        emitPosition = emitPos;</div><div class=\"line\">        emitDirection = emitDir;</div><div class=\"line\">        emitSpeed = speed;</div><div class=\"line\">        emitNumber = num;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareToEmitDisk</span><span class=\"params\">()</span>    <span class=\"comment\">// 准备下一次发射</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!counting &amp;&amp; !shooting)</div><div class=\"line\">        &#123;</div><div class=\"line\">            timeToEmit = countDown;</div><div class=\"line\">            emitEnable = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">emitDisks</span><span class=\"params\">()</span>    <span class=\"comment\">// 发射飞碟</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; emitNumber; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            diskIds.Add(DiskFactory.getInstance().getDisk());</div><div class=\"line\">            disks.Add(DiskFactory.getInstance().getDiskObject(diskIds[i]));</div><div class=\"line\">            disks[i].transform.localScale *= diskScale;</div><div class=\"line\">            disks[i].GetComponent&lt;Renderer&gt;().material.color = diskColor;</div><div class=\"line\">            disks[i].transform.position = <span class=\"keyword\">new</span> Vector3(emitPosition.x, emitPosition.y + i, emitPosition.z);</div><div class=\"line\">            disks[i].SetActive(<span class=\"literal\">true</span>);</div><div class=\"line\">            disks[i].GetComponent&lt;Rigidbody&gt;().AddForce(emitDirection * Random.Range(emitSpeed*<span class=\"number\">5</span>, emitSpeed*<span class=\"number\">10</span>)/<span class=\"number\">10</span>, ForceMode.Impulse);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeADisk</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span>     <span class=\"comment\">// 回收飞碟</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        DiskFactory.getInstance().<span class=\"built_in\">free</span>(diskIds[i]);</div><div class=\"line\">        disks.RemoveAt(i);</div><div class=\"line\">        diskIds.RemoveAt(i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FixedUpdate</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (timeToEmit &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            counting = <span class=\"literal\">true</span>;</div><div class=\"line\">            timeToEmit -= Time.deltaTime;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            counting = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (emitEnable)</div><div class=\"line\">            &#123;</div><div class=\"line\">                emitDisks();</div><div class=\"line\">                emitEnable = <span class=\"literal\">false</span>;</div><div class=\"line\">                shooting = <span class=\"literal\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; disks.Count; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!disks[i].activeInHierarchy)   <span class=\"comment\">// 飞碟不在场景中</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                scene.getJudge().scoreADisk();  <span class=\"comment\">// 得分</span></div><div class=\"line\">                freeADisk(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (disks[i].transform.position.y &lt; <span class=\"number\">0</span>)   <span class=\"comment\">// 飞碟落地</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                scene.getJudge().failADisk();   <span class=\"comment\">// 失分</span></div><div class=\"line\">                freeADisk(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (disks.Count == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            shooting = <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"其他设置\"><a href=\"#其他设置\" class=\"headerlink\" title=\"其他设置\"></a><strong>其他设置</strong></h2><p><img src=\"all.png\" alt=\"\"><br>摄像机参数：<br><img src=\"sxj.png\" alt=\"\"><br>子弹和飞碟预设：<br><img src=\"zd.png\" alt=\"\">  <img src=\"fd.png\" alt=\"\"></p>\n<p>最后，将5个脚本挂载在组摄像机上，将预设拖入相应的脚本中即可。</p>"},{"title":"排序算法(一)","toc":true,"date":"2016-07-24T10:53:03.000Z","_content":"下面介绍经典排序算法中的五种：选择排序、插入排序、二分查找、快速排序、归并排序。\n<!--more-->\n## **选择排序**\n\n每次找出最小的数的下标，再将这个数与未排序部分的第一个数交换：\n``` cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        cin >> n;\n        int a[n], min = n-1, end = 0, temp;\n        for (int i = 0; i < n; ++i) cin >> a[i];\n        if (n == 1) {\n\t\t    cout << a[0] << endl;\n\t\t} else {\n        \tfor (int i = 0; i < n-1; ++i) {\n      \t        for (int j = n-1; j >= end; --j) {\n                    if (a[j] <= a[min]) min = j;\n                }\n                temp = a[min], a[min] = a[end], a[end] = temp;\n                end++;\n                for (int k = 0; k < n-1; ++k) cout << a[k] << \" \";\n                cout << a[n-1] << endl;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n## **插入排序**\n\n插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，是一种稳定的排序方法。\n``` cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n\tint n;\n\tcin >> n;\n\tint a[n];\n\tfor (int i = 0; i < n; ++i) cin >> a[i];\n\n\tfor (int i = 0; i < n; ++i) {\n\t\tfor (int j = 0; j < i; ++j) {\n\t\t\tif (a[i] < a[j]) {\n\t\t\t\tint b[n] = {0};\n\t\t\t\tfor (int k = j, l = 0; k < n; ++k) \n\t\t\t\t    if (a[k] != a[i]) b[l++] = a[k];\n\t\t\t\ta[j] = a[i];\n\t\t\t\tfor (int k = j+1, l = 0; k < n; ++k, ++l) a[k] = b[l];\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < n-1; ++i) cout << a[i] << ' ';\n\t\t\t\tcout << a[n-1] << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n} \n```\n\n## **二分查找**\n\n``` cpp\nerrr_code binary_search(List<int> list, int target, int position) {\n    int data;\n    int bottom = 0, top = list.size()-1;\n    while (bottom < top) {\n        int mid = (top+bottom)/2;\n        list.retreve(mid, data);\n        if (data < target) bottom = mid+1;\n        else top = mid;\n    }\n    if (top < bottom) return not_present;\n    position = bottom;\n    list.retreieve(bottom, data);\n    if (data == target) return success;\n    return not_present;\n}\n```\n\n## **快速排序**\n\n快速排序算法刚开始时比较难理解，一段时间后理解也就不难了。直接上代码：\n``` cpp\nvoid quicksort(int *a, int n) {\n    int i = 0, j = n-1, key = a[0];\n    if (n > 1) {       // 确保数组长度至少为2 \n        while (i < j) {\n            for (; j > i; j--) {   // 从j找个比key小的放在i然后i++ \n                if (a[j] < key) {\n                    a[i++] = a[j];\n                    break;\n                }\n            } \n            for (; i < j; i++) {    // 从i找个比key大的放在j然后j-- \n                if (a[i] > key) {\n                    a[j--] = a[i];\n                    break;\n                }\n            } \n        }\n        a[i] = key;\n        quicksort(a, i);    // 对a[i]前的数排序 \n        quicksort(a+i+1, n-i-1);      // 对a[i]后这n-1-i个数排序 \n    }\n}\n```\n\n## **归并排序**\n\n归并排序使用链表的方法，首先，divide_from函数将链表从中间分为两部分，利用递归将这两部分排好序，再用merge函数合并，所有这些过程在recursive_merge_sort中实现：\n\n``` cpp\ntemplate <class Record>\nvoid Sortable_list<Record> :: merge_sort( ) {\n\trecursive_merge_sort(head);\n}\n\ntemplate <class Record>\nvoid Sortable list<Record>::recursive_merge_sort(Node<Record> * &sublist) {\n\tif (sublist != NULL && sublist->next != NULL) {  // 淇濊瘉鏈変袱涓厓绱?\n\t    Node<Record> *secondhalf = divide_from(sublist);\n\t    recursive_merge_sort(sublist);\n\t    recursive_merge_sort(secondhalf);\n\t    sublist = merge(sublist, secondhalf);\n\t}\n}\n\ntemplate <class Record>\nNode<Record> *Sortable_list<Record>::divide_from(Node<Record> *sublist) {\n\tNode<Record> *pos, *midpoint, *secondhalf;\n\tif ((midpoint = sublist) == NULL) return NULL;\n\tpos = midpoint->next;\n\twhile (pos != NULL) {\n\t    pos = pos->next;\n\t    if (pos != NULL) midpoint = midpoint->next,  pos = pos->next;\n\t}\n\tsecondhalf = midpoint->next;   midpoint->next = NULL;\n\treturn secondhalf;\n}\n\ntemplate <class Record>\nNode<Record> *Sortable_list<Record>::merge(Node<Record> *first, Node<Record> *second) {\t       \n    Node<Record> *last_sorted, combined;\n\t last_sorted = &combined;\n\t while (first != NULL && second != NULL) {\n\t    if (first->entry <= second->entry) {\n\t        last_sorted->next = first;\n\t        last_sorted = first;   first = first->next;\n\t    } else {\n\t\t     last_sorted->next = second;\n\t        last_sorted = second;    second = second->next;\n\t    }\n\t  }\n\t if (first == NULL) last_sorted->next = second;\n\t else last_sorted->next = first;\n\t return combined.next;\n}\n```","source":"_posts/排序1.md","raw":"---\ntitle: 排序算法(一)\ntoc: true\ndate: 2016-07-24 18:53:03\ntags:\n- C/C++\n- 排序\n- 递归\ncategories: \n- algorithm\n- Data Structure\n---\n下面介绍经典排序算法中的五种：选择排序、插入排序、二分查找、快速排序、归并排序。\n<!--more-->\n## **选择排序**\n\n每次找出最小的数的下标，再将这个数与未排序部分的第一个数交换：\n``` cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        cin >> n;\n        int a[n], min = n-1, end = 0, temp;\n        for (int i = 0; i < n; ++i) cin >> a[i];\n        if (n == 1) {\n\t\t    cout << a[0] << endl;\n\t\t} else {\n        \tfor (int i = 0; i < n-1; ++i) {\n      \t        for (int j = n-1; j >= end; --j) {\n                    if (a[j] <= a[min]) min = j;\n                }\n                temp = a[min], a[min] = a[end], a[end] = temp;\n                end++;\n                for (int k = 0; k < n-1; ++k) cout << a[k] << \" \";\n                cout << a[n-1] << endl;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n## **插入排序**\n\n插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，是一种稳定的排序方法。\n``` cpp\n#include<iostream>\nusing namespace std;\n\nint main() {\n\tint n;\n\tcin >> n;\n\tint a[n];\n\tfor (int i = 0; i < n; ++i) cin >> a[i];\n\n\tfor (int i = 0; i < n; ++i) {\n\t\tfor (int j = 0; j < i; ++j) {\n\t\t\tif (a[i] < a[j]) {\n\t\t\t\tint b[n] = {0};\n\t\t\t\tfor (int k = j, l = 0; k < n; ++k) \n\t\t\t\t    if (a[k] != a[i]) b[l++] = a[k];\n\t\t\t\ta[j] = a[i];\n\t\t\t\tfor (int k = j+1, l = 0; k < n; ++k, ++l) a[k] = b[l];\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < n-1; ++i) cout << a[i] << ' ';\n\t\t\t\tcout << a[n-1] << endl;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n} \n```\n\n## **二分查找**\n\n``` cpp\nerrr_code binary_search(List<int> list, int target, int position) {\n    int data;\n    int bottom = 0, top = list.size()-1;\n    while (bottom < top) {\n        int mid = (top+bottom)/2;\n        list.retreve(mid, data);\n        if (data < target) bottom = mid+1;\n        else top = mid;\n    }\n    if (top < bottom) return not_present;\n    position = bottom;\n    list.retreieve(bottom, data);\n    if (data == target) return success;\n    return not_present;\n}\n```\n\n## **快速排序**\n\n快速排序算法刚开始时比较难理解，一段时间后理解也就不难了。直接上代码：\n``` cpp\nvoid quicksort(int *a, int n) {\n    int i = 0, j = n-1, key = a[0];\n    if (n > 1) {       // 确保数组长度至少为2 \n        while (i < j) {\n            for (; j > i; j--) {   // 从j找个比key小的放在i然后i++ \n                if (a[j] < key) {\n                    a[i++] = a[j];\n                    break;\n                }\n            } \n            for (; i < j; i++) {    // 从i找个比key大的放在j然后j-- \n                if (a[i] > key) {\n                    a[j--] = a[i];\n                    break;\n                }\n            } \n        }\n        a[i] = key;\n        quicksort(a, i);    // 对a[i]前的数排序 \n        quicksort(a+i+1, n-i-1);      // 对a[i]后这n-1-i个数排序 \n    }\n}\n```\n\n## **归并排序**\n\n归并排序使用链表的方法，首先，divide_from函数将链表从中间分为两部分，利用递归将这两部分排好序，再用merge函数合并，所有这些过程在recursive_merge_sort中实现：\n\n``` cpp\ntemplate <class Record>\nvoid Sortable_list<Record> :: merge_sort( ) {\n\trecursive_merge_sort(head);\n}\n\ntemplate <class Record>\nvoid Sortable list<Record>::recursive_merge_sort(Node<Record> * &sublist) {\n\tif (sublist != NULL && sublist->next != NULL) {  // 淇濊瘉鏈変袱涓厓绱?\n\t    Node<Record> *secondhalf = divide_from(sublist);\n\t    recursive_merge_sort(sublist);\n\t    recursive_merge_sort(secondhalf);\n\t    sublist = merge(sublist, secondhalf);\n\t}\n}\n\ntemplate <class Record>\nNode<Record> *Sortable_list<Record>::divide_from(Node<Record> *sublist) {\n\tNode<Record> *pos, *midpoint, *secondhalf;\n\tif ((midpoint = sublist) == NULL) return NULL;\n\tpos = midpoint->next;\n\twhile (pos != NULL) {\n\t    pos = pos->next;\n\t    if (pos != NULL) midpoint = midpoint->next,  pos = pos->next;\n\t}\n\tsecondhalf = midpoint->next;   midpoint->next = NULL;\n\treturn secondhalf;\n}\n\ntemplate <class Record>\nNode<Record> *Sortable_list<Record>::merge(Node<Record> *first, Node<Record> *second) {\t       \n    Node<Record> *last_sorted, combined;\n\t last_sorted = &combined;\n\t while (first != NULL && second != NULL) {\n\t    if (first->entry <= second->entry) {\n\t        last_sorted->next = first;\n\t        last_sorted = first;   first = first->next;\n\t    } else {\n\t\t     last_sorted->next = second;\n\t        last_sorted = second;    second = second->next;\n\t    }\n\t  }\n\t if (first == NULL) last_sorted->next = second;\n\t else last_sorted->next = first;\n\t return combined.next;\n}\n```","slug":"排序1","published":1,"updated":"2016-07-25T05:53:07.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzpy0015gobkirv4ajuu","content":"<p>下面介绍经典排序算法中的五种：选择排序、插入排序、二分查找、快速排序、归并排序。<br><a id=\"more\"></a></p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a><strong>选择排序</strong></h2><p>每次找出最小的数的下标，再将这个数与未排序部分的第一个数交换：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</div><div class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n;</div><div class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">        <span class=\"keyword\">int</span> a[n], min = n<span class=\"number\">-1</span>, end = <span class=\"number\">0</span>, temp;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">cin</span> &gt;&gt; a[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t    <span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; ++i) &#123;</div><div class=\"line\">      \t        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n<span class=\"number\">-1</span>; j &gt;= end; --j) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (a[j] &lt;= a[min]) min = j;</div><div class=\"line\">                &#125;</div><div class=\"line\">                temp = a[min], a[min] = a[end], a[end] = temp;</div><div class=\"line\">                end++;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n<span class=\"number\">-1</span>; ++k) <span class=\"built_in\">cout</span> &lt;&lt; a[k] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; a[n<span class=\"number\">-1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a><strong>插入排序</strong></h2><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，是一种稳定的排序方法。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a[n];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">cin</span> &gt;&gt; a[i];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; ++j) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[i] &lt; a[j]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> b[n] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j, l = <span class=\"number\">0</span>; k &lt; n; ++k) </div><div class=\"line\">\t\t\t\t    <span class=\"keyword\">if</span> (a[k] != a[i]) b[l++] = a[k];</div><div class=\"line\">\t\t\t\ta[j] = a[i];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j+<span class=\"number\">1</span>, l = <span class=\"number\">0</span>; k &lt; n; ++k, ++l) a[k] = b[l];</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; ++i) <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; a[n<span class=\"number\">-1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a><strong>二分查找</strong></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">errr_code <span class=\"title\">binary_search</span><span class=\"params\">(List&lt;<span class=\"keyword\">int</span>&gt; <span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> data;</div><div class=\"line\">    <span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>, top = <span class=\"built_in\">list</span>.size()<span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (bottom &lt; top) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> mid = (top+bottom)/<span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"built_in\">list</span>.retreve(mid, data);</div><div class=\"line\">        <span class=\"keyword\">if</span> (data &lt; target) bottom = mid+<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> top = mid;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (top &lt; bottom) <span class=\"keyword\">return</span> not_present;</div><div class=\"line\">    position = bottom;</div><div class=\"line\">    <span class=\"built_in\">list</span>.retreieve(bottom, data);</div><div class=\"line\">    <span class=\"keyword\">if</span> (data == target) <span class=\"keyword\">return</span> success;</div><div class=\"line\">    <span class=\"keyword\">return</span> not_present;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a><strong>快速排序</strong></h2><p>快速排序算法刚开始时比较难理解，一段时间后理解也就不难了。直接上代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quicksort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = n<span class=\"number\">-1</span>, key = a[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>) &#123;       <span class=\"comment\">// 确保数组长度至少为2 </span></div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (; j &gt; i; j--) &#123;   <span class=\"comment\">// 从j找个比key小的放在i然后i++ </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (a[j] &lt; key) &#123;</div><div class=\"line\">                    a[i++] = a[j];</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; </div><div class=\"line\">            <span class=\"keyword\">for</span> (; i &lt; j; i++) &#123;    <span class=\"comment\">// 从i找个比key大的放在j然后j-- </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (a[i] &gt; key) &#123;</div><div class=\"line\">                    a[j--] = a[i];</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; </div><div class=\"line\">        &#125;</div><div class=\"line\">        a[i] = key;</div><div class=\"line\">        quicksort(a, i);    <span class=\"comment\">// 对a[i]前的数排序 </span></div><div class=\"line\">        quicksort(a+i+<span class=\"number\">1</span>, n-i<span class=\"number\">-1</span>);      <span class=\"comment\">// 对a[i]后这n-1-i个数排序 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a><strong>归并排序</strong></h2><p>归并排序使用链表的方法，首先，divide_from函数将链表从中间分为两部分，利用递归将这两部分排好序，再用merge函数合并，所有这些过程在recursive_merge_sort中实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Record&gt;</div><div class=\"line\"><span class=\"keyword\">void</span> Sortable_list&lt;Record&gt; :: merge_sort( ) &#123;</div><div class=\"line\">\trecursive_merge_sort(head);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Record&gt;</div><div class=\"line\"><span class=\"keyword\">void</span> Sortable <span class=\"built_in\">list</span>&lt;Record&gt;::recursive_merge_sort(Node&lt;Record&gt; * &amp;sublist) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sublist != <span class=\"literal\">NULL</span> &amp;&amp; sublist-&gt;next != <span class=\"literal\">NULL</span>) &#123;  <span class=\"comment\">// 淇濊瘉鏈変袱涓厓绱?</span></div><div class=\"line\">\t    Node&lt;Record&gt; *secondhalf = divide_from(sublist);</div><div class=\"line\">\t    recursive_merge_sort(sublist);</div><div class=\"line\">\t    recursive_merge_sort(secondhalf);</div><div class=\"line\">\t    sublist = merge(sublist, secondhalf);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Record&gt;</div><div class=\"line\">Node&lt;Record&gt; *Sortable_list&lt;Record&gt;::divide_from(Node&lt;Record&gt; *sublist) &#123;</div><div class=\"line\">\tNode&lt;Record&gt; *pos, *midpoint, *secondhalf;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((midpoint = sublist) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tpos = midpoint-&gt;next;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (pos != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t    pos = pos-&gt;next;</div><div class=\"line\">\t    <span class=\"keyword\">if</span> (pos != <span class=\"literal\">NULL</span>) midpoint = midpoint-&gt;next,  pos = pos-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsecondhalf = midpoint-&gt;next;   midpoint-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> secondhalf;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Record&gt;</div><div class=\"line\">Node&lt;Record&gt; *Sortable_list&lt;Record&gt;::merge(Node&lt;Record&gt; *first, Node&lt;Record&gt; *second) &#123;\t       </div><div class=\"line\">    Node&lt;Record&gt; *last_sorted, combined;</div><div class=\"line\">\t last_sorted = &amp;combined;</div><div class=\"line\">\t <span class=\"keyword\">while</span> (first != <span class=\"literal\">NULL</span> &amp;&amp; second != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t    <span class=\"keyword\">if</span> (first-&gt;entry &lt;= second-&gt;entry) &#123;</div><div class=\"line\">\t        last_sorted-&gt;next = first;</div><div class=\"line\">\t        last_sorted = first;   first = first-&gt;next;</div><div class=\"line\">\t    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t     last_sorted-&gt;next = second;</div><div class=\"line\">\t        last_sorted = second;    second = second-&gt;next;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t  &#125;</div><div class=\"line\">\t <span class=\"keyword\">if</span> (first == <span class=\"literal\">NULL</span>) last_sorted-&gt;next = second;</div><div class=\"line\">\t <span class=\"keyword\">else</span> last_sorted-&gt;next = first;</div><div class=\"line\">\t <span class=\"keyword\">return</span> combined.next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>下面介绍经典排序算法中的五种：选择排序、插入排序、二分查找、快速排序、归并排序。<br>","more":"</p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a><strong>选择排序</strong></h2><p>每次找出最小的数的下标，再将这个数与未排序部分的第一个数交换：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t;</div><div class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; t;</div><div class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n;</div><div class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">        <span class=\"keyword\">int</span> a[n], min = n<span class=\"number\">-1</span>, end = <span class=\"number\">0</span>, temp;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">cin</span> &gt;&gt; a[i];</div><div class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t    <span class=\"built_in\">cout</span> &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; ++i) &#123;</div><div class=\"line\">      \t        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = n<span class=\"number\">-1</span>; j &gt;= end; --j) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (a[j] &lt;= a[min]) min = j;</div><div class=\"line\">                &#125;</div><div class=\"line\">                temp = a[min], a[min] = a[end], a[end] = temp;</div><div class=\"line\">                end++;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n<span class=\"number\">-1</span>; ++k) <span class=\"built_in\">cout</span> &lt;&lt; a[k] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; a[n<span class=\"number\">-1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a><strong>插入排序</strong></h2><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，是一种稳定的排序方法。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t<span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">\t<span class=\"keyword\">int</span> a[n];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">cin</span> &gt;&gt; a[i];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; ++j) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a[i] &lt; a[j]) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> b[n] = &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j, l = <span class=\"number\">0</span>; k &lt; n; ++k) </div><div class=\"line\">\t\t\t\t    <span class=\"keyword\">if</span> (a[k] != a[i]) b[l++] = a[k];</div><div class=\"line\">\t\t\t\ta[j] = a[i];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = j+<span class=\"number\">1</span>, l = <span class=\"number\">0</span>; k &lt; n; ++k, ++l) a[k] = b[l];</div><div class=\"line\">\t\t\t\t</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; ++i) <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">' '</span>;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; a[n<span class=\"number\">-1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a><strong>二分查找</strong></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">errr_code <span class=\"title\">binary_search</span><span class=\"params\">(List&lt;<span class=\"keyword\">int</span>&gt; <span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> data;</div><div class=\"line\">    <span class=\"keyword\">int</span> bottom = <span class=\"number\">0</span>, top = <span class=\"built_in\">list</span>.size()<span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (bottom &lt; top) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> mid = (top+bottom)/<span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"built_in\">list</span>.retreve(mid, data);</div><div class=\"line\">        <span class=\"keyword\">if</span> (data &lt; target) bottom = mid+<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span> top = mid;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (top &lt; bottom) <span class=\"keyword\">return</span> not_present;</div><div class=\"line\">    position = bottom;</div><div class=\"line\">    <span class=\"built_in\">list</span>.retreieve(bottom, data);</div><div class=\"line\">    <span class=\"keyword\">if</span> (data == target) <span class=\"keyword\">return</span> success;</div><div class=\"line\">    <span class=\"keyword\">return</span> not_present;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a><strong>快速排序</strong></h2><p>快速排序算法刚开始时比较难理解，一段时间后理解也就不难了。直接上代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quicksort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = n<span class=\"number\">-1</span>, key = a[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>) &#123;       <span class=\"comment\">// 确保数组长度至少为2 </span></div><div class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (; j &gt; i; j--) &#123;   <span class=\"comment\">// 从j找个比key小的放在i然后i++ </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (a[j] &lt; key) &#123;</div><div class=\"line\">                    a[i++] = a[j];</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; </div><div class=\"line\">            <span class=\"keyword\">for</span> (; i &lt; j; i++) &#123;    <span class=\"comment\">// 从i找个比key大的放在j然后j-- </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (a[i] &gt; key) &#123;</div><div class=\"line\">                    a[j--] = a[i];</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; </div><div class=\"line\">        &#125;</div><div class=\"line\">        a[i] = key;</div><div class=\"line\">        quicksort(a, i);    <span class=\"comment\">// 对a[i]前的数排序 </span></div><div class=\"line\">        quicksort(a+i+<span class=\"number\">1</span>, n-i<span class=\"number\">-1</span>);      <span class=\"comment\">// 对a[i]后这n-1-i个数排序 </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a><strong>归并排序</strong></h2><p>归并排序使用链表的方法，首先，divide_from函数将链表从中间分为两部分，利用递归将这两部分排好序，再用merge函数合并，所有这些过程在recursive_merge_sort中实现：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Record&gt;</div><div class=\"line\"><span class=\"keyword\">void</span> Sortable_list&lt;Record&gt; :: merge_sort( ) &#123;</div><div class=\"line\">\trecursive_merge_sort(head);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Record&gt;</div><div class=\"line\"><span class=\"keyword\">void</span> Sortable <span class=\"built_in\">list</span>&lt;Record&gt;::recursive_merge_sort(Node&lt;Record&gt; * &amp;sublist) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (sublist != <span class=\"literal\">NULL</span> &amp;&amp; sublist-&gt;next != <span class=\"literal\">NULL</span>) &#123;  <span class=\"comment\">// 淇濊瘉鏈変袱涓厓绱?</span></div><div class=\"line\">\t    Node&lt;Record&gt; *secondhalf = divide_from(sublist);</div><div class=\"line\">\t    recursive_merge_sort(sublist);</div><div class=\"line\">\t    recursive_merge_sort(secondhalf);</div><div class=\"line\">\t    sublist = merge(sublist, secondhalf);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Record&gt;</div><div class=\"line\">Node&lt;Record&gt; *Sortable_list&lt;Record&gt;::divide_from(Node&lt;Record&gt; *sublist) &#123;</div><div class=\"line\">\tNode&lt;Record&gt; *pos, *midpoint, *secondhalf;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((midpoint = sublist) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">\tpos = midpoint-&gt;next;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (pos != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t    pos = pos-&gt;next;</div><div class=\"line\">\t    <span class=\"keyword\">if</span> (pos != <span class=\"literal\">NULL</span>) midpoint = midpoint-&gt;next,  pos = pos-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsecondhalf = midpoint-&gt;next;   midpoint-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> secondhalf;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> Record&gt;</div><div class=\"line\">Node&lt;Record&gt; *Sortable_list&lt;Record&gt;::merge(Node&lt;Record&gt; *first, Node&lt;Record&gt; *second) &#123;\t       </div><div class=\"line\">    Node&lt;Record&gt; *last_sorted, combined;</div><div class=\"line\">\t last_sorted = &amp;combined;</div><div class=\"line\">\t <span class=\"keyword\">while</span> (first != <span class=\"literal\">NULL</span> &amp;&amp; second != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t    <span class=\"keyword\">if</span> (first-&gt;entry &lt;= second-&gt;entry) &#123;</div><div class=\"line\">\t        last_sorted-&gt;next = first;</div><div class=\"line\">\t        last_sorted = first;   first = first-&gt;next;</div><div class=\"line\">\t    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t     last_sorted-&gt;next = second;</div><div class=\"line\">\t        last_sorted = second;    second = second-&gt;next;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t  &#125;</div><div class=\"line\">\t <span class=\"keyword\">if</span> (first == <span class=\"literal\">NULL</span>) last_sorted-&gt;next = second;</div><div class=\"line\">\t <span class=\"keyword\">else</span> last_sorted-&gt;next = first;</div><div class=\"line\">\t <span class=\"keyword\">return</span> combined.next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"无向图问题","toc":true,"date":"2016-07-25T10:18:52.000Z","_content":"下面关于无向图的两个景点问题：连通块数目问题以及最大流问题。\n<!--more-->\n\n## **连通块**\n\n使用递归方法，对于每个顶点，若有路可走，则递归走下去并标记：\n``` java\nvoid search(int cur, int (*map)[100], int n, int *visited) {\n    visited[cur] = 1;\n    for (int i = 0; i < n; ++i) {\n        if (map[cur][i] == 1 && visited[i] == 0)\n        search(i, map, n, visited);\n    }\n}\n\nint find(int (*map)[100], int n) {\n    int *visited = new int[100];\n    int ans = 0;\n    for (int i = 0; i < 100; ++i) visited[i] = 0;\n    for (int i = 0; i < n; ++i) {\n        if (visited[i] == 0) {\n            search(i, map, n, visited);\n            ans++;\n        }\n    }\n    return ans;\n}\n```\n\n## **最大流**\n\n事实上这个问题比较简单，a通向b有个最大流，a通过c再到b也有个最大流，a到c和c到b的之间的最小流即是a通过c到b的最大流：\n\n``` java\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n\nint min(int a, int b) {\n    return a > b ? b : a;\n}\n\nint find(int (*graph)[100], int size, int start, int end) {\n    for (int k = 0; k < size; k++)\n        for (int i = 0; i < size; i++)\n            for (int j = 0; j < size; j++)\n                graph[i][j] = max(graph[i][j], min(graph[i][k], graph[k][j]));\n    return graph[start][end];\n}\n```","source":"_posts/无向图.md","raw":"---\ntitle: 无向图问题\ntoc: true\ndate: 2016-07-25 18:18:52\ntags:\n- C/C++\n- 递归\ncategories:\n- algorithm\n- Data Structure\n---\n下面关于无向图的两个景点问题：连通块数目问题以及最大流问题。\n<!--more-->\n\n## **连通块**\n\n使用递归方法，对于每个顶点，若有路可走，则递归走下去并标记：\n``` java\nvoid search(int cur, int (*map)[100], int n, int *visited) {\n    visited[cur] = 1;\n    for (int i = 0; i < n; ++i) {\n        if (map[cur][i] == 1 && visited[i] == 0)\n        search(i, map, n, visited);\n    }\n}\n\nint find(int (*map)[100], int n) {\n    int *visited = new int[100];\n    int ans = 0;\n    for (int i = 0; i < 100; ++i) visited[i] = 0;\n    for (int i = 0; i < n; ++i) {\n        if (visited[i] == 0) {\n            search(i, map, n, visited);\n            ans++;\n        }\n    }\n    return ans;\n}\n```\n\n## **最大流**\n\n事实上这个问题比较简单，a通向b有个最大流，a通过c再到b也有个最大流，a到c和c到b的之间的最小流即是a通过c到b的最大流：\n\n``` java\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n\nint min(int a, int b) {\n    return a > b ? b : a;\n}\n\nint find(int (*graph)[100], int size, int start, int end) {\n    for (int k = 0; k < size; k++)\n        for (int i = 0; i < size; i++)\n            for (int j = 0; j < size; j++)\n                graph[i][j] = max(graph[i][j], min(graph[i][k], graph[k][j]));\n    return graph[start][end];\n}\n```","slug":"无向图","published":1,"updated":"2016-07-25T10:25:33.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzqf0019gobk8zf98c4k","content":"<p>下面关于无向图的两个景点问题：连通块数目问题以及最大流问题。<br><a id=\"more\"></a></p>\n<h2 id=\"连通块\"><a href=\"#连通块\" class=\"headerlink\" title=\"连通块\"></a><strong>连通块</strong></h2><p>使用递归方法，对于每个顶点，若有路可走，则递归走下去并标记：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> cur, <span class=\"keyword\">int</span> (*map)</span>[100], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> *visited) </span>&#123;</div><div class=\"line\">    visited[cur] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (map[cur][i] == <span class=\"number\">1</span> &amp;&amp; visited[i] == <span class=\"number\">0</span>)</div><div class=\"line\">        search(i, map, n, visited);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> (*map)</span>[100], <span class=\"keyword\">int</span> n) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *visited = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; ++i) visited[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (visited[i] == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            search(i, map, n, visited);</div><div class=\"line\">            ans++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"最大流\"><a href=\"#最大流\" class=\"headerlink\" title=\"最大流\"></a><strong>最大流</strong></h2><p>事实上这个问题比较简单，a通向b有个最大流，a通过c再到b也有个最大流，a到c和c到b的之间的最小流即是a通过c到b的最大流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? b : a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> (*graph)</span>[100], <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; size; k++)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; size; j++)</div><div class=\"line\">                graph[i][j] = max(graph[i][j], min(graph[i][k], graph[k][j]));</div><div class=\"line\">    <span class=\"keyword\">return</span> graph[start][end];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>下面关于无向图的两个景点问题：连通块数目问题以及最大流问题。<br>","more":"</p>\n<h2 id=\"连通块\"><a href=\"#连通块\" class=\"headerlink\" title=\"连通块\"></a><strong>连通块</strong></h2><p>使用递归方法，对于每个顶点，若有路可走，则递归走下去并标记：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> cur, <span class=\"keyword\">int</span> (*map)</span>[100], <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> *visited) </span>&#123;</div><div class=\"line\">    visited[cur] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (map[cur][i] == <span class=\"number\">1</span> &amp;&amp; visited[i] == <span class=\"number\">0</span>)</div><div class=\"line\">        search(i, map, n, visited);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> (*map)</span>[100], <span class=\"keyword\">int</span> n) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *visited = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; ++i) visited[i] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (visited[i] == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            search(i, map, n, visited);</div><div class=\"line\">            ans++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"最大流\"><a href=\"#最大流\" class=\"headerlink\" title=\"最大流\"></a><strong>最大流</strong></h2><p>事实上这个问题比较简单，a通向b有个最大流，a通过c再到b也有个最大流，a到c和c到b的之间的最小流即是a通过c到b的最大流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? b : a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> (*graph)</span>[100], <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; size; k++)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; size; j++)</div><div class=\"line\">                graph[i][j] = max(graph[i][j], min(graph[i][k], graph[k][j]));</div><div class=\"line\">    <span class=\"keyword\">return</span> graph[start][end];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"排序算法(二)","toc":true,"date":"2016-07-24T14:13:29.000Z","_content":"下面是关于排序算法实现比较难的两个：堆排序和基排序；另外还介绍一种特殊的排序算法。\n<!--more-->\n## **heapSort**\n\n### **二叉堆的定义**\n\n 堆排序与快速排序，归并排序一样都是时间复杂度为O(N*logN)的几种常见排序方法。\n二叉堆是完全二叉树或者是近似完全二叉树。\n\n二叉堆满足二个特性：\n\n- 父结点的键值总是大于或等于（小于或等于）任何一个子节点的键值。\n\n- 每个结点的左子树和右子树都是一个二叉堆（都是最大堆或最小堆）。\n\n当父结点的键值总是大于或等于任何一个子节点的键值时为最大堆。当父结点的键值总是小于或等于任何一个子节点的键值时为最小堆。下图展示一个最小堆：\n![](a.png)\n\n一般都用数组来表示堆，i结点的父结点下标就为(i – 1) / 2。它的左右子结点下标分别为2 * i + 1和2 * i + 2。如第0个结点左右子结点下标分别为1和2。这里i从0开始算起。\n\n本代码中使用的是最大堆。\n\n### **实现堆排序**\n\n本代码中下标从1开始算 ，这样左右就是2k和2k+1，使用时a[i-1]即可；\n\n需要一个实现最大堆的函数使其父节点大于等于左右节点：\n``` cpp\nvoid max_heap(int* a, int pos, int length) {  // 根、左、右 找出最大值 \n    int l = 2*pos, r = l+1;\n    int max = pos;\n    if (l <= length && a[l-1] > a[pos-1]) max = l;\n    if (r <= length && a[r-1] > a[max-1]) max = r;\n    if (max != pos) {    // 若交换了需要保证max节点处也是最大堆 \n        int temp = a[max-1];\n        a[max-1] = a[pos-1];\n        a[pos-1] = temp;\n        max_heap(a, max, length);\n    }\n}\n```\n\n接着需要建堆，使得从a[0]到a[n/2-1]的所有节点都满足最大堆，剩余节点为叶子节点：\n``` cpp\nvoid build_heap(int* a, int length) {    // 从a]n/2-1]开始到a[0]，其余的为叶子 \n    for (int i = length/2; i >= 1; --i)\n        max_heap(a, i, length);\n}\n```\n\n现在可以写堆排序了：排序前使得数组满足最大堆，这时a[0]是最大值，每次都把a[0]和a[n-1]交换，最大值永远放到后面；交换后需要保持最大堆的要求，递归，完成排序：\n``` cpp\nvoid heap_sort(int* a, int length) {\n    build_heap(a, length);\n    int temp, i, n = length;\n    for (i = n; i > 1; --i) {\n        temp = a[n-1];\n        a[n-1] = a[0];\n        a[0] = temp;\n        n--;\n        max_heap(a, 1, n);\n    }\n}\n```\n\n## **radixSort**\n\n基数排序与其他排序方法都不同，它不需要比较关键字的大小。\n它是根据关键字中各位的值，通过对排序的N个元素进行若干趟“分配”与“收集”来实现排序的。 \n\n我们知道，任何一个阿拉伯数，它的各个位数上的基数都是以0~9来表示的。所以我们不妨把0~9视为10个桶。 \n我们先根据序列的个位数的数字来进行分类，将其分到指定的桶中。例如50，个位数上是0，将这个数存入编号为0的桶中。我们可以按照下面的一组数字做出说明：12、 104、 13、 7、 9\n\n- 按个位数排序是12、13、104、7、9\n- 再根据十位排序104、7、9、12、13\n- 再根据百位排序7、9、12、13、104\n以下是实现代码：\n``` cpp\nvoid RadixSort(int *ArrayToSort, int digit, int n) {\n    for (int k = 1; k <= digit; k++) {   // 低位开始排\n    \n        int *tmpArray = new int[n];     // 排序后的数组\n        int *tmpCountingSortArray = new int[10];    // 10个桶\n        for (int i = 0; i < 10; ++i) tmpCountingSortArray[i] = 0;\n        \n        for (int i = 0; i < n; i++) {   // 取出对应位上的数字并标记 \n            int tmpSplitDigit = ArrayToSort[i]/(int)pow(10, k-1)-(ArrayToSort[i]/(int)pow(10, k))*10;\n            tmpCountingSortArray[tmpSplitDigit] += 1;\n        }\n        for (int m = 1; m < 10; m++)  // 巧妙之处，算出对应下标 \n            tmpCountingSortArray[m] += tmpCountingSortArray[m-1];\n            \n        for (int i = n-1; i >= 0; i--) {     // 核心\n            int tmpSplitDigit = ArrayToSort[i]/(int)pow(10, k-1)-(ArrayToSort[i]/(int)pow(10, k))*10;\n            tmpArray[tmpCountingSortArray[tmpSplitDigit]-1] = ArrayToSort[i];  // 核心\n            tmpCountingSortArray[tmpSplitDigit] -= 1;\n        }\n        \n        for (int p = 0; p < n; p++)\n            ArrayToSort[p] = tmpArray[p];\n    }\n}\n```\n\n## **特殊排序**\n\n在一个庞大的数据系统中，要找出第k大的数，需要高效的算法。一种可行但效率不高的方法是，首先剔除数字序列中重复的数字，然后通过某种排序算法，获得剔除重复数字后的数字序列从大到小排序的数字序列，然后取从大到小排序的数字序列的第k位的数字。从另一个角度，题目中的第k大数字即是不计入数字序列中数字重复出现的部分，对于数字重复出现的情况，应该认为该数字只出现一次。\n\n这里我们使用char数组，每个a[i]有八位，对于一个确定的数，我们能够把它映射到a[i]中的第j位，把这一位标为1即可。排完序后，8*i+j就是这个数的值，当然这里说的是整数。下面使用这个方法找出某序列中的第k大的数：\n``` c\n#include <stdio.h>\n\nint main() {\n    char a[1250001];   // 负数数组\n    char b[1250001];\n    int n, k, bm, bmi;   // n个数，bmi为8位中的某位\n    int lb = 0, count = 0;  // lb记录正数个数\n\n    for (int i = 0; i < 1250001; ++i)\n        a[i] = b[i] = 0;\n\n    scanf(\"%d%d\", &n, &k);\n    while (n--) {   // 输入数据并排序：将数字所在数组的某下标的8bit数中的一位标为1\n    \tint temp;\n        scanf(\"%d\", &temp);\n        if (temp < 0) {   // 小于0的数储存在a数组中\n            temp = -temp;\n            bm = temp/8;\n            bmi = temp%8;\n            a[bm] |= (1 << bmi);\n        } else {          // 大于0的数储存在b数组中\n            bm = temp/8;\n            bmi = temp%8;\n            if (!(b[bm] & (1 << bmi)))\n                ++lb;\n            b[bm] |= (1 << bmi);\n        }\n    }\n\n    if (k <= lb) {  // 在正数部分中\n        for (int i = 1250000; i >= 0; --i) {\n            for (int j = 7; j >= 0; --j) {\n                if (b[i] & (1 << j))\n                    count++;\n                if (count == k)\n                    break;\n            }\n            if (count == k) {\n                printf(\"%d\\n\", i*8+j);\n                break;\n            }\n        }\n    } else {\n        k -= lb;\n        for (int i = 0; i <= 1250000; ++i) {\n            for (int j = 0; j <= 7; ++j) {\n                if (a[i] & (1 << j))\n                    count++;\n                if (count == k)\n                    break;\n            }\n            if (count == k) {\n                printf(\"%d\\n\", -i*8-j);\n                break;\n            }\n        }\n    }\n}\n```","source":"_posts/排序2.md","raw":"---\ntitle: 排序算法(二)\ntoc: true\ndate: 2016-07-24 22:13:29\ntags:\n- C/C++\n- 递归\n- 排序\ncategories:\n- algorithm\n- Data Structure\n---\n下面是关于排序算法实现比较难的两个：堆排序和基排序；另外还介绍一种特殊的排序算法。\n<!--more-->\n## **heapSort**\n\n### **二叉堆的定义**\n\n 堆排序与快速排序，归并排序一样都是时间复杂度为O(N*logN)的几种常见排序方法。\n二叉堆是完全二叉树或者是近似完全二叉树。\n\n二叉堆满足二个特性：\n\n- 父结点的键值总是大于或等于（小于或等于）任何一个子节点的键值。\n\n- 每个结点的左子树和右子树都是一个二叉堆（都是最大堆或最小堆）。\n\n当父结点的键值总是大于或等于任何一个子节点的键值时为最大堆。当父结点的键值总是小于或等于任何一个子节点的键值时为最小堆。下图展示一个最小堆：\n![](a.png)\n\n一般都用数组来表示堆，i结点的父结点下标就为(i – 1) / 2。它的左右子结点下标分别为2 * i + 1和2 * i + 2。如第0个结点左右子结点下标分别为1和2。这里i从0开始算起。\n\n本代码中使用的是最大堆。\n\n### **实现堆排序**\n\n本代码中下标从1开始算 ，这样左右就是2k和2k+1，使用时a[i-1]即可；\n\n需要一个实现最大堆的函数使其父节点大于等于左右节点：\n``` cpp\nvoid max_heap(int* a, int pos, int length) {  // 根、左、右 找出最大值 \n    int l = 2*pos, r = l+1;\n    int max = pos;\n    if (l <= length && a[l-1] > a[pos-1]) max = l;\n    if (r <= length && a[r-1] > a[max-1]) max = r;\n    if (max != pos) {    // 若交换了需要保证max节点处也是最大堆 \n        int temp = a[max-1];\n        a[max-1] = a[pos-1];\n        a[pos-1] = temp;\n        max_heap(a, max, length);\n    }\n}\n```\n\n接着需要建堆，使得从a[0]到a[n/2-1]的所有节点都满足最大堆，剩余节点为叶子节点：\n``` cpp\nvoid build_heap(int* a, int length) {    // 从a]n/2-1]开始到a[0]，其余的为叶子 \n    for (int i = length/2; i >= 1; --i)\n        max_heap(a, i, length);\n}\n```\n\n现在可以写堆排序了：排序前使得数组满足最大堆，这时a[0]是最大值，每次都把a[0]和a[n-1]交换，最大值永远放到后面；交换后需要保持最大堆的要求，递归，完成排序：\n``` cpp\nvoid heap_sort(int* a, int length) {\n    build_heap(a, length);\n    int temp, i, n = length;\n    for (i = n; i > 1; --i) {\n        temp = a[n-1];\n        a[n-1] = a[0];\n        a[0] = temp;\n        n--;\n        max_heap(a, 1, n);\n    }\n}\n```\n\n## **radixSort**\n\n基数排序与其他排序方法都不同，它不需要比较关键字的大小。\n它是根据关键字中各位的值，通过对排序的N个元素进行若干趟“分配”与“收集”来实现排序的。 \n\n我们知道，任何一个阿拉伯数，它的各个位数上的基数都是以0~9来表示的。所以我们不妨把0~9视为10个桶。 \n我们先根据序列的个位数的数字来进行分类，将其分到指定的桶中。例如50，个位数上是0，将这个数存入编号为0的桶中。我们可以按照下面的一组数字做出说明：12、 104、 13、 7、 9\n\n- 按个位数排序是12、13、104、7、9\n- 再根据十位排序104、7、9、12、13\n- 再根据百位排序7、9、12、13、104\n以下是实现代码：\n``` cpp\nvoid RadixSort(int *ArrayToSort, int digit, int n) {\n    for (int k = 1; k <= digit; k++) {   // 低位开始排\n    \n        int *tmpArray = new int[n];     // 排序后的数组\n        int *tmpCountingSortArray = new int[10];    // 10个桶\n        for (int i = 0; i < 10; ++i) tmpCountingSortArray[i] = 0;\n        \n        for (int i = 0; i < n; i++) {   // 取出对应位上的数字并标记 \n            int tmpSplitDigit = ArrayToSort[i]/(int)pow(10, k-1)-(ArrayToSort[i]/(int)pow(10, k))*10;\n            tmpCountingSortArray[tmpSplitDigit] += 1;\n        }\n        for (int m = 1; m < 10; m++)  // 巧妙之处，算出对应下标 \n            tmpCountingSortArray[m] += tmpCountingSortArray[m-1];\n            \n        for (int i = n-1; i >= 0; i--) {     // 核心\n            int tmpSplitDigit = ArrayToSort[i]/(int)pow(10, k-1)-(ArrayToSort[i]/(int)pow(10, k))*10;\n            tmpArray[tmpCountingSortArray[tmpSplitDigit]-1] = ArrayToSort[i];  // 核心\n            tmpCountingSortArray[tmpSplitDigit] -= 1;\n        }\n        \n        for (int p = 0; p < n; p++)\n            ArrayToSort[p] = tmpArray[p];\n    }\n}\n```\n\n## **特殊排序**\n\n在一个庞大的数据系统中，要找出第k大的数，需要高效的算法。一种可行但效率不高的方法是，首先剔除数字序列中重复的数字，然后通过某种排序算法，获得剔除重复数字后的数字序列从大到小排序的数字序列，然后取从大到小排序的数字序列的第k位的数字。从另一个角度，题目中的第k大数字即是不计入数字序列中数字重复出现的部分，对于数字重复出现的情况，应该认为该数字只出现一次。\n\n这里我们使用char数组，每个a[i]有八位，对于一个确定的数，我们能够把它映射到a[i]中的第j位，把这一位标为1即可。排完序后，8*i+j就是这个数的值，当然这里说的是整数。下面使用这个方法找出某序列中的第k大的数：\n``` c\n#include <stdio.h>\n\nint main() {\n    char a[1250001];   // 负数数组\n    char b[1250001];\n    int n, k, bm, bmi;   // n个数，bmi为8位中的某位\n    int lb = 0, count = 0;  // lb记录正数个数\n\n    for (int i = 0; i < 1250001; ++i)\n        a[i] = b[i] = 0;\n\n    scanf(\"%d%d\", &n, &k);\n    while (n--) {   // 输入数据并排序：将数字所在数组的某下标的8bit数中的一位标为1\n    \tint temp;\n        scanf(\"%d\", &temp);\n        if (temp < 0) {   // 小于0的数储存在a数组中\n            temp = -temp;\n            bm = temp/8;\n            bmi = temp%8;\n            a[bm] |= (1 << bmi);\n        } else {          // 大于0的数储存在b数组中\n            bm = temp/8;\n            bmi = temp%8;\n            if (!(b[bm] & (1 << bmi)))\n                ++lb;\n            b[bm] |= (1 << bmi);\n        }\n    }\n\n    if (k <= lb) {  // 在正数部分中\n        for (int i = 1250000; i >= 0; --i) {\n            for (int j = 7; j >= 0; --j) {\n                if (b[i] & (1 << j))\n                    count++;\n                if (count == k)\n                    break;\n            }\n            if (count == k) {\n                printf(\"%d\\n\", i*8+j);\n                break;\n            }\n        }\n    } else {\n        k -= lb;\n        for (int i = 0; i <= 1250000; ++i) {\n            for (int j = 0; j <= 7; ++j) {\n                if (a[i] & (1 << j))\n                    count++;\n                if (count == k)\n                    break;\n            }\n            if (count == k) {\n                printf(\"%d\\n\", -i*8-j);\n                break;\n            }\n        }\n    }\n}\n```","slug":"排序2","published":1,"updated":"2016-07-25T05:52:30.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzqu001dgobkkpyyuy4w","content":"<p>下面是关于排序算法实现比较难的两个：堆排序和基排序；另外还介绍一种特殊的排序算法。<br><a id=\"more\"></a></p>\n<h2 id=\"heapSort\"><a href=\"#heapSort\" class=\"headerlink\" title=\"heapSort\"></a><strong>heapSort</strong></h2><h3 id=\"二叉堆的定义\"><a href=\"#二叉堆的定义\" class=\"headerlink\" title=\"二叉堆的定义\"></a><strong>二叉堆的定义</strong></h3><p> 堆排序与快速排序，归并排序一样都是时间复杂度为O(N*logN)的几种常见排序方法。<br>二叉堆是完全二叉树或者是近似完全二叉树。</p>\n<p>二叉堆满足二个特性：</p>\n<ul>\n<li><p>父结点的键值总是大于或等于（小于或等于）任何一个子节点的键值。</p>\n</li>\n<li><p>每个结点的左子树和右子树都是一个二叉堆（都是最大堆或最小堆）。</p>\n</li>\n</ul>\n<p>当父结点的键值总是大于或等于任何一个子节点的键值时为最大堆。当父结点的键值总是小于或等于任何一个子节点的键值时为最小堆。下图展示一个最小堆：<br><img src=\"a.png\" alt=\"\"></p>\n<p>一般都用数组来表示堆，i结点的父结点下标就为(i – 1) / 2。它的左右子结点下标分别为2 <em> i + 1和2 </em> i + 2。如第0个结点左右子结点下标分别为1和2。这里i从0开始算起。</p>\n<p>本代码中使用的是最大堆。</p>\n<h3 id=\"实现堆排序\"><a href=\"#实现堆排序\" class=\"headerlink\" title=\"实现堆排序\"></a><strong>实现堆排序</strong></h3><p>本代码中下标从1开始算 ，这样左右就是2k和2k+1，使用时a[i-1]即可；</p>\n<p>需要一个实现最大堆的函数使其父节点大于等于左右节点：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">max_heap</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> length)</span> </span>&#123;  <span class=\"comment\">// 根、左、右 找出最大值 </span></div><div class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">2</span>*pos, r = l+<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> max = pos;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= length &amp;&amp; a[l<span class=\"number\">-1</span>] &gt; a[pos<span class=\"number\">-1</span>]) max = l;</div><div class=\"line\">    <span class=\"keyword\">if</span> (r &lt;= length &amp;&amp; a[r<span class=\"number\">-1</span>] &gt; a[max<span class=\"number\">-1</span>]) max = r;</div><div class=\"line\">    <span class=\"keyword\">if</span> (max != pos) &#123;    <span class=\"comment\">// 若交换了需要保证max节点处也是最大堆 </span></div><div class=\"line\">        <span class=\"keyword\">int</span> temp = a[max<span class=\"number\">-1</span>];</div><div class=\"line\">        a[max<span class=\"number\">-1</span>] = a[pos<span class=\"number\">-1</span>];</div><div class=\"line\">        a[pos<span class=\"number\">-1</span>] = temp;</div><div class=\"line\">        max_heap(a, max, length);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着需要建堆，使得从a[0]到a[n/2-1]的所有节点都满足最大堆，剩余节点为叶子节点：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build_heap</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span> length)</span> </span>&#123;    <span class=\"comment\">// 从a]n/2-1]开始到a[0]，其余的为叶子 </span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = length/<span class=\"number\">2</span>; i &gt;= <span class=\"number\">1</span>; --i)</div><div class=\"line\">        max_heap(a, i, length);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在可以写堆排序了：排序前使得数组满足最大堆，这时a[0]是最大值，每次都把a[0]和a[n-1]交换，最大值永远放到后面；交换后需要保持最大堆的要求，递归，完成排序：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heap_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span> length)</span> </span>&#123;</div><div class=\"line\">    build_heap(a, length);</div><div class=\"line\">    <span class=\"keyword\">int</span> temp, i, n = length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = n; i &gt; <span class=\"number\">1</span>; --i) &#123;</div><div class=\"line\">        temp = a[n<span class=\"number\">-1</span>];</div><div class=\"line\">        a[n<span class=\"number\">-1</span>] = a[<span class=\"number\">0</span>];</div><div class=\"line\">        a[<span class=\"number\">0</span>] = temp;</div><div class=\"line\">        n--;</div><div class=\"line\">        max_heap(a, <span class=\"number\">1</span>, n);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"radixSort\"><a href=\"#radixSort\" class=\"headerlink\" title=\"radixSort\"></a><strong>radixSort</strong></h2><p>基数排序与其他排序方法都不同，它不需要比较关键字的大小。<br>它是根据关键字中各位的值，通过对排序的N个元素进行若干趟“分配”与“收集”来实现排序的。 </p>\n<p>我们知道，任何一个阿拉伯数，它的各个位数上的基数都是以0~9来表示的。所以我们不妨把0~9视为10个桶。<br>我们先根据序列的个位数的数字来进行分类，将其分到指定的桶中。例如50，个位数上是0，将这个数存入编号为0的桶中。我们可以按照下面的一组数字做出说明：12、 104、 13、 7、 9</p>\n<ul>\n<li>按个位数排序是12、13、104、7、9</li>\n<li>再根据十位排序104、7、9、12、13</li>\n<li>再根据百位排序7、9、12、13、104<br>以下是实现代码：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RadixSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *ArrayToSort, <span class=\"keyword\">int</span> digit, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= digit; k++) &#123;   <span class=\"comment\">// 低位开始排</span></div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">int</span> *tmpArray = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];     <span class=\"comment\">// 排序后的数组</span></div><div class=\"line\">        <span class=\"keyword\">int</span> *tmpCountingSortArray = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];    <span class=\"comment\">// 10个桶</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) tmpCountingSortArray[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;   <span class=\"comment\">// 取出对应位上的数字并标记 </span></div><div class=\"line\">            <span class=\"keyword\">int</span> tmpSplitDigit = ArrayToSort[i]/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k<span class=\"number\">-1</span>)-(ArrayToSort[i]/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k))*<span class=\"number\">10</span>;</div><div class=\"line\">            tmpCountingSortArray[tmpSplitDigit] += <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> m = <span class=\"number\">1</span>; m &lt; <span class=\"number\">10</span>; m++)  <span class=\"comment\">// 巧妙之处，算出对应下标 </span></div><div class=\"line\">            tmpCountingSortArray[m] += tmpCountingSortArray[m<span class=\"number\">-1</span>];</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;     <span class=\"comment\">// 核心</span></div><div class=\"line\">            <span class=\"keyword\">int</span> tmpSplitDigit = ArrayToSort[i]/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k<span class=\"number\">-1</span>)-(ArrayToSort[i]/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k))*<span class=\"number\">10</span>;</div><div class=\"line\">            tmpArray[tmpCountingSortArray[tmpSplitDigit]<span class=\"number\">-1</span>] = ArrayToSort[i];  <span class=\"comment\">// 核心</span></div><div class=\"line\">            tmpCountingSortArray[tmpSplitDigit] -= <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> p = <span class=\"number\">0</span>; p &lt; n; p++)</div><div class=\"line\">            ArrayToSort[p] = tmpArray[p];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"特殊排序\"><a href=\"#特殊排序\" class=\"headerlink\" title=\"特殊排序\"></a><strong>特殊排序</strong></h2><p>在一个庞大的数据系统中，要找出第k大的数，需要高效的算法。一种可行但效率不高的方法是，首先剔除数字序列中重复的数字，然后通过某种排序算法，获得剔除重复数字后的数字序列从大到小排序的数字序列，然后取从大到小排序的数字序列的第k位的数字。从另一个角度，题目中的第k大数字即是不计入数字序列中数字重复出现的部分，对于数字重复出现的情况，应该认为该数字只出现一次。</p>\n<p>这里我们使用char数组，每个a[i]有八位，对于一个确定的数，我们能够把它映射到a[i]中的第j位，把这一位标为1即可。排完序后，8*i+j就是这个数的值，当然这里说的是整数。下面使用这个方法找出某序列中的第k大的数：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> a[<span class=\"number\">1250001</span>];   <span class=\"comment\">// 负数数组</span></div><div class=\"line\">    <span class=\"keyword\">char</span> b[<span class=\"number\">1250001</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> n, k, bm, bmi;   <span class=\"comment\">// n个数，bmi为8位中的某位</span></div><div class=\"line\">    <span class=\"keyword\">int</span> lb = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>;  <span class=\"comment\">// lb记录正数个数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1250001</span>; ++i)</div><div class=\"line\">        a[i] = b[i] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;k);</div><div class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;   <span class=\"comment\">// 输入数据并排序：将数字所在数组的某下标的8bit数中的一位标为1</span></div><div class=\"line\">    \t<span class=\"keyword\">int</span> temp;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;temp);</div><div class=\"line\">        <span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">0</span>) &#123;   <span class=\"comment\">// 小于0的数储存在a数组中</span></div><div class=\"line\">            temp = -temp;</div><div class=\"line\">            bm = temp/<span class=\"number\">8</span>;</div><div class=\"line\">            bmi = temp%<span class=\"number\">8</span>;</div><div class=\"line\">            a[bm] |= (<span class=\"number\">1</span> &lt;&lt; bmi);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;          <span class=\"comment\">// 大于0的数储存在b数组中</span></div><div class=\"line\">            bm = temp/<span class=\"number\">8</span>;</div><div class=\"line\">            bmi = temp%<span class=\"number\">8</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!(b[bm] &amp; (<span class=\"number\">1</span> &lt;&lt; bmi)))</div><div class=\"line\">                ++lb;</div><div class=\"line\">            b[bm] |= (<span class=\"number\">1</span> &lt;&lt; bmi);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (k &lt;= lb) &#123;  <span class=\"comment\">// 在正数部分中</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1250000</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">7</span>; j &gt;= <span class=\"number\">0</span>; --j) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (b[i] &amp; (<span class=\"number\">1</span> &lt;&lt; j))</div><div class=\"line\">                    count++;</div><div class=\"line\">                <span class=\"keyword\">if</span> (count == k)</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (count == k) &#123;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, i*<span class=\"number\">8</span>+j);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        k -= lb;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">1250000</span>; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">7</span>; ++j) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (a[i] &amp; (<span class=\"number\">1</span> &lt;&lt; j))</div><div class=\"line\">                    count++;</div><div class=\"line\">                <span class=\"keyword\">if</span> (count == k)</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (count == k) &#123;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, -i*<span class=\"number\">8</span>-j);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>下面是关于排序算法实现比较难的两个：堆排序和基排序；另外还介绍一种特殊的排序算法。<br>","more":"</p>\n<h2 id=\"heapSort\"><a href=\"#heapSort\" class=\"headerlink\" title=\"heapSort\"></a><strong>heapSort</strong></h2><h3 id=\"二叉堆的定义\"><a href=\"#二叉堆的定义\" class=\"headerlink\" title=\"二叉堆的定义\"></a><strong>二叉堆的定义</strong></h3><p> 堆排序与快速排序，归并排序一样都是时间复杂度为O(N*logN)的几种常见排序方法。<br>二叉堆是完全二叉树或者是近似完全二叉树。</p>\n<p>二叉堆满足二个特性：</p>\n<ul>\n<li><p>父结点的键值总是大于或等于（小于或等于）任何一个子节点的键值。</p>\n</li>\n<li><p>每个结点的左子树和右子树都是一个二叉堆（都是最大堆或最小堆）。</p>\n</li>\n</ul>\n<p>当父结点的键值总是大于或等于任何一个子节点的键值时为最大堆。当父结点的键值总是小于或等于任何一个子节点的键值时为最小堆。下图展示一个最小堆：<br><img src=\"a.png\" alt=\"\"></p>\n<p>一般都用数组来表示堆，i结点的父结点下标就为(i – 1) / 2。它的左右子结点下标分别为2 <em> i + 1和2 </em> i + 2。如第0个结点左右子结点下标分别为1和2。这里i从0开始算起。</p>\n<p>本代码中使用的是最大堆。</p>\n<h3 id=\"实现堆排序\"><a href=\"#实现堆排序\" class=\"headerlink\" title=\"实现堆排序\"></a><strong>实现堆排序</strong></h3><p>本代码中下标从1开始算 ，这样左右就是2k和2k+1，使用时a[i-1]即可；</p>\n<p>需要一个实现最大堆的函数使其父节点大于等于左右节点：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">max_heap</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> length)</span> </span>&#123;  <span class=\"comment\">// 根、左、右 找出最大值 </span></div><div class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">2</span>*pos, r = l+<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> max = pos;</div><div class=\"line\">    <span class=\"keyword\">if</span> (l &lt;= length &amp;&amp; a[l<span class=\"number\">-1</span>] &gt; a[pos<span class=\"number\">-1</span>]) max = l;</div><div class=\"line\">    <span class=\"keyword\">if</span> (r &lt;= length &amp;&amp; a[r<span class=\"number\">-1</span>] &gt; a[max<span class=\"number\">-1</span>]) max = r;</div><div class=\"line\">    <span class=\"keyword\">if</span> (max != pos) &#123;    <span class=\"comment\">// 若交换了需要保证max节点处也是最大堆 </span></div><div class=\"line\">        <span class=\"keyword\">int</span> temp = a[max<span class=\"number\">-1</span>];</div><div class=\"line\">        a[max<span class=\"number\">-1</span>] = a[pos<span class=\"number\">-1</span>];</div><div class=\"line\">        a[pos<span class=\"number\">-1</span>] = temp;</div><div class=\"line\">        max_heap(a, max, length);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着需要建堆，使得从a[0]到a[n/2-1]的所有节点都满足最大堆，剩余节点为叶子节点：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build_heap</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span> length)</span> </span>&#123;    <span class=\"comment\">// 从a]n/2-1]开始到a[0]，其余的为叶子 </span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = length/<span class=\"number\">2</span>; i &gt;= <span class=\"number\">1</span>; --i)</div><div class=\"line\">        max_heap(a, i, length);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在可以写堆排序了：排序前使得数组满足最大堆，这时a[0]是最大值，每次都把a[0]和a[n-1]交换，最大值永远放到后面；交换后需要保持最大堆的要求，递归，完成排序：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">heap_sort</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span> length)</span> </span>&#123;</div><div class=\"line\">    build_heap(a, length);</div><div class=\"line\">    <span class=\"keyword\">int</span> temp, i, n = length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = n; i &gt; <span class=\"number\">1</span>; --i) &#123;</div><div class=\"line\">        temp = a[n<span class=\"number\">-1</span>];</div><div class=\"line\">        a[n<span class=\"number\">-1</span>] = a[<span class=\"number\">0</span>];</div><div class=\"line\">        a[<span class=\"number\">0</span>] = temp;</div><div class=\"line\">        n--;</div><div class=\"line\">        max_heap(a, <span class=\"number\">1</span>, n);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"radixSort\"><a href=\"#radixSort\" class=\"headerlink\" title=\"radixSort\"></a><strong>radixSort</strong></h2><p>基数排序与其他排序方法都不同，它不需要比较关键字的大小。<br>它是根据关键字中各位的值，通过对排序的N个元素进行若干趟“分配”与“收集”来实现排序的。 </p>\n<p>我们知道，任何一个阿拉伯数，它的各个位数上的基数都是以0~9来表示的。所以我们不妨把0~9视为10个桶。<br>我们先根据序列的个位数的数字来进行分类，将其分到指定的桶中。例如50，个位数上是0，将这个数存入编号为0的桶中。我们可以按照下面的一组数字做出说明：12、 104、 13、 7、 9</p>\n<ul>\n<li>按个位数排序是12、13、104、7、9</li>\n<li>再根据十位排序104、7、9、12、13</li>\n<li>再根据百位排序7、9、12、13、104<br>以下是实现代码：<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RadixSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *ArrayToSort, <span class=\"keyword\">int</span> digit, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= digit; k++) &#123;   <span class=\"comment\">// 低位开始排</span></div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">int</span> *tmpArray = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];     <span class=\"comment\">// 排序后的数组</span></div><div class=\"line\">        <span class=\"keyword\">int</span> *tmpCountingSortArray = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];    <span class=\"comment\">// 10个桶</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) tmpCountingSortArray[i] = <span class=\"number\">0</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;   <span class=\"comment\">// 取出对应位上的数字并标记 </span></div><div class=\"line\">            <span class=\"keyword\">int</span> tmpSplitDigit = ArrayToSort[i]/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k<span class=\"number\">-1</span>)-(ArrayToSort[i]/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k))*<span class=\"number\">10</span>;</div><div class=\"line\">            tmpCountingSortArray[tmpSplitDigit] += <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> m = <span class=\"number\">1</span>; m &lt; <span class=\"number\">10</span>; m++)  <span class=\"comment\">// 巧妙之处，算出对应下标 </span></div><div class=\"line\">            tmpCountingSortArray[m] += tmpCountingSortArray[m<span class=\"number\">-1</span>];</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;     <span class=\"comment\">// 核心</span></div><div class=\"line\">            <span class=\"keyword\">int</span> tmpSplitDigit = ArrayToSort[i]/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k<span class=\"number\">-1</span>)-(ArrayToSort[i]/(<span class=\"keyword\">int</span>)<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, k))*<span class=\"number\">10</span>;</div><div class=\"line\">            tmpArray[tmpCountingSortArray[tmpSplitDigit]<span class=\"number\">-1</span>] = ArrayToSort[i];  <span class=\"comment\">// 核心</span></div><div class=\"line\">            tmpCountingSortArray[tmpSplitDigit] -= <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> p = <span class=\"number\">0</span>; p &lt; n; p++)</div><div class=\"line\">            ArrayToSort[p] = tmpArray[p];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"特殊排序\"><a href=\"#特殊排序\" class=\"headerlink\" title=\"特殊排序\"></a><strong>特殊排序</strong></h2><p>在一个庞大的数据系统中，要找出第k大的数，需要高效的算法。一种可行但效率不高的方法是，首先剔除数字序列中重复的数字，然后通过某种排序算法，获得剔除重复数字后的数字序列从大到小排序的数字序列，然后取从大到小排序的数字序列的第k位的数字。从另一个角度，题目中的第k大数字即是不计入数字序列中数字重复出现的部分，对于数字重复出现的情况，应该认为该数字只出现一次。</p>\n<p>这里我们使用char数组，每个a[i]有八位，对于一个确定的数，我们能够把它映射到a[i]中的第j位，把这一位标为1即可。排完序后，8*i+j就是这个数的值，当然这里说的是整数。下面使用这个方法找出某序列中的第k大的数：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> a[<span class=\"number\">1250001</span>];   <span class=\"comment\">// 负数数组</span></div><div class=\"line\">    <span class=\"keyword\">char</span> b[<span class=\"number\">1250001</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> n, k, bm, bmi;   <span class=\"comment\">// n个数，bmi为8位中的某位</span></div><div class=\"line\">    <span class=\"keyword\">int</span> lb = <span class=\"number\">0</span>, count = <span class=\"number\">0</span>;  <span class=\"comment\">// lb记录正数个数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1250001</span>; ++i)</div><div class=\"line\">        a[i] = b[i] = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &amp;n, &amp;k);</div><div class=\"line\">    <span class=\"keyword\">while</span> (n--) &#123;   <span class=\"comment\">// 输入数据并排序：将数字所在数组的某下标的8bit数中的一位标为1</span></div><div class=\"line\">    \t<span class=\"keyword\">int</span> temp;</div><div class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;temp);</div><div class=\"line\">        <span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">0</span>) &#123;   <span class=\"comment\">// 小于0的数储存在a数组中</span></div><div class=\"line\">            temp = -temp;</div><div class=\"line\">            bm = temp/<span class=\"number\">8</span>;</div><div class=\"line\">            bmi = temp%<span class=\"number\">8</span>;</div><div class=\"line\">            a[bm] |= (<span class=\"number\">1</span> &lt;&lt; bmi);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;          <span class=\"comment\">// 大于0的数储存在b数组中</span></div><div class=\"line\">            bm = temp/<span class=\"number\">8</span>;</div><div class=\"line\">            bmi = temp%<span class=\"number\">8</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!(b[bm] &amp; (<span class=\"number\">1</span> &lt;&lt; bmi)))</div><div class=\"line\">                ++lb;</div><div class=\"line\">            b[bm] |= (<span class=\"number\">1</span> &lt;&lt; bmi);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (k &lt;= lb) &#123;  <span class=\"comment\">// 在正数部分中</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1250000</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">7</span>; j &gt;= <span class=\"number\">0</span>; --j) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (b[i] &amp; (<span class=\"number\">1</span> &lt;&lt; j))</div><div class=\"line\">                    count++;</div><div class=\"line\">                <span class=\"keyword\">if</span> (count == k)</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (count == k) &#123;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, i*<span class=\"number\">8</span>+j);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        k -= lb;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">1250000</span>; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">7</span>; ++j) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (a[i] &amp; (<span class=\"number\">1</span> &lt;&lt; j))</div><div class=\"line\">                    count++;</div><div class=\"line\">                <span class=\"keyword\">if</span> (count == k)</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (count == k) &#123;</div><div class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, -i*<span class=\"number\">8</span>-j);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"汇编--选择排序","toc":true,"date":"2016-07-16T08:27:19.000Z","_content":"在学习计算机组成原理的时候，我接触到了汇编语言。刚开始可以说是一头雾水，汇编既麻烦又蛋疼，稍微不小心就出错了。但是，汇编作为一种底层语言，学习汇编能让程序员知道机器在软件层面上的最底层操作。熟悉汇编后我们可以更容易的理解c/c++等高级语言如何在机器上执行，这样我们也可以写出更高性能的代码；此外汇编语言能帮助我们进行深度调试或开发工具，比如native调试器、内存/性能剖析工具等。下面就进行简单的语言介绍，以及用汇编语言写选择排序。\n<!--more-->\n## **简单Hello World**\n### **PCSpim**\n进行汇编语言开发需要用到[PCSpim](http://download.csdn.net/download/hanshurhw/3107751)软件，Spim没有提供编辑器，你可以任选你喜欢的editor编辑文件，本人一般使用sublime text3，简单而功能又强大，文件保存为.asm或.s。下面是界面介绍：\n![界面1](jiemian1.png)\n![界面2](jiemian2.png)\n![界面3](jiemian3.png)\n![界面4](jiemian4.png)\n### **Hello World**\n学习一门语言最开始的就是学习hello world，相信你也是精通各种语言的hello world的程序员哈哈。通过最简单的hello world我们可以了解最基础的汇编语法：\n\n``` java\n.text   # 代码段声明\n.globl main   # globl 指明程序的入口地址main\n\nmain:   # 入口地址main\n    la $a0, str   # 取字符串地址\n    li $v0, 4     # 4 号功能调用，输出字符串\n    syscall       # 系统调用，输出字符串\n    li $v0, 10    # 退出\n    syscall       # 系统调用\n\n.data   # 数据段声明\n    str:     # 变量名称\n      .asciiz \"hello world\\n\"    # 字符串定义\n    memory:    # 变量名称，数据存储结构\n      .word 0xabcde080    # 数据定义，32 位长度\n```\n\nSpim模拟器中是以8 位长度的十六进制数为一个显示表示单位，但存储是以字节为单位，即一个字符为存储单位。字符串存储按字符串顺序存放在内存中（字符从左到右，地址由低到高），当然，保存在内存中是它们的ASCII 码值。\n存储结构分析：关于\"hello world\\n\"，如，[0x10010000]=0x68（‘h’）,[0x10010001]=0x65（‘e’）,十六进制ASCII 码值：20 (sp 空格) ， 0a (LF，换行符\\n)\n![](5.png)\n\n### **System call**\n汇编的系统调用，执行输入输出等操作：\n![](6.png)\n## **选择排序**\n下面实现从内存中读取10个无符号字数并从大到小进行排序，排序结果在屏幕上显示出来。你随机输入10个数，然后输出这10个数从大到小的排序。思路为：先写出正确的c++代码，然后再将代码“翻译”为汇编代码。这样，思路清晰而且不易出错，减少bug产生。\n### **C++代码**\n![](c++.png)\n### **翻译**\n主要分为三部分：先写出接受输入的正确的代码；正确的输出代码；正确的选择排序代码。在三部分都正确的前提下即完成转换，而且debug也比较简单。\n![](7.png)\n![](8.png)\n![](9.png)\n\n下面是完整代码：\n``` java\n.text\n.globl main\nmain:\n    la $t0 a       # t0基地址  t1相当于i  t2判断是否小于10\n    add $t1, $0, $0   # t3为偏移地址，a[i]的地址\n\n    # 循环，输入10个数\n    loop: slti $t2, $t1, 10  \n          beq $t2, $0, exit\n          li $v0 5    # 读整数\n          syscall\n\n          sll $t3 $t1 2\n          add $t3 $t3 $t0\n          sw $v0 ($t3)\n          addi $t1 $t1 1\n          j loop\n\n    # 双重循环，排序                           # for (int i = 0; i < 10; ++i) {\n    exit:                      # 此时t1、t2、t3 无用，t0基地址\n    add $t1, $0, $0            # t1为i， t2为j， t9为max\n    loop1: slti $t3, $t1, 10   # t3、t4为对应的判断， t5显示max和i是否相等\n           beq $t3, 0, exit1   # t5 t6 t7 t8都为临时的，随意更改\n           add $t9 $t1 $0                      #     max = i;\n           addi $t2 $t1 1                      #     j = i + 1\n\n           loop2: slti $t4 $t2 10              #     for (int j = i+1; j < 10; ++j) {\n                  beq $t4, 0, exit2            #\n                  sll $t5 $t9 2                #         if (a[max] < a[j]) {\n                  sll $t6 $t2 2                #\n                  add $t5 $t5 $t0              #\n                  add $t6 $t6 $t0              #\n                  lw $t7 ($t5)   # a[max]      #             max = j;\n                  lw $t8 ($t6)   # a[j]        #\n                  slt $t5 $t7 $t8              #\n                  beq $t5, 1, change           #\n                  bne $t5, 1, nochange         #         }\n                  change:                      #\n                      add $t9 $t2 $0           #\n                      addi $t2 $t2 1           #\n                      j loop2                  #\n                  nochange:                    #\n                      addi $t2 $t2 1           #\n                      j loop2                  #     }\n           exit2:                              #\n\n           bne $t9, $t1, change1               #     if (max != i) {\n           beq $t9, $t1, nochange1             #         int tmp = a[max];\n           change1:                            #         a[max] = a[i];\n               sll $t5 $t9 2                   #         a[i] = tmp;\n               add $t5 $t5 $t0                 #\n               lw $t7 ($t5)   # a[max]         #\n               sll $t6 $t1 2                   #\n               add $t6 $t6 $t0                 #\n               lw $t8 ($t6)   # a[i]           #\n               sw $t7 ($t6)                    #\n               sw $t8 ($t5)                    #\n\n               addi $t1 $t1 1                  #\n               j loop1                         #\n           nochange1:                          #\n               addi $t1 $t1 1                  #     }\n               j loop1                         # }\n\n    # 循环，输出10个数\n    exit1:\n    add $t1 $0 $0               # t0基地址  t1相当于i  t2判断是否小于10\n    loop3: slti $t2, $t1, 10    # t3为偏移地址，a[i]的地址\n          beq $t2, $0, exit3\n          li $v0 1    # 输出整数\n          sll $t3 $t1 2\n          add $t3 $t3 $t0\n          lw $a0 ($t3)\n          syscall\n\n          li $v0 4    # 输出空格符\n          la $a0 bb\n          syscall\n\n          addi $t1 $t1 1\n          j loop3\n    exit3:\n          li $v0 10   # 退出\n          syscall\n\n.data\n    a: .space 40\n    bb: .asciiz \" \"\n\n```\n\n","source":"_posts/汇编.md","raw":"---\ntitle: 汇编--选择排序\ntoc: true\ndate: 2016-07-16 16:27:19\ntags: \n- 汇编\n- 排序\ncategories: 计算机组成原理\n---\n在学习计算机组成原理的时候，我接触到了汇编语言。刚开始可以说是一头雾水，汇编既麻烦又蛋疼，稍微不小心就出错了。但是，汇编作为一种底层语言，学习汇编能让程序员知道机器在软件层面上的最底层操作。熟悉汇编后我们可以更容易的理解c/c++等高级语言如何在机器上执行，这样我们也可以写出更高性能的代码；此外汇编语言能帮助我们进行深度调试或开发工具，比如native调试器、内存/性能剖析工具等。下面就进行简单的语言介绍，以及用汇编语言写选择排序。\n<!--more-->\n## **简单Hello World**\n### **PCSpim**\n进行汇编语言开发需要用到[PCSpim](http://download.csdn.net/download/hanshurhw/3107751)软件，Spim没有提供编辑器，你可以任选你喜欢的editor编辑文件，本人一般使用sublime text3，简单而功能又强大，文件保存为.asm或.s。下面是界面介绍：\n![界面1](jiemian1.png)\n![界面2](jiemian2.png)\n![界面3](jiemian3.png)\n![界面4](jiemian4.png)\n### **Hello World**\n学习一门语言最开始的就是学习hello world，相信你也是精通各种语言的hello world的程序员哈哈。通过最简单的hello world我们可以了解最基础的汇编语法：\n\n``` java\n.text   # 代码段声明\n.globl main   # globl 指明程序的入口地址main\n\nmain:   # 入口地址main\n    la $a0, str   # 取字符串地址\n    li $v0, 4     # 4 号功能调用，输出字符串\n    syscall       # 系统调用，输出字符串\n    li $v0, 10    # 退出\n    syscall       # 系统调用\n\n.data   # 数据段声明\n    str:     # 变量名称\n      .asciiz \"hello world\\n\"    # 字符串定义\n    memory:    # 变量名称，数据存储结构\n      .word 0xabcde080    # 数据定义，32 位长度\n```\n\nSpim模拟器中是以8 位长度的十六进制数为一个显示表示单位，但存储是以字节为单位，即一个字符为存储单位。字符串存储按字符串顺序存放在内存中（字符从左到右，地址由低到高），当然，保存在内存中是它们的ASCII 码值。\n存储结构分析：关于\"hello world\\n\"，如，[0x10010000]=0x68（‘h’）,[0x10010001]=0x65（‘e’）,十六进制ASCII 码值：20 (sp 空格) ， 0a (LF，换行符\\n)\n![](5.png)\n\n### **System call**\n汇编的系统调用，执行输入输出等操作：\n![](6.png)\n## **选择排序**\n下面实现从内存中读取10个无符号字数并从大到小进行排序，排序结果在屏幕上显示出来。你随机输入10个数，然后输出这10个数从大到小的排序。思路为：先写出正确的c++代码，然后再将代码“翻译”为汇编代码。这样，思路清晰而且不易出错，减少bug产生。\n### **C++代码**\n![](c++.png)\n### **翻译**\n主要分为三部分：先写出接受输入的正确的代码；正确的输出代码；正确的选择排序代码。在三部分都正确的前提下即完成转换，而且debug也比较简单。\n![](7.png)\n![](8.png)\n![](9.png)\n\n下面是完整代码：\n``` java\n.text\n.globl main\nmain:\n    la $t0 a       # t0基地址  t1相当于i  t2判断是否小于10\n    add $t1, $0, $0   # t3为偏移地址，a[i]的地址\n\n    # 循环，输入10个数\n    loop: slti $t2, $t1, 10  \n          beq $t2, $0, exit\n          li $v0 5    # 读整数\n          syscall\n\n          sll $t3 $t1 2\n          add $t3 $t3 $t0\n          sw $v0 ($t3)\n          addi $t1 $t1 1\n          j loop\n\n    # 双重循环，排序                           # for (int i = 0; i < 10; ++i) {\n    exit:                      # 此时t1、t2、t3 无用，t0基地址\n    add $t1, $0, $0            # t1为i， t2为j， t9为max\n    loop1: slti $t3, $t1, 10   # t3、t4为对应的判断， t5显示max和i是否相等\n           beq $t3, 0, exit1   # t5 t6 t7 t8都为临时的，随意更改\n           add $t9 $t1 $0                      #     max = i;\n           addi $t2 $t1 1                      #     j = i + 1\n\n           loop2: slti $t4 $t2 10              #     for (int j = i+1; j < 10; ++j) {\n                  beq $t4, 0, exit2            #\n                  sll $t5 $t9 2                #         if (a[max] < a[j]) {\n                  sll $t6 $t2 2                #\n                  add $t5 $t5 $t0              #\n                  add $t6 $t6 $t0              #\n                  lw $t7 ($t5)   # a[max]      #             max = j;\n                  lw $t8 ($t6)   # a[j]        #\n                  slt $t5 $t7 $t8              #\n                  beq $t5, 1, change           #\n                  bne $t5, 1, nochange         #         }\n                  change:                      #\n                      add $t9 $t2 $0           #\n                      addi $t2 $t2 1           #\n                      j loop2                  #\n                  nochange:                    #\n                      addi $t2 $t2 1           #\n                      j loop2                  #     }\n           exit2:                              #\n\n           bne $t9, $t1, change1               #     if (max != i) {\n           beq $t9, $t1, nochange1             #         int tmp = a[max];\n           change1:                            #         a[max] = a[i];\n               sll $t5 $t9 2                   #         a[i] = tmp;\n               add $t5 $t5 $t0                 #\n               lw $t7 ($t5)   # a[max]         #\n               sll $t6 $t1 2                   #\n               add $t6 $t6 $t0                 #\n               lw $t8 ($t6)   # a[i]           #\n               sw $t7 ($t6)                    #\n               sw $t8 ($t5)                    #\n\n               addi $t1 $t1 1                  #\n               j loop1                         #\n           nochange1:                          #\n               addi $t1 $t1 1                  #     }\n               j loop1                         # }\n\n    # 循环，输出10个数\n    exit1:\n    add $t1 $0 $0               # t0基地址  t1相当于i  t2判断是否小于10\n    loop3: slti $t2, $t1, 10    # t3为偏移地址，a[i]的地址\n          beq $t2, $0, exit3\n          li $v0 1    # 输出整数\n          sll $t3 $t1 2\n          add $t3 $t3 $t0\n          lw $a0 ($t3)\n          syscall\n\n          li $v0 4    # 输出空格符\n          la $a0 bb\n          syscall\n\n          addi $t1 $t1 1\n          j loop3\n    exit3:\n          li $v0 10   # 退出\n          syscall\n\n.data\n    a: .space 40\n    bb: .asciiz \" \"\n\n```\n\n","slug":"汇编","published":1,"updated":"2016-07-16T10:21:40.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzr9001hgobkm0b99sct","content":"<p>在学习计算机组成原理的时候，我接触到了汇编语言。刚开始可以说是一头雾水，汇编既麻烦又蛋疼，稍微不小心就出错了。但是，汇编作为一种底层语言，学习汇编能让程序员知道机器在软件层面上的最底层操作。熟悉汇编后我们可以更容易的理解c/c++等高级语言如何在机器上执行，这样我们也可以写出更高性能的代码；此外汇编语言能帮助我们进行深度调试或开发工具，比如native调试器、内存/性能剖析工具等。下面就进行简单的语言介绍，以及用汇编语言写选择排序。<br><a id=\"more\"></a></p>\n<h2 id=\"简单Hello-World\"><a href=\"#简单Hello-World\" class=\"headerlink\" title=\"简单Hello World\"></a><strong>简单Hello World</strong></h2><h3 id=\"PCSpim\"><a href=\"#PCSpim\" class=\"headerlink\" title=\"PCSpim\"></a><strong>PCSpim</strong></h3><p>进行汇编语言开发需要用到<a href=\"http://download.csdn.net/download/hanshurhw/3107751\" target=\"_blank\" rel=\"external\">PCSpim</a>软件，Spim没有提供编辑器，你可以任选你喜欢的editor编辑文件，本人一般使用sublime text3，简单而功能又强大，文件保存为.asm或.s。下面是界面介绍：<br><img src=\"jiemian1.png\" alt=\"界面1\"><br><img src=\"jiemian2.png\" alt=\"界面2\"><br><img src=\"jiemian3.png\" alt=\"界面3\"><br><img src=\"jiemian4.png\" alt=\"界面4\"></p>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a><strong>Hello World</strong></h3><p>学习一门语言最开始的就是学习hello world，相信你也是精通各种语言的hello world的程序员哈哈。通过最简单的hello world我们可以了解最基础的汇编语法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text   # 代码段声明</div><div class=\"line\">.globl main   # globl 指明程序的入口地址main</div><div class=\"line\"></div><div class=\"line\">main:   # 入口地址main</div><div class=\"line\">    la $a0, str   # 取字符串地址</div><div class=\"line\">    li $v0, 4     # 4 号功能调用，输出字符串</div><div class=\"line\">    syscall       # 系统调用，输出字符串</div><div class=\"line\">    li $v0, 10    # 退出</div><div class=\"line\">    syscall       # 系统调用</div><div class=\"line\"></div><div class=\"line\">.data   # 数据段声明</div><div class=\"line\">    str:     # 变量名称</div><div class=\"line\">      .asciiz \"hello world\\n\"    # 字符串定义</div><div class=\"line\">    memory:    # 变量名称，数据存储结构</div><div class=\"line\">      .word 0xabcde080    # 数据定义，32 位长度</div></pre></td></tr></table></figure>\n<p>Spim模拟器中是以8 位长度的十六进制数为一个显示表示单位，但存储是以字节为单位，即一个字符为存储单位。字符串存储按字符串顺序存放在内存中（字符从左到右，地址由低到高），当然，保存在内存中是它们的ASCII 码值。<br>存储结构分析：关于”hello world\\n”，如，[0x10010000]=0x68（‘h’）,[0x10010001]=0x65（‘e’）,十六进制ASCII 码值：20 (sp 空格) ， 0a (LF，换行符\\n)<br><img src=\"5.png\" alt=\"\"></p>\n<h3 id=\"System-call\"><a href=\"#System-call\" class=\"headerlink\" title=\"System call\"></a><strong>System call</strong></h3><p>汇编的系统调用，执行输入输出等操作：<br><img src=\"6.png\" alt=\"\"></p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a><strong>选择排序</strong></h2><p>下面实现从内存中读取10个无符号字数并从大到小进行排序，排序结果在屏幕上显示出来。你随机输入10个数，然后输出这10个数从大到小的排序。思路为：先写出正确的c++代码，然后再将代码“翻译”为汇编代码。这样，思路清晰而且不易出错，减少bug产生。</p>\n<h3 id=\"C-代码\"><a href=\"#C-代码\" class=\"headerlink\" title=\"C++代码\"></a><strong>C++代码</strong></h3><p><img src=\"c++.png\" alt=\"\"></p>\n<h3 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a><strong>翻译</strong></h3><p>主要分为三部分：先写出接受输入的正确的代码；正确的输出代码；正确的选择排序代码。在三部分都正确的前提下即完成转换，而且debug也比较简单。<br><img src=\"7.png\" alt=\"\"><br><img src=\"8.png\" alt=\"\"><br><img src=\"9.png\" alt=\"\"></p>\n<p>下面是完整代码：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text</div><div class=\"line\">.globl main</div><div class=\"line\">main:</div><div class=\"line\">    la $t0 a       # t0基地址  t1相当于i  t2判断是否小于10</div><div class=\"line\">    add $t1, $0, $0   # t3为偏移地址，a[i]的地址</div><div class=\"line\"></div><div class=\"line\">    # 循环，输入10个数</div><div class=\"line\">    loop: slti $t2, $t1, 10  </div><div class=\"line\">          beq $t2, $0, exit</div><div class=\"line\">          li $v0 5    # 读整数</div><div class=\"line\">          syscall</div><div class=\"line\"></div><div class=\"line\">          sll $t3 $t1 2</div><div class=\"line\">          add $t3 $t3 $t0</div><div class=\"line\">          sw $v0 ($t3)</div><div class=\"line\">          addi $t1 $t1 1</div><div class=\"line\">          j loop</div><div class=\"line\"></div><div class=\"line\">    # 双重循环，排序                           # for (int i = 0; i &lt; 10; ++i) &#123;</div><div class=\"line\">    exit:                      # 此时t1、t2、t3 无用，t0基地址</div><div class=\"line\">    add $t1, $0, $0            # t1为i， t2为j， t9为max</div><div class=\"line\">    loop1: slti $t3, $t1, 10   # t3、t4为对应的判断， t5显示max和i是否相等</div><div class=\"line\">           beq $t3, 0, exit1   # t5 t6 t7 t8都为临时的，随意更改</div><div class=\"line\">           add $t9 $t1 $0                      #     max = i;</div><div class=\"line\">           addi $t2 $t1 1                      #     j = i + 1</div><div class=\"line\"></div><div class=\"line\">           loop2: slti $t4 $t2 10              #     for (int j = i+1; j &lt; 10; ++j) &#123;</div><div class=\"line\">                  beq $t4, 0, exit2            #</div><div class=\"line\">                  sll $t5 $t9 2                #         if (a[max] &lt; a[j]) &#123;</div><div class=\"line\">                  sll $t6 $t2 2                #</div><div class=\"line\">                  add $t5 $t5 $t0              #</div><div class=\"line\">                  add $t6 $t6 $t0              #</div><div class=\"line\">                  lw $t7 ($t5)   # a[max]      #             max = j;</div><div class=\"line\">                  lw $t8 ($t6)   # a[j]        #</div><div class=\"line\">                  slt $t5 $t7 $t8              #</div><div class=\"line\">                  beq $t5, 1, change           #</div><div class=\"line\">                  bne $t5, 1, nochange         #         &#125;</div><div class=\"line\">                  change:                      #</div><div class=\"line\">                      add $t9 $t2 $0           #</div><div class=\"line\">                      addi $t2 $t2 1           #</div><div class=\"line\">                      j loop2                  #</div><div class=\"line\">                  nochange:                    #</div><div class=\"line\">                      addi $t2 $t2 1           #</div><div class=\"line\">                      j loop2                  #     &#125;</div><div class=\"line\">           exit2:                              #</div><div class=\"line\"></div><div class=\"line\">           bne $t9, $t1, change1               #     if (max != i) &#123;</div><div class=\"line\">           beq $t9, $t1, nochange1             #         int tmp = a[max];</div><div class=\"line\">           change1:                            #         a[max] = a[i];</div><div class=\"line\">               sll $t5 $t9 2                   #         a[i] = tmp;</div><div class=\"line\">               add $t5 $t5 $t0                 #</div><div class=\"line\">               lw $t7 ($t5)   # a[max]         #</div><div class=\"line\">               sll $t6 $t1 2                   #</div><div class=\"line\">               add $t6 $t6 $t0                 #</div><div class=\"line\">               lw $t8 ($t6)   # a[i]           #</div><div class=\"line\">               sw $t7 ($t6)                    #</div><div class=\"line\">               sw $t8 ($t5)                    #</div><div class=\"line\"></div><div class=\"line\">               addi $t1 $t1 1                  #</div><div class=\"line\">               j loop1                         #</div><div class=\"line\">           nochange1:                          #</div><div class=\"line\">               addi $t1 $t1 1                  #     &#125;</div><div class=\"line\">               j loop1                         # &#125;</div><div class=\"line\"></div><div class=\"line\">    # 循环，输出10个数</div><div class=\"line\">    exit1:</div><div class=\"line\">    add $t1 $0 $0               # t0基地址  t1相当于i  t2判断是否小于10</div><div class=\"line\">    loop3: slti $t2, $t1, 10    # t3为偏移地址，a[i]的地址</div><div class=\"line\">          beq $t2, $0, exit3</div><div class=\"line\">          li $v0 1    # 输出整数</div><div class=\"line\">          sll $t3 $t1 2</div><div class=\"line\">          add $t3 $t3 $t0</div><div class=\"line\">          lw $a0 ($t3)</div><div class=\"line\">          syscall</div><div class=\"line\"></div><div class=\"line\">          li $v0 4    # 输出空格符</div><div class=\"line\">          la $a0 bb</div><div class=\"line\">          syscall</div><div class=\"line\"></div><div class=\"line\">          addi $t1 $t1 1</div><div class=\"line\">          j loop3</div><div class=\"line\">    exit3:</div><div class=\"line\">          li $v0 10   # 退出</div><div class=\"line\">          syscall</div><div class=\"line\"></div><div class=\"line\">.data</div><div class=\"line\">    a: .space 40</div><div class=\"line\">    bb: .asciiz \" \"</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>在学习计算机组成原理的时候，我接触到了汇编语言。刚开始可以说是一头雾水，汇编既麻烦又蛋疼，稍微不小心就出错了。但是，汇编作为一种底层语言，学习汇编能让程序员知道机器在软件层面上的最底层操作。熟悉汇编后我们可以更容易的理解c/c++等高级语言如何在机器上执行，这样我们也可以写出更高性能的代码；此外汇编语言能帮助我们进行深度调试或开发工具，比如native调试器、内存/性能剖析工具等。下面就进行简单的语言介绍，以及用汇编语言写选择排序。<br>","more":"</p>\n<h2 id=\"简单Hello-World\"><a href=\"#简单Hello-World\" class=\"headerlink\" title=\"简单Hello World\"></a><strong>简单Hello World</strong></h2><h3 id=\"PCSpim\"><a href=\"#PCSpim\" class=\"headerlink\" title=\"PCSpim\"></a><strong>PCSpim</strong></h3><p>进行汇编语言开发需要用到<a href=\"http://download.csdn.net/download/hanshurhw/3107751\">PCSpim</a>软件，Spim没有提供编辑器，你可以任选你喜欢的editor编辑文件，本人一般使用sublime text3，简单而功能又强大，文件保存为.asm或.s。下面是界面介绍：<br><img src=\"jiemian1.png\" alt=\"界面1\"><br><img src=\"jiemian2.png\" alt=\"界面2\"><br><img src=\"jiemian3.png\" alt=\"界面3\"><br><img src=\"jiemian4.png\" alt=\"界面4\"></p>\n<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a><strong>Hello World</strong></h3><p>学习一门语言最开始的就是学习hello world，相信你也是精通各种语言的hello world的程序员哈哈。通过最简单的hello world我们可以了解最基础的汇编语法：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text   # 代码段声明</div><div class=\"line\">.globl main   # globl 指明程序的入口地址main</div><div class=\"line\"></div><div class=\"line\">main:   # 入口地址main</div><div class=\"line\">    la $a0, str   # 取字符串地址</div><div class=\"line\">    li $v0, 4     # 4 号功能调用，输出字符串</div><div class=\"line\">    syscall       # 系统调用，输出字符串</div><div class=\"line\">    li $v0, 10    # 退出</div><div class=\"line\">    syscall       # 系统调用</div><div class=\"line\"></div><div class=\"line\">.data   # 数据段声明</div><div class=\"line\">    str:     # 变量名称</div><div class=\"line\">      .asciiz \"hello world\\n\"    # 字符串定义</div><div class=\"line\">    memory:    # 变量名称，数据存储结构</div><div class=\"line\">      .word 0xabcde080    # 数据定义，32 位长度</div></pre></td></tr></table></figure>\n<p>Spim模拟器中是以8 位长度的十六进制数为一个显示表示单位，但存储是以字节为单位，即一个字符为存储单位。字符串存储按字符串顺序存放在内存中（字符从左到右，地址由低到高），当然，保存在内存中是它们的ASCII 码值。<br>存储结构分析：关于”hello world\\n”，如，[0x10010000]=0x68（‘h’）,[0x10010001]=0x65（‘e’）,十六进制ASCII 码值：20 (sp 空格) ， 0a (LF，换行符\\n)<br><img src=\"5.png\" alt=\"\"></p>\n<h3 id=\"System-call\"><a href=\"#System-call\" class=\"headerlink\" title=\"System call\"></a><strong>System call</strong></h3><p>汇编的系统调用，执行输入输出等操作：<br><img src=\"6.png\" alt=\"\"></p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a><strong>选择排序</strong></h2><p>下面实现从内存中读取10个无符号字数并从大到小进行排序，排序结果在屏幕上显示出来。你随机输入10个数，然后输出这10个数从大到小的排序。思路为：先写出正确的c++代码，然后再将代码“翻译”为汇编代码。这样，思路清晰而且不易出错，减少bug产生。</p>\n<h3 id=\"C-代码\"><a href=\"#C-代码\" class=\"headerlink\" title=\"C++代码\"></a><strong>C++代码</strong></h3><p><img src=\"c++.png\" alt=\"\"></p>\n<h3 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a><strong>翻译</strong></h3><p>主要分为三部分：先写出接受输入的正确的代码；正确的输出代码；正确的选择排序代码。在三部分都正确的前提下即完成转换，而且debug也比较简单。<br><img src=\"7.png\" alt=\"\"><br><img src=\"8.png\" alt=\"\"><br><img src=\"9.png\" alt=\"\"></p>\n<p>下面是完整代码：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text</div><div class=\"line\">.globl main</div><div class=\"line\">main:</div><div class=\"line\">    la $t0 a       # t0基地址  t1相当于i  t2判断是否小于10</div><div class=\"line\">    add $t1, $0, $0   # t3为偏移地址，a[i]的地址</div><div class=\"line\"></div><div class=\"line\">    # 循环，输入10个数</div><div class=\"line\">    loop: slti $t2, $t1, 10  </div><div class=\"line\">          beq $t2, $0, exit</div><div class=\"line\">          li $v0 5    # 读整数</div><div class=\"line\">          syscall</div><div class=\"line\"></div><div class=\"line\">          sll $t3 $t1 2</div><div class=\"line\">          add $t3 $t3 $t0</div><div class=\"line\">          sw $v0 ($t3)</div><div class=\"line\">          addi $t1 $t1 1</div><div class=\"line\">          j loop</div><div class=\"line\"></div><div class=\"line\">    # 双重循环，排序                           # for (int i = 0; i &lt; 10; ++i) &#123;</div><div class=\"line\">    exit:                      # 此时t1、t2、t3 无用，t0基地址</div><div class=\"line\">    add $t1, $0, $0            # t1为i， t2为j， t9为max</div><div class=\"line\">    loop1: slti $t3, $t1, 10   # t3、t4为对应的判断， t5显示max和i是否相等</div><div class=\"line\">           beq $t3, 0, exit1   # t5 t6 t7 t8都为临时的，随意更改</div><div class=\"line\">           add $t9 $t1 $0                      #     max = i;</div><div class=\"line\">           addi $t2 $t1 1                      #     j = i + 1</div><div class=\"line\"></div><div class=\"line\">           loop2: slti $t4 $t2 10              #     for (int j = i+1; j &lt; 10; ++j) &#123;</div><div class=\"line\">                  beq $t4, 0, exit2            #</div><div class=\"line\">                  sll $t5 $t9 2                #         if (a[max] &lt; a[j]) &#123;</div><div class=\"line\">                  sll $t6 $t2 2                #</div><div class=\"line\">                  add $t5 $t5 $t0              #</div><div class=\"line\">                  add $t6 $t6 $t0              #</div><div class=\"line\">                  lw $t7 ($t5)   # a[max]      #             max = j;</div><div class=\"line\">                  lw $t8 ($t6)   # a[j]        #</div><div class=\"line\">                  slt $t5 $t7 $t8              #</div><div class=\"line\">                  beq $t5, 1, change           #</div><div class=\"line\">                  bne $t5, 1, nochange         #         &#125;</div><div class=\"line\">                  change:                      #</div><div class=\"line\">                      add $t9 $t2 $0           #</div><div class=\"line\">                      addi $t2 $t2 1           #</div><div class=\"line\">                      j loop2                  #</div><div class=\"line\">                  nochange:                    #</div><div class=\"line\">                      addi $t2 $t2 1           #</div><div class=\"line\">                      j loop2                  #     &#125;</div><div class=\"line\">           exit2:                              #</div><div class=\"line\"></div><div class=\"line\">           bne $t9, $t1, change1               #     if (max != i) &#123;</div><div class=\"line\">           beq $t9, $t1, nochange1             #         int tmp = a[max];</div><div class=\"line\">           change1:                            #         a[max] = a[i];</div><div class=\"line\">               sll $t5 $t9 2                   #         a[i] = tmp;</div><div class=\"line\">               add $t5 $t5 $t0                 #</div><div class=\"line\">               lw $t7 ($t5)   # a[max]         #</div><div class=\"line\">               sll $t6 $t1 2                   #</div><div class=\"line\">               add $t6 $t6 $t0                 #</div><div class=\"line\">               lw $t8 ($t6)   # a[i]           #</div><div class=\"line\">               sw $t7 ($t6)                    #</div><div class=\"line\">               sw $t8 ($t5)                    #</div><div class=\"line\"></div><div class=\"line\">               addi $t1 $t1 1                  #</div><div class=\"line\">               j loop1                         #</div><div class=\"line\">           nochange1:                          #</div><div class=\"line\">               addi $t1 $t1 1                  #     &#125;</div><div class=\"line\">               j loop1                         # &#125;</div><div class=\"line\"></div><div class=\"line\">    # 循环，输出10个数</div><div class=\"line\">    exit1:</div><div class=\"line\">    add $t1 $0 $0               # t0基地址  t1相当于i  t2判断是否小于10</div><div class=\"line\">    loop3: slti $t2, $t1, 10    # t3为偏移地址，a[i]的地址</div><div class=\"line\">          beq $t2, $0, exit3</div><div class=\"line\">          li $v0 1    # 输出整数</div><div class=\"line\">          sll $t3 $t1 2</div><div class=\"line\">          add $t3 $t3 $t0</div><div class=\"line\">          lw $a0 ($t3)</div><div class=\"line\">          syscall</div><div class=\"line\"></div><div class=\"line\">          li $v0 4    # 输出空格符</div><div class=\"line\">          la $a0 bb</div><div class=\"line\">          syscall</div><div class=\"line\"></div><div class=\"line\">          addi $t1 $t1 1</div><div class=\"line\">          j loop3</div><div class=\"line\">    exit3:</div><div class=\"line\">          li $v0 10   # 退出</div><div class=\"line\">          syscall</div><div class=\"line\"></div><div class=\"line\">.data</div><div class=\"line\">    a: .space 40</div><div class=\"line\">    bb: .asciiz \" \"</div></pre></td></tr></table></figure></p>"},{"title":"牧师与魔鬼改进","toc":true,"date":"2016-07-21T11:12:23.000Z","_content":"上一篇已经基本上写完了牧师与魔鬼的小游戏，然而代码还是存在不少缺陷的。最主要的就是小船、牧师以及魔鬼的移动问题，我们可以把移动这一动作抽象化出来，添加到动作工厂中，由工厂类控制小船移动。\n<!--more-->\n\n## **基本概念**\n\n简单工厂模式，MoveToYZAction为组合动作，负责游戏对象的上下船动作，利用IU3dActionCompleted和MoveToAction完成YZ轴上的二段运动。\n![](a.png)\n\n## **修改类的动作**\n\n### **单例类GameSceneController**\n\n- 添加了私有变量moving和message(用来显示输赢信息)\n\n- 添加接口IQueryGameStatus，实现moving和message的查询和设置。\n\n- 去掉了枚举变量state（由moving和message替代）\n- \n### **类GenGameObject**\n\n- 修改枚举依赖\n\n- 修改输赢提示方式为设置message\n\n- 修改动作实现方式为ActionManage，不在Update中实现。\n- \n### **UserInterface**\n\n- 修改枚举依赖，通过IQueryGameStatus查询\n\n- 修改输赢提示方式为显示message\n\n### **人机交互**\n\n小船在移动到对岸过程中，应该组织人机交互，通过UserInterface按钮的隐藏来实现。UserInterface在渲染前会通过IQueryGameStatus查询moving值，moving值为真则不渲染。Moving值在ActionManager中的每个动作完成前会设置成真。\n\n## **完整代码**\n\n### **BaseCode.cs**\n\n![](b.png)\n![](c.png)\n以上所有类都写在Com.Mygame空间中，BaseCode类只初始化介绍界面。\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\nnamespace Com.Mygame\n{\n    //-------------------------SceneController-------------------------------//\n    public interface IUserActions\n    {\n        void priestSOnB();\n        void priestEOnB();\n        void devilSOnB();\n        void devilEOnB();\n        void moveBoat();\n        void offBoatL();\n        void offBoatR();\n        void restart();\n    }\n\n    public interface IQueryGameStatus\n    {\n        bool isMoving();\n        void setMoving(bool state);\n        string isMessage();\n        void setMessage(string message);\n    }\n\n    public class GameSceneController : System.Object, IUserActions, IQueryGameStatus\n    {\n\n        private static GameSceneController _instance;\n        private BaseCode _base_code;\n        private GenGameObject _gen_game_obj;\n        private bool moving = false;\n        private string message = \"\";\n\n        public static GameSceneController GetInstance()\n        {\n            if (null == _instance)\n            {\n                _instance = new GameSceneController();\n            }\n            return _instance;\n        }\n\n        public BaseCode getBaseCode()\n        {\n            return _base_code;\n        }\n\n        internal void setBaseCode(BaseCode bc)\n        {\n            if (null == _base_code)\n            {\n                _base_code = bc;\n            }\n        }\n\n        public GenGameObject getGenGameObject()\n        {\n            return _gen_game_obj;\n        }\n\n        internal void setGenGameObject(GenGameObject ggo)\n        {\n            if (null == _gen_game_obj)\n            {\n                _gen_game_obj = ggo;\n            }\n        }\n\n        public bool isMoving() { return moving; }\n        public void setMoving(bool state) { this.moving = state; }\n        public string isMessage() { return message; }\n        public void setMessage(string message) { this.message = message; }\n\n        public void priestSOnB() { _gen_game_obj.priestStartOnBoat(); }\n        public void priestEOnB() { _gen_game_obj.priestEndOnBoat(); }\n        public void devilSOnB() { _gen_game_obj.devilStartOnBoat(); }\n        public void devilEOnB() { _gen_game_obj.devilEndOnBoat(); }\n        public void moveBoat() { _gen_game_obj.moveBoat(); }\n        public void offBoatL() { _gen_game_obj.getOffTheBoat(0); }\n        public void offBoatR() { _gen_game_obj.getOffTheBoat(1); }\n\n        public void restart()\n        {\n            moving = false;\n            message = \"\";\n            Application.LoadLevel(Application.loadedLevelName);\n        }\n    }\n\n    //----------------------------ActionManager-------------------------------//\n    public interface IU3dActionCompleted\n    {\n        void OnActionCompleted(U3dAction action);\n    }\n\n    public class ActionManager : System.Object\n    {\n        private static ActionManager _instance;\n\n        public static ActionManager GetInstance()\n        {\n            if (_instance == null)\n            {\n                _instance = new ActionManager();\n            }\n            return _instance;\n        }\n\n        public U3dAction ApplyMoveToAction(GameObject obj, Vector3 target, float speed, IU3dActionCompleted completed)\n        {\n            MoveToAction ac = obj.AddComponent<MoveToAction>();\n            ac.setting(target, speed, completed);\n            return ac;\n        }\n\n        public U3dAction ApplyMoveToAction(GameObject obj, Vector3 target, float speed)\n        {\n            return ApplyMoveToAction(obj, target, speed, null);\n        }\n\n        public U3dAction ApplyMoveToYZAction(GameObject obj, Vector3 target, float speed, IU3dActionCompleted completed)\n        {\n            MoveToYZAction ac = obj.AddComponent<MoveToYZAction>();\n            ac.setting(obj, target, speed, completed);\n            return ac;\n        }\n\n        public U3dAction ApplyMoveToYZAction(GameObject obj, Vector3 target, float speed)\n        {\n            return ApplyMoveToYZAction(obj, target, speed, null);\n        }\n    }\n\n    public class U3dActionException : System.Exception { }\n\n    public class U3dAction : MonoBehaviour\n    {\n        public void Free()\n        {\n            Destroy(this);\n        }\n    }\n\n    public class U3dActionAuto : U3dAction { }\n\n    public class U3dActionMan : U3dAction { }\n\n    public class MoveToAction : U3dActionAuto\n    {\n        public Vector3 target;\n        public float speed;\n\n        private IU3dActionCompleted monitor = null;\n\n        public void setting(Vector3 target, float speed, IU3dActionCompleted monitor)\n        {\n            this.target = target;\n            this.speed = speed;\n            this.monitor = monitor;\n            GameSceneController.GetInstance().setMoving(true);\n        }\n\n        void Update()\n        {\n            float step = speed * Time.deltaTime;\n            transform.position = Vector3.MoveTowards(transform.position, target, step);\n\n            if (transform.position == target)\n            {\n                GameSceneController.GetInstance().setMoving(false);\n                if (monitor != null)\n                {\n                    monitor.OnActionCompleted(this);\n                }\n                Destroy(this);   // 移动到目标时删除本组件\n            }\n        }\n    }\n\n    // MoveToYZAction 将移动分为y z两个轴，包含两个MoveToAction\n    public class MoveToYZAction : U3dActionAuto, IU3dActionCompleted\n    {\n        public GameObject obj;\n        public Vector3 target;\n        public float speed;\n\n        private IU3dActionCompleted monitor = null;\n\n        public void setting(GameObject obj, Vector3 target, float speed, IU3dActionCompleted monitor)\n        {\n            this.obj = obj;\n            this.target = target;\n            this.speed = speed;\n            this.monitor = monitor;\n            GameSceneController.GetInstance().setMoving(true);\n\n\t\t\t// 若obj比较高，移动到target的z先，然后 回调函数 移动到target的y\n            //  若obj比较低则相反\n            if (target.y < obj.transform.position.y)\n            {\n                Vector3 targetZ = new Vector3(target.x, obj.transform.position.y, target.z);\n                ActionManager.GetInstance().ApplyMoveToAction(obj, targetZ, speed, this);\n            }\n            else {\n                Vector3 targetY = new Vector3(target.x, target.y, obj.transform.position.z);\n                ActionManager.GetInstance().ApplyMoveToAction(obj, targetY, speed, this);\n            }\n        }\n\n        public void OnActionCompleted(U3dAction action)\n        {\n            ActionManager.GetInstance().ApplyMoveToAction(obj, target, speed, null);\n        }\n\n        void Update()\n        {\n            if (obj.transform.position == target)\n            {\n                GameSceneController.GetInstance().setMoving(false);\n                if (monitor != null)\n                {\n                    monitor.OnActionCompleted(this);\n                }\n                Destroy(this);\n            }\n        }\n    }\n}\n\npublic class BaseCode : MonoBehaviour\n{\n\n    public string gameName;\n    public string gameRule;\n\n    void Start()\n    {\n        GameSceneController my = GameSceneController.GetInstance();\n        my.setBaseCode(this);\n        gameName = \"Priests and Devils\";\n        gameRule = \"Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!             Sphere -- Priest\tCube -- Devil\";\n    }\n}\n\n\n```\n\n### **GenGameObject.cs**\n\n![](d.png)\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.Mygame;\n\npublic class GenGameObject : MonoBehaviour\n{\n\n    List<GameObject> priests_start = new List<GameObject>();\n    List<GameObject> priests_end = new List<GameObject>();\n    List<GameObject> devils_start = new List<GameObject>();\n    List<GameObject> devils_end = new List<GameObject>();\n\n    GameObject[] boat = new GameObject[2];\n    GameObject boat_obj;\n    int side = 1;               // 记录船停在哪边，1为开始岸\n    public float speed = 5f;\n\n    Vector3 shoreStartPos = new Vector3(0, 0, -12);\n    Vector3 shoreEndPos = new Vector3(0, 0, 12);\n    Vector3 boatStartPos = new Vector3(0, 0, -4);\n    Vector3 boatEndPos = new Vector3(0, 0, 4);\n    Vector3 leftBoatPos = new Vector3(0, 1.2f, -1.2f);\n    Vector3 rightBoatPos = new Vector3(0, 1.2f, 1.2f);\n\n    float gap = 1.5f;\n    Vector3 priestStartPos = new Vector3(0, 2.7f, -11f);\n    Vector3 priestEndPos = new Vector3(0, 2.7f, 8f);\n    Vector3 devilStartPos = new Vector3(0, 2.7f, -16f);\n    Vector3 devilEndPos = new Vector3(0, 2.7f, 13f);\n\n    void Start()\n    {\n        GameSceneController.GetInstance().setGenGameObject(this);\n        loadSrc();\n    }\n\n    void loadSrc()    // 加载资源\n    {\n\n        Instantiate(Resources.Load(\"Prefabs/Shore\"), shoreStartPos, Quaternion.identity);\n        Instantiate(Resources.Load(\"Prefabs/Shore\"), shoreEndPos, Quaternion.identity);\n\n        boat_obj = Instantiate(Resources.Load(\"Prefabs/Boat\"), boatStartPos, Quaternion.identity) as GameObject;\n        \n        // 初始化牧师和魔鬼\n        for (int i = 0; i < 3; ++i)\n        {\n            GameObject priest = Instantiate(Resources.Load(\"Prefabs/Priest\")) as GameObject;\n            priest.transform.position = getCharacterPosition(priestStartPos, i);\n            priest.tag = \"Priest\";\n            priests_start.Add(priest);\n\n            GameObject devil = Instantiate(Resources.Load(\"Prefabs/Devil\")) as GameObject;\n            devil.transform.position = getCharacterPosition(devilStartPos, i);\n            devil.tag = \"Devil\";\n            devils_start.Add(devil);\n        }\n    }\n\n    int boatCapacity()    // 船容量\n    {\n        int capacity = 0;\n        for (int i = 0; i < 2; ++i)\n        {\n            if (boat[i] == null) capacity++;\n        }\n        return capacity;\n    }\n\n    void getOnTheBoat(GameObject obj)\n    {\n        if (boatCapacity() != 0)\n        {\n            obj.transform.parent = boat_obj.transform;\n            Vector3 target = new Vector3();\n            if (boat[0] == null)\n            {\n                boat[0] = obj;\n                target = boat_obj.transform.position + leftBoatPos;\n            }\n            else {\n                boat[1] = obj;\n                target = boat_obj.transform.position + rightBoatPos;\n            }\n            ActionManager.GetInstance().ApplyMoveToYZAction(obj, target, speed);\n        }\n    }\n\n    public void moveBoat()\n    {\n        if (boatCapacity() != 2)\n        {\n            if (side == 1)\n            {\n                ActionManager.GetInstance().ApplyMoveToAction(boat_obj, boatEndPos, speed);\n                side = 2;\n            }\n            else if (side == 2)\n            {\n                ActionManager.GetInstance().ApplyMoveToAction(boat_obj, boatStartPos, speed);\n                side = 1;\n            }\n        }\n    }\n\n    public void getOffTheBoat(int bside)\n    {\n        if (boat[bside] != null)\n        {\n            boat[bside].transform.parent = null;\n            Vector3 target = new Vector3();\n            if (side == 1)\n            {\n                if (boat[bside].tag == \"Priest\")\n                {\n                    priests_start.Add(boat[bside]);\n                    target = getCharacterPosition(priestStartPos, priests_start.Count - 1);\n                }\n                else if (boat[bside].tag == \"Devil\")\n                {\n                    devils_start.Add(boat[bside]);\n                    target = getCharacterPosition(devilStartPos, devils_start.Count - 1);\n                }\n            }\n            else if (side == 2)\n            {\n                if (boat[bside].tag == \"Priest\")\n                {\n                    priests_end.Add(boat[bside]);\n                    target = getCharacterPosition(priestEndPos, priests_end.Count - 1);\n                }\n                else if (boat[bside].tag == \"Devil\")\n                {\n                    devils_end.Add(boat[bside]);\n                    target = getCharacterPosition(devilEndPos, devils_end.Count - 1);\n                }\n            }\n            ActionManager.GetInstance().ApplyMoveToYZAction(boat[bside], target, speed);\n            boat[bside] = null;\n        }\n    }\n\n    public void priestStartOnBoat()\n    {\n        if (priests_start.Count != 0 && boatCapacity() != 0 && side == 1)\n        {\n            getOnTheBoat(priests_start[priests_start.Count - 1]);\n            priests_start.RemoveAt(priests_start.Count - 1);\n        }   \n    }\n\n    public void priestEndOnBoat()\n    {\n        if (priests_end.Count != 0 && boatCapacity() != 0 && side == 2)\n        {\n            getOnTheBoat(priests_end[priests_end.Count-1]);\n            priests_end.RemoveAt(priests_end.Count - 1);\n        }\n            \n    }\n\n    public void devilStartOnBoat()\n    {\n        if (devils_start.Count != 0 && boatCapacity() != 0 && side == 1)\n        {\n            getOnTheBoat(devils_start[devils_start.Count-1]);\n            devils_start.RemoveAt(devils_start.Count - 1);\n        }\n            \n    }\n\n    public void devilEndOnBoat()\n    {\n        if (devils_end.Count != 0 && boatCapacity() != 0 && side == 2)\n        {\n            getOnTheBoat(devils_end[devils_end.Count-1]);\n            devils_end.RemoveAt(devils_end.Count - 1);\n        }\n            \n    }\n\n    Vector3 getCharacterPosition(Vector3 pos, int index)\n    {\n        return new Vector3(pos.x, pos.y, pos.z + gap * index);\n    }\n\n    void check()\n    {\n        GameSceneController scene = GameSceneController.GetInstance();\n        int pOnb = 0, dOnb = 0;\n        int priests_s = 0, devils_s = 0, priests_e = 0, devils_e = 0;\n\n        if (priests_end.Count == 3 && devils_end.Count == 3)\n        {\n            scene.setMessage(\"Win!\");\n            return;\n        }\n\n        for (int i = 0; i < 2; ++i)\n        {\n            if (boat[i] != null && boat[i].tag == \"Priest\") pOnb++;\n            else if (boat[i] != null && boat[i].tag == \"Devil\") dOnb++;\n        }\n        if (side == 1)\n        {\n            priests_s = priests_start.Count + pOnb;\n            devils_s = devils_start.Count + dOnb;\n            priests_e = priests_end.Count;\n            devils_e = devils_end.Count;\n        }\n        else if (side == 2)\n        {\n            priests_s = priests_start.Count;\n            devils_s = devils_start.Count;\n            priests_e = priests_end.Count + pOnb;\n            devils_e = devils_end.Count + dOnb;\n        }\n        if ((priests_s != 0 && priests_s < devils_s) || (priests_e != 0 && priests_e < devils_e))\n        {\n            scene.setMessage(\"Lose!\");\n        }\n    }\n\n    void Update()\n    {\n        check();\n    }\n\n}\n```\n\n### **UserInterface.cs**\n\n![](e.png)\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\npublic class UserInterface : MonoBehaviour\n{\n\n    GameSceneController scene;\n    IQueryGameStatus state;\n    IUserActions action;\n\n    float width, height;\n\n    float castw(float scale)\n    {\n        return (Screen.width - width) / scale;\n    }\n\n    float casth(float scale)\n    {\n        return (Screen.height - height) / scale;\n    }\n\n    void Start()\n    {\n        scene = GameSceneController.GetInstance();\n        state = GameSceneController.GetInstance() as IQueryGameStatus;\n        action = GameSceneController.GetInstance() as IUserActions;\n    }\n\n    void OnGUI()\n    {\n        width = Screen.width / 12;\n        height = Screen.height / 12;\n\n        string message = state.isMessage();\n        if (message != \"\")   // 有 输赢 提示时重新开始\n        {\n            if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), message))\n            {\n                action.restart();\n            }\n        }\n        else {\n            if (GUI.RepeatButton(new Rect(10, 10, 120, 20), scene.getBaseCode().gameName))\n            {\n                GUI.TextArea(new Rect(10, 40, Screen.width - 20, Screen.height / 2), scene.getBaseCode().gameRule);\n            }\n            else if (!state.isMoving())   // 船没移动才显示按钮\n            {\n                if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Go\"))\n                {\n                    action.moveBoat();\n                }\n                if (GUI.Button(new Rect(castw(10.5f), casth(1.25f), width, height), \"DevilOn\"))\n                {\n                    action.devilSOnB();\n                }\n                if (GUI.Button(new Rect(castw(4.3f), casth(1.25f), width, height), \"PriestOn\"))\n                {\n                    action.priestSOnB();\n                }\n                if (GUI.Button(new Rect(castw(1.1f), casth(1.25f), width, height), \"DevilOn\"))\n                {\n                    action.devilEOnB();\n                }\n                if (GUI.Button(new Rect(castw(1.3f), casth(1.25f), width, height), \"PriestOn\"))\n                {\n                    action.priestEOnB();\n                }\n                if (GUI.Button(new Rect(castw(2.5f), casth(6f), width, height), \"LeftOff\"))\n                {\n                    action.offBoatL();\n                }\n                if (GUI.Button(new Rect(castw(1.65f), casth(6f), width, height), \"RightOff\"))\n                {\n                    action.offBoatR();\n                }\n            }\n        }\n    }\n}\n\n```\n","source":"_posts/牧师与魔鬼改进.md","raw":"---\ntitle: 牧师与魔鬼改进\ntoc: true\ndate: 2016-07-21 19:12:23\ntags:\n- C#\n- MVC\n- unity3d\n- 工厂模式\ncategories: 3D游戏开发\n---\n上一篇已经基本上写完了牧师与魔鬼的小游戏，然而代码还是存在不少缺陷的。最主要的就是小船、牧师以及魔鬼的移动问题，我们可以把移动这一动作抽象化出来，添加到动作工厂中，由工厂类控制小船移动。\n<!--more-->\n\n## **基本概念**\n\n简单工厂模式，MoveToYZAction为组合动作，负责游戏对象的上下船动作，利用IU3dActionCompleted和MoveToAction完成YZ轴上的二段运动。\n![](a.png)\n\n## **修改类的动作**\n\n### **单例类GameSceneController**\n\n- 添加了私有变量moving和message(用来显示输赢信息)\n\n- 添加接口IQueryGameStatus，实现moving和message的查询和设置。\n\n- 去掉了枚举变量state（由moving和message替代）\n- \n### **类GenGameObject**\n\n- 修改枚举依赖\n\n- 修改输赢提示方式为设置message\n\n- 修改动作实现方式为ActionManage，不在Update中实现。\n- \n### **UserInterface**\n\n- 修改枚举依赖，通过IQueryGameStatus查询\n\n- 修改输赢提示方式为显示message\n\n### **人机交互**\n\n小船在移动到对岸过程中，应该组织人机交互，通过UserInterface按钮的隐藏来实现。UserInterface在渲染前会通过IQueryGameStatus查询moving值，moving值为真则不渲染。Moving值在ActionManager中的每个动作完成前会设置成真。\n\n## **完整代码**\n\n### **BaseCode.cs**\n\n![](b.png)\n![](c.png)\n以上所有类都写在Com.Mygame空间中，BaseCode类只初始化介绍界面。\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\nnamespace Com.Mygame\n{\n    //-------------------------SceneController-------------------------------//\n    public interface IUserActions\n    {\n        void priestSOnB();\n        void priestEOnB();\n        void devilSOnB();\n        void devilEOnB();\n        void moveBoat();\n        void offBoatL();\n        void offBoatR();\n        void restart();\n    }\n\n    public interface IQueryGameStatus\n    {\n        bool isMoving();\n        void setMoving(bool state);\n        string isMessage();\n        void setMessage(string message);\n    }\n\n    public class GameSceneController : System.Object, IUserActions, IQueryGameStatus\n    {\n\n        private static GameSceneController _instance;\n        private BaseCode _base_code;\n        private GenGameObject _gen_game_obj;\n        private bool moving = false;\n        private string message = \"\";\n\n        public static GameSceneController GetInstance()\n        {\n            if (null == _instance)\n            {\n                _instance = new GameSceneController();\n            }\n            return _instance;\n        }\n\n        public BaseCode getBaseCode()\n        {\n            return _base_code;\n        }\n\n        internal void setBaseCode(BaseCode bc)\n        {\n            if (null == _base_code)\n            {\n                _base_code = bc;\n            }\n        }\n\n        public GenGameObject getGenGameObject()\n        {\n            return _gen_game_obj;\n        }\n\n        internal void setGenGameObject(GenGameObject ggo)\n        {\n            if (null == _gen_game_obj)\n            {\n                _gen_game_obj = ggo;\n            }\n        }\n\n        public bool isMoving() { return moving; }\n        public void setMoving(bool state) { this.moving = state; }\n        public string isMessage() { return message; }\n        public void setMessage(string message) { this.message = message; }\n\n        public void priestSOnB() { _gen_game_obj.priestStartOnBoat(); }\n        public void priestEOnB() { _gen_game_obj.priestEndOnBoat(); }\n        public void devilSOnB() { _gen_game_obj.devilStartOnBoat(); }\n        public void devilEOnB() { _gen_game_obj.devilEndOnBoat(); }\n        public void moveBoat() { _gen_game_obj.moveBoat(); }\n        public void offBoatL() { _gen_game_obj.getOffTheBoat(0); }\n        public void offBoatR() { _gen_game_obj.getOffTheBoat(1); }\n\n        public void restart()\n        {\n            moving = false;\n            message = \"\";\n            Application.LoadLevel(Application.loadedLevelName);\n        }\n    }\n\n    //----------------------------ActionManager-------------------------------//\n    public interface IU3dActionCompleted\n    {\n        void OnActionCompleted(U3dAction action);\n    }\n\n    public class ActionManager : System.Object\n    {\n        private static ActionManager _instance;\n\n        public static ActionManager GetInstance()\n        {\n            if (_instance == null)\n            {\n                _instance = new ActionManager();\n            }\n            return _instance;\n        }\n\n        public U3dAction ApplyMoveToAction(GameObject obj, Vector3 target, float speed, IU3dActionCompleted completed)\n        {\n            MoveToAction ac = obj.AddComponent<MoveToAction>();\n            ac.setting(target, speed, completed);\n            return ac;\n        }\n\n        public U3dAction ApplyMoveToAction(GameObject obj, Vector3 target, float speed)\n        {\n            return ApplyMoveToAction(obj, target, speed, null);\n        }\n\n        public U3dAction ApplyMoveToYZAction(GameObject obj, Vector3 target, float speed, IU3dActionCompleted completed)\n        {\n            MoveToYZAction ac = obj.AddComponent<MoveToYZAction>();\n            ac.setting(obj, target, speed, completed);\n            return ac;\n        }\n\n        public U3dAction ApplyMoveToYZAction(GameObject obj, Vector3 target, float speed)\n        {\n            return ApplyMoveToYZAction(obj, target, speed, null);\n        }\n    }\n\n    public class U3dActionException : System.Exception { }\n\n    public class U3dAction : MonoBehaviour\n    {\n        public void Free()\n        {\n            Destroy(this);\n        }\n    }\n\n    public class U3dActionAuto : U3dAction { }\n\n    public class U3dActionMan : U3dAction { }\n\n    public class MoveToAction : U3dActionAuto\n    {\n        public Vector3 target;\n        public float speed;\n\n        private IU3dActionCompleted monitor = null;\n\n        public void setting(Vector3 target, float speed, IU3dActionCompleted monitor)\n        {\n            this.target = target;\n            this.speed = speed;\n            this.monitor = monitor;\n            GameSceneController.GetInstance().setMoving(true);\n        }\n\n        void Update()\n        {\n            float step = speed * Time.deltaTime;\n            transform.position = Vector3.MoveTowards(transform.position, target, step);\n\n            if (transform.position == target)\n            {\n                GameSceneController.GetInstance().setMoving(false);\n                if (monitor != null)\n                {\n                    monitor.OnActionCompleted(this);\n                }\n                Destroy(this);   // 移动到目标时删除本组件\n            }\n        }\n    }\n\n    // MoveToYZAction 将移动分为y z两个轴，包含两个MoveToAction\n    public class MoveToYZAction : U3dActionAuto, IU3dActionCompleted\n    {\n        public GameObject obj;\n        public Vector3 target;\n        public float speed;\n\n        private IU3dActionCompleted monitor = null;\n\n        public void setting(GameObject obj, Vector3 target, float speed, IU3dActionCompleted monitor)\n        {\n            this.obj = obj;\n            this.target = target;\n            this.speed = speed;\n            this.monitor = monitor;\n            GameSceneController.GetInstance().setMoving(true);\n\n\t\t\t// 若obj比较高，移动到target的z先，然后 回调函数 移动到target的y\n            //  若obj比较低则相反\n            if (target.y < obj.transform.position.y)\n            {\n                Vector3 targetZ = new Vector3(target.x, obj.transform.position.y, target.z);\n                ActionManager.GetInstance().ApplyMoveToAction(obj, targetZ, speed, this);\n            }\n            else {\n                Vector3 targetY = new Vector3(target.x, target.y, obj.transform.position.z);\n                ActionManager.GetInstance().ApplyMoveToAction(obj, targetY, speed, this);\n            }\n        }\n\n        public void OnActionCompleted(U3dAction action)\n        {\n            ActionManager.GetInstance().ApplyMoveToAction(obj, target, speed, null);\n        }\n\n        void Update()\n        {\n            if (obj.transform.position == target)\n            {\n                GameSceneController.GetInstance().setMoving(false);\n                if (monitor != null)\n                {\n                    monitor.OnActionCompleted(this);\n                }\n                Destroy(this);\n            }\n        }\n    }\n}\n\npublic class BaseCode : MonoBehaviour\n{\n\n    public string gameName;\n    public string gameRule;\n\n    void Start()\n    {\n        GameSceneController my = GameSceneController.GetInstance();\n        my.setBaseCode(this);\n        gameName = \"Priests and Devils\";\n        gameRule = \"Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!             Sphere -- Priest\tCube -- Devil\";\n    }\n}\n\n\n```\n\n### **GenGameObject.cs**\n\n![](d.png)\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.Mygame;\n\npublic class GenGameObject : MonoBehaviour\n{\n\n    List<GameObject> priests_start = new List<GameObject>();\n    List<GameObject> priests_end = new List<GameObject>();\n    List<GameObject> devils_start = new List<GameObject>();\n    List<GameObject> devils_end = new List<GameObject>();\n\n    GameObject[] boat = new GameObject[2];\n    GameObject boat_obj;\n    int side = 1;               // 记录船停在哪边，1为开始岸\n    public float speed = 5f;\n\n    Vector3 shoreStartPos = new Vector3(0, 0, -12);\n    Vector3 shoreEndPos = new Vector3(0, 0, 12);\n    Vector3 boatStartPos = new Vector3(0, 0, -4);\n    Vector3 boatEndPos = new Vector3(0, 0, 4);\n    Vector3 leftBoatPos = new Vector3(0, 1.2f, -1.2f);\n    Vector3 rightBoatPos = new Vector3(0, 1.2f, 1.2f);\n\n    float gap = 1.5f;\n    Vector3 priestStartPos = new Vector3(0, 2.7f, -11f);\n    Vector3 priestEndPos = new Vector3(0, 2.7f, 8f);\n    Vector3 devilStartPos = new Vector3(0, 2.7f, -16f);\n    Vector3 devilEndPos = new Vector3(0, 2.7f, 13f);\n\n    void Start()\n    {\n        GameSceneController.GetInstance().setGenGameObject(this);\n        loadSrc();\n    }\n\n    void loadSrc()    // 加载资源\n    {\n\n        Instantiate(Resources.Load(\"Prefabs/Shore\"), shoreStartPos, Quaternion.identity);\n        Instantiate(Resources.Load(\"Prefabs/Shore\"), shoreEndPos, Quaternion.identity);\n\n        boat_obj = Instantiate(Resources.Load(\"Prefabs/Boat\"), boatStartPos, Quaternion.identity) as GameObject;\n        \n        // 初始化牧师和魔鬼\n        for (int i = 0; i < 3; ++i)\n        {\n            GameObject priest = Instantiate(Resources.Load(\"Prefabs/Priest\")) as GameObject;\n            priest.transform.position = getCharacterPosition(priestStartPos, i);\n            priest.tag = \"Priest\";\n            priests_start.Add(priest);\n\n            GameObject devil = Instantiate(Resources.Load(\"Prefabs/Devil\")) as GameObject;\n            devil.transform.position = getCharacterPosition(devilStartPos, i);\n            devil.tag = \"Devil\";\n            devils_start.Add(devil);\n        }\n    }\n\n    int boatCapacity()    // 船容量\n    {\n        int capacity = 0;\n        for (int i = 0; i < 2; ++i)\n        {\n            if (boat[i] == null) capacity++;\n        }\n        return capacity;\n    }\n\n    void getOnTheBoat(GameObject obj)\n    {\n        if (boatCapacity() != 0)\n        {\n            obj.transform.parent = boat_obj.transform;\n            Vector3 target = new Vector3();\n            if (boat[0] == null)\n            {\n                boat[0] = obj;\n                target = boat_obj.transform.position + leftBoatPos;\n            }\n            else {\n                boat[1] = obj;\n                target = boat_obj.transform.position + rightBoatPos;\n            }\n            ActionManager.GetInstance().ApplyMoveToYZAction(obj, target, speed);\n        }\n    }\n\n    public void moveBoat()\n    {\n        if (boatCapacity() != 2)\n        {\n            if (side == 1)\n            {\n                ActionManager.GetInstance().ApplyMoveToAction(boat_obj, boatEndPos, speed);\n                side = 2;\n            }\n            else if (side == 2)\n            {\n                ActionManager.GetInstance().ApplyMoveToAction(boat_obj, boatStartPos, speed);\n                side = 1;\n            }\n        }\n    }\n\n    public void getOffTheBoat(int bside)\n    {\n        if (boat[bside] != null)\n        {\n            boat[bside].transform.parent = null;\n            Vector3 target = new Vector3();\n            if (side == 1)\n            {\n                if (boat[bside].tag == \"Priest\")\n                {\n                    priests_start.Add(boat[bside]);\n                    target = getCharacterPosition(priestStartPos, priests_start.Count - 1);\n                }\n                else if (boat[bside].tag == \"Devil\")\n                {\n                    devils_start.Add(boat[bside]);\n                    target = getCharacterPosition(devilStartPos, devils_start.Count - 1);\n                }\n            }\n            else if (side == 2)\n            {\n                if (boat[bside].tag == \"Priest\")\n                {\n                    priests_end.Add(boat[bside]);\n                    target = getCharacterPosition(priestEndPos, priests_end.Count - 1);\n                }\n                else if (boat[bside].tag == \"Devil\")\n                {\n                    devils_end.Add(boat[bside]);\n                    target = getCharacterPosition(devilEndPos, devils_end.Count - 1);\n                }\n            }\n            ActionManager.GetInstance().ApplyMoveToYZAction(boat[bside], target, speed);\n            boat[bside] = null;\n        }\n    }\n\n    public void priestStartOnBoat()\n    {\n        if (priests_start.Count != 0 && boatCapacity() != 0 && side == 1)\n        {\n            getOnTheBoat(priests_start[priests_start.Count - 1]);\n            priests_start.RemoveAt(priests_start.Count - 1);\n        }   \n    }\n\n    public void priestEndOnBoat()\n    {\n        if (priests_end.Count != 0 && boatCapacity() != 0 && side == 2)\n        {\n            getOnTheBoat(priests_end[priests_end.Count-1]);\n            priests_end.RemoveAt(priests_end.Count - 1);\n        }\n            \n    }\n\n    public void devilStartOnBoat()\n    {\n        if (devils_start.Count != 0 && boatCapacity() != 0 && side == 1)\n        {\n            getOnTheBoat(devils_start[devils_start.Count-1]);\n            devils_start.RemoveAt(devils_start.Count - 1);\n        }\n            \n    }\n\n    public void devilEndOnBoat()\n    {\n        if (devils_end.Count != 0 && boatCapacity() != 0 && side == 2)\n        {\n            getOnTheBoat(devils_end[devils_end.Count-1]);\n            devils_end.RemoveAt(devils_end.Count - 1);\n        }\n            \n    }\n\n    Vector3 getCharacterPosition(Vector3 pos, int index)\n    {\n        return new Vector3(pos.x, pos.y, pos.z + gap * index);\n    }\n\n    void check()\n    {\n        GameSceneController scene = GameSceneController.GetInstance();\n        int pOnb = 0, dOnb = 0;\n        int priests_s = 0, devils_s = 0, priests_e = 0, devils_e = 0;\n\n        if (priests_end.Count == 3 && devils_end.Count == 3)\n        {\n            scene.setMessage(\"Win!\");\n            return;\n        }\n\n        for (int i = 0; i < 2; ++i)\n        {\n            if (boat[i] != null && boat[i].tag == \"Priest\") pOnb++;\n            else if (boat[i] != null && boat[i].tag == \"Devil\") dOnb++;\n        }\n        if (side == 1)\n        {\n            priests_s = priests_start.Count + pOnb;\n            devils_s = devils_start.Count + dOnb;\n            priests_e = priests_end.Count;\n            devils_e = devils_end.Count;\n        }\n        else if (side == 2)\n        {\n            priests_s = priests_start.Count;\n            devils_s = devils_start.Count;\n            priests_e = priests_end.Count + pOnb;\n            devils_e = devils_end.Count + dOnb;\n        }\n        if ((priests_s != 0 && priests_s < devils_s) || (priests_e != 0 && priests_e < devils_e))\n        {\n            scene.setMessage(\"Lose!\");\n        }\n    }\n\n    void Update()\n    {\n        check();\n    }\n\n}\n```\n\n### **UserInterface.cs**\n\n![](e.png)\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\npublic class UserInterface : MonoBehaviour\n{\n\n    GameSceneController scene;\n    IQueryGameStatus state;\n    IUserActions action;\n\n    float width, height;\n\n    float castw(float scale)\n    {\n        return (Screen.width - width) / scale;\n    }\n\n    float casth(float scale)\n    {\n        return (Screen.height - height) / scale;\n    }\n\n    void Start()\n    {\n        scene = GameSceneController.GetInstance();\n        state = GameSceneController.GetInstance() as IQueryGameStatus;\n        action = GameSceneController.GetInstance() as IUserActions;\n    }\n\n    void OnGUI()\n    {\n        width = Screen.width / 12;\n        height = Screen.height / 12;\n\n        string message = state.isMessage();\n        if (message != \"\")   // 有 输赢 提示时重新开始\n        {\n            if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), message))\n            {\n                action.restart();\n            }\n        }\n        else {\n            if (GUI.RepeatButton(new Rect(10, 10, 120, 20), scene.getBaseCode().gameName))\n            {\n                GUI.TextArea(new Rect(10, 40, Screen.width - 20, Screen.height / 2), scene.getBaseCode().gameRule);\n            }\n            else if (!state.isMoving())   // 船没移动才显示按钮\n            {\n                if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Go\"))\n                {\n                    action.moveBoat();\n                }\n                if (GUI.Button(new Rect(castw(10.5f), casth(1.25f), width, height), \"DevilOn\"))\n                {\n                    action.devilSOnB();\n                }\n                if (GUI.Button(new Rect(castw(4.3f), casth(1.25f), width, height), \"PriestOn\"))\n                {\n                    action.priestSOnB();\n                }\n                if (GUI.Button(new Rect(castw(1.1f), casth(1.25f), width, height), \"DevilOn\"))\n                {\n                    action.devilEOnB();\n                }\n                if (GUI.Button(new Rect(castw(1.3f), casth(1.25f), width, height), \"PriestOn\"))\n                {\n                    action.priestEOnB();\n                }\n                if (GUI.Button(new Rect(castw(2.5f), casth(6f), width, height), \"LeftOff\"))\n                {\n                    action.offBoatL();\n                }\n                if (GUI.Button(new Rect(castw(1.65f), casth(6f), width, height), \"RightOff\"))\n                {\n                    action.offBoatR();\n                }\n            }\n        }\n    }\n}\n\n```\n","slug":"牧师与魔鬼改进","published":1,"updated":"2016-07-22T08:06:13.910Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzro001lgobkptvhgeiz","content":"<p>上一篇已经基本上写完了牧师与魔鬼的小游戏，然而代码还是存在不少缺陷的。最主要的就是小船、牧师以及魔鬼的移动问题，我们可以把移动这一动作抽象化出来，添加到动作工厂中，由工厂类控制小船移动。<br><a id=\"more\"></a></p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a><strong>基本概念</strong></h2><p>简单工厂模式，MoveToYZAction为组合动作，负责游戏对象的上下船动作，利用IU3dActionCompleted和MoveToAction完成YZ轴上的二段运动。<br><img src=\"a.png\" alt=\"\"></p>\n<h2 id=\"修改类的动作\"><a href=\"#修改类的动作\" class=\"headerlink\" title=\"修改类的动作\"></a><strong>修改类的动作</strong></h2><h3 id=\"单例类GameSceneController\"><a href=\"#单例类GameSceneController\" class=\"headerlink\" title=\"单例类GameSceneController\"></a><strong>单例类GameSceneController</strong></h3><ul>\n<li><p>添加了私有变量moving和message(用来显示输赢信息)</p>\n</li>\n<li><p>添加接口IQueryGameStatus，实现moving和message的查询和设置。</p>\n</li>\n<li><p>去掉了枚举变量state（由moving和message替代）</p>\n</li>\n<li><h3 id=\"类GenGameObject\"><a href=\"#类GenGameObject\" class=\"headerlink\" title=\"类GenGameObject\"></a><strong>类GenGameObject</strong></h3></li>\n<li><p>修改枚举依赖</p>\n</li>\n<li><p>修改输赢提示方式为设置message</p>\n</li>\n<li><p>修改动作实现方式为ActionManage，不在Update中实现。</p>\n</li>\n<li><h3 id=\"UserInterface\"><a href=\"#UserInterface\" class=\"headerlink\" title=\"UserInterface\"></a><strong>UserInterface</strong></h3></li>\n<li><p>修改枚举依赖，通过IQueryGameStatus查询</p>\n</li>\n<li><p>修改输赢提示方式为显示message</p>\n</li>\n</ul>\n<h3 id=\"人机交互\"><a href=\"#人机交互\" class=\"headerlink\" title=\"人机交互\"></a><strong>人机交互</strong></h3><p>小船在移动到对岸过程中，应该组织人机交互，通过UserInterface按钮的隐藏来实现。UserInterface在渲染前会通过IQueryGameStatus查询moving值，moving值为真则不渲染。Moving值在ActionManager中的每个动作完成前会设置成真。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><h3 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h3><p><img src=\"b.png\" alt=\"\"><br><img src=\"c.png\" alt=\"\"><br>以上所有类都写在Com.Mygame空间中，BaseCode类只初始化介绍界面。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//-------------------------SceneController-------------------------------//</span></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IUserActions</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IQueryGameStatus</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isMoving</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMoving</span><span class=\"params\">(<span class=\"keyword\">bool</span> state)</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">isMessage</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(<span class=\"built_in\">string</span> message)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameSceneController : System.Object, IUserActions, IQueryGameStatus</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"number\">_</span>instance;</div><div class=\"line\">        <span class=\"keyword\">private</span> BaseCode <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">        <span class=\"keyword\">private</span> GenGameObject <span class=\"number\">_</span>gen_game_obj;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> moving = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> message = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>instance)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> GameSceneController();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BaseCode <span class=\"title\">getBaseCode</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setBaseCode</span><span class=\"params\">(BaseCode bc)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_b</span>ase_code)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_b</span>ase_code = bc;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GenGameObject <span class=\"title\">getGenGameObject</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>gen_game_obj;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setGenGameObject</span><span class=\"params\">(GenGameObject ggo)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>gen_game_obj)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>gen_game_obj = ggo;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isMoving</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> moving; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoving</span><span class=\"params\">(<span class=\"keyword\">bool</span> state)</span> </span>&#123; <span class=\"keyword\">this</span>.moving = state; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">isMessage</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> message; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(<span class=\"built_in\">string</span> message)</span> </span>&#123; <span class=\"keyword\">this</span>.message = message; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.priestStartOnBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.priestEndOnBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.devilStartOnBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.devilEndOnBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.moveBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.getOffTheBoat(<span class=\"number\">0</span>); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.getOffTheBoat(<span class=\"number\">1</span>); &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            moving = <span class=\"literal\">false</span>;</div><div class=\"line\">            message = <span class=\"string\">\"\"</span>;</div><div class=\"line\">            Application.LoadLevel(Application.loadedLevelName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//----------------------------ActionManager-------------------------------//</span></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IU3dActionCompleted</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnActionCompleted</span><span class=\"params\">(U3dAction action)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ActionManager : System.Object</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ActionManager <span class=\"number\">_</span>instance;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ActionManager <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">_</span>instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> ActionManager();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> U3dAction <span class=\"title\">ApplyMoveToAction</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed, IU3dActionCompleted completed)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            MoveToAction ac = obj.AddComponent&lt;MoveToAction&gt;();</div><div class=\"line\">            ac.setting(target, speed, completed);</div><div class=\"line\">            <span class=\"keyword\">return</span> ac;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> U3dAction <span class=\"title\">ApplyMoveToAction</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ApplyMoveToAction(obj, target, speed, null);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> U3dAction <span class=\"title\">ApplyMoveToYZAction</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed, IU3dActionCompleted completed)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            MoveToYZAction ac = obj.AddComponent&lt;MoveToYZAction&gt;();</div><div class=\"line\">            ac.setting(obj, target, speed, completed);</div><div class=\"line\">            <span class=\"keyword\">return</span> ac;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> U3dAction <span class=\"title\">ApplyMoveToYZAction</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ApplyMoveToYZAction(obj, target, speed, null);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> U3dActionException : System.Exception &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> U3dAction : MonoBehaviour</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Free</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            Destroy(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> U3dActionAuto : U3dAction &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> U3dActionMan : U3dAction &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MoveToAction : U3dActionAuto</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> Vector3 target;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> IU3dActionCompleted monitor = null;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setting</span><span class=\"params\">(Vector3 target, <span class=\"keyword\">float</span> speed, IU3dActionCompleted monitor)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">            <span class=\"keyword\">this</span>.speed = speed;</div><div class=\"line\">            <span class=\"keyword\">this</span>.monitor = monitor;</div><div class=\"line\">            GameSceneController.GetInstance().setMoving(<span class=\"literal\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">float</span> step = speed * Time.deltaTime;</div><div class=\"line\">            transform.position = Vector3.MoveTowards(transform.position, target, step);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (transform.position == target)</div><div class=\"line\">            &#123;</div><div class=\"line\">                GameSceneController.GetInstance().setMoving(<span class=\"literal\">false</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (monitor != null)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    monitor.OnActionCompleted(<span class=\"keyword\">this</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                Destroy(<span class=\"keyword\">this</span>);   <span class=\"comment\">// 移动到目标时删除本组件</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// MoveToYZAction 将移动分为y z两个轴，包含两个MoveToAction</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MoveToYZAction : U3dActionAuto, IU3dActionCompleted</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> GameObject obj;</div><div class=\"line\">        <span class=\"keyword\">public</span> Vector3 target;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> IU3dActionCompleted monitor = null;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setting</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed, IU3dActionCompleted monitor)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.obj = obj;</div><div class=\"line\">            <span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">            <span class=\"keyword\">this</span>.speed = speed;</div><div class=\"line\">            <span class=\"keyword\">this</span>.monitor = monitor;</div><div class=\"line\">            GameSceneController.GetInstance().setMoving(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 若obj比较高，移动到target的z先，然后 回调函数 移动到target的y</span></div><div class=\"line\">            <span class=\"comment\">//  若obj比较低则相反</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (target.y &lt; obj.transform.position.y)</div><div class=\"line\">            &#123;</div><div class=\"line\">                Vector3 targetZ = <span class=\"keyword\">new</span> Vector3(target.x, obj.transform.position.y, target.z);</div><div class=\"line\">                ActionManager.GetInstance().ApplyMoveToAction(obj, targetZ, speed, <span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Vector3 targetY = <span class=\"keyword\">new</span> Vector3(target.x, target.y, obj.transform.position.z);</div><div class=\"line\">                ActionManager.GetInstance().ApplyMoveToAction(obj, targetY, speed, <span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionCompleted</span><span class=\"params\">(U3dAction action)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            ActionManager.GetInstance().ApplyMoveToAction(obj, target, speed, null);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (obj.transform.position == target)</div><div class=\"line\">            &#123;</div><div class=\"line\">                GameSceneController.GetInstance().setMoving(<span class=\"literal\">false</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (monitor != null)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    monitor.OnActionCompleted(<span class=\"keyword\">this</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                Destroy(<span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameName;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameRule;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        GameSceneController my = GameSceneController.GetInstance();</div><div class=\"line\">        my.setBaseCode(<span class=\"keyword\">this</span>);</div><div class=\"line\">        gameName = <span class=\"string\">\"Priests and Devils\"</span>;</div><div class=\"line\">        gameRule = <span class=\"string\">\"Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!             Sphere -- Priest\tCube -- Devil\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"GenGameObject-cs\"><a href=\"#GenGameObject-cs\" class=\"headerlink\" title=\"GenGameObject.cs\"></a><strong>GenGameObject.cs</strong></h3><p><img src=\"d.png\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenGameObject : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    List&lt;GameObject&gt; priests_start = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">    List&lt;GameObject&gt; priests_end = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">    List&lt;GameObject&gt; devils_start = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">    List&lt;GameObject&gt; devils_end = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\"></div><div class=\"line\">    GameObject[] boat = <span class=\"keyword\">new</span> GameObject[<span class=\"number\">2</span>];</div><div class=\"line\">    GameObject boat_obj;</div><div class=\"line\">    <span class=\"keyword\">int</span> side = <span class=\"number\">1</span>;               <span class=\"comment\">// 记录船停在哪边，1为开始岸</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">5f</span>;</div><div class=\"line\"></div><div class=\"line\">    Vector3 shoreStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-12</span>);</div><div class=\"line\">    Vector3 shoreEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>);</div><div class=\"line\">    Vector3 boatStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-4</span>);</div><div class=\"line\">    Vector3 boatEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>);</div><div class=\"line\">    Vector3 leftBoatPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">-1.2</span>f);</div><div class=\"line\">    Vector3 rightBoatPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">1.2f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> gap = <span class=\"number\">1.5f</span>;</div><div class=\"line\">    Vector3 priestStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-11</span>f);</div><div class=\"line\">    Vector3 priestEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">8f</span>);</div><div class=\"line\">    Vector3 devilStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-16</span>f);</div><div class=\"line\">    Vector3 devilEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">13f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        GameSceneController.GetInstance().setGenGameObject(<span class=\"keyword\">this</span>);</div><div class=\"line\">        loadSrc();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadSrc</span><span class=\"params\">()</span>    <span class=\"comment\">// 加载资源</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Shore\"</span>), shoreStartPos, Quaternion.identity);</div><div class=\"line\">        Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Shore\"</span>), shoreEndPos, Quaternion.identity);</div><div class=\"line\"></div><div class=\"line\">        boat_obj = Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Boat\"</span>), boatStartPos, Quaternion.identity) as GameObject;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 初始化牧师和魔鬼</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            GameObject priest = Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Priest\"</span>)) as GameObject;</div><div class=\"line\">            priest.transform.position = getCharacterPosition(priestStartPos, i);</div><div class=\"line\">            priest.tag = <span class=\"string\">\"Priest\"</span>;</div><div class=\"line\">            priests_start.Add(priest);</div><div class=\"line\"></div><div class=\"line\">            GameObject devil = Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Devil\"</span>)) as GameObject;</div><div class=\"line\">            devil.transform.position = getCharacterPosition(devilStartPos, i);</div><div class=\"line\">            devil.tag = <span class=\"string\">\"Devil\"</span>;</div><div class=\"line\">            devils_start.Add(devil);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">boatCapacity</span><span class=\"params\">()</span>    <span class=\"comment\">// 船容量</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> capacity = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[i] == null) capacity++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> capacity;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOnTheBoat</span><span class=\"params\">(GameObject obj)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            obj.transform.parent = boat_obj.transform;</div><div class=\"line\">            Vector3 target = <span class=\"keyword\">new</span> Vector3();</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[<span class=\"number\">0</span>] == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                boat[<span class=\"number\">0</span>] = obj;</div><div class=\"line\">                target = boat_obj.transform.position + leftBoatPos;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                boat[<span class=\"number\">1</span>] = obj;</div><div class=\"line\">                target = boat_obj.transform.position + rightBoatPos;</div><div class=\"line\">            &#125;</div><div class=\"line\">            ActionManager.GetInstance().ApplyMoveToYZAction(obj, target, speed);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (side == <span class=\"number\">1</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                ActionManager.GetInstance().ApplyMoveToAction(boat_obj, boatEndPos, speed);</div><div class=\"line\">                side = <span class=\"number\">2</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (side == <span class=\"number\">2</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                ActionManager.GetInstance().ApplyMoveToAction(boat_obj, boatStartPos, speed);</div><div class=\"line\">                side = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getOffTheBoat</span><span class=\"params\">(<span class=\"keyword\">int</span> bside)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boat[bside] != null)</div><div class=\"line\">        &#123;</div><div class=\"line\">            boat[bside].transform.parent = null;</div><div class=\"line\">            Vector3 target = <span class=\"keyword\">new</span> Vector3();</div><div class=\"line\">            <span class=\"keyword\">if</span> (side == <span class=\"number\">1</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (boat[bside].tag == <span class=\"string\">\"Priest\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    priests_start.Add(boat[bside]);</div><div class=\"line\">                    target = getCharacterPosition(priestStartPos, priests_start.Count - <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[bside].tag == <span class=\"string\">\"Devil\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    devils_start.Add(boat[bside]);</div><div class=\"line\">                    target = getCharacterPosition(devilStartPos, devils_start.Count - <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (side == <span class=\"number\">2</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (boat[bside].tag == <span class=\"string\">\"Priest\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    priests_end.Add(boat[bside]);</div><div class=\"line\">                    target = getCharacterPosition(priestEndPos, priests_end.Count - <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[bside].tag == <span class=\"string\">\"Devil\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    devils_end.Add(boat[bside]);</div><div class=\"line\">                    target = getCharacterPosition(devilEndPos, devils_end.Count - <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            ActionManager.GetInstance().ApplyMoveToYZAction(boat[bside], target, speed);</div><div class=\"line\">            boat[bside] = null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestStartOnBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; side == <span class=\"number\">1</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            getOnTheBoat(priests_start[priests_start.Count - <span class=\"number\">1</span>]);</div><div class=\"line\">            priests_start.RemoveAt(priests_start.Count - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEndOnBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; side == <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            getOnTheBoat(priests_end[priests_end.Count<span class=\"number\">-1</span>]);</div><div class=\"line\">            priests_end.RemoveAt(priests_end.Count - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilStartOnBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (devils_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; side == <span class=\"number\">1</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            getOnTheBoat(devils_start[devils_start.Count<span class=\"number\">-1</span>]);</div><div class=\"line\">            devils_start.RemoveAt(devils_start.Count - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEndOnBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (devils_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; side == <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            getOnTheBoat(devils_end[devils_end.Count<span class=\"number\">-1</span>]);</div><div class=\"line\">            devils_end.RemoveAt(devils_end.Count - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Vector3 <span class=\"title\">getCharacterPosition</span><span class=\"params\">(Vector3 pos, <span class=\"keyword\">int</span> index)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector3(pos.x, pos.y, pos.z + gap * index);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        GameSceneController scene = GameSceneController.GetInstance();</div><div class=\"line\">        <span class=\"keyword\">int</span> pOnb = <span class=\"number\">0</span>, dOnb = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> priests_s = <span class=\"number\">0</span>, devils_s = <span class=\"number\">0</span>, priests_e = <span class=\"number\">0</span>, devils_e = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_end.Count == <span class=\"number\">3</span> &amp;&amp; devils_end.Count == <span class=\"number\">3</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            scene.setMessage(<span class=\"string\">\"Win!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[i] != null &amp;&amp; boat[i].tag == <span class=\"string\">\"Priest\"</span>) pOnb++;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[i] != null &amp;&amp; boat[i].tag == <span class=\"string\">\"Devil\"</span>) dOnb++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (side == <span class=\"number\">1</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_s = priests_start.Count + pOnb;</div><div class=\"line\">            devils_s = devils_start.Count + dOnb;</div><div class=\"line\">            priests_e = priests_end.Count;</div><div class=\"line\">            devils_e = devils_end.Count;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (side == <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_s = priests_start.Count;</div><div class=\"line\">            devils_s = devils_start.Count;</div><div class=\"line\">            priests_e = priests_end.Count + pOnb;</div><div class=\"line\">            devils_e = devils_end.Count + dOnb;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((priests_s != <span class=\"number\">0</span> &amp;&amp; priests_s &lt; devils_s) || (priests_e != <span class=\"number\">0</span> &amp;&amp; priests_e &lt; devils_e))</div><div class=\"line\">        &#123;</div><div class=\"line\">            scene.setMessage(<span class=\"string\">\"Lose!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        check();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"UserInterface-cs\"><a href=\"#UserInterface-cs\" class=\"headerlink\" title=\"UserInterface.cs\"></a><strong>UserInterface.cs</strong></h3><p><img src=\"e.png\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> UserInterface : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    GameSceneController scene;</div><div class=\"line\">    IQueryGameStatus state;</div><div class=\"line\">    IUserActions action;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> width, height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">castw</span><span class=\"params\">(<span class=\"keyword\">float</span> scale)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Screen.width - width) / scale;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">casth</span><span class=\"params\">(<span class=\"keyword\">float</span> scale)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Screen.height - height) / scale;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        scene = GameSceneController.GetInstance();</div><div class=\"line\">        state = GameSceneController.GetInstance() as IQueryGameStatus;</div><div class=\"line\">        action = GameSceneController.GetInstance() as IUserActions;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnGUI</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        width = Screen.width / <span class=\"number\">12</span>;</div><div class=\"line\">        height = Screen.height / <span class=\"number\">12</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">string</span> message = state.isMessage();</div><div class=\"line\">        <span class=\"keyword\">if</span> (message != <span class=\"string\">\"\"</span>)   <span class=\"comment\">// 有 输赢 提示时重新开始</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), message))</div><div class=\"line\">            &#123;</div><div class=\"line\">                action.restart();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.RepeatButton(<span class=\"keyword\">new</span> Rect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">120</span>, <span class=\"number\">20</span>), scene.getBaseCode().gameName))</div><div class=\"line\">            &#123;</div><div class=\"line\">                GUI.TextArea(<span class=\"keyword\">new</span> Rect(<span class=\"number\">10</span>, <span class=\"number\">40</span>, Screen.width - <span class=\"number\">20</span>, Screen.height / <span class=\"number\">2</span>), scene.getBaseCode().gameRule);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!state.isMoving())   <span class=\"comment\">// 船没移动才显示按钮</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Go\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.moveBoat();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">10.5f</span>), casth(<span class=\"number\">1.25f</span>), width, height), <span class=\"string\">\"DevilOn\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.devilSOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">4.3f</span>), casth(<span class=\"number\">1.25f</span>), width, height), <span class=\"string\">\"PriestOn\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.priestSOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.1f</span>), casth(<span class=\"number\">1.25f</span>), width, height), <span class=\"string\">\"DevilOn\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.devilEOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.3f</span>), casth(<span class=\"number\">1.25f</span>), width, height), <span class=\"string\">\"PriestOn\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.priestEOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2.5f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"LeftOff\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.offBoatL();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.65f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"RightOff\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.offBoatR();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>上一篇已经基本上写完了牧师与魔鬼的小游戏，然而代码还是存在不少缺陷的。最主要的就是小船、牧师以及魔鬼的移动问题，我们可以把移动这一动作抽象化出来，添加到动作工厂中，由工厂类控制小船移动。<br>","more":"</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a><strong>基本概念</strong></h2><p>简单工厂模式，MoveToYZAction为组合动作，负责游戏对象的上下船动作，利用IU3dActionCompleted和MoveToAction完成YZ轴上的二段运动。<br><img src=\"a.png\" alt=\"\"></p>\n<h2 id=\"修改类的动作\"><a href=\"#修改类的动作\" class=\"headerlink\" title=\"修改类的动作\"></a><strong>修改类的动作</strong></h2><h3 id=\"单例类GameSceneController\"><a href=\"#单例类GameSceneController\" class=\"headerlink\" title=\"单例类GameSceneController\"></a><strong>单例类GameSceneController</strong></h3><ul>\n<li><p>添加了私有变量moving和message(用来显示输赢信息)</p>\n</li>\n<li><p>添加接口IQueryGameStatus，实现moving和message的查询和设置。</p>\n</li>\n<li><p>去掉了枚举变量state（由moving和message替代）</p>\n</li>\n<li><h3 id=\"类GenGameObject\"><a href=\"#类GenGameObject\" class=\"headerlink\" title=\"类GenGameObject\"></a><strong>类GenGameObject</strong></h3></li>\n<li><p>修改枚举依赖</p>\n</li>\n<li><p>修改输赢提示方式为设置message</p>\n</li>\n<li><p>修改动作实现方式为ActionManage，不在Update中实现。</p>\n</li>\n<li><h3 id=\"UserInterface\"><a href=\"#UserInterface\" class=\"headerlink\" title=\"UserInterface\"></a><strong>UserInterface</strong></h3></li>\n<li><p>修改枚举依赖，通过IQueryGameStatus查询</p>\n</li>\n<li><p>修改输赢提示方式为显示message</p>\n</li>\n</ul>\n<h3 id=\"人机交互\"><a href=\"#人机交互\" class=\"headerlink\" title=\"人机交互\"></a><strong>人机交互</strong></h3><p>小船在移动到对岸过程中，应该组织人机交互，通过UserInterface按钮的隐藏来实现。UserInterface在渲染前会通过IQueryGameStatus查询moving值，moving值为真则不渲染。Moving值在ActionManager中的每个动作完成前会设置成真。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><h3 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h3><p><img src=\"b.png\" alt=\"\"><br><img src=\"c.png\" alt=\"\"><br>以上所有类都写在Com.Mygame空间中，BaseCode类只初始化介绍界面。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//-------------------------SceneController-------------------------------//</span></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IUserActions</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IQueryGameStatus</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isMoving</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMoving</span><span class=\"params\">(<span class=\"keyword\">bool</span> state)</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">isMessage</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(<span class=\"built_in\">string</span> message)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameSceneController : System.Object, IUserActions, IQueryGameStatus</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"number\">_</span>instance;</div><div class=\"line\">        <span class=\"keyword\">private</span> BaseCode <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">        <span class=\"keyword\">private</span> GenGameObject <span class=\"number\">_</span>gen_game_obj;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">bool</span> moving = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> message = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"title\">GetInstance</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>instance)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> GameSceneController();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BaseCode <span class=\"title\">getBaseCode</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setBaseCode</span><span class=\"params\">(BaseCode bc)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_b</span>ase_code)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_b</span>ase_code = bc;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GenGameObject <span class=\"title\">getGenGameObject</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>gen_game_obj;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setGenGameObject</span><span class=\"params\">(GenGameObject ggo)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>gen_game_obj)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>gen_game_obj = ggo;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">isMoving</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> moving; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoving</span><span class=\"params\">(<span class=\"keyword\">bool</span> state)</span> </span>&#123; <span class=\"keyword\">this</span>.moving = state; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">isMessage</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> message; &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(<span class=\"built_in\">string</span> message)</span> </span>&#123; <span class=\"keyword\">this</span>.message = message; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.priestStartOnBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.priestEndOnBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.devilStartOnBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.devilEndOnBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.moveBoat(); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.getOffTheBoat(<span class=\"number\">0</span>); &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span> </span>&#123; <span class=\"number\">_</span>gen_game_obj.getOffTheBoat(<span class=\"number\">1</span>); &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            moving = <span class=\"literal\">false</span>;</div><div class=\"line\">            message = <span class=\"string\">\"\"</span>;</div><div class=\"line\">            Application.LoadLevel(Application.loadedLevelName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//----------------------------ActionManager-------------------------------//</span></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IU3dActionCompleted</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnActionCompleted</span><span class=\"params\">(U3dAction action)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ActionManager : System.Object</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ActionManager <span class=\"number\">_</span>instance;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ActionManager <span class=\"title\">GetInstance</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">_</span>instance == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> ActionManager();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> U3dAction <span class=\"title\">ApplyMoveToAction</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed, IU3dActionCompleted completed)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            MoveToAction ac = obj.AddComponent&lt;MoveToAction&gt;();</div><div class=\"line\">            ac.setting(target, speed, completed);</div><div class=\"line\">            <span class=\"keyword\">return</span> ac;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> U3dAction <span class=\"title\">ApplyMoveToAction</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ApplyMoveToAction(obj, target, speed, null);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> U3dAction <span class=\"title\">ApplyMoveToYZAction</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed, IU3dActionCompleted completed)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            MoveToYZAction ac = obj.AddComponent&lt;MoveToYZAction&gt;();</div><div class=\"line\">            ac.setting(obj, target, speed, completed);</div><div class=\"line\">            <span class=\"keyword\">return</span> ac;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> U3dAction <span class=\"title\">ApplyMoveToYZAction</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ApplyMoveToYZAction(obj, target, speed, null);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> U3dActionException : System.Exception &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> U3dAction : MonoBehaviour</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Free</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            Destroy(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> U3dActionAuto : U3dAction &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> U3dActionMan : U3dAction &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MoveToAction : U3dActionAuto</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> Vector3 target;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> IU3dActionCompleted monitor = null;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setting</span><span class=\"params\">(Vector3 target, <span class=\"keyword\">float</span> speed, IU3dActionCompleted monitor)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">            <span class=\"keyword\">this</span>.speed = speed;</div><div class=\"line\">            <span class=\"keyword\">this</span>.monitor = monitor;</div><div class=\"line\">            GameSceneController.GetInstance().setMoving(<span class=\"literal\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">float</span> step = speed * Time.deltaTime;</div><div class=\"line\">            transform.position = Vector3.MoveTowards(transform.position, target, step);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (transform.position == target)</div><div class=\"line\">            &#123;</div><div class=\"line\">                GameSceneController.GetInstance().setMoving(<span class=\"literal\">false</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (monitor != null)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    monitor.OnActionCompleted(<span class=\"keyword\">this</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                Destroy(<span class=\"keyword\">this</span>);   <span class=\"comment\">// 移动到目标时删除本组件</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// MoveToYZAction 将移动分为y z两个轴，包含两个MoveToAction</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MoveToYZAction : U3dActionAuto, IU3dActionCompleted</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> GameObject obj;</div><div class=\"line\">        <span class=\"keyword\">public</span> Vector3 target;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> IU3dActionCompleted monitor = null;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setting</span><span class=\"params\">(GameObject obj, Vector3 target, <span class=\"keyword\">float</span> speed, IU3dActionCompleted monitor)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.obj = obj;</div><div class=\"line\">            <span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">            <span class=\"keyword\">this</span>.speed = speed;</div><div class=\"line\">            <span class=\"keyword\">this</span>.monitor = monitor;</div><div class=\"line\">            GameSceneController.GetInstance().setMoving(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 若obj比较高，移动到target的z先，然后 回调函数 移动到target的y</span></div><div class=\"line\">            <span class=\"comment\">//  若obj比较低则相反</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (target.y &lt; obj.transform.position.y)</div><div class=\"line\">            &#123;</div><div class=\"line\">                Vector3 targetZ = <span class=\"keyword\">new</span> Vector3(target.x, obj.transform.position.y, target.z);</div><div class=\"line\">                ActionManager.GetInstance().ApplyMoveToAction(obj, targetZ, speed, <span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Vector3 targetY = <span class=\"keyword\">new</span> Vector3(target.x, target.y, obj.transform.position.z);</div><div class=\"line\">                ActionManager.GetInstance().ApplyMoveToAction(obj, targetY, speed, <span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionCompleted</span><span class=\"params\">(U3dAction action)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            ActionManager.GetInstance().ApplyMoveToAction(obj, target, speed, null);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (obj.transform.position == target)</div><div class=\"line\">            &#123;</div><div class=\"line\">                GameSceneController.GetInstance().setMoving(<span class=\"literal\">false</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (monitor != null)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    monitor.OnActionCompleted(<span class=\"keyword\">this</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                Destroy(<span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameName;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameRule;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        GameSceneController my = GameSceneController.GetInstance();</div><div class=\"line\">        my.setBaseCode(<span class=\"keyword\">this</span>);</div><div class=\"line\">        gameName = <span class=\"string\">\"Priests and Devils\"</span>;</div><div class=\"line\">        gameRule = <span class=\"string\">\"Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!             Sphere -- Priest\tCube -- Devil\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"GenGameObject-cs\"><a href=\"#GenGameObject-cs\" class=\"headerlink\" title=\"GenGameObject.cs\"></a><strong>GenGameObject.cs</strong></h3><p><img src=\"d.png\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenGameObject : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    List&lt;GameObject&gt; priests_start = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">    List&lt;GameObject&gt; priests_end = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">    List&lt;GameObject&gt; devils_start = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\">    List&lt;GameObject&gt; devils_end = <span class=\"keyword\">new</span> List&lt;GameObject&gt;();</div><div class=\"line\"></div><div class=\"line\">    GameObject[] boat = <span class=\"keyword\">new</span> GameObject[<span class=\"number\">2</span>];</div><div class=\"line\">    GameObject boat_obj;</div><div class=\"line\">    <span class=\"keyword\">int</span> side = <span class=\"number\">1</span>;               <span class=\"comment\">// 记录船停在哪边，1为开始岸</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">5f</span>;</div><div class=\"line\"></div><div class=\"line\">    Vector3 shoreStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-12</span>);</div><div class=\"line\">    Vector3 shoreEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>);</div><div class=\"line\">    Vector3 boatStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-4</span>);</div><div class=\"line\">    Vector3 boatEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>);</div><div class=\"line\">    Vector3 leftBoatPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">-1.2</span>f);</div><div class=\"line\">    Vector3 rightBoatPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">1.2f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> gap = <span class=\"number\">1.5f</span>;</div><div class=\"line\">    Vector3 priestStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-11</span>f);</div><div class=\"line\">    Vector3 priestEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">8f</span>);</div><div class=\"line\">    Vector3 devilStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-16</span>f);</div><div class=\"line\">    Vector3 devilEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">13f</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        GameSceneController.GetInstance().setGenGameObject(<span class=\"keyword\">this</span>);</div><div class=\"line\">        loadSrc();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadSrc</span><span class=\"params\">()</span>    <span class=\"comment\">// 加载资源</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Shore\"</span>), shoreStartPos, Quaternion.identity);</div><div class=\"line\">        Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Shore\"</span>), shoreEndPos, Quaternion.identity);</div><div class=\"line\"></div><div class=\"line\">        boat_obj = Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Boat\"</span>), boatStartPos, Quaternion.identity) as GameObject;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 初始化牧师和魔鬼</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            GameObject priest = Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Priest\"</span>)) as GameObject;</div><div class=\"line\">            priest.transform.position = getCharacterPosition(priestStartPos, i);</div><div class=\"line\">            priest.tag = <span class=\"string\">\"Priest\"</span>;</div><div class=\"line\">            priests_start.Add(priest);</div><div class=\"line\"></div><div class=\"line\">            GameObject devil = Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Devil\"</span>)) as GameObject;</div><div class=\"line\">            devil.transform.position = getCharacterPosition(devilStartPos, i);</div><div class=\"line\">            devil.tag = <span class=\"string\">\"Devil\"</span>;</div><div class=\"line\">            devils_start.Add(devil);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">boatCapacity</span><span class=\"params\">()</span>    <span class=\"comment\">// 船容量</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> capacity = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[i] == null) capacity++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> capacity;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOnTheBoat</span><span class=\"params\">(GameObject obj)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            obj.transform.parent = boat_obj.transform;</div><div class=\"line\">            Vector3 target = <span class=\"keyword\">new</span> Vector3();</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[<span class=\"number\">0</span>] == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                boat[<span class=\"number\">0</span>] = obj;</div><div class=\"line\">                target = boat_obj.transform.position + leftBoatPos;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                boat[<span class=\"number\">1</span>] = obj;</div><div class=\"line\">                target = boat_obj.transform.position + rightBoatPos;</div><div class=\"line\">            &#125;</div><div class=\"line\">            ActionManager.GetInstance().ApplyMoveToYZAction(obj, target, speed);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (side == <span class=\"number\">1</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                ActionManager.GetInstance().ApplyMoveToAction(boat_obj, boatEndPos, speed);</div><div class=\"line\">                side = <span class=\"number\">2</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (side == <span class=\"number\">2</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                ActionManager.GetInstance().ApplyMoveToAction(boat_obj, boatStartPos, speed);</div><div class=\"line\">                side = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getOffTheBoat</span><span class=\"params\">(<span class=\"keyword\">int</span> bside)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boat[bside] != null)</div><div class=\"line\">        &#123;</div><div class=\"line\">            boat[bside].transform.parent = null;</div><div class=\"line\">            Vector3 target = <span class=\"keyword\">new</span> Vector3();</div><div class=\"line\">            <span class=\"keyword\">if</span> (side == <span class=\"number\">1</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (boat[bside].tag == <span class=\"string\">\"Priest\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    priests_start.Add(boat[bside]);</div><div class=\"line\">                    target = getCharacterPosition(priestStartPos, priests_start.Count - <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[bside].tag == <span class=\"string\">\"Devil\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    devils_start.Add(boat[bside]);</div><div class=\"line\">                    target = getCharacterPosition(devilStartPos, devils_start.Count - <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (side == <span class=\"number\">2</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (boat[bside].tag == <span class=\"string\">\"Priest\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    priests_end.Add(boat[bside]);</div><div class=\"line\">                    target = getCharacterPosition(priestEndPos, priests_end.Count - <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[bside].tag == <span class=\"string\">\"Devil\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    devils_end.Add(boat[bside]);</div><div class=\"line\">                    target = getCharacterPosition(devilEndPos, devils_end.Count - <span class=\"number\">1</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            ActionManager.GetInstance().ApplyMoveToYZAction(boat[bside], target, speed);</div><div class=\"line\">            boat[bside] = null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestStartOnBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; side == <span class=\"number\">1</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            getOnTheBoat(priests_start[priests_start.Count - <span class=\"number\">1</span>]);</div><div class=\"line\">            priests_start.RemoveAt(priests_start.Count - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEndOnBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; side == <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            getOnTheBoat(priests_end[priests_end.Count<span class=\"number\">-1</span>]);</div><div class=\"line\">            priests_end.RemoveAt(priests_end.Count - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilStartOnBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (devils_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; side == <span class=\"number\">1</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            getOnTheBoat(devils_start[devils_start.Count<span class=\"number\">-1</span>]);</div><div class=\"line\">            devils_start.RemoveAt(devils_start.Count - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEndOnBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (devils_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; side == <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            getOnTheBoat(devils_end[devils_end.Count<span class=\"number\">-1</span>]);</div><div class=\"line\">            devils_end.RemoveAt(devils_end.Count - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Vector3 <span class=\"title\">getCharacterPosition</span><span class=\"params\">(Vector3 pos, <span class=\"keyword\">int</span> index)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector3(pos.x, pos.y, pos.z + gap * index);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        GameSceneController scene = GameSceneController.GetInstance();</div><div class=\"line\">        <span class=\"keyword\">int</span> pOnb = <span class=\"number\">0</span>, dOnb = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> priests_s = <span class=\"number\">0</span>, devils_s = <span class=\"number\">0</span>, priests_e = <span class=\"number\">0</span>, devils_e = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_end.Count == <span class=\"number\">3</span> &amp;&amp; devils_end.Count == <span class=\"number\">3</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            scene.setMessage(<span class=\"string\">\"Win!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[i] != null &amp;&amp; boat[i].tag == <span class=\"string\">\"Priest\"</span>) pOnb++;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[i] != null &amp;&amp; boat[i].tag == <span class=\"string\">\"Devil\"</span>) dOnb++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (side == <span class=\"number\">1</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_s = priests_start.Count + pOnb;</div><div class=\"line\">            devils_s = devils_start.Count + dOnb;</div><div class=\"line\">            priests_e = priests_end.Count;</div><div class=\"line\">            devils_e = devils_end.Count;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (side == <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_s = priests_start.Count;</div><div class=\"line\">            devils_s = devils_start.Count;</div><div class=\"line\">            priests_e = priests_end.Count + pOnb;</div><div class=\"line\">            devils_e = devils_end.Count + dOnb;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((priests_s != <span class=\"number\">0</span> &amp;&amp; priests_s &lt; devils_s) || (priests_e != <span class=\"number\">0</span> &amp;&amp; priests_e &lt; devils_e))</div><div class=\"line\">        &#123;</div><div class=\"line\">            scene.setMessage(<span class=\"string\">\"Lose!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        check();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"UserInterface-cs\"><a href=\"#UserInterface-cs\" class=\"headerlink\" title=\"UserInterface.cs\"></a><strong>UserInterface.cs</strong></h3><p><img src=\"e.png\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> UserInterface : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    GameSceneController scene;</div><div class=\"line\">    IQueryGameStatus state;</div><div class=\"line\">    IUserActions action;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> width, height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">castw</span><span class=\"params\">(<span class=\"keyword\">float</span> scale)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Screen.width - width) / scale;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">casth</span><span class=\"params\">(<span class=\"keyword\">float</span> scale)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Screen.height - height) / scale;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        scene = GameSceneController.GetInstance();</div><div class=\"line\">        state = GameSceneController.GetInstance() as IQueryGameStatus;</div><div class=\"line\">        action = GameSceneController.GetInstance() as IUserActions;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnGUI</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        width = Screen.width / <span class=\"number\">12</span>;</div><div class=\"line\">        height = Screen.height / <span class=\"number\">12</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">string</span> message = state.isMessage();</div><div class=\"line\">        <span class=\"keyword\">if</span> (message != <span class=\"string\">\"\"</span>)   <span class=\"comment\">// 有 输赢 提示时重新开始</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), message))</div><div class=\"line\">            &#123;</div><div class=\"line\">                action.restart();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.RepeatButton(<span class=\"keyword\">new</span> Rect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">120</span>, <span class=\"number\">20</span>), scene.getBaseCode().gameName))</div><div class=\"line\">            &#123;</div><div class=\"line\">                GUI.TextArea(<span class=\"keyword\">new</span> Rect(<span class=\"number\">10</span>, <span class=\"number\">40</span>, Screen.width - <span class=\"number\">20</span>, Screen.height / <span class=\"number\">2</span>), scene.getBaseCode().gameRule);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!state.isMoving())   <span class=\"comment\">// 船没移动才显示按钮</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Go\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.moveBoat();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">10.5f</span>), casth(<span class=\"number\">1.25f</span>), width, height), <span class=\"string\">\"DevilOn\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.devilSOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">4.3f</span>), casth(<span class=\"number\">1.25f</span>), width, height), <span class=\"string\">\"PriestOn\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.priestSOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.1f</span>), casth(<span class=\"number\">1.25f</span>), width, height), <span class=\"string\">\"DevilOn\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.devilEOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.3f</span>), casth(<span class=\"number\">1.25f</span>), width, height), <span class=\"string\">\"PriestOn\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.priestEOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2.5f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"LeftOff\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.offBoatL();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.65f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"RightOff\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.offBoatR();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"牧师和魔鬼","toc":true,"date":"2016-07-21T08:18:33.000Z","_content":"使用C#和unity3d实现大一导论课程涉及到的牧师与魔鬼小游戏。游戏规则：船可以搭载两个人，而且必须有一人掌船。无论何时，只要河一边的魔鬼数量多于牧师的数量，游戏就会以失败结束。\n<!--more-->\n## **基本架构**\n- UserInterface：用来创建GUI对象接受玩家动作，处理GUI事件，使用 IUserActions 接口控制游戏。\n\n- SceneController：单实例对象，用来处理对象间通信和实现 IUserActions 接口。\n\n- BaseCode用来保存游戏名称和游戏简介，它注册在 SceneController 中。\n\n- GenGameObject：用来创建游戏对象和处理对象运动，它也注册在 SceneController 中。IUserActions 接口通过与 GenGameObject 互动完成游戏逻辑。\n\n![](1.png)\n![](2.png)\n\n## **BaseCode 脚本**\n建立 BaseCode 脚本，并挂载到主摄像机。在 BaseCode 脚本里面声明一个新的命名空间 Com.Mygame，并把单实例对象GameSceneController 定义其中。这样的话，其它脚本要使用 GameSceneController 只需要在脚本开头添加 “using Com.Mygame” 就可以使用对象了，同时命名空间也将我们自己的类和系统类分别开来。\n部分代码如下：\n\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\nnamespace Com.Mygame {\n\t\n\tpublic class GameSceneController: System.Object {\n\t\t\n\t\tprivate static GameSceneController _instance;\n\t\tprivate BaseCode _base_code;\n\t\t\n\t\tpublic static GameSceneController GetInstance() {\n\t\t\tif (null == _instance) {\n\t\t\t\t_instance = new GameSceneController();\n\t\t\t}\n\t\t\treturn _instance;\n\t\t}\n\t\t\n\t\tpublic BaseCode getBaseCode() {\n\t\t\treturn _base_code;\n\t\t}\n\t\t\n\t\tinternal void setBaseCode(BaseCode bc) {\n\t\t\tif (null == _base_code) {\n\t\t\t\t_base_code = bc;\n\t\t\t}\n\t\t}\n\t}\n}\n\npublic class BaseCode : MonoBehaviour {\n\t\n\tpublic string gameName;\n\tpublic string gameRule;\n\t\n\tvoid Start () {\n\t\tGameSceneController my = GameSceneController.GetInstance();\n\t\tmy.setBaseCode(this);\n\t}\n}\n```\n\n\n单例类，即是全局中只能存在唯一一个对象的类，通过函数GetInstance()可以获得这个类的实例对象。因为 GameSceneController 单例类直接声明在 Com.Mygame 命名空间里，因此是全局的，在其中注入的对象都可以看作是全局对象，比如 BaseCode 对象。\n\n这样做的目的是实现代码的MVC架构，通过在单例类中注入对象可以实现对象间的通信，而无需使用 Find、SendMessage 这类破坏程序结构的通讯耦合语句。\n\n## **GenGameObject脚本**\n\n### **基本设置**\n\n部分代码：\n\n\n``` cpp\npublic class GenGameObject : MonoBehaviour {\n\n\tStack<GameObject> priests_start = new Stack<GameObject>();\n\tStack<GameObject> priests_end = new Stack<GameObject>();\n\tStack<GameObject> devils_start = new Stack<GameObject>();\n\tStack<GameObject> devils_end = new Stack<GameObject>();\n\n\tGameObject[] boat = new GameObject[2];\n\tGameObject boat_obj;\n\tpublic float speed = 100f;\n\n\tGameSceneController my;\n\n\tVector3 shoreStartPos = new Vector3(0, 0, -12);\n\tVector3 shoreEndPos = new Vector3(0, 0, 12);\n\tVector3 boatStartPos = new Vector3(0, 0, -4);\n\tVector3 boatEndPos = new Vector3(0, 0, 4);\n\n\tfloat gap = 1.5f;\n\tVector3 priestStartPos = new Vector3(0, 2.7f, -11f);\n\tVector3 priestEndPos = new Vector3(0, 2.7f, 8f);\n\tVector3 devilStartPos = new Vector3(0, 2.7f, -16f);\n\tVector3 devilEndPos = new Vector3(0, 2.7f, 13f);\n    // ...\n}\n\n```\n\n\n这部分声明了 GenGameObject  各变量，其中我打算用 Stack 集合类型存储牧师和魔鬼对象，start表示开始岸，end表示目标岸。\n\n船需要三个变量，boat是一个对象数组，用来存储船所承载的物体，boat_obj为船的实体。Speed为公有变量（方便更改），代表船行驶的速度。\n\nMy是一个 GameSceneController 对象，之所以需要 GameSceneController，是因为游戏逻辑需要“状态”，这些“状态”为枚举类型，并且保存在 GameSceneController 中。\n\n剩下的一系列 Vector3 类型，均表示物理位置，它们会在牧师、魔鬼、河岸、船预设实例化的时候被使用，或者在游戏物体需要移动时使用。\n\n### **完善动作**\n\n由于牧师和魔鬼的位置时刻要根据堆栈的数据变化，因此先定义一个 setCharacterPositions 函数。该函数接受一个stack参数，和一个Vector3坐标。它的作用就是把stack里的object从Vector3坐标开始依次排开：\n\n\n``` cpp\nvoid setCharacterPositions(Stack<GameObject> stack, Vector3 pos) {\n\tGameObject[] array = stack.ToArray();\n\tfor (int i = 0; i < stack.Count; ++i) {\n\t\tarray[i].transform.position = new Vector3(pos.x, pos.y, pos.z + gap*i);\n\t}\n}\n```\n\n\n然后在 Update 方法里便可以使用： \n\n\n``` cpp\nvoid Update() {\n\tsetCharacterPositions(priests_start, priestStartPos);\n\tsetCharacterPositions(priests_end, priestEndPos);\n\tsetCharacterPositions(devils_start, devilStartPos);\n\tsetCharacterPositions(devils_end, devilEndPos);\n    // ...\n}\n\n```\n\n\n#### **上船**\n\n把一个游戏对象设为船的子对象。定义 getOnTheBoat 函数，接受一个游戏对象为参数，只要船上有空位，就把游戏对象设置为船的子对象，这样游戏对象便能跟着船移动：\n\n\n``` cpp\nvoid getOnTheBoat(GameObject obj) {\n\tif (boatCapacity() != 0) {\n\t\tobj.transform.parent = boat_obj.transform;\n\t\tif (boat[0] == null) {\n\t\t\tboat[0] = obj;\n\t\t\tobj.transform.localPosition = new Vector3(0, 1.2f, -0.3f);\n\t\t} else {\n\t\t\tboat[1] = obj;\n\t\t\tobj.transform.localPosition = new Vector3(0, 1.2f, 0.3f);\n\t\t}\n\t}\n}\n```\n\n\n#### **开船**\n\n根据游戏“状态”，把船从一方移动到另一方。这里，我们讨论到了游戏状态，我们需要游戏状态了解船当前的位置。游戏状态作为枚举类型声明在 BaseCode 脚本中：\n\n\n``` cpp\n    public enum State { BSTART, BSEMOVING, BESMOVING, BEND, WIN, LOSE };\n    // 停在开始岸（左边） 左移动到右  右到左  在右岸  \n```\n\n\n有了游戏状态，只需要定义一个 moveBoat 函数，修改游戏状态为MOVING即可，剩下的动作均在Update函数中完成：\n\n\n``` cpp\npublic void moveBoat() {\n\tif (boatCapacity() != 2) {\n\t\tif (my.state == State.BSTART) {\n\t\t\tmy.state = State.BSEMOVING;\n\t\t}\n\t\telse if (my.state == State.BEND) {\n\t\t\tmy.state = State.BESMOVING;\n\t\t}\n\t}\n}\n```\n\n\n#### **下船**\n取消船和游戏对象的父子关系，并且根据游戏“状态”将游戏对象压入stack。定义 getOffTheBoat 函数，接受一个整型变量为参数，该变量可以为0或1：\n\n\n``` cpp\npublic void getOffTheBoat(int side) {\n\tif (boat[side] != null) {\n\t\tboat[side].transform.parent = null;\n\t\tif (my.state == State.BEND) {\n\t\t\tif (boat[side].tag == \"Priest\") {\n\t\t\t\tpriests_end.Push(boat[side]);\n\t\t\t}\n\t\t\telse if (boat[side].tag == \"Devil\") {\n\t\t\t\tdevils_end.Push(boat[side]);\n\t\t\t}\n\t\t}\n\t\telse if (my.state == State.BSTART) {\n\t\t\tif (boat[side].tag == \"Priest\") {\n\t\t\t\tpriests_start.Push(boat[side]);\n\t\t\t}\n\t\t\telse if (boat[side].tag == \"Devil\") {\n\t\t\t\tdevils_start.Push(boat[side]);\n\t\t\t}\n\t\t}\n\t\tboat[side] = null;\n\t}\n}\n```\n\n\n注意，为了区分出牧师和魔鬼，我给牧师和魔鬼预设分别添加了Tag。Tag需要在控制面板添加。\n![](3.png)\n![](4.png)\n\n\n修改 Update 函数，加入船的移动，游戏结束条件的判断：\n\n\n``` cpp\nvoid Update() {\n\tsetCharacterPositions(priests_start, priestStartPos);\n\tsetCharacterPositions(priests_end, priestEndPos);\n\tsetCharacterPositions(devils_start, devilStartPos);\n\tsetCharacterPositions(devils_end, devilEndPos);\n\n\tif (my.state == State.BSEMOVING) {\n\t\tboat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatEndPos, speed*Time.deltaTime);\n\t\tif (boat_obj.transform.position == boatEndPos) {\n\t\t\tmy.state = State.BEND;\n\t\t}\n\t}\n\telse if (my.state == State.BESMOVING) {\n\t\tboat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatStartPos, speed*Time.deltaTime);\n\t\tif (boat_obj.transform.position == boatStartPos) {\n\t\t\tmy.state = State.BSTART;\n\t\t}\n\t}\n\telse check();\n}\n```\n\n\n为了与玩家规则表对应，还需要定义4个函数：\npriestStartOnBoat、priestEndOnBoat、devilStartOnBoat、devilEndOnBoat\n它们的作用是调用相应的 getOnTheBoat 函数，把玩家指定的对象放到船上：\n\n``` cpp\npublic void priestStartOnBoat() {\n\tif (priests_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)\n\t\tgetOnTheBoat(priests_start.Pop());\n}\n\npublic void priestEndOnBoat() {\n\tif (priests_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)\n\t\tgetOnTheBoat(priests_end.Pop());\n}\n\npublic void devilStartOnBoat() {\n\tif (devils_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)\n\t\tgetOnTheBoat(devils_start.Pop());\n}\n\npublic void devilEndOnBoat() {\n\tif (devils_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)\n\t\tgetOnTheBoat(devils_end.Pop());\n}\n```\n\n\n#### **添加接口**\n回到 BaseCode 脚本，在命名空间 Com.Mygame 里添加 IUserActions 接口：\n\n``` cpp\npublic interface IUserActions {\n\tvoid priestSOnB();\n\tvoid priestEOnB();\n\tvoid devilSOnB();\n\tvoid devilEOnB();\n\tvoid moveBoat();\n\tvoid offBoatL();\n\tvoid offBoatR();\n\tvoid restart();\n}\n```\n\n\n在 GameSceneController 中添加接口的实现方法,即调用相关的函数。\n\n\n\n## **UserInterface脚本**\n这里就不多讲了，主要是编写OnGUI函数，在合适的位置添加按钮，并且调用按钮所对应的接口函数：\n\n\n``` cpp\nif (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Go\")) {\n\taction.moveBoat();\n}\nif (GUI.Button(new Rect(castw(10.5f), casth(4f), width, height), \"On\")) {\n\taction.devilSOnB();\n}\nif (GUI.Button(new Rect(castw(4.3f), casth(4f), width, height), \"On\")) {\n\taction.priestSOnB();\n}\nif (GUI.Button(new Rect(castw(1.1f), casth(4f), width, height), \"On\")) {\n\taction.devilEOnB();\n}\nif (GUI.Button(new Rect(castw(1.3f), casth(4f), width, height), \"On\")) {\n\taction.priestEOnB();\n}\nif (GUI.Button(new Rect(castw(2.5f), casth(1.3f), width, height), \"Off\")) {\n\taction.offBoatL();\n}\nif (GUI.Button(new Rect(castw(1.7f), casth(1.3f), width, height), \"Off\")) {\n\taction.offBoatR();\n}\n```\n\n\n最终游戏界面：\n![](5.png)\n\n\n## **unity界面**\n- 新建脚本GenGameObjects，挂载到主摄相机。新建脚本IUserInterface，挂载到一个Empty对象。\n- 先在游戏面板创建游戏对象并调整其大小，在 Assets 文件夹下新建 Resources 文件夹，在 Resources 文件夹下新建 Prefabs 文件夹，然后将创建的对象拖入 Prefabs 中成为预设物体。这里牧师为球体、魔鬼为正方体、河岸为长方体、船也为长方体：![](2.png)\n- 设置主摄像机的投影模式为正交投影，调整大小，这样看到的所有物体都是平面的了。\n\n## **完整代码**\n### **BaseCode\\.cs**\n\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\nnamespace Com.Mygame\n{\n    public enum State { BSTART, BSEMOVING, BESMOVING, BEND, WIN, LOSE };\n    // 停在开始岸（左边） 左移动到右  右到左  在右岸  \n\n    public interface IUserActions\n    {\n        void priestSOnB();\n        void priestEOnB();\n        void devilSOnB();\n        void devilEOnB();\n        void moveBoat();\n        void offBoatL();\n        void offBoatR();\n        void restart();\n    }\n\n    public class GameSceneController : System.Object, IUserActions\n    {\n\n        private static GameSceneController _instance;\n        private BaseCode _base_code;\n        private GenGameObject _gen_game_obj;\n        public State state = State.BSTART;\n\n        public static GameSceneController GetInstance()\n        {\n            if (null == _instance)\n            {\n                _instance = new GameSceneController();\n            }\n            return _instance;\n        }\n\n        public BaseCode getBaseCode()\n        {\n            return _base_code;\n        }\n\n        internal void setBaseCode(BaseCode bc)\n        {\n            if (null == _base_code)\n            {\n                _base_code = bc;\n            }\n        }\n\n        public GenGameObject getGenGameObject()\n        {\n            return _gen_game_obj;\n        }\n\n        internal void setGenGameObject(GenGameObject ggo)\n        {\n            if (null == _gen_game_obj)\n            {\n                _gen_game_obj = ggo;\n            }\n        }\n\n        public void priestSOnB()\n        {\n            _gen_game_obj.priestStartOnBoat();\n        }\n\n        public void priestEOnB()\n        {\n            _gen_game_obj.priestEndOnBoat();\n        }\n\n        public void devilSOnB()\n        {\n            _gen_game_obj.devilStartOnBoat();\n        }\n\n        public void devilEOnB()\n        {\n            _gen_game_obj.devilEndOnBoat();\n        }\n\n        public void moveBoat()\n        {\n            _gen_game_obj.moveBoat();\n        }\n\n        public void offBoatL()\n        {\n            _gen_game_obj.getOffTheBoat(0);\n        }\n\n        public void offBoatR()\n        {\n            _gen_game_obj.getOffTheBoat(1);\n        }\n\n        public void restart()\n        {\n            Application.LoadLevel(Application.loadedLevelName);\n            state = State.BSTART;\n        }\n    }\n}\n\npublic class BaseCode : MonoBehaviour\n{\n\n    public string gameName;\n    public string gameRule;\n\n    void Start()\n    {\n        GameSceneController my = GameSceneController.GetInstance();\n        my.setBaseCode(this);\n        gameName = \"Priests and Devils\";\n        gameRule = \"Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!             Sphere -- Priest\tCube -- Devil\";\n    }\n}\n\n\n```\n\n\n### **GenGameObject\\.cs**\n\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.Mygame;\n\npublic class GenGameObject : MonoBehaviour\n{\n\n    Stack<GameObject> priests_start = new Stack<GameObject>();\n    Stack<GameObject> priests_end = new Stack<GameObject>();\n    Stack<GameObject> devils_start = new Stack<GameObject>();\n    Stack<GameObject> devils_end = new Stack<GameObject>();\n\n    GameObject[] boat = new GameObject[2];  // 船上物体\n    GameObject boat_obj;  // 船实体\n    public float speed = 100f;\n\n    GameSceneController my;\n\n    Vector3 shoreStartPos = new Vector3(0, 0, -12);\n    Vector3 shoreEndPos = new Vector3(0, 0, 12);\n    Vector3 boatStartPos = new Vector3(0, 0, -4);\n    Vector3 boatEndPos = new Vector3(0, 0, 4);\n\n    float gap = 1.5f;  // 控制速度\n    Vector3 priestStartPos = new Vector3(0, 2.7f, -11f);\n    Vector3 priestEndPos = new Vector3(0, 2.7f, 8f);\n    Vector3 devilStartPos = new Vector3(0, 2.7f, -16f);\n    Vector3 devilEndPos = new Vector3(0, 2.7f, 13f);\n\n\n    void Start()\n    {\n        my = GameSceneController.GetInstance();\n        my.setGenGameObject(this);\n        loadSrc();\n    }\n\n    void loadSrc()\n    {\n        // shore\n        Instantiate(Resources.Load(\"Prefabs/Shore\"), shoreStartPos, Quaternion.identity);\n        Instantiate(Resources.Load(\"Prefabs/Shore\"), shoreEndPos, Quaternion.identity);\n        // boat\n        boat_obj = Instantiate(Resources.Load(\"Prefabs/Boat\"), boatStartPos, Quaternion.identity) as GameObject;\n        // priests & devils\n        for (int i = 0; i < 3; ++i)\n        {\n            priests_start.Push(Instantiate(Resources.Load(\"Prefabs/Priest\")) as GameObject);\n            devils_start.Push(Instantiate(Resources.Load(\"Prefabs/Devil\")) as GameObject);\n        }\n    }\n\n    int boatCapacity()\n    {\n        int capacity = 0;\n        for (int i = 0; i < 2; ++i)\n        {\n            if (boat[i] == null) capacity++;\n        }\n        return capacity;\n    }\n\n    void getOnTheBoat(GameObject obj)\n    {\n        if (boatCapacity() != 0)\n        {\n            obj.transform.parent = boat_obj.transform;\n            if (boat[0] == null)\n            {\n                boat[0] = obj;\n                obj.transform.localPosition = new Vector3(0, 1.2f, -0.3f);\n            }\n            else {\n                boat[1] = obj;\n                obj.transform.localPosition = new Vector3(0, 1.2f, 0.3f);\n            }\n        }\n    }\n\n    public void moveBoat()\n    {\n        if (boatCapacity() != 2)\n        {\n            if (my.state == State.BSTART)\n            {\n                my.state = State.BSEMOVING;\n            }\n            else if (my.state == State.BEND)\n            {\n                my.state = State.BESMOVING;\n            }\n        }\n    }\n\n    public void getOffTheBoat(int side)\n    {\n        if (boat[side] != null)\n        {\n            boat[side].transform.parent = null;\n            if (my.state == State.BEND)\n            {\n                if (boat[side].tag == \"Priest\")\n                {\n                    priests_end.Push(boat[side]);\n                }\n                else if (boat[side].tag == \"Devil\")\n                {\n                    devils_end.Push(boat[side]);\n                }\n            }\n            else if (my.state == State.BSTART)\n            {\n                if (boat[side].tag == \"Priest\")\n                {\n                    priests_start.Push(boat[side]);\n                }\n                else if (boat[side].tag == \"Devil\")\n                {\n                    devils_start.Push(boat[side]);\n                }\n            }\n            boat[side] = null;\n        }\n    }\n\n    public void priestStartOnBoat()\n    {\n        if (priests_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)\n            getOnTheBoat(priests_start.Pop());\n    }\n\n    public void priestEndOnBoat()\n    {\n        if (priests_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)\n            getOnTheBoat(priests_end.Pop());\n    }\n\n    public void devilStartOnBoat()\n    {\n        if (devils_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)\n            getOnTheBoat(devils_start.Pop());\n    }\n\n    public void devilEndOnBoat()\n    {\n        if (devils_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)\n            getOnTheBoat(devils_end.Pop());\n    }\n\n    void setCharacterPositions(Stack<GameObject> stack, Vector3 pos)\n    {\n        GameObject[] array = stack.ToArray();\n        for (int i = 0; i < stack.Count; ++i)\n        {\n            array[i].transform.position = new Vector3(pos.x, pos.y, pos.z + gap * i);\n        }\n    }\n\n    void check()\n    {\n        int pOnb = 0, dOnb = 0;\n        int priests_s = 0, devils_s = 0, priests_e = 0, devils_e = 0;\n\n        if (priests_end.Count == 3 && devils_end.Count == 3)\n        {\n            my.state = State.WIN;\n            return;\n        }\n\n        for (int i = 0; i < 2; ++i)\n        {\n            if (boat[i] != null && boat[i].tag == \"Priest\") pOnb++;\n            else if (boat[i] != null && boat[i].tag == \"Devil\") dOnb++;\n        }\n        if (my.state == State.BSTART)\n        {\n            priests_s = priests_start.Count + pOnb;\n            devils_s = devils_start.Count + dOnb;\n            priests_e = priests_end.Count;\n            devils_e = devils_end.Count;\n        }\n        else if (my.state == State.BEND)\n        {\n            priests_s = priests_start.Count;\n            devils_s = devils_start.Count;\n            priests_e = priests_end.Count + pOnb;\n            devils_e = devils_end.Count + dOnb;\n        }\n        if ((priests_s != 0 && priests_s < devils_s) || (priests_e != 0 && priests_e < devils_e))\n        {\n            my.state = State.LOSE;\n        }\n    }\n\n    void Update()\n    {\n        setCharacterPositions(priests_start, priestStartPos);\n        setCharacterPositions(priests_end, priestEndPos);\n        setCharacterPositions(devils_start, devilStartPos);\n        setCharacterPositions(devils_end, devilEndPos);\n\n        if (my.state == State.BSEMOVING)\n        {\n            boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatEndPos, speed * Time.deltaTime);\n            if (boat_obj.transform.position == boatEndPos)\n            {\n                my.state = State.BEND;\n            }\n        }\n        else if (my.state == State.BESMOVING)\n        {\n            boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatStartPos, speed * Time.deltaTime);\n            if (boat_obj.transform.position == boatStartPos)\n            {\n                my.state = State.BSTART;\n            }\n        }\n        else check();\n    }\n}\n\n\n```\n\n\n### **UserInterface\\.cs**\n\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\npublic class UserInterface : MonoBehaviour\n{\n\n    GameSceneController my;\n    IUserActions action;\n\n    float width, height;\n\n    float castw(float scale)\n    {\n        return (Screen.width - width) / scale;\n    }\n\n    float casth(float scale)\n    {\n        return (Screen.height - height) / scale;\n    }\n\n    void Start()\n    {\n        my = GameSceneController.GetInstance();\n        action = GameSceneController.GetInstance() as IUserActions;\n    }\n\n    void OnGUI()\n    {\n        width = Screen.width / 12;\n        height = Screen.height / 12;\n        print(my.state);\n        if (my.state == State.WIN)\n        {\n            if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Win!\"))\n            {\n                action.restart();\n            }\n        }\n        else if (my.state == State.LOSE)\n        {\n            if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Lose!\"))\n            {\n                action.restart();\n            }\n        }\n        else {\n            if (GUI.RepeatButton(new Rect(10, 10, 120, 20), my.getBaseCode().gameName))\n            {\n                GUI.TextArea(new Rect(10, 40, Screen.width - 20, Screen.height / 2), my.getBaseCode().gameRule);\n            }\n            else if (my.state == State.BSTART || my.state == State.BEND)\n            {\n                if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Go\"))\n                {\n                    action.moveBoat();\n                }\n                if (GUI.Button(new Rect(castw(10.5f), casth(4f), width, height), \"On\"))\n                {\n                    action.devilSOnB();\n                }\n                if (GUI.Button(new Rect(castw(4.3f), casth(4f), width, height), \"On\"))\n                {\n                    action.priestSOnB();\n                }\n                if (GUI.Button(new Rect(castw(1.1f), casth(4f), width, height), \"On\"))\n                {\n                    action.devilEOnB();\n                }\n                if (GUI.Button(new Rect(castw(1.3f), casth(4f), width, height), \"On\"))\n                {\n                    action.priestEOnB();\n                }\n                if (GUI.Button(new Rect(castw(2.5f), casth(1.3f), width, height), \"Off\"))\n                {\n                    action.offBoatL();\n                }\n                if (GUI.Button(new Rect(castw(1.7f), casth(1.3f), width, height), \"Off\"))\n                {\n                    action.offBoatR();\n                }\n            }\n        }\n    }\n}\n\n\n```\n\n\n","source":"_posts/牧师和魔鬼.md","raw":"---\ntitle: 牧师和魔鬼\ntoc: true\ndate: 2016-07-21 16:18:33\ntags:\n- C#\n- unity3d\n- MVC\ncategories: 3D游戏开发\n---\n使用C#和unity3d实现大一导论课程涉及到的牧师与魔鬼小游戏。游戏规则：船可以搭载两个人，而且必须有一人掌船。无论何时，只要河一边的魔鬼数量多于牧师的数量，游戏就会以失败结束。\n<!--more-->\n## **基本架构**\n- UserInterface：用来创建GUI对象接受玩家动作，处理GUI事件，使用 IUserActions 接口控制游戏。\n\n- SceneController：单实例对象，用来处理对象间通信和实现 IUserActions 接口。\n\n- BaseCode用来保存游戏名称和游戏简介，它注册在 SceneController 中。\n\n- GenGameObject：用来创建游戏对象和处理对象运动，它也注册在 SceneController 中。IUserActions 接口通过与 GenGameObject 互动完成游戏逻辑。\n\n![](1.png)\n![](2.png)\n\n## **BaseCode 脚本**\n建立 BaseCode 脚本，并挂载到主摄像机。在 BaseCode 脚本里面声明一个新的命名空间 Com.Mygame，并把单实例对象GameSceneController 定义其中。这样的话，其它脚本要使用 GameSceneController 只需要在脚本开头添加 “using Com.Mygame” 就可以使用对象了，同时命名空间也将我们自己的类和系统类分别开来。\n部分代码如下：\n\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\nnamespace Com.Mygame {\n\t\n\tpublic class GameSceneController: System.Object {\n\t\t\n\t\tprivate static GameSceneController _instance;\n\t\tprivate BaseCode _base_code;\n\t\t\n\t\tpublic static GameSceneController GetInstance() {\n\t\t\tif (null == _instance) {\n\t\t\t\t_instance = new GameSceneController();\n\t\t\t}\n\t\t\treturn _instance;\n\t\t}\n\t\t\n\t\tpublic BaseCode getBaseCode() {\n\t\t\treturn _base_code;\n\t\t}\n\t\t\n\t\tinternal void setBaseCode(BaseCode bc) {\n\t\t\tif (null == _base_code) {\n\t\t\t\t_base_code = bc;\n\t\t\t}\n\t\t}\n\t}\n}\n\npublic class BaseCode : MonoBehaviour {\n\t\n\tpublic string gameName;\n\tpublic string gameRule;\n\t\n\tvoid Start () {\n\t\tGameSceneController my = GameSceneController.GetInstance();\n\t\tmy.setBaseCode(this);\n\t}\n}\n```\n\n\n单例类，即是全局中只能存在唯一一个对象的类，通过函数GetInstance()可以获得这个类的实例对象。因为 GameSceneController 单例类直接声明在 Com.Mygame 命名空间里，因此是全局的，在其中注入的对象都可以看作是全局对象，比如 BaseCode 对象。\n\n这样做的目的是实现代码的MVC架构，通过在单例类中注入对象可以实现对象间的通信，而无需使用 Find、SendMessage 这类破坏程序结构的通讯耦合语句。\n\n## **GenGameObject脚本**\n\n### **基本设置**\n\n部分代码：\n\n\n``` cpp\npublic class GenGameObject : MonoBehaviour {\n\n\tStack<GameObject> priests_start = new Stack<GameObject>();\n\tStack<GameObject> priests_end = new Stack<GameObject>();\n\tStack<GameObject> devils_start = new Stack<GameObject>();\n\tStack<GameObject> devils_end = new Stack<GameObject>();\n\n\tGameObject[] boat = new GameObject[2];\n\tGameObject boat_obj;\n\tpublic float speed = 100f;\n\n\tGameSceneController my;\n\n\tVector3 shoreStartPos = new Vector3(0, 0, -12);\n\tVector3 shoreEndPos = new Vector3(0, 0, 12);\n\tVector3 boatStartPos = new Vector3(0, 0, -4);\n\tVector3 boatEndPos = new Vector3(0, 0, 4);\n\n\tfloat gap = 1.5f;\n\tVector3 priestStartPos = new Vector3(0, 2.7f, -11f);\n\tVector3 priestEndPos = new Vector3(0, 2.7f, 8f);\n\tVector3 devilStartPos = new Vector3(0, 2.7f, -16f);\n\tVector3 devilEndPos = new Vector3(0, 2.7f, 13f);\n    // ...\n}\n\n```\n\n\n这部分声明了 GenGameObject  各变量，其中我打算用 Stack 集合类型存储牧师和魔鬼对象，start表示开始岸，end表示目标岸。\n\n船需要三个变量，boat是一个对象数组，用来存储船所承载的物体，boat_obj为船的实体。Speed为公有变量（方便更改），代表船行驶的速度。\n\nMy是一个 GameSceneController 对象，之所以需要 GameSceneController，是因为游戏逻辑需要“状态”，这些“状态”为枚举类型，并且保存在 GameSceneController 中。\n\n剩下的一系列 Vector3 类型，均表示物理位置，它们会在牧师、魔鬼、河岸、船预设实例化的时候被使用，或者在游戏物体需要移动时使用。\n\n### **完善动作**\n\n由于牧师和魔鬼的位置时刻要根据堆栈的数据变化，因此先定义一个 setCharacterPositions 函数。该函数接受一个stack参数，和一个Vector3坐标。它的作用就是把stack里的object从Vector3坐标开始依次排开：\n\n\n``` cpp\nvoid setCharacterPositions(Stack<GameObject> stack, Vector3 pos) {\n\tGameObject[] array = stack.ToArray();\n\tfor (int i = 0; i < stack.Count; ++i) {\n\t\tarray[i].transform.position = new Vector3(pos.x, pos.y, pos.z + gap*i);\n\t}\n}\n```\n\n\n然后在 Update 方法里便可以使用： \n\n\n``` cpp\nvoid Update() {\n\tsetCharacterPositions(priests_start, priestStartPos);\n\tsetCharacterPositions(priests_end, priestEndPos);\n\tsetCharacterPositions(devils_start, devilStartPos);\n\tsetCharacterPositions(devils_end, devilEndPos);\n    // ...\n}\n\n```\n\n\n#### **上船**\n\n把一个游戏对象设为船的子对象。定义 getOnTheBoat 函数，接受一个游戏对象为参数，只要船上有空位，就把游戏对象设置为船的子对象，这样游戏对象便能跟着船移动：\n\n\n``` cpp\nvoid getOnTheBoat(GameObject obj) {\n\tif (boatCapacity() != 0) {\n\t\tobj.transform.parent = boat_obj.transform;\n\t\tif (boat[0] == null) {\n\t\t\tboat[0] = obj;\n\t\t\tobj.transform.localPosition = new Vector3(0, 1.2f, -0.3f);\n\t\t} else {\n\t\t\tboat[1] = obj;\n\t\t\tobj.transform.localPosition = new Vector3(0, 1.2f, 0.3f);\n\t\t}\n\t}\n}\n```\n\n\n#### **开船**\n\n根据游戏“状态”，把船从一方移动到另一方。这里，我们讨论到了游戏状态，我们需要游戏状态了解船当前的位置。游戏状态作为枚举类型声明在 BaseCode 脚本中：\n\n\n``` cpp\n    public enum State { BSTART, BSEMOVING, BESMOVING, BEND, WIN, LOSE };\n    // 停在开始岸（左边） 左移动到右  右到左  在右岸  \n```\n\n\n有了游戏状态，只需要定义一个 moveBoat 函数，修改游戏状态为MOVING即可，剩下的动作均在Update函数中完成：\n\n\n``` cpp\npublic void moveBoat() {\n\tif (boatCapacity() != 2) {\n\t\tif (my.state == State.BSTART) {\n\t\t\tmy.state = State.BSEMOVING;\n\t\t}\n\t\telse if (my.state == State.BEND) {\n\t\t\tmy.state = State.BESMOVING;\n\t\t}\n\t}\n}\n```\n\n\n#### **下船**\n取消船和游戏对象的父子关系，并且根据游戏“状态”将游戏对象压入stack。定义 getOffTheBoat 函数，接受一个整型变量为参数，该变量可以为0或1：\n\n\n``` cpp\npublic void getOffTheBoat(int side) {\n\tif (boat[side] != null) {\n\t\tboat[side].transform.parent = null;\n\t\tif (my.state == State.BEND) {\n\t\t\tif (boat[side].tag == \"Priest\") {\n\t\t\t\tpriests_end.Push(boat[side]);\n\t\t\t}\n\t\t\telse if (boat[side].tag == \"Devil\") {\n\t\t\t\tdevils_end.Push(boat[side]);\n\t\t\t}\n\t\t}\n\t\telse if (my.state == State.BSTART) {\n\t\t\tif (boat[side].tag == \"Priest\") {\n\t\t\t\tpriests_start.Push(boat[side]);\n\t\t\t}\n\t\t\telse if (boat[side].tag == \"Devil\") {\n\t\t\t\tdevils_start.Push(boat[side]);\n\t\t\t}\n\t\t}\n\t\tboat[side] = null;\n\t}\n}\n```\n\n\n注意，为了区分出牧师和魔鬼，我给牧师和魔鬼预设分别添加了Tag。Tag需要在控制面板添加。\n![](3.png)\n![](4.png)\n\n\n修改 Update 函数，加入船的移动，游戏结束条件的判断：\n\n\n``` cpp\nvoid Update() {\n\tsetCharacterPositions(priests_start, priestStartPos);\n\tsetCharacterPositions(priests_end, priestEndPos);\n\tsetCharacterPositions(devils_start, devilStartPos);\n\tsetCharacterPositions(devils_end, devilEndPos);\n\n\tif (my.state == State.BSEMOVING) {\n\t\tboat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatEndPos, speed*Time.deltaTime);\n\t\tif (boat_obj.transform.position == boatEndPos) {\n\t\t\tmy.state = State.BEND;\n\t\t}\n\t}\n\telse if (my.state == State.BESMOVING) {\n\t\tboat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatStartPos, speed*Time.deltaTime);\n\t\tif (boat_obj.transform.position == boatStartPos) {\n\t\t\tmy.state = State.BSTART;\n\t\t}\n\t}\n\telse check();\n}\n```\n\n\n为了与玩家规则表对应，还需要定义4个函数：\npriestStartOnBoat、priestEndOnBoat、devilStartOnBoat、devilEndOnBoat\n它们的作用是调用相应的 getOnTheBoat 函数，把玩家指定的对象放到船上：\n\n``` cpp\npublic void priestStartOnBoat() {\n\tif (priests_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)\n\t\tgetOnTheBoat(priests_start.Pop());\n}\n\npublic void priestEndOnBoat() {\n\tif (priests_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)\n\t\tgetOnTheBoat(priests_end.Pop());\n}\n\npublic void devilStartOnBoat() {\n\tif (devils_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)\n\t\tgetOnTheBoat(devils_start.Pop());\n}\n\npublic void devilEndOnBoat() {\n\tif (devils_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)\n\t\tgetOnTheBoat(devils_end.Pop());\n}\n```\n\n\n#### **添加接口**\n回到 BaseCode 脚本，在命名空间 Com.Mygame 里添加 IUserActions 接口：\n\n``` cpp\npublic interface IUserActions {\n\tvoid priestSOnB();\n\tvoid priestEOnB();\n\tvoid devilSOnB();\n\tvoid devilEOnB();\n\tvoid moveBoat();\n\tvoid offBoatL();\n\tvoid offBoatR();\n\tvoid restart();\n}\n```\n\n\n在 GameSceneController 中添加接口的实现方法,即调用相关的函数。\n\n\n\n## **UserInterface脚本**\n这里就不多讲了，主要是编写OnGUI函数，在合适的位置添加按钮，并且调用按钮所对应的接口函数：\n\n\n``` cpp\nif (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Go\")) {\n\taction.moveBoat();\n}\nif (GUI.Button(new Rect(castw(10.5f), casth(4f), width, height), \"On\")) {\n\taction.devilSOnB();\n}\nif (GUI.Button(new Rect(castw(4.3f), casth(4f), width, height), \"On\")) {\n\taction.priestSOnB();\n}\nif (GUI.Button(new Rect(castw(1.1f), casth(4f), width, height), \"On\")) {\n\taction.devilEOnB();\n}\nif (GUI.Button(new Rect(castw(1.3f), casth(4f), width, height), \"On\")) {\n\taction.priestEOnB();\n}\nif (GUI.Button(new Rect(castw(2.5f), casth(1.3f), width, height), \"Off\")) {\n\taction.offBoatL();\n}\nif (GUI.Button(new Rect(castw(1.7f), casth(1.3f), width, height), \"Off\")) {\n\taction.offBoatR();\n}\n```\n\n\n最终游戏界面：\n![](5.png)\n\n\n## **unity界面**\n- 新建脚本GenGameObjects，挂载到主摄相机。新建脚本IUserInterface，挂载到一个Empty对象。\n- 先在游戏面板创建游戏对象并调整其大小，在 Assets 文件夹下新建 Resources 文件夹，在 Resources 文件夹下新建 Prefabs 文件夹，然后将创建的对象拖入 Prefabs 中成为预设物体。这里牧师为球体、魔鬼为正方体、河岸为长方体、船也为长方体：![](2.png)\n- 设置主摄像机的投影模式为正交投影，调整大小，这样看到的所有物体都是平面的了。\n\n## **完整代码**\n### **BaseCode\\.cs**\n\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\nnamespace Com.Mygame\n{\n    public enum State { BSTART, BSEMOVING, BESMOVING, BEND, WIN, LOSE };\n    // 停在开始岸（左边） 左移动到右  右到左  在右岸  \n\n    public interface IUserActions\n    {\n        void priestSOnB();\n        void priestEOnB();\n        void devilSOnB();\n        void devilEOnB();\n        void moveBoat();\n        void offBoatL();\n        void offBoatR();\n        void restart();\n    }\n\n    public class GameSceneController : System.Object, IUserActions\n    {\n\n        private static GameSceneController _instance;\n        private BaseCode _base_code;\n        private GenGameObject _gen_game_obj;\n        public State state = State.BSTART;\n\n        public static GameSceneController GetInstance()\n        {\n            if (null == _instance)\n            {\n                _instance = new GameSceneController();\n            }\n            return _instance;\n        }\n\n        public BaseCode getBaseCode()\n        {\n            return _base_code;\n        }\n\n        internal void setBaseCode(BaseCode bc)\n        {\n            if (null == _base_code)\n            {\n                _base_code = bc;\n            }\n        }\n\n        public GenGameObject getGenGameObject()\n        {\n            return _gen_game_obj;\n        }\n\n        internal void setGenGameObject(GenGameObject ggo)\n        {\n            if (null == _gen_game_obj)\n            {\n                _gen_game_obj = ggo;\n            }\n        }\n\n        public void priestSOnB()\n        {\n            _gen_game_obj.priestStartOnBoat();\n        }\n\n        public void priestEOnB()\n        {\n            _gen_game_obj.priestEndOnBoat();\n        }\n\n        public void devilSOnB()\n        {\n            _gen_game_obj.devilStartOnBoat();\n        }\n\n        public void devilEOnB()\n        {\n            _gen_game_obj.devilEndOnBoat();\n        }\n\n        public void moveBoat()\n        {\n            _gen_game_obj.moveBoat();\n        }\n\n        public void offBoatL()\n        {\n            _gen_game_obj.getOffTheBoat(0);\n        }\n\n        public void offBoatR()\n        {\n            _gen_game_obj.getOffTheBoat(1);\n        }\n\n        public void restart()\n        {\n            Application.LoadLevel(Application.loadedLevelName);\n            state = State.BSTART;\n        }\n    }\n}\n\npublic class BaseCode : MonoBehaviour\n{\n\n    public string gameName;\n    public string gameRule;\n\n    void Start()\n    {\n        GameSceneController my = GameSceneController.GetInstance();\n        my.setBaseCode(this);\n        gameName = \"Priests and Devils\";\n        gameRule = \"Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!             Sphere -- Priest\tCube -- Devil\";\n    }\n}\n\n\n```\n\n\n### **GenGameObject\\.cs**\n\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Com.Mygame;\n\npublic class GenGameObject : MonoBehaviour\n{\n\n    Stack<GameObject> priests_start = new Stack<GameObject>();\n    Stack<GameObject> priests_end = new Stack<GameObject>();\n    Stack<GameObject> devils_start = new Stack<GameObject>();\n    Stack<GameObject> devils_end = new Stack<GameObject>();\n\n    GameObject[] boat = new GameObject[2];  // 船上物体\n    GameObject boat_obj;  // 船实体\n    public float speed = 100f;\n\n    GameSceneController my;\n\n    Vector3 shoreStartPos = new Vector3(0, 0, -12);\n    Vector3 shoreEndPos = new Vector3(0, 0, 12);\n    Vector3 boatStartPos = new Vector3(0, 0, -4);\n    Vector3 boatEndPos = new Vector3(0, 0, 4);\n\n    float gap = 1.5f;  // 控制速度\n    Vector3 priestStartPos = new Vector3(0, 2.7f, -11f);\n    Vector3 priestEndPos = new Vector3(0, 2.7f, 8f);\n    Vector3 devilStartPos = new Vector3(0, 2.7f, -16f);\n    Vector3 devilEndPos = new Vector3(0, 2.7f, 13f);\n\n\n    void Start()\n    {\n        my = GameSceneController.GetInstance();\n        my.setGenGameObject(this);\n        loadSrc();\n    }\n\n    void loadSrc()\n    {\n        // shore\n        Instantiate(Resources.Load(\"Prefabs/Shore\"), shoreStartPos, Quaternion.identity);\n        Instantiate(Resources.Load(\"Prefabs/Shore\"), shoreEndPos, Quaternion.identity);\n        // boat\n        boat_obj = Instantiate(Resources.Load(\"Prefabs/Boat\"), boatStartPos, Quaternion.identity) as GameObject;\n        // priests & devils\n        for (int i = 0; i < 3; ++i)\n        {\n            priests_start.Push(Instantiate(Resources.Load(\"Prefabs/Priest\")) as GameObject);\n            devils_start.Push(Instantiate(Resources.Load(\"Prefabs/Devil\")) as GameObject);\n        }\n    }\n\n    int boatCapacity()\n    {\n        int capacity = 0;\n        for (int i = 0; i < 2; ++i)\n        {\n            if (boat[i] == null) capacity++;\n        }\n        return capacity;\n    }\n\n    void getOnTheBoat(GameObject obj)\n    {\n        if (boatCapacity() != 0)\n        {\n            obj.transform.parent = boat_obj.transform;\n            if (boat[0] == null)\n            {\n                boat[0] = obj;\n                obj.transform.localPosition = new Vector3(0, 1.2f, -0.3f);\n            }\n            else {\n                boat[1] = obj;\n                obj.transform.localPosition = new Vector3(0, 1.2f, 0.3f);\n            }\n        }\n    }\n\n    public void moveBoat()\n    {\n        if (boatCapacity() != 2)\n        {\n            if (my.state == State.BSTART)\n            {\n                my.state = State.BSEMOVING;\n            }\n            else if (my.state == State.BEND)\n            {\n                my.state = State.BESMOVING;\n            }\n        }\n    }\n\n    public void getOffTheBoat(int side)\n    {\n        if (boat[side] != null)\n        {\n            boat[side].transform.parent = null;\n            if (my.state == State.BEND)\n            {\n                if (boat[side].tag == \"Priest\")\n                {\n                    priests_end.Push(boat[side]);\n                }\n                else if (boat[side].tag == \"Devil\")\n                {\n                    devils_end.Push(boat[side]);\n                }\n            }\n            else if (my.state == State.BSTART)\n            {\n                if (boat[side].tag == \"Priest\")\n                {\n                    priests_start.Push(boat[side]);\n                }\n                else if (boat[side].tag == \"Devil\")\n                {\n                    devils_start.Push(boat[side]);\n                }\n            }\n            boat[side] = null;\n        }\n    }\n\n    public void priestStartOnBoat()\n    {\n        if (priests_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)\n            getOnTheBoat(priests_start.Pop());\n    }\n\n    public void priestEndOnBoat()\n    {\n        if (priests_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)\n            getOnTheBoat(priests_end.Pop());\n    }\n\n    public void devilStartOnBoat()\n    {\n        if (devils_start.Count != 0 && boatCapacity() != 0 && my.state == State.BSTART)\n            getOnTheBoat(devils_start.Pop());\n    }\n\n    public void devilEndOnBoat()\n    {\n        if (devils_end.Count != 0 && boatCapacity() != 0 && my.state == State.BEND)\n            getOnTheBoat(devils_end.Pop());\n    }\n\n    void setCharacterPositions(Stack<GameObject> stack, Vector3 pos)\n    {\n        GameObject[] array = stack.ToArray();\n        for (int i = 0; i < stack.Count; ++i)\n        {\n            array[i].transform.position = new Vector3(pos.x, pos.y, pos.z + gap * i);\n        }\n    }\n\n    void check()\n    {\n        int pOnb = 0, dOnb = 0;\n        int priests_s = 0, devils_s = 0, priests_e = 0, devils_e = 0;\n\n        if (priests_end.Count == 3 && devils_end.Count == 3)\n        {\n            my.state = State.WIN;\n            return;\n        }\n\n        for (int i = 0; i < 2; ++i)\n        {\n            if (boat[i] != null && boat[i].tag == \"Priest\") pOnb++;\n            else if (boat[i] != null && boat[i].tag == \"Devil\") dOnb++;\n        }\n        if (my.state == State.BSTART)\n        {\n            priests_s = priests_start.Count + pOnb;\n            devils_s = devils_start.Count + dOnb;\n            priests_e = priests_end.Count;\n            devils_e = devils_end.Count;\n        }\n        else if (my.state == State.BEND)\n        {\n            priests_s = priests_start.Count;\n            devils_s = devils_start.Count;\n            priests_e = priests_end.Count + pOnb;\n            devils_e = devils_end.Count + dOnb;\n        }\n        if ((priests_s != 0 && priests_s < devils_s) || (priests_e != 0 && priests_e < devils_e))\n        {\n            my.state = State.LOSE;\n        }\n    }\n\n    void Update()\n    {\n        setCharacterPositions(priests_start, priestStartPos);\n        setCharacterPositions(priests_end, priestEndPos);\n        setCharacterPositions(devils_start, devilStartPos);\n        setCharacterPositions(devils_end, devilEndPos);\n\n        if (my.state == State.BSEMOVING)\n        {\n            boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatEndPos, speed * Time.deltaTime);\n            if (boat_obj.transform.position == boatEndPos)\n            {\n                my.state = State.BEND;\n            }\n        }\n        else if (my.state == State.BESMOVING)\n        {\n            boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatStartPos, speed * Time.deltaTime);\n            if (boat_obj.transform.position == boatStartPos)\n            {\n                my.state = State.BSTART;\n            }\n        }\n        else check();\n    }\n}\n\n\n```\n\n\n### **UserInterface\\.cs**\n\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\nusing Com.Mygame;\n\npublic class UserInterface : MonoBehaviour\n{\n\n    GameSceneController my;\n    IUserActions action;\n\n    float width, height;\n\n    float castw(float scale)\n    {\n        return (Screen.width - width) / scale;\n    }\n\n    float casth(float scale)\n    {\n        return (Screen.height - height) / scale;\n    }\n\n    void Start()\n    {\n        my = GameSceneController.GetInstance();\n        action = GameSceneController.GetInstance() as IUserActions;\n    }\n\n    void OnGUI()\n    {\n        width = Screen.width / 12;\n        height = Screen.height / 12;\n        print(my.state);\n        if (my.state == State.WIN)\n        {\n            if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Win!\"))\n            {\n                action.restart();\n            }\n        }\n        else if (my.state == State.LOSE)\n        {\n            if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Lose!\"))\n            {\n                action.restart();\n            }\n        }\n        else {\n            if (GUI.RepeatButton(new Rect(10, 10, 120, 20), my.getBaseCode().gameName))\n            {\n                GUI.TextArea(new Rect(10, 40, Screen.width - 20, Screen.height / 2), my.getBaseCode().gameRule);\n            }\n            else if (my.state == State.BSTART || my.state == State.BEND)\n            {\n                if (GUI.Button(new Rect(castw(2f), casth(6f), width, height), \"Go\"))\n                {\n                    action.moveBoat();\n                }\n                if (GUI.Button(new Rect(castw(10.5f), casth(4f), width, height), \"On\"))\n                {\n                    action.devilSOnB();\n                }\n                if (GUI.Button(new Rect(castw(4.3f), casth(4f), width, height), \"On\"))\n                {\n                    action.priestSOnB();\n                }\n                if (GUI.Button(new Rect(castw(1.1f), casth(4f), width, height), \"On\"))\n                {\n                    action.devilEOnB();\n                }\n                if (GUI.Button(new Rect(castw(1.3f), casth(4f), width, height), \"On\"))\n                {\n                    action.priestEOnB();\n                }\n                if (GUI.Button(new Rect(castw(2.5f), casth(1.3f), width, height), \"Off\"))\n                {\n                    action.offBoatL();\n                }\n                if (GUI.Button(new Rect(castw(1.7f), casth(1.3f), width, height), \"Off\"))\n                {\n                    action.offBoatR();\n                }\n            }\n        }\n    }\n}\n\n\n```\n\n\n","slug":"牧师和魔鬼","published":1,"updated":"2016-07-21T10:47:43.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzs1001pgobkjp9ipxjh","content":"<p>使用C#和unity3d实现大一导论课程涉及到的牧师与魔鬼小游戏。游戏规则：船可以搭载两个人，而且必须有一人掌船。无论何时，只要河一边的魔鬼数量多于牧师的数量，游戏就会以失败结束。<br><a id=\"more\"></a></p>\n<h2 id=\"基本架构\"><a href=\"#基本架构\" class=\"headerlink\" title=\"基本架构\"></a><strong>基本架构</strong></h2><ul>\n<li><p>UserInterface：用来创建GUI对象接受玩家动作，处理GUI事件，使用 IUserActions 接口控制游戏。</p>\n</li>\n<li><p>SceneController：单实例对象，用来处理对象间通信和实现 IUserActions 接口。</p>\n</li>\n<li><p>BaseCode用来保存游戏名称和游戏简介，它注册在 SceneController 中。</p>\n</li>\n<li><p>GenGameObject：用来创建游戏对象和处理对象运动，它也注册在 SceneController 中。IUserActions 接口通过与 GenGameObject 互动完成游戏逻辑。</p>\n</li>\n</ul>\n<p><img src=\"1.png\" alt=\"\"><br><img src=\"2.png\" alt=\"\"></p>\n<h2 id=\"BaseCode-脚本\"><a href=\"#BaseCode-脚本\" class=\"headerlink\" title=\"BaseCode 脚本\"></a><strong>BaseCode 脚本</strong></h2><p>建立 BaseCode 脚本，并挂载到主摄像机。在 BaseCode 脚本里面声明一个新的命名空间 Com.Mygame，并把单实例对象GameSceneController 定义其中。这样的话，其它脚本要使用 GameSceneController 只需要在脚本开头添加 “using Com.Mygame” 就可以使用对象了，同时命名空间也将我们自己的类和系统类分别开来。<br>部分代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameSceneController: System.Object &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"number\">_</span>instance;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> BaseCode <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"title\">GetInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>instance) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> GameSceneController();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> BaseCode <span class=\"title\">getBaseCode</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setBaseCode</span><span class=\"params\">(BaseCode bc)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (null == <span class=\"number\">_b</span>ase_code) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"number\">_b</span>ase_code = bc;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameName;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameRule;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tGameSceneController my = GameSceneController.GetInstance();</div><div class=\"line\">\t\tmy.setBaseCode(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>单例类，即是全局中只能存在唯一一个对象的类，通过函数GetInstance()可以获得这个类的实例对象。因为 GameSceneController 单例类直接声明在 Com.Mygame 命名空间里，因此是全局的，在其中注入的对象都可以看作是全局对象，比如 BaseCode 对象。</p>\n<p>这样做的目的是实现代码的MVC架构，通过在单例类中注入对象可以实现对象间的通信，而无需使用 Find、SendMessage 这类破坏程序结构的通讯耦合语句。</p>\n<h2 id=\"GenGameObject脚本\"><a href=\"#GenGameObject脚本\" class=\"headerlink\" title=\"GenGameObject脚本\"></a><strong>GenGameObject脚本</strong></h2><h3 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a><strong>基本设置</strong></h3><p>部分代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenGameObject : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">\tStack&lt;GameObject&gt; priests_start = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">\tStack&lt;GameObject&gt; priests_end = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">\tStack&lt;GameObject&gt; devils_start = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">\tStack&lt;GameObject&gt; devils_end = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\"></div><div class=\"line\">\tGameObject[] boat = <span class=\"keyword\">new</span> GameObject[<span class=\"number\">2</span>];</div><div class=\"line\">\tGameObject boat_obj;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">100f</span>;</div><div class=\"line\"></div><div class=\"line\">\tGameSceneController my;</div><div class=\"line\"></div><div class=\"line\">\tVector3 shoreStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-12</span>);</div><div class=\"line\">\tVector3 shoreEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>);</div><div class=\"line\">\tVector3 boatStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-4</span>);</div><div class=\"line\">\tVector3 boatEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">float</span> gap = <span class=\"number\">1.5f</span>;</div><div class=\"line\">\tVector3 priestStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-11</span>f);</div><div class=\"line\">\tVector3 priestEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">8f</span>);</div><div class=\"line\">\tVector3 devilStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-16</span>f);</div><div class=\"line\">\tVector3 devilEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">13f</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这部分声明了 GenGameObject  各变量，其中我打算用 Stack 集合类型存储牧师和魔鬼对象，start表示开始岸，end表示目标岸。</p>\n<p>船需要三个变量，boat是一个对象数组，用来存储船所承载的物体，boat_obj为船的实体。Speed为公有变量（方便更改），代表船行驶的速度。</p>\n<p>My是一个 GameSceneController 对象，之所以需要 GameSceneController，是因为游戏逻辑需要“状态”，这些“状态”为枚举类型，并且保存在 GameSceneController 中。</p>\n<p>剩下的一系列 Vector3 类型，均表示物理位置，它们会在牧师、魔鬼、河岸、船预设实例化的时候被使用，或者在游戏物体需要移动时使用。</p>\n<h3 id=\"完善动作\"><a href=\"#完善动作\" class=\"headerlink\" title=\"完善动作\"></a><strong>完善动作</strong></h3><p>由于牧师和魔鬼的位置时刻要根据堆栈的数据变化，因此先定义一个 setCharacterPositions 函数。该函数接受一个stack参数，和一个Vector3坐标。它的作用就是把stack里的object从Vector3坐标开始依次排开：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCharacterPositions</span><span class=\"params\">(Stack&lt;GameObject&gt; <span class=\"built_in\">stack</span>, Vector3 pos)</span> </span>&#123;</div><div class=\"line\">\tGameObject[] <span class=\"built_in\">array</span> = <span class=\"built_in\">stack</span>.ToArray();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">stack</span>.Count; ++i) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">array</span>[i].transform.position = <span class=\"keyword\">new</span> Vector3(pos.x, pos.y, pos.z + gap*i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在 Update 方法里便可以使用： </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tsetCharacterPositions(priests_start, priestStartPos);</div><div class=\"line\">\tsetCharacterPositions(priests_end, priestEndPos);</div><div class=\"line\">\tsetCharacterPositions(devils_start, devilStartPos);</div><div class=\"line\">\tsetCharacterPositions(devils_end, devilEndPos);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"上船\"><a href=\"#上船\" class=\"headerlink\" title=\"上船\"></a><strong>上船</strong></h4><p>把一个游戏对象设为船的子对象。定义 getOnTheBoat 函数，接受一个游戏对象为参数，只要船上有空位，就把游戏对象设置为船的子对象，这样游戏对象便能跟着船移动：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOnTheBoat</span><span class=\"params\">(GameObject obj)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tobj.transform.parent = boat_obj.transform;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (boat[<span class=\"number\">0</span>] == null) &#123;</div><div class=\"line\">\t\t\tboat[<span class=\"number\">0</span>] = obj;</div><div class=\"line\">\t\t\tobj.transform.localPosition = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">-0.3</span>f);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tboat[<span class=\"number\">1</span>] = obj;</div><div class=\"line\">\t\t\tobj.transform.localPosition = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">0.3f</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"开船\"><a href=\"#开船\" class=\"headerlink\" title=\"开船\"></a><strong>开船</strong></h4><p>根据游戏“状态”，把船从一方移动到另一方。这里，我们讨论到了游戏状态，我们需要游戏状态了解船当前的位置。游戏状态作为枚举类型声明在 BaseCode 脚本中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> State &#123; BSTART, BSEMOVING, BESMOVING, BEND, WIN, LOSE &#125;;</div><div class=\"line\"><span class=\"comment\">// 停在开始岸（左边） 左移动到右  右到左  在右岸</span></div></pre></td></tr></table></figure>\n<p>有了游戏状态，只需要定义一个 moveBoat 函数，修改游戏状态为MOVING即可，剩下的动作均在Update函数中完成：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (my.state == State.BSTART) &#123;</div><div class=\"line\">\t\t\tmy.state = State.BSEMOVING;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BEND) &#123;</div><div class=\"line\">\t\t\tmy.state = State.BESMOVING;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"下船\"><a href=\"#下船\" class=\"headerlink\" title=\"下船\"></a><strong>下船</strong></h4><p>取消船和游戏对象的父子关系，并且根据游戏“状态”将游戏对象压入stack。定义 getOffTheBoat 函数，接受一个整型变量为参数，该变量可以为0或1：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getOffTheBoat</span><span class=\"params\">(<span class=\"keyword\">int</span> side)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (boat[side] != null) &#123;</div><div class=\"line\">\t\tboat[side].transform.parent = null;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (my.state == State.BEND) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Priest\"</span>) &#123;</div><div class=\"line\">\t\t\t\tpriests_end.Push(boat[side]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Devil\"</span>) &#123;</div><div class=\"line\">\t\t\t\tdevils_end.Push(boat[side]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BSTART) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Priest\"</span>) &#123;</div><div class=\"line\">\t\t\t\tpriests_start.Push(boat[side]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Devil\"</span>) &#123;</div><div class=\"line\">\t\t\t\tdevils_start.Push(boat[side]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tboat[side] = null;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意，为了区分出牧师和魔鬼，我给牧师和魔鬼预设分别添加了Tag。Tag需要在控制面板添加。<br><img src=\"3.png\" alt=\"\"><br><img src=\"4.png\" alt=\"\"></p>\n<p>修改 Update 函数，加入船的移动，游戏结束条件的判断：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tsetCharacterPositions(priests_start, priestStartPos);</div><div class=\"line\">\tsetCharacterPositions(priests_end, priestEndPos);</div><div class=\"line\">\tsetCharacterPositions(devils_start, devilStartPos);</div><div class=\"line\">\tsetCharacterPositions(devils_end, devilEndPos);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (my.state == State.BSEMOVING) &#123;</div><div class=\"line\">\t\tboat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatEndPos, speed*Time.deltaTime);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (boat_obj.transform.position == boatEndPos) &#123;</div><div class=\"line\">\t\t\tmy.state = State.BEND;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BESMOVING) &#123;</div><div class=\"line\">\t\tboat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatStartPos, speed*Time.deltaTime);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (boat_obj.transform.position == boatStartPos) &#123;</div><div class=\"line\">\t\t\tmy.state = State.BSTART;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> check();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了与玩家规则表对应，还需要定义4个函数：<br>priestStartOnBoat、priestEndOnBoat、devilStartOnBoat、devilEndOnBoat<br>它们的作用是调用相应的 getOnTheBoat 函数，把玩家指定的对象放到船上：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestStartOnBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (priests_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BSTART)</div><div class=\"line\">\t\tgetOnTheBoat(priests_start.Pop());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEndOnBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (priests_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BEND)</div><div class=\"line\">\t\tgetOnTheBoat(priests_end.Pop());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilStartOnBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (devils_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BSTART)</div><div class=\"line\">\t\tgetOnTheBoat(devils_start.Pop());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEndOnBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (devils_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BEND)</div><div class=\"line\">\t\tgetOnTheBoat(devils_end.Pop());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加接口\"><a href=\"#添加接口\" class=\"headerlink\" title=\"添加接口\"></a><strong>添加接口</strong></h4><p>回到 BaseCode 脚本，在命名空间 Com.Mygame 里添加 IUserActions 接口：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> interface IUserActions &#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 GameSceneController 中添加接口的实现方法,即调用相关的函数。</p>\n<h2 id=\"UserInterface脚本\"><a href=\"#UserInterface脚本\" class=\"headerlink\" title=\"UserInterface脚本\"></a><strong>UserInterface脚本</strong></h2><p>这里就不多讲了，主要是编写OnGUI函数，在合适的位置添加按钮，并且调用按钮所对应的接口函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Go\"</span>)) &#123;</div><div class=\"line\">\taction.moveBoat();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">10.5f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>)) &#123;</div><div class=\"line\">\taction.devilSOnB();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">4.3f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>)) &#123;</div><div class=\"line\">\taction.priestSOnB();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.1f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>)) &#123;</div><div class=\"line\">\taction.devilEOnB();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.3f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>)) &#123;</div><div class=\"line\">\taction.priestEOnB();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2.5f</span>), casth(<span class=\"number\">1.3f</span>), width, height), <span class=\"string\">\"Off\"</span>)) &#123;</div><div class=\"line\">\taction.offBoatL();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.7f</span>), casth(<span class=\"number\">1.3f</span>), width, height), <span class=\"string\">\"Off\"</span>)) &#123;</div><div class=\"line\">\taction.offBoatR();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最终游戏界面：<br><img src=\"5.png\" alt=\"\"></p>\n<h2 id=\"unity界面\"><a href=\"#unity界面\" class=\"headerlink\" title=\"unity界面\"></a><strong>unity界面</strong></h2><ul>\n<li>新建脚本GenGameObjects，挂载到主摄相机。新建脚本IUserInterface，挂载到一个Empty对象。</li>\n<li>先在游戏面板创建游戏对象并调整其大小，在 Assets 文件夹下新建 Resources 文件夹，在 Resources 文件夹下新建 Prefabs 文件夹，然后将创建的对象拖入 Prefabs 中成为预设物体。这里牧师为球体、魔鬼为正方体、河岸为长方体、船也为长方体：<img src=\"2.png\" alt=\"\"></li>\n<li>设置主摄像机的投影模式为正交投影，调整大小，这样看到的所有物体都是平面的了。</li>\n</ul>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><h3 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> State &#123; BSTART, BSEMOVING, BESMOVING, BEND, WIN, LOSE &#125;;</div><div class=\"line\">    <span class=\"comment\">// 停在开始岸（左边） 左移动到右  右到左  在右岸  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IUserActions</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameSceneController : System.Object, IUserActions</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"number\">_</span>instance;</div><div class=\"line\">        <span class=\"keyword\">private</span> BaseCode <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">        <span class=\"keyword\">private</span> GenGameObject <span class=\"number\">_</span>gen_game_obj;</div><div class=\"line\">        <span class=\"keyword\">public</span> State state = State.BSTART;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>instance)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> GameSceneController();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BaseCode <span class=\"title\">getBaseCode</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setBaseCode</span><span class=\"params\">(BaseCode bc)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_b</span>ase_code)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_b</span>ase_code = bc;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GenGameObject <span class=\"title\">getGenGameObject</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>gen_game_obj;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setGenGameObject</span><span class=\"params\">(GenGameObject ggo)</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>gen_game_obj)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>gen_game_obj = ggo;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.priestStartOnBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.priestEndOnBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.devilStartOnBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.devilEndOnBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.moveBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.getOffTheBoat(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.getOffTheBoat(<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></span></div><div class=\"line\">        &#123;</div><div class=\"line\">            Application.LoadLevel(Application.loadedLevelName);</div><div class=\"line\">            state = State.BSTART;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameName;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameRule;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        GameSceneController my = GameSceneController.GetInstance();</div><div class=\"line\">        my.setBaseCode(<span class=\"keyword\">this</span>);</div><div class=\"line\">        gameName = <span class=\"string\">\"Priests and Devils\"</span>;</div><div class=\"line\">        gameRule = <span class=\"string\">\"Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!             Sphere -- Priest\tCube -- Devil\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"GenGameObject-cs\"><a href=\"#GenGameObject-cs\" class=\"headerlink\" title=\"GenGameObject.cs\"></a><strong>GenGameObject.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenGameObject : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    Stack&lt;GameObject&gt; priests_start = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">    Stack&lt;GameObject&gt; priests_end = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">    Stack&lt;GameObject&gt; devils_start = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">    Stack&lt;GameObject&gt; devils_end = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\"></div><div class=\"line\">    GameObject[] boat = <span class=\"keyword\">new</span> GameObject[<span class=\"number\">2</span>];  <span class=\"comment\">// 船上物体</span></div><div class=\"line\">    GameObject boat_obj;  <span class=\"comment\">// 船实体</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">100f</span>;</div><div class=\"line\"></div><div class=\"line\">    GameSceneController my;</div><div class=\"line\"></div><div class=\"line\">    Vector3 shoreStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-12</span>);</div><div class=\"line\">    Vector3 shoreEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>);</div><div class=\"line\">    Vector3 boatStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-4</span>);</div><div class=\"line\">    Vector3 boatEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> gap = <span class=\"number\">1.5f</span>;  <span class=\"comment\">// 控制速度</span></div><div class=\"line\">    Vector3 priestStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-11</span>f);</div><div class=\"line\">    Vector3 priestEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">8f</span>);</div><div class=\"line\">    Vector3 devilStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-16</span>f);</div><div class=\"line\">    Vector3 devilEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">13f</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        my = GameSceneController.GetInstance();</div><div class=\"line\">        my.setGenGameObject(<span class=\"keyword\">this</span>);</div><div class=\"line\">        loadSrc();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadSrc</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// shore</span></div><div class=\"line\">        Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Shore\"</span>), shoreStartPos, Quaternion.identity);</div><div class=\"line\">        Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Shore\"</span>), shoreEndPos, Quaternion.identity);</div><div class=\"line\">        <span class=\"comment\">// boat</span></div><div class=\"line\">        boat_obj = Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Boat\"</span>), boatStartPos, Quaternion.identity) as GameObject;</div><div class=\"line\">        <span class=\"comment\">// priests &amp; devils</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_start.Push(Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Priest\"</span>)) as GameObject);</div><div class=\"line\">            devils_start.Push(Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Devil\"</span>)) as GameObject);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">boatCapacity</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> capacity = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[i] == null) capacity++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> capacity;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOnTheBoat</span><span class=\"params\">(GameObject obj)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            obj.transform.parent = boat_obj.transform;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[<span class=\"number\">0</span>] == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                boat[<span class=\"number\">0</span>] = obj;</div><div class=\"line\">                obj.transform.localPosition = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">-0.3</span>f);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                boat[<span class=\"number\">1</span>] = obj;</div><div class=\"line\">                obj.transform.localPosition = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">0.3f</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (my.state == State.BSTART)</div><div class=\"line\">            &#123;</div><div class=\"line\">                my.state = State.BSEMOVING;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BEND)</div><div class=\"line\">            &#123;</div><div class=\"line\">                my.state = State.BESMOVING;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getOffTheBoat</span><span class=\"params\">(<span class=\"keyword\">int</span> side)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boat[side] != null)</div><div class=\"line\">        &#123;</div><div class=\"line\">            boat[side].transform.parent = null;</div><div class=\"line\">            <span class=\"keyword\">if</span> (my.state == State.BEND)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Priest\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    priests_end.Push(boat[side]);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Devil\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    devils_end.Push(boat[side]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BSTART)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Priest\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    priests_start.Push(boat[side]);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Devil\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    devils_start.Push(boat[side]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            boat[side] = null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestStartOnBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BSTART)</div><div class=\"line\">            getOnTheBoat(priests_start.Pop());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEndOnBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BEND)</div><div class=\"line\">            getOnTheBoat(priests_end.Pop());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilStartOnBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (devils_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BSTART)</div><div class=\"line\">            getOnTheBoat(devils_start.Pop());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEndOnBoat</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (devils_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BEND)</div><div class=\"line\">            getOnTheBoat(devils_end.Pop());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCharacterPositions</span><span class=\"params\">(Stack&lt;GameObject&gt; <span class=\"built_in\">stack</span>, Vector3 pos)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        GameObject[] <span class=\"built_in\">array</span> = <span class=\"built_in\">stack</span>.ToArray();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">stack</span>.Count; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">array</span>[i].transform.position = <span class=\"keyword\">new</span> Vector3(pos.x, pos.y, pos.z + gap * i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pOnb = <span class=\"number\">0</span>, dOnb = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> priests_s = <span class=\"number\">0</span>, devils_s = <span class=\"number\">0</span>, priests_e = <span class=\"number\">0</span>, devils_e = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_end.Count == <span class=\"number\">3</span> &amp;&amp; devils_end.Count == <span class=\"number\">3</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            my.state = State.WIN;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[i] != null &amp;&amp; boat[i].tag == <span class=\"string\">\"Priest\"</span>) pOnb++;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[i] != null &amp;&amp; boat[i].tag == <span class=\"string\">\"Devil\"</span>) dOnb++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (my.state == State.BSTART)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_s = priests_start.Count + pOnb;</div><div class=\"line\">            devils_s = devils_start.Count + dOnb;</div><div class=\"line\">            priests_e = priests_end.Count;</div><div class=\"line\">            devils_e = devils_end.Count;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BEND)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_s = priests_start.Count;</div><div class=\"line\">            devils_s = devils_start.Count;</div><div class=\"line\">            priests_e = priests_end.Count + pOnb;</div><div class=\"line\">            devils_e = devils_end.Count + dOnb;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((priests_s != <span class=\"number\">0</span> &amp;&amp; priests_s &lt; devils_s) || (priests_e != <span class=\"number\">0</span> &amp;&amp; priests_e &lt; devils_e))</div><div class=\"line\">        &#123;</div><div class=\"line\">            my.state = State.LOSE;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        setCharacterPositions(priests_start, priestStartPos);</div><div class=\"line\">        setCharacterPositions(priests_end, priestEndPos);</div><div class=\"line\">        setCharacterPositions(devils_start, devilStartPos);</div><div class=\"line\">        setCharacterPositions(devils_end, devilEndPos);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (my.state == State.BSEMOVING)</div><div class=\"line\">        &#123;</div><div class=\"line\">            boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatEndPos, speed * Time.deltaTime);</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat_obj.transform.position == boatEndPos)</div><div class=\"line\">            &#123;</div><div class=\"line\">                my.state = State.BEND;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BESMOVING)</div><div class=\"line\">        &#123;</div><div class=\"line\">            boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatStartPos, speed * Time.deltaTime);</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat_obj.transform.position == boatStartPos)</div><div class=\"line\">            &#123;</div><div class=\"line\">                my.state = State.BSTART;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> check();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"UserInterface-cs\"><a href=\"#UserInterface-cs\" class=\"headerlink\" title=\"UserInterface.cs\"></a><strong>UserInterface.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> UserInterface : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    GameSceneController my;</div><div class=\"line\">    IUserActions action;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> width, height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">castw</span><span class=\"params\">(<span class=\"keyword\">float</span> scale)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Screen.width - width) / scale;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">casth</span><span class=\"params\">(<span class=\"keyword\">float</span> scale)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Screen.height - height) / scale;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        my = GameSceneController.GetInstance();</div><div class=\"line\">        action = GameSceneController.GetInstance() as IUserActions;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnGUI</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        width = Screen.width / <span class=\"number\">12</span>;</div><div class=\"line\">        height = Screen.height / <span class=\"number\">12</span>;</div><div class=\"line\">        print(my.state);</div><div class=\"line\">        <span class=\"keyword\">if</span> (my.state == State.WIN)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Win!\"</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                action.restart();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.LOSE)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Lose!\"</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                action.restart();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.RepeatButton(<span class=\"keyword\">new</span> Rect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">120</span>, <span class=\"number\">20</span>), my.getBaseCode().gameName))</div><div class=\"line\">            &#123;</div><div class=\"line\">                GUI.TextArea(<span class=\"keyword\">new</span> Rect(<span class=\"number\">10</span>, <span class=\"number\">40</span>, Screen.width - <span class=\"number\">20</span>, Screen.height / <span class=\"number\">2</span>), my.getBaseCode().gameRule);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BSTART || my.state == State.BEND)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Go\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.moveBoat();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">10.5f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.devilSOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">4.3f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.priestSOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.1f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.devilEOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.3f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.priestEOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2.5f</span>), casth(<span class=\"number\">1.3f</span>), width, height), <span class=\"string\">\"Off\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.offBoatL();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.7f</span>), casth(<span class=\"number\">1.3f</span>), width, height), <span class=\"string\">\"Off\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.offBoatR();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>使用C#和unity3d实现大一导论课程涉及到的牧师与魔鬼小游戏。游戏规则：船可以搭载两个人，而且必须有一人掌船。无论何时，只要河一边的魔鬼数量多于牧师的数量，游戏就会以失败结束。<br>","more":"</p>\n<h2 id=\"基本架构\"><a href=\"#基本架构\" class=\"headerlink\" title=\"基本架构\"></a><strong>基本架构</strong></h2><ul>\n<li><p>UserInterface：用来创建GUI对象接受玩家动作，处理GUI事件，使用 IUserActions 接口控制游戏。</p>\n</li>\n<li><p>SceneController：单实例对象，用来处理对象间通信和实现 IUserActions 接口。</p>\n</li>\n<li><p>BaseCode用来保存游戏名称和游戏简介，它注册在 SceneController 中。</p>\n</li>\n<li><p>GenGameObject：用来创建游戏对象和处理对象运动，它也注册在 SceneController 中。IUserActions 接口通过与 GenGameObject 互动完成游戏逻辑。</p>\n</li>\n</ul>\n<p><img src=\"1.png\" alt=\"\"><br><img src=\"2.png\" alt=\"\"></p>\n<h2 id=\"BaseCode-脚本\"><a href=\"#BaseCode-脚本\" class=\"headerlink\" title=\"BaseCode 脚本\"></a><strong>BaseCode 脚本</strong></h2><p>建立 BaseCode 脚本，并挂载到主摄像机。在 BaseCode 脚本里面声明一个新的命名空间 Com.Mygame，并把单实例对象GameSceneController 定义其中。这样的话，其它脚本要使用 GameSceneController 只需要在脚本开头添加 “using Com.Mygame” 就可以使用对象了，同时命名空间也将我们自己的类和系统类分别开来。<br>部分代码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameSceneController: System.Object &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"number\">_</span>instance;</div><div class=\"line\">\t\t<span class=\"keyword\">private</span> BaseCode <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"title\">GetInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>instance) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> GameSceneController();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> BaseCode <span class=\"title\">getBaseCode</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setBaseCode</span><span class=\"params\">(BaseCode bc)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (null == <span class=\"number\">_b</span>ase_code) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"number\">_b</span>ase_code = bc;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameName;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameRule;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tGameSceneController my = GameSceneController.GetInstance();</div><div class=\"line\">\t\tmy.setBaseCode(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>单例类，即是全局中只能存在唯一一个对象的类，通过函数GetInstance()可以获得这个类的实例对象。因为 GameSceneController 单例类直接声明在 Com.Mygame 命名空间里，因此是全局的，在其中注入的对象都可以看作是全局对象，比如 BaseCode 对象。</p>\n<p>这样做的目的是实现代码的MVC架构，通过在单例类中注入对象可以实现对象间的通信，而无需使用 Find、SendMessage 这类破坏程序结构的通讯耦合语句。</p>\n<h2 id=\"GenGameObject脚本\"><a href=\"#GenGameObject脚本\" class=\"headerlink\" title=\"GenGameObject脚本\"></a><strong>GenGameObject脚本</strong></h2><h3 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a><strong>基本设置</strong></h3><p>部分代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenGameObject : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">\tStack&lt;GameObject&gt; priests_start = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">\tStack&lt;GameObject&gt; priests_end = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">\tStack&lt;GameObject&gt; devils_start = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">\tStack&lt;GameObject&gt; devils_end = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\"></div><div class=\"line\">\tGameObject[] boat = <span class=\"keyword\">new</span> GameObject[<span class=\"number\">2</span>];</div><div class=\"line\">\tGameObject boat_obj;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">100f</span>;</div><div class=\"line\"></div><div class=\"line\">\tGameSceneController my;</div><div class=\"line\"></div><div class=\"line\">\tVector3 shoreStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-12</span>);</div><div class=\"line\">\tVector3 shoreEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>);</div><div class=\"line\">\tVector3 boatStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-4</span>);</div><div class=\"line\">\tVector3 boatEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">float</span> gap = <span class=\"number\">1.5f</span>;</div><div class=\"line\">\tVector3 priestStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-11</span>f);</div><div class=\"line\">\tVector3 priestEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">8f</span>);</div><div class=\"line\">\tVector3 devilStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-16</span>f);</div><div class=\"line\">\tVector3 devilEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">13f</span>);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这部分声明了 GenGameObject  各变量，其中我打算用 Stack 集合类型存储牧师和魔鬼对象，start表示开始岸，end表示目标岸。</p>\n<p>船需要三个变量，boat是一个对象数组，用来存储船所承载的物体，boat_obj为船的实体。Speed为公有变量（方便更改），代表船行驶的速度。</p>\n<p>My是一个 GameSceneController 对象，之所以需要 GameSceneController，是因为游戏逻辑需要“状态”，这些“状态”为枚举类型，并且保存在 GameSceneController 中。</p>\n<p>剩下的一系列 Vector3 类型，均表示物理位置，它们会在牧师、魔鬼、河岸、船预设实例化的时候被使用，或者在游戏物体需要移动时使用。</p>\n<h3 id=\"完善动作\"><a href=\"#完善动作\" class=\"headerlink\" title=\"完善动作\"></a><strong>完善动作</strong></h3><p>由于牧师和魔鬼的位置时刻要根据堆栈的数据变化，因此先定义一个 setCharacterPositions 函数。该函数接受一个stack参数，和一个Vector3坐标。它的作用就是把stack里的object从Vector3坐标开始依次排开：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCharacterPositions</span><span class=\"params\">(Stack&lt;GameObject&gt; <span class=\"built_in\">stack</span>, Vector3 pos)</span> </span>&#123;</div><div class=\"line\">\tGameObject[] <span class=\"built_in\">array</span> = <span class=\"built_in\">stack</span>.ToArray();</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">stack</span>.Count; ++i) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">array</span>[i].transform.position = <span class=\"keyword\">new</span> Vector3(pos.x, pos.y, pos.z + gap*i);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后在 Update 方法里便可以使用： </p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tsetCharacterPositions(priests_start, priestStartPos);</div><div class=\"line\">\tsetCharacterPositions(priests_end, priestEndPos);</div><div class=\"line\">\tsetCharacterPositions(devils_start, devilStartPos);</div><div class=\"line\">\tsetCharacterPositions(devils_end, devilEndPos);</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"上船\"><a href=\"#上船\" class=\"headerlink\" title=\"上船\"></a><strong>上船</strong></h4><p>把一个游戏对象设为船的子对象。定义 getOnTheBoat 函数，接受一个游戏对象为参数，只要船上有空位，就把游戏对象设置为船的子对象，这样游戏对象便能跟着船移动：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOnTheBoat</span><span class=\"params\">(GameObject obj)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tobj.transform.parent = boat_obj.transform;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (boat[<span class=\"number\">0</span>] == null) &#123;</div><div class=\"line\">\t\t\tboat[<span class=\"number\">0</span>] = obj;</div><div class=\"line\">\t\t\tobj.transform.localPosition = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">-0.3</span>f);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tboat[<span class=\"number\">1</span>] = obj;</div><div class=\"line\">\t\t\tobj.transform.localPosition = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">0.3f</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"开船\"><a href=\"#开船\" class=\"headerlink\" title=\"开船\"></a><strong>开船</strong></h4><p>根据游戏“状态”，把船从一方移动到另一方。这里，我们讨论到了游戏状态，我们需要游戏状态了解船当前的位置。游戏状态作为枚举类型声明在 BaseCode 脚本中：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> State &#123; BSTART, BSEMOVING, BESMOVING, BEND, WIN, LOSE &#125;;</div><div class=\"line\"><span class=\"comment\">// 停在开始岸（左边） 左移动到右  右到左  在右岸</span></div></pre></td></tr></table></figure>\n<p>有了游戏状态，只需要定义一个 moveBoat 函数，修改游戏状态为MOVING即可，剩下的动作均在Update函数中完成：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (my.state == State.BSTART) &#123;</div><div class=\"line\">\t\t\tmy.state = State.BSEMOVING;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BEND) &#123;</div><div class=\"line\">\t\t\tmy.state = State.BESMOVING;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"下船\"><a href=\"#下船\" class=\"headerlink\" title=\"下船\"></a><strong>下船</strong></h4><p>取消船和游戏对象的父子关系，并且根据游戏“状态”将游戏对象压入stack。定义 getOffTheBoat 函数，接受一个整型变量为参数，该变量可以为0或1：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getOffTheBoat</span><span class=\"params\">(<span class=\"keyword\">int</span> side)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (boat[side] != null) &#123;</div><div class=\"line\">\t\tboat[side].transform.parent = null;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (my.state == State.BEND) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Priest\"</span>) &#123;</div><div class=\"line\">\t\t\t\tpriests_end.Push(boat[side]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Devil\"</span>) &#123;</div><div class=\"line\">\t\t\t\tdevils_end.Push(boat[side]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BSTART) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Priest\"</span>) &#123;</div><div class=\"line\">\t\t\t\tpriests_start.Push(boat[side]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Devil\"</span>) &#123;</div><div class=\"line\">\t\t\t\tdevils_start.Push(boat[side]);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tboat[side] = null;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意，为了区分出牧师和魔鬼，我给牧师和魔鬼预设分别添加了Tag。Tag需要在控制面板添加。<br><img src=\"3.png\" alt=\"\"><br><img src=\"4.png\" alt=\"\"></p>\n<p>修改 Update 函数，加入船的移动，游戏结束条件的判断：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tsetCharacterPositions(priests_start, priestStartPos);</div><div class=\"line\">\tsetCharacterPositions(priests_end, priestEndPos);</div><div class=\"line\">\tsetCharacterPositions(devils_start, devilStartPos);</div><div class=\"line\">\tsetCharacterPositions(devils_end, devilEndPos);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (my.state == State.BSEMOVING) &#123;</div><div class=\"line\">\t\tboat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatEndPos, speed*Time.deltaTime);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (boat_obj.transform.position == boatEndPos) &#123;</div><div class=\"line\">\t\t\tmy.state = State.BEND;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BESMOVING) &#123;</div><div class=\"line\">\t\tboat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatStartPos, speed*Time.deltaTime);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (boat_obj.transform.position == boatStartPos) &#123;</div><div class=\"line\">\t\t\tmy.state = State.BSTART;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> check();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了与玩家规则表对应，还需要定义4个函数：<br>priestStartOnBoat、priestEndOnBoat、devilStartOnBoat、devilEndOnBoat<br>它们的作用是调用相应的 getOnTheBoat 函数，把玩家指定的对象放到船上：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestStartOnBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (priests_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BSTART)</div><div class=\"line\">\t\tgetOnTheBoat(priests_start.Pop());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEndOnBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (priests_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BEND)</div><div class=\"line\">\t\tgetOnTheBoat(priests_end.Pop());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilStartOnBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (devils_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BSTART)</div><div class=\"line\">\t\tgetOnTheBoat(devils_start.Pop());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEndOnBoat</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (devils_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BEND)</div><div class=\"line\">\t\tgetOnTheBoat(devils_end.Pop());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"添加接口\"><a href=\"#添加接口\" class=\"headerlink\" title=\"添加接口\"></a><strong>添加接口</strong></h4><p>回到 BaseCode 脚本，在命名空间 Com.Mygame 里添加 IUserActions 接口：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> interface IUserActions &#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 GameSceneController 中添加接口的实现方法,即调用相关的函数。</p>\n<h2 id=\"UserInterface脚本\"><a href=\"#UserInterface脚本\" class=\"headerlink\" title=\"UserInterface脚本\"></a><strong>UserInterface脚本</strong></h2><p>这里就不多讲了，主要是编写OnGUI函数，在合适的位置添加按钮，并且调用按钮所对应的接口函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Go\"</span>)) &#123;</div><div class=\"line\">\taction.moveBoat();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">10.5f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>)) &#123;</div><div class=\"line\">\taction.devilSOnB();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">4.3f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>)) &#123;</div><div class=\"line\">\taction.priestSOnB();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.1f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>)) &#123;</div><div class=\"line\">\taction.devilEOnB();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.3f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>)) &#123;</div><div class=\"line\">\taction.priestEOnB();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2.5f</span>), casth(<span class=\"number\">1.3f</span>), width, height), <span class=\"string\">\"Off\"</span>)) &#123;</div><div class=\"line\">\taction.offBoatL();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.7f</span>), casth(<span class=\"number\">1.3f</span>), width, height), <span class=\"string\">\"Off\"</span>)) &#123;</div><div class=\"line\">\taction.offBoatR();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最终游戏界面：<br><img src=\"5.png\" alt=\"\"></p>\n<h2 id=\"unity界面\"><a href=\"#unity界面\" class=\"headerlink\" title=\"unity界面\"></a><strong>unity界面</strong></h2><ul>\n<li>新建脚本GenGameObjects，挂载到主摄相机。新建脚本IUserInterface，挂载到一个Empty对象。</li>\n<li>先在游戏面板创建游戏对象并调整其大小，在 Assets 文件夹下新建 Resources 文件夹，在 Resources 文件夹下新建 Prefabs 文件夹，然后将创建的对象拖入 Prefabs 中成为预设物体。这里牧师为球体、魔鬼为正方体、河岸为长方体、船也为长方体：<img src=\"2.png\" alt=\"\"></li>\n<li>设置主摄像机的投影模式为正交投影，调整大小，这样看到的所有物体都是平面的了。</li>\n</ul>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><h3 id=\"BaseCode-cs\"><a href=\"#BaseCode-cs\" class=\"headerlink\" title=\"BaseCode.cs\"></a><strong>BaseCode.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">namespace</span> Com.Mygame</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> State &#123; BSTART, BSEMOVING, BESMOVING, BEND, WIN, LOSE &#125;;</div><div class=\"line\">    <span class=\"comment\">// 停在开始岸（左边） 左移动到右  右到左  在右岸  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> interface IUserActions</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span></span>;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GameSceneController : System.Object, IUserActions</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"number\">_</span>instance;</div><div class=\"line\">        <span class=\"keyword\">private</span> BaseCode <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">        <span class=\"keyword\">private</span> GenGameObject <span class=\"number\">_</span>gen_game_obj;</div><div class=\"line\">        <span class=\"keyword\">public</span> State state = State.BSTART;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GameSceneController <span class=\"title\">GetInstance</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>instance)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> GameSceneController();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BaseCode <span class=\"title\">getBaseCode</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_b</span>ase_code;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setBaseCode</span><span class=\"params\">(BaseCode bc)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_b</span>ase_code)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_b</span>ase_code = bc;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> GenGameObject <span class=\"title\">getGenGameObject</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>gen_game_obj;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">internal <span class=\"keyword\">void</span> <span class=\"title\">setGenGameObject</span><span class=\"params\">(GenGameObject ggo)</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>gen_game_obj)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"number\">_</span>gen_game_obj = ggo;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestSOnB</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.priestStartOnBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEOnB</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.priestEndOnBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilSOnB</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.devilStartOnBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEOnB</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.devilEndOnBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.moveBoat();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">offBoatL</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.getOffTheBoat(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">offBoatR</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            <span class=\"number\">_</span>gen_game_obj.getOffTheBoat(<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restart</span><span class=\"params\">()</span></div><div class=\"line\">        </span>&#123;</div><div class=\"line\">            Application.LoadLevel(Application.loadedLevelName);</div><div class=\"line\">            state = State.BSTART;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> BaseCode : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameName;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> gameRule;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        GameSceneController my = GameSceneController.GetInstance();</div><div class=\"line\">        my.setBaseCode(<span class=\"keyword\">this</span>);</div><div class=\"line\">        gameName = <span class=\"string\">\"Priests and Devils\"</span>;</div><div class=\"line\">        gameRule = <span class=\"string\">\"Priests and Devils is a puzzle game in which you will help the Priests and Devils to cross the river within the time limit. There are 3 priests and 3 devils at one side of the river. They all want to get to the other side of this river, but there is only one boat and this boat can only carry two persons each time. And there must be one person steering the boat from one side to the other side. In the flash game, you can click on them to move them and click the go button to move the boat to the other direction. If the priests are out numbered by the devils on either side of the river, they get killed and the game is over. You can try it in many ways. Keep all priests alive! Good luck!             Sphere -- Priest\tCube -- Devil\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"GenGameObject-cs\"><a href=\"#GenGameObject-cs\" class=\"headerlink\" title=\"GenGameObject.cs\"></a><strong>GenGameObject.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> GenGameObject : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    Stack&lt;GameObject&gt; priests_start = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">    Stack&lt;GameObject&gt; priests_end = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">    Stack&lt;GameObject&gt; devils_start = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\">    Stack&lt;GameObject&gt; devils_end = <span class=\"keyword\">new</span> Stack&lt;GameObject&gt;();</div><div class=\"line\"></div><div class=\"line\">    GameObject[] boat = <span class=\"keyword\">new</span> GameObject[<span class=\"number\">2</span>];  <span class=\"comment\">// 船上物体</span></div><div class=\"line\">    GameObject boat_obj;  <span class=\"comment\">// 船实体</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">100f</span>;</div><div class=\"line\"></div><div class=\"line\">    GameSceneController my;</div><div class=\"line\"></div><div class=\"line\">    Vector3 shoreStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-12</span>);</div><div class=\"line\">    Vector3 shoreEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">12</span>);</div><div class=\"line\">    Vector3 boatStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-4</span>);</div><div class=\"line\">    Vector3 boatEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> gap = <span class=\"number\">1.5f</span>;  <span class=\"comment\">// 控制速度</span></div><div class=\"line\">    Vector3 priestStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-11</span>f);</div><div class=\"line\">    Vector3 priestEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">8f</span>);</div><div class=\"line\">    Vector3 devilStartPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">-16</span>f);</div><div class=\"line\">    Vector3 devilEndPos = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">2.7f</span>, <span class=\"number\">13f</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        my = GameSceneController.GetInstance();</div><div class=\"line\">        my.setGenGameObject(<span class=\"keyword\">this</span>);</div><div class=\"line\">        loadSrc();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadSrc</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// shore</span></div><div class=\"line\">        Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Shore\"</span>), shoreStartPos, Quaternion.identity);</div><div class=\"line\">        Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Shore\"</span>), shoreEndPos, Quaternion.identity);</div><div class=\"line\">        <span class=\"comment\">// boat</span></div><div class=\"line\">        boat_obj = Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Boat\"</span>), boatStartPos, Quaternion.identity) as GameObject;</div><div class=\"line\">        <span class=\"comment\">// priests &amp; devils</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_start.Push(Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Priest\"</span>)) as GameObject);</div><div class=\"line\">            devils_start.Push(Instantiate(Resources.Load(<span class=\"string\">\"Prefabs/Devil\"</span>)) as GameObject);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">boatCapacity</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> capacity = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[i] == null) capacity++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> capacity;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getOnTheBoat</span><span class=\"params\">(GameObject obj)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            obj.transform.parent = boat_obj.transform;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[<span class=\"number\">0</span>] == null)</div><div class=\"line\">            &#123;</div><div class=\"line\">                boat[<span class=\"number\">0</span>] = obj;</div><div class=\"line\">                obj.transform.localPosition = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">-0.3</span>f);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                boat[<span class=\"number\">1</span>] = obj;</div><div class=\"line\">                obj.transform.localPosition = <span class=\"keyword\">new</span> Vector3(<span class=\"number\">0</span>, <span class=\"number\">1.2f</span>, <span class=\"number\">0.3f</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boatCapacity() != <span class=\"number\">2</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (my.state == State.BSTART)</div><div class=\"line\">            &#123;</div><div class=\"line\">                my.state = State.BSEMOVING;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BEND)</div><div class=\"line\">            &#123;</div><div class=\"line\">                my.state = State.BESMOVING;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getOffTheBoat</span><span class=\"params\">(<span class=\"keyword\">int</span> side)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (boat[side] != null)</div><div class=\"line\">        &#123;</div><div class=\"line\">            boat[side].transform.parent = null;</div><div class=\"line\">            <span class=\"keyword\">if</span> (my.state == State.BEND)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Priest\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    priests_end.Push(boat[side]);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Devil\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    devils_end.Push(boat[side]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BSTART)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Priest\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    priests_start.Push(boat[side]);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[side].tag == <span class=\"string\">\"Devil\"</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    devils_start.Push(boat[side]);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            boat[side] = null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestStartOnBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BSTART)</div><div class=\"line\">            getOnTheBoat(priests_start.Pop());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">priestEndOnBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BEND)</div><div class=\"line\">            getOnTheBoat(priests_end.Pop());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilStartOnBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (devils_start.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BSTART)</div><div class=\"line\">            getOnTheBoat(devils_start.Pop());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">devilEndOnBoat</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (devils_end.Count != <span class=\"number\">0</span> &amp;&amp; boatCapacity() != <span class=\"number\">0</span> &amp;&amp; my.state == State.BEND)</div><div class=\"line\">            getOnTheBoat(devils_end.Pop());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setCharacterPositions</span><span class=\"params\">(Stack&lt;GameObject&gt; <span class=\"built_in\">stack</span>, Vector3 pos)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        GameObject[] <span class=\"built_in\">array</span> = <span class=\"built_in\">stack</span>.ToArray();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">stack</span>.Count; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">array</span>[i].transform.position = <span class=\"keyword\">new</span> Vector3(pos.x, pos.y, pos.z + gap * i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pOnb = <span class=\"number\">0</span>, dOnb = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> priests_s = <span class=\"number\">0</span>, devils_s = <span class=\"number\">0</span>, priests_e = <span class=\"number\">0</span>, devils_e = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (priests_end.Count == <span class=\"number\">3</span> &amp;&amp; devils_end.Count == <span class=\"number\">3</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            my.state = State.WIN;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; ++i)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat[i] != null &amp;&amp; boat[i].tag == <span class=\"string\">\"Priest\"</span>) pOnb++;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (boat[i] != null &amp;&amp; boat[i].tag == <span class=\"string\">\"Devil\"</span>) dOnb++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (my.state == State.BSTART)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_s = priests_start.Count + pOnb;</div><div class=\"line\">            devils_s = devils_start.Count + dOnb;</div><div class=\"line\">            priests_e = priests_end.Count;</div><div class=\"line\">            devils_e = devils_end.Count;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BEND)</div><div class=\"line\">        &#123;</div><div class=\"line\">            priests_s = priests_start.Count;</div><div class=\"line\">            devils_s = devils_start.Count;</div><div class=\"line\">            priests_e = priests_end.Count + pOnb;</div><div class=\"line\">            devils_e = devils_end.Count + dOnb;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((priests_s != <span class=\"number\">0</span> &amp;&amp; priests_s &lt; devils_s) || (priests_e != <span class=\"number\">0</span> &amp;&amp; priests_e &lt; devils_e))</div><div class=\"line\">        &#123;</div><div class=\"line\">            my.state = State.LOSE;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        setCharacterPositions(priests_start, priestStartPos);</div><div class=\"line\">        setCharacterPositions(priests_end, priestEndPos);</div><div class=\"line\">        setCharacterPositions(devils_start, devilStartPos);</div><div class=\"line\">        setCharacterPositions(devils_end, devilEndPos);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (my.state == State.BSEMOVING)</div><div class=\"line\">        &#123;</div><div class=\"line\">            boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatEndPos, speed * Time.deltaTime);</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat_obj.transform.position == boatEndPos)</div><div class=\"line\">            &#123;</div><div class=\"line\">                my.state = State.BEND;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BESMOVING)</div><div class=\"line\">        &#123;</div><div class=\"line\">            boat_obj.transform.position = Vector3.MoveTowards(boat_obj.transform.position, boatStartPos, speed * Time.deltaTime);</div><div class=\"line\">            <span class=\"keyword\">if</span> (boat_obj.transform.position == boatStartPos)</div><div class=\"line\">            &#123;</div><div class=\"line\">                my.state = State.BSTART;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> check();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"UserInterface-cs\"><a href=\"#UserInterface-cs\" class=\"headerlink\" title=\"UserInterface.cs\"></a><strong>UserInterface.cs</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"><span class=\"keyword\">using</span> Com.Mygame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> UserInterface : MonoBehaviour</div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    GameSceneController my;</div><div class=\"line\">    IUserActions action;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">float</span> width, height;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">castw</span><span class=\"params\">(<span class=\"keyword\">float</span> scale)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Screen.width - width) / scale;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">casth</span><span class=\"params\">(<span class=\"keyword\">float</span> scale)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (Screen.height - height) / scale;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        my = GameSceneController.GetInstance();</div><div class=\"line\">        action = GameSceneController.GetInstance() as IUserActions;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnGUI</span><span class=\"params\">()</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        width = Screen.width / <span class=\"number\">12</span>;</div><div class=\"line\">        height = Screen.height / <span class=\"number\">12</span>;</div><div class=\"line\">        print(my.state);</div><div class=\"line\">        <span class=\"keyword\">if</span> (my.state == State.WIN)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Win!\"</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                action.restart();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.LOSE)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Lose!\"</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                action.restart();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (GUI.RepeatButton(<span class=\"keyword\">new</span> Rect(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">120</span>, <span class=\"number\">20</span>), my.getBaseCode().gameName))</div><div class=\"line\">            &#123;</div><div class=\"line\">                GUI.TextArea(<span class=\"keyword\">new</span> Rect(<span class=\"number\">10</span>, <span class=\"number\">40</span>, Screen.width - <span class=\"number\">20</span>, Screen.height / <span class=\"number\">2</span>), my.getBaseCode().gameRule);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (my.state == State.BSTART || my.state == State.BEND)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2f</span>), casth(<span class=\"number\">6f</span>), width, height), <span class=\"string\">\"Go\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.moveBoat();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">10.5f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.devilSOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">4.3f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.priestSOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.1f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.devilEOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.3f</span>), casth(<span class=\"number\">4f</span>), width, height), <span class=\"string\">\"On\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.priestEOnB();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">2.5f</span>), casth(<span class=\"number\">1.3f</span>), width, height), <span class=\"string\">\"Off\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.offBoatL();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (GUI.Button(<span class=\"keyword\">new</span> Rect(castw(<span class=\"number\">1.7f</span>), casth(<span class=\"number\">1.3f</span>), width, height), <span class=\"string\">\"Off\"</span>))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    action.offBoatR();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"粒子系统","toc":true,"date":"2016-07-23T04:09:05.000Z","_content":"学习了3D游戏的粒子系统，参考了[I-remember](http://i-remember.fr/en)上的例子光环，决定自己做一个。开始动手之前，需要细心观察并发现，光环分两层，一层顺时针旋转另外一层逆时针旋转，且中间部分粒子较多；粒子在旋转的同时会在光环之间游离。\n<!--more-->\n![](a.gif)\n## **基础准备**\n\n新建空对象ParticleCircle，再建两个子对象Clockwise和Anticlockwise，为其添加Particle System组件，新建ParticleCircle脚本并挂载在子对象上：\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class CirclePosition  // 记录每个粒子的当前半径、角度和时间，其中时间是做游离运动需要的。\n{\n    public float radius = 0f, angle = 0f, time = 0f;\n    public CirclePosition(float radius, float angle, float time)\n    {\n        this.radius = radius;\n        this.angle = angle;\n        this.time = time;\n    }\n}\n\npublic class ParticleCircle : MonoBehaviour {\n\n    private ParticleSystem particleSys;  // 粒子系统  \n    private ParticleSystem.Particle[] particleArr;\n    private CirclePosition[] circle;     // 极坐标数组  \n    public int count = 10000;            // 粒子数量\n    public float size = 3f;              // 粒子大小  \n    public float minRadius = 4.0f;       // 最小半径  \n    public float maxRadius = 8.0f;       // 最大半径  \n    public bool clockwise = true;        // 顺时针|逆时针  \n    public float speed = 2f;             // 速度  \n    public float pingPong = 0.02f;       // 游离范围\n    private int tier = 10;               // 速度差分层数  \n    public Gradient colorGradient;       // 颜色控制\n\n    void RandomlySpread()                // 随机布置粒子位置\n    {\n        for (int i = 0; i < count; ++i)\n        {   \n            float midRadius = (maxRadius + minRadius)/2;\n            float minRate = Random.Range(1.0f, midRadius/minRadius);\n            float maxRate = Random.Range(midRadius/maxRadius, 1.0f);\n            float radius = Random.Range(minRadius * minRate, maxRadius * maxRate);\n\n            float angle = Random.Range(0.0f, 360.0f);  // 随机每个粒子的角度\n            float theta = angle/180 * Mathf.PI;\n\n            float time = Random.Range(0.0f, 360.0f);  // 随机每个粒子的游离起始时间  \n\n            circle[i] = new CirclePosition(radius, angle, time);\n            particleArr[i].position = new Vector3(circle[i].radius * Mathf.Cos(theta), 0f, circle[i].radius * Mathf.Sin(theta));\n        }\n\n        particleSys.SetParticles(particleArr, particleArr.Length);\n\n    }\n\n    void Start () {\n        particleArr = new ParticleSystem.Particle[count];  // 初始化粒子数组\n        circle = new CirclePosition[count];\n \n        particleSys = this.GetComponent<ParticleSystem>(); // 初始化粒子系统 \n        particleSys.startSpeed = 0;\n        particleSys.startSize = size; \n        particleSys.loop = false;\n        particleSys.maxParticles = count;                  // 设置最大粒子量  \n        particleSys.Emit(count);                           // 发射粒子  \n        particleSys.GetParticles(particleArr);\n\n        RandomlySpread();                                  // 初始化各粒子位置  \n    }\n```\n## **旋转粒子**\n\n在Update函数里逐渐改变粒子的角度使粒子旋转，其中tier使粒子角度改变量不一致，这样粒子旋转就不会看起来像是图片在旋转：\n\n``` cpp\nvoid Update () {   // 通过改变角度使粒子旋转\n     for (int i = 0; i < count; i++)\n     {\n         if (clockwise)\n             circle[i].angle -= (i%tier + 1)*(speed/circle[i].radius/tier);\n         else\n             circle[i].angle += (i%tier + 1)*(speed/circle[i].radius/tier);\n\n         circle[i].angle = (360.0f + circle[i].angle)%360.0f;   // 保证angle在0~360度  \n         float theta = circle[i].angle/180 * Mathf.PI;\n\n         particleArr[i].position = new Vector3(circle[i].radius * Mathf.Cos(theta), 0f, circle[i].radius * Mathf.Sin(theta));\n\n     }\n\n     particleSys.SetParticles(particleArr, particleArr.Length);\n\n}\n```\n\n## **游离粒子**\n\nUnity的Mathf的[PingPong](http://docs.unity3d.com/ScriptReference/Mathf.PingPong.html)函数使得值在范围内来回变动，使用它让粒子半径来回变动。以下添加到Update函数中：\n``` cpp\ncircle[i].time += Time.deltaTime;  \ncircle[i].radius += Mathf.PingPong(circle[i].time / minRadius / maxRadius, pingPong) - pingPong / 2.0f;  \n```\n\n## **添加透明度**\n\n仔细观察i-remember会发现不同地方亮度不同，也可以说是透明度不同，使用Gradient类可以解决这个问题。一下添加到start函数中：\n``` cpp\nGradientAlphaKey[] alphaKeys = new GradientAlphaKey[5];   // 初始化梯度颜色控制器  \nalphaKeys[0].time = 0.0f; alphaKeys[0].alpha = 1.0f;\nalphaKeys[1].time = 0.4f; alphaKeys[1].alpha = 0.4f;\nalphaKeys[2].time = 0.6f; alphaKeys[2].alpha = 1.0f;\nalphaKeys[3].time = 0.9f; alphaKeys[3].alpha = 0.4f;\nalphaKeys[4].time = 1.0f; alphaKeys[4].alpha = 0.9f;\nGradientColorKey[] colorKeys = new GradientColorKey[2];\ncolorKeys[0].time = 0.0f; colorKeys[0].color = Color.white;\ncolorKeys[1].time = 1.0f; colorKeys[1].color = Color.white;\ncolorGradient.SetKeys(colorKeys, alphaKeys);\n```\n\n然后在Update中根据粒子的角度改变粒子的透明度:\n``` cpp\nparticleArr[i].color = colorGradient.Evaluate(circle[i].angle / 360.0f);\n```\n## **修改参数**\n\n修改主摄像机到合适位置：\n![](z.png)\n另外一层是逆时针旋转的，因此把clockwise的勾去掉，同时修改参数直到效果满意：\n![](a.png)  ![](b.png)\n\n## **完整代码**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class CirclePosition  // 记录每个粒子的当前半径、角度和时间，其中时间是做游离运动需要的。\n{\n    public float radius = 0f, angle = 0f, time = 0f;\n    public CirclePosition(float radius, float angle, float time)\n    {\n        this.radius = radius;\n        this.angle = angle;\n        this.time = time;\n    }\n}\n\npublic class ParticleCircle : MonoBehaviour {\n\n    private ParticleSystem particleSys;  // 粒子系统  \n    private ParticleSystem.Particle[] particleArr;\n    private CirclePosition[] circle;     // 极坐标数组  \n    public int count = 10000;            // 粒子数量\n    public float size = 3f;              // 粒子大小  \n    public float minRadius = 4.0f;       // 最小半径  \n    public float maxRadius = 8.0f;       // 最大半径  \n    public bool clockwise = true;        // 顺时针|逆时针  \n    public float speed = 2f;             // 速度  \n    public float pingPong = 0.02f;       // 游离范围\n    private int tier = 10;               // 速度差分层数  \n    public Gradient colorGradient;       // 颜色控制\n\n    void RandomlySpread()                // 随机布置粒子位置\n    {\n        for (int i = 0; i < count; ++i)\n        {   \n            float midRadius = (maxRadius + minRadius)/2;\n            float minRate = Random.Range(1.0f, midRadius/minRadius);\n            float maxRate = Random.Range(midRadius/maxRadius, 1.0f);\n            float radius = Random.Range(minRadius * minRate, maxRadius * maxRate);\n\n            float angle = Random.Range(0.0f, 360.0f);  // 随机每个粒子的角度\n            float theta = angle/180 * Mathf.PI;\n\n            float time = Random.Range(0.0f, 360.0f);  // 随机每个粒子的游离起始时间  \n\n            circle[i] = new CirclePosition(radius, angle, time);\n            particleArr[i].position = new Vector3(circle[i].radius * Mathf.Cos(theta), 0f, circle[i].radius * Mathf.Sin(theta));\n        }\n\n        particleSys.SetParticles(particleArr, particleArr.Length);\n\n    }\n\n    void Start () {\n        particleArr = new ParticleSystem.Particle[count];  // 初始化粒子数组\n        circle = new CirclePosition[count];\n \n        particleSys = this.GetComponent<ParticleSystem>(); // 初始化粒子系统 \n        particleSys.startSpeed = 0;\n        particleSys.startSize = size; \n        particleSys.loop = false;\n        particleSys.maxParticles = count;                  // 设置最大粒子量  \n        particleSys.Emit(count);                           // 发射粒子  \n        particleSys.GetParticles(particleArr);\n\n        RandomlySpread();                                  // 初始化各粒子位置  \n\n        GradientAlphaKey[] alphaKeys = new GradientAlphaKey[5];   // 初始化梯度颜色控制器  \n        alphaKeys[0].time = 0.0f; alphaKeys[0].alpha = 1.0f;\n        alphaKeys[1].time = 0.4f; alphaKeys[1].alpha = 0.4f;\n        alphaKeys[2].time = 0.6f; alphaKeys[2].alpha = 1.0f;\n        alphaKeys[3].time = 0.9f; alphaKeys[3].alpha = 0.4f;\n        alphaKeys[4].time = 1.0f; alphaKeys[4].alpha = 0.9f;\n        GradientColorKey[] colorKeys = new GradientColorKey[2];\n        colorKeys[0].time = 0.0f; colorKeys[0].color = Color.white;\n        colorKeys[1].time = 1.0f; colorKeys[1].color = Color.white;\n        colorGradient.SetKeys(colorKeys, alphaKeys);\n\n    }\n\n\n\tvoid Update () {   // 通过改变角度使粒子旋转\n        for (int i = 0; i < count; i++)\n        {\n            if (clockwise)\n                circle[i].angle -= (i%tier + 1)*(speed/circle[i].radius/tier);\n            else\n                circle[i].angle += (i%tier + 1)*(speed/circle[i].radius/tier);\n            circle[i].angle = (360.0f + circle[i].angle)%360.0f;   // 保证angle在0~360度  \n            float theta = circle[i].angle/180 * Mathf.PI;\n            particleArr[i].position = new Vector3(circle[i].radius * Mathf.Cos(theta), 0f, circle[i].radius * Mathf.Sin(theta));\n\n            circle[i].time += Time.deltaTime;      // 使粒子半径波动\n            circle[i].radius += Mathf.PingPong(circle[i].time/minRadius/maxRadius, pingPong) - pingPong/2.0f;\n\n            particleArr[i].color = colorGradient.Evaluate(circle[i].angle/360.0f);  // 根据角度改变透明度\n\n        }\n\n        particleSys.SetParticles(particleArr, particleArr.Length);\n\n    }\n}\n```\n\n## **ParticleSea**\n以下是另外一个利用粒子系统写的[粒子海洋](http://www.manew.com/thread-47123-1-1.html)，有兴趣可以做做：\n![](b.gif)","source":"_posts/粒子系统.md","raw":"---\ntitle: 粒子系统\ntoc: true\ndate: 2016-07-23 12:09:05\ntags:\n- C#\n- unity3d\ncategories: 3D游戏开发\n---\n学习了3D游戏的粒子系统，参考了[I-remember](http://i-remember.fr/en)上的例子光环，决定自己做一个。开始动手之前，需要细心观察并发现，光环分两层，一层顺时针旋转另外一层逆时针旋转，且中间部分粒子较多；粒子在旋转的同时会在光环之间游离。\n<!--more-->\n![](a.gif)\n## **基础准备**\n\n新建空对象ParticleCircle，再建两个子对象Clockwise和Anticlockwise，为其添加Particle System组件，新建ParticleCircle脚本并挂载在子对象上：\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class CirclePosition  // 记录每个粒子的当前半径、角度和时间，其中时间是做游离运动需要的。\n{\n    public float radius = 0f, angle = 0f, time = 0f;\n    public CirclePosition(float radius, float angle, float time)\n    {\n        this.radius = radius;\n        this.angle = angle;\n        this.time = time;\n    }\n}\n\npublic class ParticleCircle : MonoBehaviour {\n\n    private ParticleSystem particleSys;  // 粒子系统  \n    private ParticleSystem.Particle[] particleArr;\n    private CirclePosition[] circle;     // 极坐标数组  \n    public int count = 10000;            // 粒子数量\n    public float size = 3f;              // 粒子大小  \n    public float minRadius = 4.0f;       // 最小半径  \n    public float maxRadius = 8.0f;       // 最大半径  \n    public bool clockwise = true;        // 顺时针|逆时针  \n    public float speed = 2f;             // 速度  \n    public float pingPong = 0.02f;       // 游离范围\n    private int tier = 10;               // 速度差分层数  \n    public Gradient colorGradient;       // 颜色控制\n\n    void RandomlySpread()                // 随机布置粒子位置\n    {\n        for (int i = 0; i < count; ++i)\n        {   \n            float midRadius = (maxRadius + minRadius)/2;\n            float minRate = Random.Range(1.0f, midRadius/minRadius);\n            float maxRate = Random.Range(midRadius/maxRadius, 1.0f);\n            float radius = Random.Range(minRadius * minRate, maxRadius * maxRate);\n\n            float angle = Random.Range(0.0f, 360.0f);  // 随机每个粒子的角度\n            float theta = angle/180 * Mathf.PI;\n\n            float time = Random.Range(0.0f, 360.0f);  // 随机每个粒子的游离起始时间  \n\n            circle[i] = new CirclePosition(radius, angle, time);\n            particleArr[i].position = new Vector3(circle[i].radius * Mathf.Cos(theta), 0f, circle[i].radius * Mathf.Sin(theta));\n        }\n\n        particleSys.SetParticles(particleArr, particleArr.Length);\n\n    }\n\n    void Start () {\n        particleArr = new ParticleSystem.Particle[count];  // 初始化粒子数组\n        circle = new CirclePosition[count];\n \n        particleSys = this.GetComponent<ParticleSystem>(); // 初始化粒子系统 \n        particleSys.startSpeed = 0;\n        particleSys.startSize = size; \n        particleSys.loop = false;\n        particleSys.maxParticles = count;                  // 设置最大粒子量  \n        particleSys.Emit(count);                           // 发射粒子  \n        particleSys.GetParticles(particleArr);\n\n        RandomlySpread();                                  // 初始化各粒子位置  \n    }\n```\n## **旋转粒子**\n\n在Update函数里逐渐改变粒子的角度使粒子旋转，其中tier使粒子角度改变量不一致，这样粒子旋转就不会看起来像是图片在旋转：\n\n``` cpp\nvoid Update () {   // 通过改变角度使粒子旋转\n     for (int i = 0; i < count; i++)\n     {\n         if (clockwise)\n             circle[i].angle -= (i%tier + 1)*(speed/circle[i].radius/tier);\n         else\n             circle[i].angle += (i%tier + 1)*(speed/circle[i].radius/tier);\n\n         circle[i].angle = (360.0f + circle[i].angle)%360.0f;   // 保证angle在0~360度  \n         float theta = circle[i].angle/180 * Mathf.PI;\n\n         particleArr[i].position = new Vector3(circle[i].radius * Mathf.Cos(theta), 0f, circle[i].radius * Mathf.Sin(theta));\n\n     }\n\n     particleSys.SetParticles(particleArr, particleArr.Length);\n\n}\n```\n\n## **游离粒子**\n\nUnity的Mathf的[PingPong](http://docs.unity3d.com/ScriptReference/Mathf.PingPong.html)函数使得值在范围内来回变动，使用它让粒子半径来回变动。以下添加到Update函数中：\n``` cpp\ncircle[i].time += Time.deltaTime;  \ncircle[i].radius += Mathf.PingPong(circle[i].time / minRadius / maxRadius, pingPong) - pingPong / 2.0f;  \n```\n\n## **添加透明度**\n\n仔细观察i-remember会发现不同地方亮度不同，也可以说是透明度不同，使用Gradient类可以解决这个问题。一下添加到start函数中：\n``` cpp\nGradientAlphaKey[] alphaKeys = new GradientAlphaKey[5];   // 初始化梯度颜色控制器  \nalphaKeys[0].time = 0.0f; alphaKeys[0].alpha = 1.0f;\nalphaKeys[1].time = 0.4f; alphaKeys[1].alpha = 0.4f;\nalphaKeys[2].time = 0.6f; alphaKeys[2].alpha = 1.0f;\nalphaKeys[3].time = 0.9f; alphaKeys[3].alpha = 0.4f;\nalphaKeys[4].time = 1.0f; alphaKeys[4].alpha = 0.9f;\nGradientColorKey[] colorKeys = new GradientColorKey[2];\ncolorKeys[0].time = 0.0f; colorKeys[0].color = Color.white;\ncolorKeys[1].time = 1.0f; colorKeys[1].color = Color.white;\ncolorGradient.SetKeys(colorKeys, alphaKeys);\n```\n\n然后在Update中根据粒子的角度改变粒子的透明度:\n``` cpp\nparticleArr[i].color = colorGradient.Evaluate(circle[i].angle / 360.0f);\n```\n## **修改参数**\n\n修改主摄像机到合适位置：\n![](z.png)\n另外一层是逆时针旋转的，因此把clockwise的勾去掉，同时修改参数直到效果满意：\n![](a.png)  ![](b.png)\n\n## **完整代码**\n\n``` cpp\nusing UnityEngine;\nusing System.Collections;\n\npublic class CirclePosition  // 记录每个粒子的当前半径、角度和时间，其中时间是做游离运动需要的。\n{\n    public float radius = 0f, angle = 0f, time = 0f;\n    public CirclePosition(float radius, float angle, float time)\n    {\n        this.radius = radius;\n        this.angle = angle;\n        this.time = time;\n    }\n}\n\npublic class ParticleCircle : MonoBehaviour {\n\n    private ParticleSystem particleSys;  // 粒子系统  \n    private ParticleSystem.Particle[] particleArr;\n    private CirclePosition[] circle;     // 极坐标数组  \n    public int count = 10000;            // 粒子数量\n    public float size = 3f;              // 粒子大小  \n    public float minRadius = 4.0f;       // 最小半径  \n    public float maxRadius = 8.0f;       // 最大半径  \n    public bool clockwise = true;        // 顺时针|逆时针  \n    public float speed = 2f;             // 速度  \n    public float pingPong = 0.02f;       // 游离范围\n    private int tier = 10;               // 速度差分层数  \n    public Gradient colorGradient;       // 颜色控制\n\n    void RandomlySpread()                // 随机布置粒子位置\n    {\n        for (int i = 0; i < count; ++i)\n        {   \n            float midRadius = (maxRadius + minRadius)/2;\n            float minRate = Random.Range(1.0f, midRadius/minRadius);\n            float maxRate = Random.Range(midRadius/maxRadius, 1.0f);\n            float radius = Random.Range(minRadius * minRate, maxRadius * maxRate);\n\n            float angle = Random.Range(0.0f, 360.0f);  // 随机每个粒子的角度\n            float theta = angle/180 * Mathf.PI;\n\n            float time = Random.Range(0.0f, 360.0f);  // 随机每个粒子的游离起始时间  \n\n            circle[i] = new CirclePosition(radius, angle, time);\n            particleArr[i].position = new Vector3(circle[i].radius * Mathf.Cos(theta), 0f, circle[i].radius * Mathf.Sin(theta));\n        }\n\n        particleSys.SetParticles(particleArr, particleArr.Length);\n\n    }\n\n    void Start () {\n        particleArr = new ParticleSystem.Particle[count];  // 初始化粒子数组\n        circle = new CirclePosition[count];\n \n        particleSys = this.GetComponent<ParticleSystem>(); // 初始化粒子系统 \n        particleSys.startSpeed = 0;\n        particleSys.startSize = size; \n        particleSys.loop = false;\n        particleSys.maxParticles = count;                  // 设置最大粒子量  \n        particleSys.Emit(count);                           // 发射粒子  \n        particleSys.GetParticles(particleArr);\n\n        RandomlySpread();                                  // 初始化各粒子位置  \n\n        GradientAlphaKey[] alphaKeys = new GradientAlphaKey[5];   // 初始化梯度颜色控制器  \n        alphaKeys[0].time = 0.0f; alphaKeys[0].alpha = 1.0f;\n        alphaKeys[1].time = 0.4f; alphaKeys[1].alpha = 0.4f;\n        alphaKeys[2].time = 0.6f; alphaKeys[2].alpha = 1.0f;\n        alphaKeys[3].time = 0.9f; alphaKeys[3].alpha = 0.4f;\n        alphaKeys[4].time = 1.0f; alphaKeys[4].alpha = 0.9f;\n        GradientColorKey[] colorKeys = new GradientColorKey[2];\n        colorKeys[0].time = 0.0f; colorKeys[0].color = Color.white;\n        colorKeys[1].time = 1.0f; colorKeys[1].color = Color.white;\n        colorGradient.SetKeys(colorKeys, alphaKeys);\n\n    }\n\n\n\tvoid Update () {   // 通过改变角度使粒子旋转\n        for (int i = 0; i < count; i++)\n        {\n            if (clockwise)\n                circle[i].angle -= (i%tier + 1)*(speed/circle[i].radius/tier);\n            else\n                circle[i].angle += (i%tier + 1)*(speed/circle[i].radius/tier);\n            circle[i].angle = (360.0f + circle[i].angle)%360.0f;   // 保证angle在0~360度  \n            float theta = circle[i].angle/180 * Mathf.PI;\n            particleArr[i].position = new Vector3(circle[i].radius * Mathf.Cos(theta), 0f, circle[i].radius * Mathf.Sin(theta));\n\n            circle[i].time += Time.deltaTime;      // 使粒子半径波动\n            circle[i].radius += Mathf.PingPong(circle[i].time/minRadius/maxRadius, pingPong) - pingPong/2.0f;\n\n            particleArr[i].color = colorGradient.Evaluate(circle[i].angle/360.0f);  // 根据角度改变透明度\n\n        }\n\n        particleSys.SetParticles(particleArr, particleArr.Length);\n\n    }\n}\n```\n\n## **ParticleSea**\n以下是另外一个利用粒子系统写的[粒子海洋](http://www.manew.com/thread-47123-1-1.html)，有兴趣可以做做：\n![](b.gif)","slug":"粒子系统","published":1,"updated":"2016-07-23T05:21:58.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzsf001rgobklyvzaxaa","content":"<p>学习了3D游戏的粒子系统，参考了<a href=\"http://i-remember.fr/en\" target=\"_blank\" rel=\"external\">I-remember</a>上的例子光环，决定自己做一个。开始动手之前，需要细心观察并发现，光环分两层，一层顺时针旋转另外一层逆时针旋转，且中间部分粒子较多；粒子在旋转的同时会在光环之间游离。<br><a id=\"more\"></a><br><img src=\"a.gif\" alt=\"\"></p>\n<h2 id=\"基础准备\"><a href=\"#基础准备\" class=\"headerlink\" title=\"基础准备\"></a><strong>基础准备</strong></h2><p>新建空对象ParticleCircle，再建两个子对象Clockwise和Anticlockwise，为其添加Particle System组件，新建ParticleCircle脚本并挂载在子对象上：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> CirclePosition  <span class=\"comment\">// 记录每个粒子的当前半径、角度和时间，其中时间是做游离运动需要的。</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> radius = <span class=\"number\">0f</span>, angle = <span class=\"number\">0f</span>, time = <span class=\"number\">0f</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CirclePosition</span><span class=\"params\">(<span class=\"keyword\">float</span> radius, <span class=\"keyword\">float</span> angle, <span class=\"keyword\">float</span> time)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</div><div class=\"line\">        <span class=\"keyword\">this</span>.angle = angle;</div><div class=\"line\">        <span class=\"keyword\">this</span>.time = time;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ParticleCircle : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ParticleSystem particleSys;  <span class=\"comment\">// 粒子系统  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> ParticleSystem.Particle[] particleArr;</div><div class=\"line\">    <span class=\"keyword\">private</span> CirclePosition[] circle;     <span class=\"comment\">// 极坐标数组  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count = <span class=\"number\">10000</span>;            <span class=\"comment\">// 粒子数量</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> size = <span class=\"number\">3f</span>;              <span class=\"comment\">// 粒子大小  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> minRadius = <span class=\"number\">4.0f</span>;       <span class=\"comment\">// 最小半径  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> maxRadius = <span class=\"number\">8.0f</span>;       <span class=\"comment\">// 最大半径  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> clockwise = <span class=\"literal\">true</span>;        <span class=\"comment\">// 顺时针|逆时针  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">2f</span>;             <span class=\"comment\">// 速度  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> pingPong = <span class=\"number\">0.02f</span>;       <span class=\"comment\">// 游离范围</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tier = <span class=\"number\">10</span>;               <span class=\"comment\">// 速度差分层数  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> Gradient colorGradient;       <span class=\"comment\">// 颜色控制</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RandomlySpread</span><span class=\"params\">()</span>                <span class=\"comment\">// 随机布置粒子位置</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i)</div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"keyword\">float</span> midRadius = (maxRadius + minRadius)/<span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">float</span> minRate = Random.Range(<span class=\"number\">1.0f</span>, midRadius/minRadius);</div><div class=\"line\">            <span class=\"keyword\">float</span> maxRate = Random.Range(midRadius/maxRadius, <span class=\"number\">1.0f</span>);</div><div class=\"line\">            <span class=\"keyword\">float</span> radius = Random.Range(minRadius * minRate, maxRadius * maxRate);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> angle = Random.Range(<span class=\"number\">0.0f</span>, <span class=\"number\">360.0f</span>);  <span class=\"comment\">// 随机每个粒子的角度</span></div><div class=\"line\">            <span class=\"keyword\">float</span> theta = angle/<span class=\"number\">180</span> * Mathf.PI;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> time = Random.Range(<span class=\"number\">0.0f</span>, <span class=\"number\">360.0f</span>);  <span class=\"comment\">// 随机每个粒子的游离起始时间  </span></div><div class=\"line\"></div><div class=\"line\">            circle[i] = <span class=\"keyword\">new</span> CirclePosition(radius, angle, time);</div><div class=\"line\">            particleArr[i].position = <span class=\"keyword\">new</span> Vector3(circle[i].radius * Mathf.Cos(theta), <span class=\"number\">0f</span>, circle[i].radius * Mathf.Sin(theta));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        particleSys.SetParticles(particleArr, particleArr.Length);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        particleArr = <span class=\"keyword\">new</span> ParticleSystem.Particle[count];  <span class=\"comment\">// 初始化粒子数组</span></div><div class=\"line\">        circle = <span class=\"keyword\">new</span> CirclePosition[count];</div><div class=\"line\"> </div><div class=\"line\">        particleSys = <span class=\"keyword\">this</span>.GetComponent&lt;ParticleSystem&gt;(); <span class=\"comment\">// 初始化粒子系统 </span></div><div class=\"line\">        particleSys.startSpeed = <span class=\"number\">0</span>;</div><div class=\"line\">        particleSys.startSize = size; </div><div class=\"line\">        particleSys.loop = <span class=\"literal\">false</span>;</div><div class=\"line\">        particleSys.maxParticles = count;                  <span class=\"comment\">// 设置最大粒子量  </span></div><div class=\"line\">        particleSys.Emit(count);                           <span class=\"comment\">// 发射粒子  </span></div><div class=\"line\">        particleSys.GetParticles(particleArr);</div><div class=\"line\"></div><div class=\"line\">        RandomlySpread();                                  <span class=\"comment\">// 初始化各粒子位置  </span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"旋转粒子\"><a href=\"#旋转粒子\" class=\"headerlink\" title=\"旋转粒子\"></a><strong>旋转粒子</strong></h2><p>在Update函数里逐渐改变粒子的角度使粒子旋转，其中tier使粒子角度改变量不一致，这样粒子旋转就不会看起来像是图片在旋转：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span> <span class=\"params\">()</span> </span>&#123;   <span class=\"comment\">// 通过改变角度使粒子旋转</span></div><div class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</div><div class=\"line\">     &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (clockwise)</div><div class=\"line\">             circle[i].angle -= (i%tier + <span class=\"number\">1</span>)*(speed/circle[i].radius/tier);</div><div class=\"line\">         <span class=\"keyword\">else</span></div><div class=\"line\">             circle[i].angle += (i%tier + <span class=\"number\">1</span>)*(speed/circle[i].radius/tier);</div><div class=\"line\"></div><div class=\"line\">         circle[i].angle = (<span class=\"number\">360.0f</span> + circle[i].angle)%<span class=\"number\">360.0f</span>;   <span class=\"comment\">// 保证angle在0~360度  </span></div><div class=\"line\">         <span class=\"keyword\">float</span> theta = circle[i].angle/<span class=\"number\">180</span> * Mathf.PI;</div><div class=\"line\"></div><div class=\"line\">         particleArr[i].position = <span class=\"keyword\">new</span> Vector3(circle[i].radius * Mathf.Cos(theta), <span class=\"number\">0f</span>, circle[i].radius * Mathf.Sin(theta));</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     particleSys.SetParticles(particleArr, particleArr.Length);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"游离粒子\"><a href=\"#游离粒子\" class=\"headerlink\" title=\"游离粒子\"></a><strong>游离粒子</strong></h2><p>Unity的Mathf的<a href=\"http://docs.unity3d.com/ScriptReference/Mathf.PingPong.html\" target=\"_blank\" rel=\"external\">PingPong</a>函数使得值在范围内来回变动，使用它让粒子半径来回变动。以下添加到Update函数中：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">circle[i].time += Time.deltaTime;  </div><div class=\"line\">circle[i].radius += Mathf.PingPong(circle[i].time / minRadius / maxRadius, pingPong) - pingPong / <span class=\"number\">2.0f</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"添加透明度\"><a href=\"#添加透明度\" class=\"headerlink\" title=\"添加透明度\"></a><strong>添加透明度</strong></h2><p>仔细观察i-remember会发现不同地方亮度不同，也可以说是透明度不同，使用Gradient类可以解决这个问题。一下添加到start函数中：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">GradientAlphaKey[] alphaKeys = <span class=\"keyword\">new</span> GradientAlphaKey[<span class=\"number\">5</span>];   <span class=\"comment\">// 初始化梯度颜色控制器  </span></div><div class=\"line\">alphaKeys[<span class=\"number\">0</span>].time = <span class=\"number\">0.0f</span>; alphaKeys[<span class=\"number\">0</span>].alpha = <span class=\"number\">1.0f</span>;</div><div class=\"line\">alphaKeys[<span class=\"number\">1</span>].time = <span class=\"number\">0.4f</span>; alphaKeys[<span class=\"number\">1</span>].alpha = <span class=\"number\">0.4f</span>;</div><div class=\"line\">alphaKeys[<span class=\"number\">2</span>].time = <span class=\"number\">0.6f</span>; alphaKeys[<span class=\"number\">2</span>].alpha = <span class=\"number\">1.0f</span>;</div><div class=\"line\">alphaKeys[<span class=\"number\">3</span>].time = <span class=\"number\">0.9f</span>; alphaKeys[<span class=\"number\">3</span>].alpha = <span class=\"number\">0.4f</span>;</div><div class=\"line\">alphaKeys[<span class=\"number\">4</span>].time = <span class=\"number\">1.0f</span>; alphaKeys[<span class=\"number\">4</span>].alpha = <span class=\"number\">0.9f</span>;</div><div class=\"line\">GradientColorKey[] colorKeys = <span class=\"keyword\">new</span> GradientColorKey[<span class=\"number\">2</span>];</div><div class=\"line\">colorKeys[<span class=\"number\">0</span>].time = <span class=\"number\">0.0f</span>; colorKeys[<span class=\"number\">0</span>].color = Color.white;</div><div class=\"line\">colorKeys[<span class=\"number\">1</span>].time = <span class=\"number\">1.0f</span>; colorKeys[<span class=\"number\">1</span>].color = Color.white;</div><div class=\"line\">colorGradient.SetKeys(colorKeys, alphaKeys);</div></pre></td></tr></table></figure></p>\n<p>然后在Update中根据粒子的角度改变粒子的透明度:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">particleArr[i].color = colorGradient.Evaluate(circle[i].angle / <span class=\"number\">360.0f</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改参数\"><a href=\"#修改参数\" class=\"headerlink\" title=\"修改参数\"></a><strong>修改参数</strong></h2><p>修改主摄像机到合适位置：<br><img src=\"z.png\" alt=\"\"><br>另外一层是逆时针旋转的，因此把clockwise的勾去掉，同时修改参数直到效果满意：<br><img src=\"a.png\" alt=\"\">  <img src=\"b.png\" alt=\"\"></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> CirclePosition  <span class=\"comment\">// 记录每个粒子的当前半径、角度和时间，其中时间是做游离运动需要的。</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> radius = <span class=\"number\">0f</span>, angle = <span class=\"number\">0f</span>, time = <span class=\"number\">0f</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CirclePosition</span><span class=\"params\">(<span class=\"keyword\">float</span> radius, <span class=\"keyword\">float</span> angle, <span class=\"keyword\">float</span> time)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</div><div class=\"line\">        <span class=\"keyword\">this</span>.angle = angle;</div><div class=\"line\">        <span class=\"keyword\">this</span>.time = time;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ParticleCircle : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ParticleSystem particleSys;  <span class=\"comment\">// 粒子系统  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> ParticleSystem.Particle[] particleArr;</div><div class=\"line\">    <span class=\"keyword\">private</span> CirclePosition[] circle;     <span class=\"comment\">// 极坐标数组  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count = <span class=\"number\">10000</span>;            <span class=\"comment\">// 粒子数量</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> size = <span class=\"number\">3f</span>;              <span class=\"comment\">// 粒子大小  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> minRadius = <span class=\"number\">4.0f</span>;       <span class=\"comment\">// 最小半径  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> maxRadius = <span class=\"number\">8.0f</span>;       <span class=\"comment\">// 最大半径  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> clockwise = <span class=\"literal\">true</span>;        <span class=\"comment\">// 顺时针|逆时针  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">2f</span>;             <span class=\"comment\">// 速度  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> pingPong = <span class=\"number\">0.02f</span>;       <span class=\"comment\">// 游离范围</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tier = <span class=\"number\">10</span>;               <span class=\"comment\">// 速度差分层数  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> Gradient colorGradient;       <span class=\"comment\">// 颜色控制</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RandomlySpread</span><span class=\"params\">()</span>                <span class=\"comment\">// 随机布置粒子位置</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i)</div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"keyword\">float</span> midRadius = (maxRadius + minRadius)/<span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">float</span> minRate = Random.Range(<span class=\"number\">1.0f</span>, midRadius/minRadius);</div><div class=\"line\">            <span class=\"keyword\">float</span> maxRate = Random.Range(midRadius/maxRadius, <span class=\"number\">1.0f</span>);</div><div class=\"line\">            <span class=\"keyword\">float</span> radius = Random.Range(minRadius * minRate, maxRadius * maxRate);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> angle = Random.Range(<span class=\"number\">0.0f</span>, <span class=\"number\">360.0f</span>);  <span class=\"comment\">// 随机每个粒子的角度</span></div><div class=\"line\">            <span class=\"keyword\">float</span> theta = angle/<span class=\"number\">180</span> * Mathf.PI;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> time = Random.Range(<span class=\"number\">0.0f</span>, <span class=\"number\">360.0f</span>);  <span class=\"comment\">// 随机每个粒子的游离起始时间  </span></div><div class=\"line\"></div><div class=\"line\">            circle[i] = <span class=\"keyword\">new</span> CirclePosition(radius, angle, time);</div><div class=\"line\">            particleArr[i].position = <span class=\"keyword\">new</span> Vector3(circle[i].radius * Mathf.Cos(theta), <span class=\"number\">0f</span>, circle[i].radius * Mathf.Sin(theta));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        particleSys.SetParticles(particleArr, particleArr.Length);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        particleArr = <span class=\"keyword\">new</span> ParticleSystem.Particle[count];  <span class=\"comment\">// 初始化粒子数组</span></div><div class=\"line\">        circle = <span class=\"keyword\">new</span> CirclePosition[count];</div><div class=\"line\"> </div><div class=\"line\">        particleSys = <span class=\"keyword\">this</span>.GetComponent&lt;ParticleSystem&gt;(); <span class=\"comment\">// 初始化粒子系统 </span></div><div class=\"line\">        particleSys.startSpeed = <span class=\"number\">0</span>;</div><div class=\"line\">        particleSys.startSize = size; </div><div class=\"line\">        particleSys.loop = <span class=\"literal\">false</span>;</div><div class=\"line\">        particleSys.maxParticles = count;                  <span class=\"comment\">// 设置最大粒子量  </span></div><div class=\"line\">        particleSys.Emit(count);                           <span class=\"comment\">// 发射粒子  </span></div><div class=\"line\">        particleSys.GetParticles(particleArr);</div><div class=\"line\"></div><div class=\"line\">        RandomlySpread();                                  <span class=\"comment\">// 初始化各粒子位置  </span></div><div class=\"line\"></div><div class=\"line\">        GradientAlphaKey[] alphaKeys = <span class=\"keyword\">new</span> GradientAlphaKey[<span class=\"number\">5</span>];   <span class=\"comment\">// 初始化梯度颜色控制器  </span></div><div class=\"line\">        alphaKeys[<span class=\"number\">0</span>].time = <span class=\"number\">0.0f</span>; alphaKeys[<span class=\"number\">0</span>].alpha = <span class=\"number\">1.0f</span>;</div><div class=\"line\">        alphaKeys[<span class=\"number\">1</span>].time = <span class=\"number\">0.4f</span>; alphaKeys[<span class=\"number\">1</span>].alpha = <span class=\"number\">0.4f</span>;</div><div class=\"line\">        alphaKeys[<span class=\"number\">2</span>].time = <span class=\"number\">0.6f</span>; alphaKeys[<span class=\"number\">2</span>].alpha = <span class=\"number\">1.0f</span>;</div><div class=\"line\">        alphaKeys[<span class=\"number\">3</span>].time = <span class=\"number\">0.9f</span>; alphaKeys[<span class=\"number\">3</span>].alpha = <span class=\"number\">0.4f</span>;</div><div class=\"line\">        alphaKeys[<span class=\"number\">4</span>].time = <span class=\"number\">1.0f</span>; alphaKeys[<span class=\"number\">4</span>].alpha = <span class=\"number\">0.9f</span>;</div><div class=\"line\">        GradientColorKey[] colorKeys = <span class=\"keyword\">new</span> GradientColorKey[<span class=\"number\">2</span>];</div><div class=\"line\">        colorKeys[<span class=\"number\">0</span>].time = <span class=\"number\">0.0f</span>; colorKeys[<span class=\"number\">0</span>].color = Color.white;</div><div class=\"line\">        colorKeys[<span class=\"number\">1</span>].time = <span class=\"number\">1.0f</span>; colorKeys[<span class=\"number\">1</span>].color = Color.white;</div><div class=\"line\">        colorGradient.SetKeys(colorKeys, alphaKeys);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span> <span class=\"params\">()</span> </span>&#123;   <span class=\"comment\">// 通过改变角度使粒子旋转</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (clockwise)</div><div class=\"line\">                circle[i].angle -= (i%tier + <span class=\"number\">1</span>)*(speed/circle[i].radius/tier);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                circle[i].angle += (i%tier + <span class=\"number\">1</span>)*(speed/circle[i].radius/tier);</div><div class=\"line\">            circle[i].angle = (<span class=\"number\">360.0f</span> + circle[i].angle)%<span class=\"number\">360.0f</span>;   <span class=\"comment\">// 保证angle在0~360度  </span></div><div class=\"line\">            <span class=\"keyword\">float</span> theta = circle[i].angle/<span class=\"number\">180</span> * Mathf.PI;</div><div class=\"line\">            particleArr[i].position = <span class=\"keyword\">new</span> Vector3(circle[i].radius * Mathf.Cos(theta), <span class=\"number\">0f</span>, circle[i].radius * Mathf.Sin(theta));</div><div class=\"line\"></div><div class=\"line\">            circle[i].time += Time.deltaTime;      <span class=\"comment\">// 使粒子半径波动</span></div><div class=\"line\">            circle[i].radius += Mathf.PingPong(circle[i].time/minRadius/maxRadius, pingPong) - pingPong/<span class=\"number\">2.0f</span>;</div><div class=\"line\"></div><div class=\"line\">            particleArr[i].color = colorGradient.Evaluate(circle[i].angle/<span class=\"number\">360.0f</span>);  <span class=\"comment\">// 根据角度改变透明度</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        particleSys.SetParticles(particleArr, particleArr.Length);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"ParticleSea\"><a href=\"#ParticleSea\" class=\"headerlink\" title=\"ParticleSea\"></a><strong>ParticleSea</strong></h2><p>以下是另外一个利用粒子系统写的<a href=\"http://www.manew.com/thread-47123-1-1.html\" target=\"_blank\" rel=\"external\">粒子海洋</a>，有兴趣可以做做：<br><img src=\"b.gif\" alt=\"\"></p>\n","excerpt":"<p>学习了3D游戏的粒子系统，参考了<a href=\"http://i-remember.fr/en\">I-remember</a>上的例子光环，决定自己做一个。开始动手之前，需要细心观察并发现，光环分两层，一层顺时针旋转另外一层逆时针旋转，且中间部分粒子较多；粒子在旋转的同时会在光环之间游离。<br>","more":"<br><img src=\"a.gif\" alt=\"\"></p>\n<h2 id=\"基础准备\"><a href=\"#基础准备\" class=\"headerlink\" title=\"基础准备\"></a><strong>基础准备</strong></h2><p>新建空对象ParticleCircle，再建两个子对象Clockwise和Anticlockwise，为其添加Particle System组件，新建ParticleCircle脚本并挂载在子对象上：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> CirclePosition  <span class=\"comment\">// 记录每个粒子的当前半径、角度和时间，其中时间是做游离运动需要的。</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> radius = <span class=\"number\">0f</span>, angle = <span class=\"number\">0f</span>, time = <span class=\"number\">0f</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CirclePosition</span><span class=\"params\">(<span class=\"keyword\">float</span> radius, <span class=\"keyword\">float</span> angle, <span class=\"keyword\">float</span> time)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</div><div class=\"line\">        <span class=\"keyword\">this</span>.angle = angle;</div><div class=\"line\">        <span class=\"keyword\">this</span>.time = time;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ParticleCircle : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ParticleSystem particleSys;  <span class=\"comment\">// 粒子系统  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> ParticleSystem.Particle[] particleArr;</div><div class=\"line\">    <span class=\"keyword\">private</span> CirclePosition[] circle;     <span class=\"comment\">// 极坐标数组  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count = <span class=\"number\">10000</span>;            <span class=\"comment\">// 粒子数量</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> size = <span class=\"number\">3f</span>;              <span class=\"comment\">// 粒子大小  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> minRadius = <span class=\"number\">4.0f</span>;       <span class=\"comment\">// 最小半径  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> maxRadius = <span class=\"number\">8.0f</span>;       <span class=\"comment\">// 最大半径  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> clockwise = <span class=\"literal\">true</span>;        <span class=\"comment\">// 顺时针|逆时针  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">2f</span>;             <span class=\"comment\">// 速度  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> pingPong = <span class=\"number\">0.02f</span>;       <span class=\"comment\">// 游离范围</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tier = <span class=\"number\">10</span>;               <span class=\"comment\">// 速度差分层数  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> Gradient colorGradient;       <span class=\"comment\">// 颜色控制</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RandomlySpread</span><span class=\"params\">()</span>                <span class=\"comment\">// 随机布置粒子位置</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i)</div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"keyword\">float</span> midRadius = (maxRadius + minRadius)/<span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">float</span> minRate = Random.Range(<span class=\"number\">1.0f</span>, midRadius/minRadius);</div><div class=\"line\">            <span class=\"keyword\">float</span> maxRate = Random.Range(midRadius/maxRadius, <span class=\"number\">1.0f</span>);</div><div class=\"line\">            <span class=\"keyword\">float</span> radius = Random.Range(minRadius * minRate, maxRadius * maxRate);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> angle = Random.Range(<span class=\"number\">0.0f</span>, <span class=\"number\">360.0f</span>);  <span class=\"comment\">// 随机每个粒子的角度</span></div><div class=\"line\">            <span class=\"keyword\">float</span> theta = angle/<span class=\"number\">180</span> * Mathf.PI;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> time = Random.Range(<span class=\"number\">0.0f</span>, <span class=\"number\">360.0f</span>);  <span class=\"comment\">// 随机每个粒子的游离起始时间  </span></div><div class=\"line\"></div><div class=\"line\">            circle[i] = <span class=\"keyword\">new</span> CirclePosition(radius, angle, time);</div><div class=\"line\">            particleArr[i].position = <span class=\"keyword\">new</span> Vector3(circle[i].radius * Mathf.Cos(theta), <span class=\"number\">0f</span>, circle[i].radius * Mathf.Sin(theta));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        particleSys.SetParticles(particleArr, particleArr.Length);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        particleArr = <span class=\"keyword\">new</span> ParticleSystem.Particle[count];  <span class=\"comment\">// 初始化粒子数组</span></div><div class=\"line\">        circle = <span class=\"keyword\">new</span> CirclePosition[count];</div><div class=\"line\"> </div><div class=\"line\">        particleSys = <span class=\"keyword\">this</span>.GetComponent&lt;ParticleSystem&gt;(); <span class=\"comment\">// 初始化粒子系统 </span></div><div class=\"line\">        particleSys.startSpeed = <span class=\"number\">0</span>;</div><div class=\"line\">        particleSys.startSize = size; </div><div class=\"line\">        particleSys.loop = <span class=\"literal\">false</span>;</div><div class=\"line\">        particleSys.maxParticles = count;                  <span class=\"comment\">// 设置最大粒子量  </span></div><div class=\"line\">        particleSys.Emit(count);                           <span class=\"comment\">// 发射粒子  </span></div><div class=\"line\">        particleSys.GetParticles(particleArr);</div><div class=\"line\"></div><div class=\"line\">        RandomlySpread();                                  <span class=\"comment\">// 初始化各粒子位置  </span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"旋转粒子\"><a href=\"#旋转粒子\" class=\"headerlink\" title=\"旋转粒子\"></a><strong>旋转粒子</strong></h2><p>在Update函数里逐渐改变粒子的角度使粒子旋转，其中tier使粒子角度改变量不一致，这样粒子旋转就不会看起来像是图片在旋转：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span> <span class=\"params\">()</span> </span>&#123;   <span class=\"comment\">// 通过改变角度使粒子旋转</span></div><div class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</div><div class=\"line\">     &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (clockwise)</div><div class=\"line\">             circle[i].angle -= (i%tier + <span class=\"number\">1</span>)*(speed/circle[i].radius/tier);</div><div class=\"line\">         <span class=\"keyword\">else</span></div><div class=\"line\">             circle[i].angle += (i%tier + <span class=\"number\">1</span>)*(speed/circle[i].radius/tier);</div><div class=\"line\"></div><div class=\"line\">         circle[i].angle = (<span class=\"number\">360.0f</span> + circle[i].angle)%<span class=\"number\">360.0f</span>;   <span class=\"comment\">// 保证angle在0~360度  </span></div><div class=\"line\">         <span class=\"keyword\">float</span> theta = circle[i].angle/<span class=\"number\">180</span> * Mathf.PI;</div><div class=\"line\"></div><div class=\"line\">         particleArr[i].position = <span class=\"keyword\">new</span> Vector3(circle[i].radius * Mathf.Cos(theta), <span class=\"number\">0f</span>, circle[i].radius * Mathf.Sin(theta));</div><div class=\"line\"></div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     particleSys.SetParticles(particleArr, particleArr.Length);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"游离粒子\"><a href=\"#游离粒子\" class=\"headerlink\" title=\"游离粒子\"></a><strong>游离粒子</strong></h2><p>Unity的Mathf的<a href=\"http://docs.unity3d.com/ScriptReference/Mathf.PingPong.html\">PingPong</a>函数使得值在范围内来回变动，使用它让粒子半径来回变动。以下添加到Update函数中：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">circle[i].time += Time.deltaTime;  </div><div class=\"line\">circle[i].radius += Mathf.PingPong(circle[i].time / minRadius / maxRadius, pingPong) - pingPong / <span class=\"number\">2.0f</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"添加透明度\"><a href=\"#添加透明度\" class=\"headerlink\" title=\"添加透明度\"></a><strong>添加透明度</strong></h2><p>仔细观察i-remember会发现不同地方亮度不同，也可以说是透明度不同，使用Gradient类可以解决这个问题。一下添加到start函数中：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">GradientAlphaKey[] alphaKeys = <span class=\"keyword\">new</span> GradientAlphaKey[<span class=\"number\">5</span>];   <span class=\"comment\">// 初始化梯度颜色控制器  </span></div><div class=\"line\">alphaKeys[<span class=\"number\">0</span>].time = <span class=\"number\">0.0f</span>; alphaKeys[<span class=\"number\">0</span>].alpha = <span class=\"number\">1.0f</span>;</div><div class=\"line\">alphaKeys[<span class=\"number\">1</span>].time = <span class=\"number\">0.4f</span>; alphaKeys[<span class=\"number\">1</span>].alpha = <span class=\"number\">0.4f</span>;</div><div class=\"line\">alphaKeys[<span class=\"number\">2</span>].time = <span class=\"number\">0.6f</span>; alphaKeys[<span class=\"number\">2</span>].alpha = <span class=\"number\">1.0f</span>;</div><div class=\"line\">alphaKeys[<span class=\"number\">3</span>].time = <span class=\"number\">0.9f</span>; alphaKeys[<span class=\"number\">3</span>].alpha = <span class=\"number\">0.4f</span>;</div><div class=\"line\">alphaKeys[<span class=\"number\">4</span>].time = <span class=\"number\">1.0f</span>; alphaKeys[<span class=\"number\">4</span>].alpha = <span class=\"number\">0.9f</span>;</div><div class=\"line\">GradientColorKey[] colorKeys = <span class=\"keyword\">new</span> GradientColorKey[<span class=\"number\">2</span>];</div><div class=\"line\">colorKeys[<span class=\"number\">0</span>].time = <span class=\"number\">0.0f</span>; colorKeys[<span class=\"number\">0</span>].color = Color.white;</div><div class=\"line\">colorKeys[<span class=\"number\">1</span>].time = <span class=\"number\">1.0f</span>; colorKeys[<span class=\"number\">1</span>].color = Color.white;</div><div class=\"line\">colorGradient.SetKeys(colorKeys, alphaKeys);</div></pre></td></tr></table></figure></p>\n<p>然后在Update中根据粒子的角度改变粒子的透明度:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">particleArr[i].color = colorGradient.Evaluate(circle[i].angle / <span class=\"number\">360.0f</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改参数\"><a href=\"#修改参数\" class=\"headerlink\" title=\"修改参数\"></a><strong>修改参数</strong></h2><p>修改主摄像机到合适位置：<br><img src=\"z.png\" alt=\"\"><br>另外一层是逆时针旋转的，因此把clockwise的勾去掉，同时修改参数直到效果满意：<br><img src=\"a.png\" alt=\"\">  <img src=\"b.png\" alt=\"\"></p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a><strong>完整代码</strong></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Collections;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> CirclePosition  <span class=\"comment\">// 记录每个粒子的当前半径、角度和时间，其中时间是做游离运动需要的。</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> radius = <span class=\"number\">0f</span>, angle = <span class=\"number\">0f</span>, time = <span class=\"number\">0f</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CirclePosition</span><span class=\"params\">(<span class=\"keyword\">float</span> radius, <span class=\"keyword\">float</span> angle, <span class=\"keyword\">float</span> time)</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.radius = radius;</div><div class=\"line\">        <span class=\"keyword\">this</span>.angle = angle;</div><div class=\"line\">        <span class=\"keyword\">this</span>.time = time;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> ParticleCircle : MonoBehaviour &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ParticleSystem particleSys;  <span class=\"comment\">// 粒子系统  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> ParticleSystem.Particle[] particleArr;</div><div class=\"line\">    <span class=\"keyword\">private</span> CirclePosition[] circle;     <span class=\"comment\">// 极坐标数组  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> count = <span class=\"number\">10000</span>;            <span class=\"comment\">// 粒子数量</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> size = <span class=\"number\">3f</span>;              <span class=\"comment\">// 粒子大小  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> minRadius = <span class=\"number\">4.0f</span>;       <span class=\"comment\">// 最小半径  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> maxRadius = <span class=\"number\">8.0f</span>;       <span class=\"comment\">// 最大半径  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> clockwise = <span class=\"literal\">true</span>;        <span class=\"comment\">// 顺时针|逆时针  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> speed = <span class=\"number\">2f</span>;             <span class=\"comment\">// 速度  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> pingPong = <span class=\"number\">0.02f</span>;       <span class=\"comment\">// 游离范围</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> tier = <span class=\"number\">10</span>;               <span class=\"comment\">// 速度差分层数  </span></div><div class=\"line\">    <span class=\"keyword\">public</span> Gradient colorGradient;       <span class=\"comment\">// 颜色控制</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RandomlySpread</span><span class=\"params\">()</span>                <span class=\"comment\">// 随机布置粒子位置</span></div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; ++i)</div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"keyword\">float</span> midRadius = (maxRadius + minRadius)/<span class=\"number\">2</span>;</div><div class=\"line\">            <span class=\"keyword\">float</span> minRate = Random.Range(<span class=\"number\">1.0f</span>, midRadius/minRadius);</div><div class=\"line\">            <span class=\"keyword\">float</span> maxRate = Random.Range(midRadius/maxRadius, <span class=\"number\">1.0f</span>);</div><div class=\"line\">            <span class=\"keyword\">float</span> radius = Random.Range(minRadius * minRate, maxRadius * maxRate);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> angle = Random.Range(<span class=\"number\">0.0f</span>, <span class=\"number\">360.0f</span>);  <span class=\"comment\">// 随机每个粒子的角度</span></div><div class=\"line\">            <span class=\"keyword\">float</span> theta = angle/<span class=\"number\">180</span> * Mathf.PI;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">float</span> time = Random.Range(<span class=\"number\">0.0f</span>, <span class=\"number\">360.0f</span>);  <span class=\"comment\">// 随机每个粒子的游离起始时间  </span></div><div class=\"line\"></div><div class=\"line\">            circle[i] = <span class=\"keyword\">new</span> CirclePosition(radius, angle, time);</div><div class=\"line\">            particleArr[i].position = <span class=\"keyword\">new</span> Vector3(circle[i].radius * Mathf.Cos(theta), <span class=\"number\">0f</span>, circle[i].radius * Mathf.Sin(theta));</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        particleSys.SetParticles(particleArr, particleArr.Length);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Start</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        particleArr = <span class=\"keyword\">new</span> ParticleSystem.Particle[count];  <span class=\"comment\">// 初始化粒子数组</span></div><div class=\"line\">        circle = <span class=\"keyword\">new</span> CirclePosition[count];</div><div class=\"line\"> </div><div class=\"line\">        particleSys = <span class=\"keyword\">this</span>.GetComponent&lt;ParticleSystem&gt;(); <span class=\"comment\">// 初始化粒子系统 </span></div><div class=\"line\">        particleSys.startSpeed = <span class=\"number\">0</span>;</div><div class=\"line\">        particleSys.startSize = size; </div><div class=\"line\">        particleSys.loop = <span class=\"literal\">false</span>;</div><div class=\"line\">        particleSys.maxParticles = count;                  <span class=\"comment\">// 设置最大粒子量  </span></div><div class=\"line\">        particleSys.Emit(count);                           <span class=\"comment\">// 发射粒子  </span></div><div class=\"line\">        particleSys.GetParticles(particleArr);</div><div class=\"line\"></div><div class=\"line\">        RandomlySpread();                                  <span class=\"comment\">// 初始化各粒子位置  </span></div><div class=\"line\"></div><div class=\"line\">        GradientAlphaKey[] alphaKeys = <span class=\"keyword\">new</span> GradientAlphaKey[<span class=\"number\">5</span>];   <span class=\"comment\">// 初始化梯度颜色控制器  </span></div><div class=\"line\">        alphaKeys[<span class=\"number\">0</span>].time = <span class=\"number\">0.0f</span>; alphaKeys[<span class=\"number\">0</span>].alpha = <span class=\"number\">1.0f</span>;</div><div class=\"line\">        alphaKeys[<span class=\"number\">1</span>].time = <span class=\"number\">0.4f</span>; alphaKeys[<span class=\"number\">1</span>].alpha = <span class=\"number\">0.4f</span>;</div><div class=\"line\">        alphaKeys[<span class=\"number\">2</span>].time = <span class=\"number\">0.6f</span>; alphaKeys[<span class=\"number\">2</span>].alpha = <span class=\"number\">1.0f</span>;</div><div class=\"line\">        alphaKeys[<span class=\"number\">3</span>].time = <span class=\"number\">0.9f</span>; alphaKeys[<span class=\"number\">3</span>].alpha = <span class=\"number\">0.4f</span>;</div><div class=\"line\">        alphaKeys[<span class=\"number\">4</span>].time = <span class=\"number\">1.0f</span>; alphaKeys[<span class=\"number\">4</span>].alpha = <span class=\"number\">0.9f</span>;</div><div class=\"line\">        GradientColorKey[] colorKeys = <span class=\"keyword\">new</span> GradientColorKey[<span class=\"number\">2</span>];</div><div class=\"line\">        colorKeys[<span class=\"number\">0</span>].time = <span class=\"number\">0.0f</span>; colorKeys[<span class=\"number\">0</span>].color = Color.white;</div><div class=\"line\">        colorKeys[<span class=\"number\">1</span>].time = <span class=\"number\">1.0f</span>; colorKeys[<span class=\"number\">1</span>].color = Color.white;</div><div class=\"line\">        colorGradient.SetKeys(colorKeys, alphaKeys);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Update</span> <span class=\"params\">()</span> </span>&#123;   <span class=\"comment\">// 通过改变角度使粒子旋转</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (clockwise)</div><div class=\"line\">                circle[i].angle -= (i%tier + <span class=\"number\">1</span>)*(speed/circle[i].radius/tier);</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">                circle[i].angle += (i%tier + <span class=\"number\">1</span>)*(speed/circle[i].radius/tier);</div><div class=\"line\">            circle[i].angle = (<span class=\"number\">360.0f</span> + circle[i].angle)%<span class=\"number\">360.0f</span>;   <span class=\"comment\">// 保证angle在0~360度  </span></div><div class=\"line\">            <span class=\"keyword\">float</span> theta = circle[i].angle/<span class=\"number\">180</span> * Mathf.PI;</div><div class=\"line\">            particleArr[i].position = <span class=\"keyword\">new</span> Vector3(circle[i].radius * Mathf.Cos(theta), <span class=\"number\">0f</span>, circle[i].radius * Mathf.Sin(theta));</div><div class=\"line\"></div><div class=\"line\">            circle[i].time += Time.deltaTime;      <span class=\"comment\">// 使粒子半径波动</span></div><div class=\"line\">            circle[i].radius += Mathf.PingPong(circle[i].time/minRadius/maxRadius, pingPong) - pingPong/<span class=\"number\">2.0f</span>;</div><div class=\"line\"></div><div class=\"line\">            particleArr[i].color = colorGradient.Evaluate(circle[i].angle/<span class=\"number\">360.0f</span>);  <span class=\"comment\">// 根据角度改变透明度</span></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        particleSys.SetParticles(particleArr, particleArr.Length);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"ParticleSea\"><a href=\"#ParticleSea\" class=\"headerlink\" title=\"ParticleSea\"></a><strong>ParticleSea</strong></h2><p>以下是另外一个利用粒子系统写的<a href=\"http://www.manew.com/thread-47123-1-1.html\">粒子海洋</a>，有兴趣可以做做：<br><img src=\"b.gif\" alt=\"\"></p>"},{"title":"线程创建-Fibonacci数列和矩阵乘法","toc":true,"date":"2016-07-20T08:36:51.000Z","_content":"线程是指令执行额基本单位，在操作系统中，用户线程和核线程都多种互相对应的模式：多对一、一对一、多对多等等。Pthread指POSIX定义的一套用于线程创建和同步的API，以下是利用线程产生Fibonacci数列以及利用线程计算矩阵的乘法。\n\n<!--more-->\n\n## **线程使用**\n\n### **基本说明**\n\n- pthread_create()：创建线程\n - int pthread_create(pthread_t *restrict tid, const pthread_attr_t *restrict attr, void *(*start_rtn)(void), void *restrict arg); \n  + 第一个参数为指向线程标识符的指针，用于输出线程标识符。\n  + 第二个参数用来设置线程属性。\n  + 第三个参数是线程运行函数的起始地址。\n  + 最后一个参数是运行函数的参数。\n- pthread_join()：阻塞调用线程直到tid所指定的线程终止。每个线程只能用pthread_join()一次。\n- pthread_exit()：终止调用线程。\n- pthread_attr_init ()：初始化线程属性为默认属性  \n- pthread_attr_getscope ()：获得线程竞争范围\n- pthread_attr_setscope ()：设置线程竞争范围\n\n### **单线程创建**\n\n``` cpp\nvoid* pfunc ( void *data){\n    int *i = (int*)data;\n    Int x=a[6];\n    ...\n}\n\nInt a[100];\nmain(){\n    int ival=100;\n    pthread_t th;\n    ...\n    pthread_create( &th, NULL, pfunc, (void *)&ival );\n}\n\n```\n### **多线程创建**\n\n``` cpp\nstruct test{\n   int no;\n   char name[80];\n};\nvoid *pfunc ( void *data){\n   struct test *tt = (struct test*)data;\n   ...\n}\nmain(){\n   struct test itest;\n   pthread_t th;\n   ...\n   itest.no=100;\n   strcpy(itest.name,\"Hello\");\n   ...\n   pthread_create( &th, NULL, pfunc, (void *)&itest );\n   ...\n}\n```\n\n\n\n## **Fibonacci数列**\n\n创建一个线程，线程执行runner函数，而runner调用自己写好的递归的fib函数。\n\n``` c\n\t#include<pthread.h>\n\t#include<stdio.h>\n\n\tint fib(int n) {\n\t    if (n == 0) return 0;\n\t    if (n == 1) return 1;\n\t    return fib(n-1)+fib(n-2);\n\t}\n\n\tvoid *runner(void *param) {\n\t    int *n = (int*)param;\n\t    int i = 0;\n\t    for (i = 0; i < (*n); ++i) printf(\"%d\\n\", fib(i));\n\t}\n\n\tint main() {\n\t    int n;\n\t    scanf(\"%d\", &n);\n\t    pthread_t tid;\n\t    pthread_attr_t attr;\n\t    pthread_attr_init(&attr);\n\t    pthread_create(&tid, &attr, runner, (void *)&n);\n\t    pthread_join(tid, NULL);\n\t    return 0;\n\t}\n```\n\n## **矩阵乘法**\n\n每个Ci j的计算用一个独立的工作线程，因此它将会涉及生成M×N个工作线程。主线程(或称为父线程)将初始化矩阵A和B，并分配足够的内存给矩阵C，它将容纳矩阵A和B的积。这些矩阵将声明为全局数据，以使每个工作线程都能访问矩阵A、B和C。\n\n给定两个矩阵A和B，其中A是具有M行、K列的矩阵， B为K行、N列的矩阵， A和B的矩阵积为矩阵C， C为M行、N列。矩阵C中第i行、第j列的元素Cij就是矩阵A第i行每个元素和矩阵B第j列每个元素乘积的和，即\n![](1.png)\n\n注意父线程要等待每个线程结束才能结束。\n\n``` c\n    #include<pthread.h>\n    #include<iostream>\n    #include<stdlib.h>\n    using namespace std;\n\n    #define M 3\n    #define K 2\n    #define N 3\n    #define NUM_THREADS 9\n\n    int A[M][K] = {{1,4}, {2,5}, {3,6}};\n    int B[K][N] = {{8,7,6},{5,4,3}};\n    int C[M][N];\n\n    struct v {\n        int i;\n        int j;\n    };\n\n    void *getOneElem(void *data) {\n        \n        struct v* elem = (struct v*) data;\n        \n        C[elem->i][elem->j] = 0;\n        for (int i = 0; i < K; i++)\n            C[elem->i][elem->j] += A[elem->i][i] * B[i][elem->j];   \n    }\n\n    int main() {\n        pthread_t tid[NUM_THREADS];\n        pthread_attr_t attr;\n        pthread_attr_init(&attr);\n        \n        for (int i = 0; i < M; i++)\n            for(int j = 0; j < N; j++) {\n                struct v* data = (struct v*)malloc(sizeof(struct v));\n                data->i = i;\n                data->j = j;\n                pthread_create(&tid[i * N + j], &attr, getOneElem, (void*)data);\n            }\n                \n            for (int i = 0; i < NUM_THREADS; i++) {\n                pthread_join(tid[i], NULL);\n        }\n        \n        for (int i = 0; i < M; i++)\n            for (int j = 0; j < N; j++) {\n                cout << C[i][j] << \" \";\n                if (j == N -1)\n                    cout << endl;\n            }\n        \n        return 0;\n\n    }\n```\n","source":"_posts/线程.md","raw":"---\ntitle: 线程创建-Fibonacci数列和矩阵乘法\ntoc: true\ndate: 2016-07-20 16:36:51\ntags:\n- C/C++\n- thread\ncategories:\n- Operating System\n- C/C++\n---\n线程是指令执行额基本单位，在操作系统中，用户线程和核线程都多种互相对应的模式：多对一、一对一、多对多等等。Pthread指POSIX定义的一套用于线程创建和同步的API，以下是利用线程产生Fibonacci数列以及利用线程计算矩阵的乘法。\n\n<!--more-->\n\n## **线程使用**\n\n### **基本说明**\n\n- pthread_create()：创建线程\n - int pthread_create(pthread_t *restrict tid, const pthread_attr_t *restrict attr, void *(*start_rtn)(void), void *restrict arg); \n  + 第一个参数为指向线程标识符的指针，用于输出线程标识符。\n  + 第二个参数用来设置线程属性。\n  + 第三个参数是线程运行函数的起始地址。\n  + 最后一个参数是运行函数的参数。\n- pthread_join()：阻塞调用线程直到tid所指定的线程终止。每个线程只能用pthread_join()一次。\n- pthread_exit()：终止调用线程。\n- pthread_attr_init ()：初始化线程属性为默认属性  \n- pthread_attr_getscope ()：获得线程竞争范围\n- pthread_attr_setscope ()：设置线程竞争范围\n\n### **单线程创建**\n\n``` cpp\nvoid* pfunc ( void *data){\n    int *i = (int*)data;\n    Int x=a[6];\n    ...\n}\n\nInt a[100];\nmain(){\n    int ival=100;\n    pthread_t th;\n    ...\n    pthread_create( &th, NULL, pfunc, (void *)&ival );\n}\n\n```\n### **多线程创建**\n\n``` cpp\nstruct test{\n   int no;\n   char name[80];\n};\nvoid *pfunc ( void *data){\n   struct test *tt = (struct test*)data;\n   ...\n}\nmain(){\n   struct test itest;\n   pthread_t th;\n   ...\n   itest.no=100;\n   strcpy(itest.name,\"Hello\");\n   ...\n   pthread_create( &th, NULL, pfunc, (void *)&itest );\n   ...\n}\n```\n\n\n\n## **Fibonacci数列**\n\n创建一个线程，线程执行runner函数，而runner调用自己写好的递归的fib函数。\n\n``` c\n\t#include<pthread.h>\n\t#include<stdio.h>\n\n\tint fib(int n) {\n\t    if (n == 0) return 0;\n\t    if (n == 1) return 1;\n\t    return fib(n-1)+fib(n-2);\n\t}\n\n\tvoid *runner(void *param) {\n\t    int *n = (int*)param;\n\t    int i = 0;\n\t    for (i = 0; i < (*n); ++i) printf(\"%d\\n\", fib(i));\n\t}\n\n\tint main() {\n\t    int n;\n\t    scanf(\"%d\", &n);\n\t    pthread_t tid;\n\t    pthread_attr_t attr;\n\t    pthread_attr_init(&attr);\n\t    pthread_create(&tid, &attr, runner, (void *)&n);\n\t    pthread_join(tid, NULL);\n\t    return 0;\n\t}\n```\n\n## **矩阵乘法**\n\n每个Ci j的计算用一个独立的工作线程，因此它将会涉及生成M×N个工作线程。主线程(或称为父线程)将初始化矩阵A和B，并分配足够的内存给矩阵C，它将容纳矩阵A和B的积。这些矩阵将声明为全局数据，以使每个工作线程都能访问矩阵A、B和C。\n\n给定两个矩阵A和B，其中A是具有M行、K列的矩阵， B为K行、N列的矩阵， A和B的矩阵积为矩阵C， C为M行、N列。矩阵C中第i行、第j列的元素Cij就是矩阵A第i行每个元素和矩阵B第j列每个元素乘积的和，即\n![](1.png)\n\n注意父线程要等待每个线程结束才能结束。\n\n``` c\n    #include<pthread.h>\n    #include<iostream>\n    #include<stdlib.h>\n    using namespace std;\n\n    #define M 3\n    #define K 2\n    #define N 3\n    #define NUM_THREADS 9\n\n    int A[M][K] = {{1,4}, {2,5}, {3,6}};\n    int B[K][N] = {{8,7,6},{5,4,3}};\n    int C[M][N];\n\n    struct v {\n        int i;\n        int j;\n    };\n\n    void *getOneElem(void *data) {\n        \n        struct v* elem = (struct v*) data;\n        \n        C[elem->i][elem->j] = 0;\n        for (int i = 0; i < K; i++)\n            C[elem->i][elem->j] += A[elem->i][i] * B[i][elem->j];   \n    }\n\n    int main() {\n        pthread_t tid[NUM_THREADS];\n        pthread_attr_t attr;\n        pthread_attr_init(&attr);\n        \n        for (int i = 0; i < M; i++)\n            for(int j = 0; j < N; j++) {\n                struct v* data = (struct v*)malloc(sizeof(struct v));\n                data->i = i;\n                data->j = j;\n                pthread_create(&tid[i * N + j], &attr, getOneElem, (void*)data);\n            }\n                \n            for (int i = 0; i < NUM_THREADS; i++) {\n                pthread_join(tid[i], NULL);\n        }\n        \n        for (int i = 0; i < M; i++)\n            for (int j = 0; j < N; j++) {\n                cout << C[i][j] << \" \";\n                if (j == N -1)\n                    cout << endl;\n            }\n        \n        return 0;\n\n    }\n```\n","slug":"线程","published":1,"updated":"2016-07-21T07:48:52.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzsj001wgobk9ugnz52a","content":"<p>线程是指令执行额基本单位，在操作系统中，用户线程和核线程都多种互相对应的模式：多对一、一对一、多对多等等。Pthread指POSIX定义的一套用于线程创建和同步的API，以下是利用线程产生Fibonacci数列以及利用线程计算矩阵的乘法。</p>\n<a id=\"more\"></a>\n<h2 id=\"线程使用\"><a href=\"#线程使用\" class=\"headerlink\" title=\"线程使用\"></a><strong>线程使用</strong></h2><h3 id=\"基本说明\"><a href=\"#基本说明\" class=\"headerlink\" title=\"基本说明\"></a><strong>基本说明</strong></h3><ul>\n<li>pthread_create()：创建线程<ul>\n<li>int pthread_create(pthread_t <em>restrict tid, const pthread_attr_t </em>restrict attr, void <em>(</em>start_rtn)(void), void *restrict arg); </li>\n</ul>\n<ul>\n<li>第一个参数为指向线程标识符的指针，用于输出线程标识符。</li>\n<li>第二个参数用来设置线程属性。</li>\n<li>第三个参数是线程运行函数的起始地址。</li>\n<li>最后一个参数是运行函数的参数。</li>\n</ul>\n</li>\n<li>pthread_join()：阻塞调用线程直到tid所指定的线程终止。每个线程只能用pthread_join()一次。</li>\n<li>pthread_exit()：终止调用线程。</li>\n<li>pthread_attr_init ()：初始化线程属性为默认属性  </li>\n<li>pthread_attr_getscope ()：获得线程竞争范围</li>\n<li>pthread_attr_setscope ()：设置线程竞争范围</li>\n</ul>\n<h3 id=\"单线程创建\"><a href=\"#单线程创建\" class=\"headerlink\" title=\"单线程创建\"></a><strong>单线程创建</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">pfunc</span> <span class=\"params\">( <span class=\"keyword\">void</span> *data)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *i = (<span class=\"keyword\">int</span>*)data;</div><div class=\"line\">    Int x=a[<span class=\"number\">6</span>];</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Int a[<span class=\"number\">100</span>];</div><div class=\"line\">main()&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ival=<span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> th;</div><div class=\"line\">    ...</div><div class=\"line\">    pthread_create( &amp;th, <span class=\"literal\">NULL</span>, pfunc, (<span class=\"keyword\">void</span> *)&amp;ival );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"多线程创建\"><a href=\"#多线程创建\" class=\"headerlink\" title=\"多线程创建\"></a><strong>多线程创建</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> test&#123;</div><div class=\"line\">   <span class=\"keyword\">int</span> no;</div><div class=\"line\">   <span class=\"keyword\">char</span> name[<span class=\"number\">80</span>];</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">pfunc</span> <span class=\"params\">( <span class=\"keyword\">void</span> *data)</span></span>&#123;</div><div class=\"line\">   <span class=\"keyword\">struct</span> test *tt = (<span class=\"keyword\">struct</span> test*)data;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\">main()&#123;</div><div class=\"line\">   <span class=\"keyword\">struct</span> test itest;</div><div class=\"line\">   <span class=\"keyword\">pthread_t</span> th;</div><div class=\"line\">   ...</div><div class=\"line\">   itest.no=<span class=\"number\">100</span>;</div><div class=\"line\">   <span class=\"built_in\">strcpy</span>(itest.name,<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">   ...</div><div class=\"line\">   pthread_create( &amp;th, <span class=\"literal\">NULL</span>, pfunc, (<span class=\"keyword\">void</span> *)&amp;itest );</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Fibonacci数列\"><a href=\"#Fibonacci数列\" class=\"headerlink\" title=\"Fibonacci数列\"></a><strong>Fibonacci数列</strong></h2><p>创建一个线程，线程执行runner函数，而runner调用自己写好的递归的fib函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">runner</span><span class=\"params\">(<span class=\"keyword\">void</span> *param)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *n = (<span class=\"keyword\">int</span>*)param;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; (*n); ++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, fib(i));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> tid;</div><div class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</div><div class=\"line\">    pthread_attr_init(&amp;attr);</div><div class=\"line\">    pthread_create(&amp;tid, &amp;attr, runner, (<span class=\"keyword\">void</span> *)&amp;n);</div><div class=\"line\">    pthread_join(tid, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"矩阵乘法\"><a href=\"#矩阵乘法\" class=\"headerlink\" title=\"矩阵乘法\"></a><strong>矩阵乘法</strong></h2><p>每个Ci j的计算用一个独立的工作线程，因此它将会涉及生成M×N个工作线程。主线程(或称为父线程)将初始化矩阵A和B，并分配足够的内存给矩阵C，它将容纳矩阵A和B的积。这些矩阵将声明为全局数据，以使每个工作线程都能访问矩阵A、B和C。</p>\n<p>给定两个矩阵A和B，其中A是具有M行、K列的矩阵， B为K行、N列的矩阵， A和B的矩阵积为矩阵C， C为M行、N列。矩阵C中第i行、第j列的元素Cij就是矩阵A第i行每个元素和矩阵B第j列每个元素乘积的和，即<br><img src=\"1.png\" alt=\"\"></p>\n<p>注意父线程要等待每个线程结束才能结束。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 3</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> K 2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 3</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM_THREADS 9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> A[M][K] = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">2</span>,<span class=\"number\">5</span>&#125;, &#123;<span class=\"number\">3</span>,<span class=\"number\">6</span>&#125;&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> B[K][N] = &#123;&#123;<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>&#125;,&#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>&#125;&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> C[M][N];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> v &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">int</span> j;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">getOneElem</span><span class=\"params\">(<span class=\"keyword\">void</span> *data)</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">struct</span> v* elem = (<span class=\"keyword\">struct</span> v*) data;</div><div class=\"line\">    </div><div class=\"line\">    C[elem-&gt;i][elem-&gt;j] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++)</div><div class=\"line\">        C[elem-&gt;i][elem-&gt;j] += A[elem-&gt;i][i] * B[i][elem-&gt;j];   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> tid[NUM_THREADS];</div><div class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</div><div class=\"line\">    pthread_attr_init(&amp;attr);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> v* data = (<span class=\"keyword\">struct</span> v*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> v));</div><div class=\"line\">            data-&gt;i = i;</div><div class=\"line\">            data-&gt;j = j;</div><div class=\"line\">            pthread_create(&amp;tid[i * N + j], &amp;attr, getOneElem, (<span class=\"keyword\">void</span>*)data);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_THREADS; i++) &#123;</div><div class=\"line\">            pthread_join(tid[i], <span class=\"literal\">NULL</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++) &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; C[i][j] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (j == N <span class=\"number\">-1</span>)</div><div class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>线程是指令执行额基本单位，在操作系统中，用户线程和核线程都多种互相对应的模式：多对一、一对一、多对多等等。Pthread指POSIX定义的一套用于线程创建和同步的API，以下是利用线程产生Fibonacci数列以及利用线程计算矩阵的乘法。</p>","more":"<h2 id=\"线程使用\"><a href=\"#线程使用\" class=\"headerlink\" title=\"线程使用\"></a><strong>线程使用</strong></h2><h3 id=\"基本说明\"><a href=\"#基本说明\" class=\"headerlink\" title=\"基本说明\"></a><strong>基本说明</strong></h3><ul>\n<li>pthread_create()：创建线程<ul>\n<li>int pthread_create(pthread_t <em>restrict tid, const pthread_attr_t </em>restrict attr, void <em>(</em>start_rtn)(void), void *restrict arg); </li>\n</ul>\n<ul>\n<li>第一个参数为指向线程标识符的指针，用于输出线程标识符。</li>\n<li>第二个参数用来设置线程属性。</li>\n<li>第三个参数是线程运行函数的起始地址。</li>\n<li>最后一个参数是运行函数的参数。</li>\n</ul>\n</li>\n<li>pthread_join()：阻塞调用线程直到tid所指定的线程终止。每个线程只能用pthread_join()一次。</li>\n<li>pthread_exit()：终止调用线程。</li>\n<li>pthread_attr_init ()：初始化线程属性为默认属性  </li>\n<li>pthread_attr_getscope ()：获得线程竞争范围</li>\n<li>pthread_attr_setscope ()：设置线程竞争范围</li>\n</ul>\n<h3 id=\"单线程创建\"><a href=\"#单线程创建\" class=\"headerlink\" title=\"单线程创建\"></a><strong>单线程创建</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">pfunc</span> <span class=\"params\">( <span class=\"keyword\">void</span> *data)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *i = (<span class=\"keyword\">int</span>*)data;</div><div class=\"line\">    Int x=a[<span class=\"number\">6</span>];</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Int a[<span class=\"number\">100</span>];</div><div class=\"line\">main()&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ival=<span class=\"number\">100</span>;</div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> th;</div><div class=\"line\">    ...</div><div class=\"line\">    pthread_create( &amp;th, <span class=\"literal\">NULL</span>, pfunc, (<span class=\"keyword\">void</span> *)&amp;ival );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"多线程创建\"><a href=\"#多线程创建\" class=\"headerlink\" title=\"多线程创建\"></a><strong>多线程创建</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> test&#123;</div><div class=\"line\">   <span class=\"keyword\">int</span> no;</div><div class=\"line\">   <span class=\"keyword\">char</span> name[<span class=\"number\">80</span>];</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">pfunc</span> <span class=\"params\">( <span class=\"keyword\">void</span> *data)</span></span>&#123;</div><div class=\"line\">   <span class=\"keyword\">struct</span> test *tt = (<span class=\"keyword\">struct</span> test*)data;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\">main()&#123;</div><div class=\"line\">   <span class=\"keyword\">struct</span> test itest;</div><div class=\"line\">   <span class=\"keyword\">pthread_t</span> th;</div><div class=\"line\">   ...</div><div class=\"line\">   itest.no=<span class=\"number\">100</span>;</div><div class=\"line\">   <span class=\"built_in\">strcpy</span>(itest.name,<span class=\"string\">\"Hello\"</span>);</div><div class=\"line\">   ...</div><div class=\"line\">   pthread_create( &amp;th, <span class=\"literal\">NULL</span>, pfunc, (<span class=\"keyword\">void</span> *)&amp;itest );</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Fibonacci数列\"><a href=\"#Fibonacci数列\" class=\"headerlink\" title=\"Fibonacci数列\"></a><strong>Fibonacci数列</strong></h2><p>创建一个线程，线程执行runner函数，而runner调用自己写好的递归的fib函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>)+fib(n<span class=\"number\">-2</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">runner</span><span class=\"params\">(<span class=\"keyword\">void</span> *param)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> *n = (<span class=\"keyword\">int</span>*)param;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; (*n); ++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, fib(i));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n;</div><div class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> tid;</div><div class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</div><div class=\"line\">    pthread_attr_init(&amp;attr);</div><div class=\"line\">    pthread_create(&amp;tid, &amp;attr, runner, (<span class=\"keyword\">void</span> *)&amp;n);</div><div class=\"line\">    pthread_join(tid, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"矩阵乘法\"><a href=\"#矩阵乘法\" class=\"headerlink\" title=\"矩阵乘法\"></a><strong>矩阵乘法</strong></h2><p>每个Ci j的计算用一个独立的工作线程，因此它将会涉及生成M×N个工作线程。主线程(或称为父线程)将初始化矩阵A和B，并分配足够的内存给矩阵C，它将容纳矩阵A和B的积。这些矩阵将声明为全局数据，以使每个工作线程都能访问矩阵A、B和C。</p>\n<p>给定两个矩阵A和B，其中A是具有M行、K列的矩阵， B为K行、N列的矩阵， A和B的矩阵积为矩阵C， C为M行、N列。矩阵C中第i行、第j列的元素Cij就是矩阵A第i行每个元素和矩阵B第j列每个元素乘积的和，即<br><img src=\"1.png\" alt=\"\"></p>\n<p>注意父线程要等待每个线程结束才能结束。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;pthread.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 3</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> K 2</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 3</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM_THREADS 9</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> A[M][K] = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">4</span>&#125;, &#123;<span class=\"number\">2</span>,<span class=\"number\">5</span>&#125;, &#123;<span class=\"number\">3</span>,<span class=\"number\">6</span>&#125;&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> B[K][N] = &#123;&#123;<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>&#125;,&#123;<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>&#125;&#125;;</div><div class=\"line\"><span class=\"keyword\">int</span> C[M][N];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> v &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">    <span class=\"keyword\">int</span> j;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"title\">getOneElem</span><span class=\"params\">(<span class=\"keyword\">void</span> *data)</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">struct</span> v* elem = (<span class=\"keyword\">struct</span> v*) data;</div><div class=\"line\">    </div><div class=\"line\">    C[elem-&gt;i][elem-&gt;j] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++)</div><div class=\"line\">        C[elem-&gt;i][elem-&gt;j] += A[elem-&gt;i][i] * B[i][elem-&gt;j];   </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> tid[NUM_THREADS];</div><div class=\"line\">    <span class=\"keyword\">pthread_attr_t</span> attr;</div><div class=\"line\">    pthread_attr_init(&amp;attr);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> v* data = (<span class=\"keyword\">struct</span> v*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> v));</div><div class=\"line\">            data-&gt;i = i;</div><div class=\"line\">            data-&gt;j = j;</div><div class=\"line\">            pthread_create(&amp;tid[i * N + j], &amp;attr, getOneElem, (<span class=\"keyword\">void</span>*)data);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; NUM_THREADS; i++) &#123;</div><div class=\"line\">            pthread_join(tid[i], <span class=\"literal\">NULL</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M; i++)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N; j++) &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; C[i][j] &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (j == N <span class=\"number\">-1</span>)</div><div class=\"line\">                <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"缓存--直接相连映射","toc":true,"date":"2016-07-19T08:13:47.000Z","_content":"什么是缓存？说白了，把图书馆比作主存，所有的书都放在图书馆中，而你书桌前的书就相当于缓存数据。CPU从Cache读数据，读到就送CPU，若读不到，还必须考虑先从主存中读取数据，然后再将数据写到Cache中，之后，将数据送往CPU；其次，还要考虑CPU修改Cache和存储器数据的情况。\n<!--more-->\n在本文中，CLK为系统时钟（用于计数器计数控制等操作），CLR为系统总清零信号（清区表存储器、计数器），WCT(tableWr)为写Cache区表存储器信号，AB31..AB0(Addr)为CPU访问内存的地址（地址总线），RD（为0，读）为Cache的读信号，MWr（为1，写）为Cache和主存的写信号，MRd（为0，读）为主存的读信号，CA17..CA0为Cache地址，MD31..MD0为主存与Cache的数据传送线，D31..D0为Cache和CPU的数据传送线，LA3...LA0为块内地址。\n## **设计原理**\n\n### **直接相连映射**\n\n直接相联映象方式简单而直接，硬件实现很简单，访问速度也比较快，但是块的冲突率比较高。其主要原则是：主存中一块只能映象到Cache的一个特定的块中。\n\n假设主存的块号为B，Cache的块号为b，则它们之间的映象关系可以表示为：\n\nb = B mod Cb\n\n其中，Cb是Cache的块容量。设主存的块容量为Mb，区容量为Me，则直接映象方法的关系如下图所示。把主存按Cache的大小分成区，一般主存容量为Cache容量的整数倍，主存每一个分区内的块数与Cache的总块数相等。直接映象方式只能把主存各个区中相对块号相同的那些块映象到Cache中同一块号的那个特定块中。例如，主存的块0只能映象到Cache的块0中，主存的块1只能映象到Cache的块1中，同样，主存区1中的块Cb（在区1中的相对块号是0），也只能映象到Cache的块0中。根据上面给出的地址映象规则，整个Cache地址与主存地址的低位部分是完全相同的。 \n![](1.png)\n\n### **地址变换过程**\n\n主存地址分为三个部分：区号E、块号B和块内地址W；Cache地址分为两部分：块号b和块内地址w。主存地址中的块号B与Cache地址中的块号b是完全相同的。同样，主存地址中的块内地址W与Cache地址中的块内地址w也是完全相同的，主存地址比Cache地址长出来的部分称为区号E。\n![](2.png)\n\n在程序执行过程中，当要访问Cache时，为了实现主存块号到Cache块号的变换，需要有一个存放主存区号的小容量存储器（称为区表存储器），这个存储器的容量与Cache的块数相等，字长为主存地址中区号E的长度。\n\n从主存地址到Cache地址的变换过程中，首先用主存地址中的块号B去访问区表存储器（用块号B作为区表存储器的地址，访问它），然后，将读出来的区号与主存地址中的区号E进行比较，比较结果相等，则Cache命中，表示要访问的那一块已经装入到Cache中了，可以直接用块号及块内地址组成的缓冲地址到缓存Cache中取数，把读出来的数据送往CPU；如果比较结果不相等，表示要访问的那个块还没有装入到Cache中，这时，要用主存地址去访问主存储器，先把该地址所在的块读到Cache中，然后再读取Cache中该地址的数据送CPU。\n\n### **Cache、CPU、存储器**\n\n![](3.png)\n32位主存地址为AB31..AB0（地址总线），RD（为0，读）为Cache的读信号，CMWr（为1，写）为Cache和主存的写信号，MRd（为0，读）为主存的读信号，D31..D0为CPU与Cache的数据传送线，MD31..MD0为存储器RAM与Cache的数据传送线。\n![](4.png)\n如上图，区号E取14位，块号B为14位，块内地址为4位，这样Cache地址就是18位了，其中Cache块号b为14位，块内地址w为4位，所以Cache容量为256KB(2^18)个单元，块号b取14位，那么Cache分为16KB(2^14)块，块内地址w取4位，则每块为16个单元（每个单元一个字节）。\n\n实现Cache的存储体的方法是先实现一个8位的存储单元，然后用这个8位的存储单元来构成一个256Kb X 8位的Cache（地址18位）。\n\n再实现一个14位的存储单元，然后，用这个14位的存储单元来构成一个16k X 14位的区表存储器（地址14位与块号B相同），用来存放区号（14位）。在这个部分中，还要实现一个区号E比较器，也就是如果主存地址的区号E和区表存储器中按块号B为地址取出的相应单元中的区号E相等，则Cache命中，否则Cache失效。\n\n当Cache命中时，就将Cache存储体中相应单元的数据送往CPU，这个过程比较简单。当Cache失效时，就将主存中相应块中的数据读出写入Cache中，这样Cache控制器就要产生主存储器的读信号MRd（为0，读），由于每个Cache块占十六个单元，按32 位（4个字节）为访问存储器单位，那么需要连续访问4次主存，读取存储器中该块的数据，即16个字节，然后写入Cache相应块中，最后再修改区表存储器。至于访问主存的方法，要用到计数器。写数据时，如果Cache中有该地址数据，则修改，然后修改存储器该地址内容（MWr为1，写，为主存的写信号）；如果Cache中无该地址数据，就直接修改存储器该地址单元内容。读/写存储器时，要注意互锁情况。\n\n## **设计方法**\n\n### **信号量**\n\n代码中包含多个信号量，下面先了解信号量的意义：\nRAM中：\n- counterFromCache：块内偏移地址\n- signalToCache：在本设计中，当连续读取的相邻数据相同时没有办法触发cache中的写操作（将RAM读到的数据写入缓存），因此添加此变量实现触发\n- MRd：值为0时，读主存\n- CMWr：值为1，写主存；当缓存中命中时也写缓存\n- DataWithCache：读取并传到缓存的数据\n\nMyCache中：\n- RD：值为0时读缓存\n- counterToRAM：同RAM中的counterFromCache\n- signalFromRAM：同RAM中的signalToCache\n- DataToCPU：传送数据到CPU\n- cacheData：缓存储存\n- blockTable：区表存储器\n- DataWithRAM：同RAM中的DataWithCache\n- Counter：初始化为0，当要读取数据时：若值为0，如果数据在缓存中，直接读取，结束，如果不在缓存中，更改counter值为1，counterToRAM设为0，在代码中counter值1会进入主存读取数据，读取四次即一整块后，再写区表存储器\n\n### **注意要点**\n\ncounter变量用来计数，一开始设为2-bit变量。由于具体实现的原因，临界条件设为counter为4，结果会一直出错，事实上counter值为3的时候再加1又变为0了，所以把counter设为3-bit。\n\nMyCache模块根据RAM传进来的数据DataWithRAM的改变来将数据写到缓存中，但是连续读取的数据可能相同，于是添加signalFromRAM信号表明数据有读取，缓存一个在读相同数据时也要写入。\n\n### **模块设计**\n\n#### **cache主模块**\n\n将MyCache模块和RAM模块链接起来并实例MyCache和RAM。\n``` verilog\nmodule Cache(rd, cmwr, from_cpu, to_cpu, address, mrd, datawithram\n    );\n    input rd, cmwr;\n\t input [31:0] address, from_cpu;\n\t output mrd;\n\t output [31:0] to_cpu, datawithram;\n\t \n\t wire rd, cmwr, mrd;\n\t wire [1:0] signal;\n\t wire [2:0] counter;\n\t wire [31:0] to_cpu, from_cpu, address, datawithram;\n\t \n\t // 实例化\n    myCache MYCACHE(.RD(rd), .CMWr(cmwr), .MRd(mrd), .DataToCPU(to_cpu),\n                .DataFromCPU(from_cpu), .Address(address), .DataWithRAM(datawithram),\n\t\t\t\t\t .counterToRAM(counter), .signalFromRAM(signal));\n    RAM myram(.CMWr(cmwr), .MRd(mrd), .counterFromCache(counter), .Address(address),\n                .DataWithCache(datawithram), .DataFromCPU(from_cpu), .signalToCache(signal));\n\nendmodule\n```\n\n#### **RAM模块**\n\nRAM模块主要是申明内存空间还有存储数据或取出数据：当MRd信号值为0时，需要读取内存中的某位置的数据到ram_data中，然后再写入cache中；而不管什么时候，只要CMWr信号为1，RAM都需要写入CPU送过来的数据。\n``` verilog\nmodule RAM(CMWr, MRd, counterFromCache, Address, DataWithCache, DataFromCPU, signalToCache\n    );\n\n    input CMWr, MRd;\n\t input [2:0] counterFromCache;\n\t input [31:0] Address, DataFromCPU;\n\t \n\t output [1:0] signalToCache;\n\t output [31:0] DataWithCache;\n\t \n\t reg [7:0] register [0:20'hfffff];  // 主存中的存数据数组\n\t \n\t reg [1:0] signalToCache;\n\t reg [31:0] DataWithCache, wordNum;\n\t \n\t integer i;\n\t \n\t initial begin\n\t   signalToCache = 0;\n\t\tfor (i = 0; i <= 20'hfffff; i= i+1)\n\t\t    register[i] = 8'b00001111;\n\t\tregister[32'h00040000] = 0;\n\t\tregister[32'h00040001] = 1;\n\t\tregister[32'h00040002] = 2;\n\t\tregister[32'h00040003] = 3;\n\t\tregister[32'h00040004] = 4;\n\t\tregister[32'h00040005] = 5;\n\t\tregister[32'h00040006] = 6;\n\t\tregister[32'h00040007] = 7;\n\t\tregister[32'h00040008] = 8;\n\t\tregister[32'h00040009] = 9;\n\t\tregister[32'h0004000A] = 10;\n\t\tregister[32'h0004000B] = 11;\n\t\tregister[32'h0004000C] = 12;\n\t\tregister[32'h0004000D] = 13;\n\t\tregister[32'h0004000E] = 14;\n\t\tregister[32'h0004000F] = 15;\n\t end\n\t \n\t always @(CMWr or MRd or counterFromCache) begin\n\t     if (MRd == 0) begin  // 读主存\n\t\t      wordNum = Address[31:4]*16+counterFromCache*4;\n\t\t      DataWithCache[31:24] = register[wordNum];\n\t\t\t\tDataWithCache[23:16] = register[wordNum+1];\n\t\t\t\tDataWithCache[15:8] = register[wordNum+2];\n\t\t\t\tDataWithCache[7:0] = register[wordNum+3];\n\t\t\t\tsignalToCache = signalToCache+1;\n\t\t  end else if(CMWr == 1) begin  // 写主存\n\t\t\t\tregister[Address] = DataFromCPU[31:24];\n\t\t\t\tregister[Address+1] = DataFromCPU[23:16];\n\t\t\t\tregister[Address+2] = DataFromCPU[15:8];\n\t\t\t\tregister[Address+3] = DataFromCPU[7:0];\n\t\t  end\n\t  end\n\nendmodule\n```\n\n#### **MyCache模块**\n\n读取数据时，若数据在缓存中则直接读取，结束；如果不在，则更改counter的值然后进入主存读取，连续读取一整块后写区表存储器并将数据送到CPU；\n写数据时若命中，主存需要写，缓存也需要写。\n``` verilog\nmodule myCache(RD, CMWr, MRd, DataToCPU, DataFromCPU, Address, DataWithRAM, counterToRAM, signalFromRAM\n    );\n\t input RD, CMWr;\n\t input [1:0] signalFromRAM;\n\t input [31:0] DataFromCPU, DataWithRAM, Address;\n\t output MRd;\n\t output [2:0] counterToRAM;\n\t output [31:0] DataToCPU;\n\t \n\t reg [7:0] cacheData [0:18'h3ffff];   // 缓存中存数据的数组\n    reg [14:0] blockTable [0:14'h3fff];  // 区表存储器\n\t \n\t reg MRd;\n\t reg [2:0] counter, counterToRAM;\n\t reg [13:0] blockNum;\n\t reg [13:0] partNum;\n\t reg [31:0] cacheAddress, DataToCPU;\n\t \n\t integer i;\n\t \n\t initial begin  // 初始化区表存储器\n        for (i = 0; i <= 14'h3fff; i=i+1)\n\t\t      blockTable[i][14] = 0;\n\t\t  MRd = 1;\n\t\t  counter = 0;\n\t end\n \n     always @(RD or CMWr  or Address or DataFromCPU or DataWithRAM or signalFromRAM) begin\n\t      blockNum = Address[17:4];\n\t\t\tpartNum = Address[31:18];\n\t      if (RD == 0 && counter == 0) begin  // 读数据\n\t\t\t        if (partNum == blockTable[blockNum][13:0] && blockTable[blockNum][14] == 1) begin  // 数据在缓存中\n\t\t\t\t\t      cacheAddress = 16*blockNum+Address[3:0];\n\t\t\t\t\t      DataToCPU[31:24] = cacheData[cacheAddress];\n\t\t\t\t\t\t\tDataToCPU[23:16] = cacheData[cacheAddress+1];\n\t\t\t\t\t\t\tDataToCPU[15:8] = cacheData[cacheAddress+2];\n\t\t\t\t\t\t\tDataToCPU[7:0] = cacheData[cacheAddress+3];\n\t\t\t        end else begin   // 数据不在缓存中，更改counter进入主存读出来\n\t\t\t\t\t      MRd = 0;\n\t\t\t\t\t\t\tcounter = 1;\n\t\t               counterToRAM = 0;\n\t\t\t\t\t  end\n\t\t\tend else if(RD == 0 && counter >= 1) begin  // 读数据，在主存中，需要读一整块，四次\n\t\t\t    cacheAddress = 16*blockNum+4*(counter-1);\n\t\t\t\t cacheData[cacheAddress] = DataWithRAM[31:24];\n\t\t\t\t cacheData[cacheAddress+1] = DataWithRAM[23:16];\n\t\t\t\t cacheData[cacheAddress+2] = DataWithRAM[15:8];\n\t\t\t\t cacheData[cacheAddress+3] = DataWithRAM[7:0];\n\t\t\t    if (counter == 4) begin  // 读取完毕，写区表存储器并将数据传到CPU\n\t\t\t\t     MRd = 1;\n\t\t\t\t\t  cacheAddress = 16*blockNum+Address[3:0];\n\t\t\t\t\t  DataToCPU[31:24] = cacheData[cacheAddress];\n\t\t\t\t\t  DataToCPU[23:16] = cacheData[cacheAddress+1];\n\t\t\t\t\t  DataToCPU[15:8] = cacheData[cacheAddress+2];\n\t\t\t\t\t  DataToCPU[7:0] = cacheData[cacheAddress+3];\n\t\t\t\t\t  blockTable[blockNum][13:0] = partNum;\n\t\t\t\t\t  blockTable[blockNum][14] = 1;\n\t\t\t\t\t  counter = 0;\n\t\t\t\t end else begin   // 每10ns读一次\n\t\t\t\t\t  #10\n\t\t\t\t\t  counter = counter+1;\n\t\t\t\t\t  counterToRAM = counter-1;\n\t\t\t\t end\n\t\t\tend else if(CMWr == 1) begin  // 需要写数据，区号匹配，将CPU中数据写入缓存\n\t\t\t    if (partNum == blockTable[blockNum][13:0] && blockTable[blockNum][14] == 1) begin\n\t\t\t\t     cacheAddress = 16*blockNum+Address[3:0];\n\t\t\t\t     cacheData[cacheAddress] = DataFromCPU[31:24];\n\t\t\t\t\t  cacheData[cacheAddress+1] = DataFromCPU[23:16];\n\t\t\t\t\t  cacheData[cacheAddress+2] = DataFromCPU[15:8];\n\t\t\t\t\t  cacheData[cacheAddress+3] = DataFromCPU[7:0];\n\t\t\t\t end\n\t\t\tend\n\t  end\n\t \nendmodule\n\n\n```\n\n### **测试文件**\n\n#### **测试代码**\n\n一下文件方便测试，代码不唯一：\n``` verilog\nmodule test_tf;\n\n\t// Inputs\n\treg rd;\n\treg cmwr;\n\treg [31:0] from_cpu;\n\treg [31:0] address;\n\n\t// Outputs\n\twire [31:0] to_cpu;\n\twire mrd;\n\twire [31:0] datawithram;\n\n\t// Instantiate the Unit Under Test (UUT)\n\tCache uut (\n\t\t.rd(rd), \n\t\t.cmwr(cmwr), \n\t\t.from_cpu(from_cpu), \n\t\t.to_cpu(to_cpu), \n\t\t.address(address), \n\t\t.mrd(mrd), \n\t\t.datawithram(datawithram)\n\t);\n\n\tinitial begin\n\t\t// Initialize Inputs\n\t\trd = 1;\n\t\tcmwr = 0;\n\t\tfrom_cpu = 0;\n\t\taddress = 0;\n\t\t// Wait 100 ns for global reset to finish\n\t\t#100\n\t\t\n\t\t// 块0，区号0  数据不在缓存中，从主存读\n      address = 32'h00000002;\n\t\trd = 0;\n\t\tcmwr = 0;\n      #100\n\t\t\n\t\t// 块0，区号1  数据不在缓存中，从主存读，初始化为不同值\n\t\taddress = 32'h00040002;\n\t\trd = 0;\n\t\tcmwr = 0;\n\t\t#100\n\t\t\n\t\t// 块0，区号1  数据在缓存中，读\n\t\taddress = 32'h00040003;\n\t\trd = 0;\n\t\tcmwr = 0;\n\t\t#100\n\t\t\n\t\t// 块0，区号1  数据在缓存中，写缓存和主存\n\t\taddress = 32'h00040007;\n\t\tfrom_cpu = 32'haabbccdd;\n\t\trd = 1;\n\t\tcmwr = 1;\n\t\t#100\n\t\t\n\t\t// 块0，区号1  从偏移量5开始检测\n\t\taddress = 32'h00040005;\n\t\trd = 0;\n\t\tcmwr = 0;\n\t\t#100\n\t\t\n\t\t// 块0，区号0  数据不在缓存中命中，只改主存\n\t\taddress = 32'h00000002;\n\t\tfrom_cpu = 32'h11223344;\n\t\trd = 1;\n\t\tcmwr = 1;\n\t\t#100\n\t\t\n\t\t// 块0，区号0   先读到缓存再送到CPU，检测是否正确\n\t\taddress = 32'h00000002;\n\t\trd = 0;\n\t\tcmwr = 0;\n\tend\n      \nendmodule\n```\n\n#### **测试过程分析**\n\n由于测试过程复杂而且大同小异，这里不一一说明，主要是看波形图和变量值是否符合预期。\n\n##### **测试1**\n\n![](1.1.png)\n\n![](1.2.png)\n\n可以看到波形图中在100ns之后mdr有一小段时间变为0，这就是从主存拿数据的阶段\n\n##### **测试2**\n\n![](2.1.png)\n\n![](2.2.png)\n\n读取的地址在内存中每个字节的初值不同，所以可以观察到datawithram值有改变\n\n##### **测试3**\n\n![](3.1.png)\n\n![](3.2.png)\n\n\n","source":"_posts/缓存.md","raw":"---\ntitle: 缓存--直接相连映射\ntoc: true\ndate: 2016-07-19 16:13:47\ntags:\n- cache\n- MIPS\n- CPU\ncategories: 计算机组成原理\n---\n什么是缓存？说白了，把图书馆比作主存，所有的书都放在图书馆中，而你书桌前的书就相当于缓存数据。CPU从Cache读数据，读到就送CPU，若读不到，还必须考虑先从主存中读取数据，然后再将数据写到Cache中，之后，将数据送往CPU；其次，还要考虑CPU修改Cache和存储器数据的情况。\n<!--more-->\n在本文中，CLK为系统时钟（用于计数器计数控制等操作），CLR为系统总清零信号（清区表存储器、计数器），WCT(tableWr)为写Cache区表存储器信号，AB31..AB0(Addr)为CPU访问内存的地址（地址总线），RD（为0，读）为Cache的读信号，MWr（为1，写）为Cache和主存的写信号，MRd（为0，读）为主存的读信号，CA17..CA0为Cache地址，MD31..MD0为主存与Cache的数据传送线，D31..D0为Cache和CPU的数据传送线，LA3...LA0为块内地址。\n## **设计原理**\n\n### **直接相连映射**\n\n直接相联映象方式简单而直接，硬件实现很简单，访问速度也比较快，但是块的冲突率比较高。其主要原则是：主存中一块只能映象到Cache的一个特定的块中。\n\n假设主存的块号为B，Cache的块号为b，则它们之间的映象关系可以表示为：\n\nb = B mod Cb\n\n其中，Cb是Cache的块容量。设主存的块容量为Mb，区容量为Me，则直接映象方法的关系如下图所示。把主存按Cache的大小分成区，一般主存容量为Cache容量的整数倍，主存每一个分区内的块数与Cache的总块数相等。直接映象方式只能把主存各个区中相对块号相同的那些块映象到Cache中同一块号的那个特定块中。例如，主存的块0只能映象到Cache的块0中，主存的块1只能映象到Cache的块1中，同样，主存区1中的块Cb（在区1中的相对块号是0），也只能映象到Cache的块0中。根据上面给出的地址映象规则，整个Cache地址与主存地址的低位部分是完全相同的。 \n![](1.png)\n\n### **地址变换过程**\n\n主存地址分为三个部分：区号E、块号B和块内地址W；Cache地址分为两部分：块号b和块内地址w。主存地址中的块号B与Cache地址中的块号b是完全相同的。同样，主存地址中的块内地址W与Cache地址中的块内地址w也是完全相同的，主存地址比Cache地址长出来的部分称为区号E。\n![](2.png)\n\n在程序执行过程中，当要访问Cache时，为了实现主存块号到Cache块号的变换，需要有一个存放主存区号的小容量存储器（称为区表存储器），这个存储器的容量与Cache的块数相等，字长为主存地址中区号E的长度。\n\n从主存地址到Cache地址的变换过程中，首先用主存地址中的块号B去访问区表存储器（用块号B作为区表存储器的地址，访问它），然后，将读出来的区号与主存地址中的区号E进行比较，比较结果相等，则Cache命中，表示要访问的那一块已经装入到Cache中了，可以直接用块号及块内地址组成的缓冲地址到缓存Cache中取数，把读出来的数据送往CPU；如果比较结果不相等，表示要访问的那个块还没有装入到Cache中，这时，要用主存地址去访问主存储器，先把该地址所在的块读到Cache中，然后再读取Cache中该地址的数据送CPU。\n\n### **Cache、CPU、存储器**\n\n![](3.png)\n32位主存地址为AB31..AB0（地址总线），RD（为0，读）为Cache的读信号，CMWr（为1，写）为Cache和主存的写信号，MRd（为0，读）为主存的读信号，D31..D0为CPU与Cache的数据传送线，MD31..MD0为存储器RAM与Cache的数据传送线。\n![](4.png)\n如上图，区号E取14位，块号B为14位，块内地址为4位，这样Cache地址就是18位了，其中Cache块号b为14位，块内地址w为4位，所以Cache容量为256KB(2^18)个单元，块号b取14位，那么Cache分为16KB(2^14)块，块内地址w取4位，则每块为16个单元（每个单元一个字节）。\n\n实现Cache的存储体的方法是先实现一个8位的存储单元，然后用这个8位的存储单元来构成一个256Kb X 8位的Cache（地址18位）。\n\n再实现一个14位的存储单元，然后，用这个14位的存储单元来构成一个16k X 14位的区表存储器（地址14位与块号B相同），用来存放区号（14位）。在这个部分中，还要实现一个区号E比较器，也就是如果主存地址的区号E和区表存储器中按块号B为地址取出的相应单元中的区号E相等，则Cache命中，否则Cache失效。\n\n当Cache命中时，就将Cache存储体中相应单元的数据送往CPU，这个过程比较简单。当Cache失效时，就将主存中相应块中的数据读出写入Cache中，这样Cache控制器就要产生主存储器的读信号MRd（为0，读），由于每个Cache块占十六个单元，按32 位（4个字节）为访问存储器单位，那么需要连续访问4次主存，读取存储器中该块的数据，即16个字节，然后写入Cache相应块中，最后再修改区表存储器。至于访问主存的方法，要用到计数器。写数据时，如果Cache中有该地址数据，则修改，然后修改存储器该地址内容（MWr为1，写，为主存的写信号）；如果Cache中无该地址数据，就直接修改存储器该地址单元内容。读/写存储器时，要注意互锁情况。\n\n## **设计方法**\n\n### **信号量**\n\n代码中包含多个信号量，下面先了解信号量的意义：\nRAM中：\n- counterFromCache：块内偏移地址\n- signalToCache：在本设计中，当连续读取的相邻数据相同时没有办法触发cache中的写操作（将RAM读到的数据写入缓存），因此添加此变量实现触发\n- MRd：值为0时，读主存\n- CMWr：值为1，写主存；当缓存中命中时也写缓存\n- DataWithCache：读取并传到缓存的数据\n\nMyCache中：\n- RD：值为0时读缓存\n- counterToRAM：同RAM中的counterFromCache\n- signalFromRAM：同RAM中的signalToCache\n- DataToCPU：传送数据到CPU\n- cacheData：缓存储存\n- blockTable：区表存储器\n- DataWithRAM：同RAM中的DataWithCache\n- Counter：初始化为0，当要读取数据时：若值为0，如果数据在缓存中，直接读取，结束，如果不在缓存中，更改counter值为1，counterToRAM设为0，在代码中counter值1会进入主存读取数据，读取四次即一整块后，再写区表存储器\n\n### **注意要点**\n\ncounter变量用来计数，一开始设为2-bit变量。由于具体实现的原因，临界条件设为counter为4，结果会一直出错，事实上counter值为3的时候再加1又变为0了，所以把counter设为3-bit。\n\nMyCache模块根据RAM传进来的数据DataWithRAM的改变来将数据写到缓存中，但是连续读取的数据可能相同，于是添加signalFromRAM信号表明数据有读取，缓存一个在读相同数据时也要写入。\n\n### **模块设计**\n\n#### **cache主模块**\n\n将MyCache模块和RAM模块链接起来并实例MyCache和RAM。\n``` verilog\nmodule Cache(rd, cmwr, from_cpu, to_cpu, address, mrd, datawithram\n    );\n    input rd, cmwr;\n\t input [31:0] address, from_cpu;\n\t output mrd;\n\t output [31:0] to_cpu, datawithram;\n\t \n\t wire rd, cmwr, mrd;\n\t wire [1:0] signal;\n\t wire [2:0] counter;\n\t wire [31:0] to_cpu, from_cpu, address, datawithram;\n\t \n\t // 实例化\n    myCache MYCACHE(.RD(rd), .CMWr(cmwr), .MRd(mrd), .DataToCPU(to_cpu),\n                .DataFromCPU(from_cpu), .Address(address), .DataWithRAM(datawithram),\n\t\t\t\t\t .counterToRAM(counter), .signalFromRAM(signal));\n    RAM myram(.CMWr(cmwr), .MRd(mrd), .counterFromCache(counter), .Address(address),\n                .DataWithCache(datawithram), .DataFromCPU(from_cpu), .signalToCache(signal));\n\nendmodule\n```\n\n#### **RAM模块**\n\nRAM模块主要是申明内存空间还有存储数据或取出数据：当MRd信号值为0时，需要读取内存中的某位置的数据到ram_data中，然后再写入cache中；而不管什么时候，只要CMWr信号为1，RAM都需要写入CPU送过来的数据。\n``` verilog\nmodule RAM(CMWr, MRd, counterFromCache, Address, DataWithCache, DataFromCPU, signalToCache\n    );\n\n    input CMWr, MRd;\n\t input [2:0] counterFromCache;\n\t input [31:0] Address, DataFromCPU;\n\t \n\t output [1:0] signalToCache;\n\t output [31:0] DataWithCache;\n\t \n\t reg [7:0] register [0:20'hfffff];  // 主存中的存数据数组\n\t \n\t reg [1:0] signalToCache;\n\t reg [31:0] DataWithCache, wordNum;\n\t \n\t integer i;\n\t \n\t initial begin\n\t   signalToCache = 0;\n\t\tfor (i = 0; i <= 20'hfffff; i= i+1)\n\t\t    register[i] = 8'b00001111;\n\t\tregister[32'h00040000] = 0;\n\t\tregister[32'h00040001] = 1;\n\t\tregister[32'h00040002] = 2;\n\t\tregister[32'h00040003] = 3;\n\t\tregister[32'h00040004] = 4;\n\t\tregister[32'h00040005] = 5;\n\t\tregister[32'h00040006] = 6;\n\t\tregister[32'h00040007] = 7;\n\t\tregister[32'h00040008] = 8;\n\t\tregister[32'h00040009] = 9;\n\t\tregister[32'h0004000A] = 10;\n\t\tregister[32'h0004000B] = 11;\n\t\tregister[32'h0004000C] = 12;\n\t\tregister[32'h0004000D] = 13;\n\t\tregister[32'h0004000E] = 14;\n\t\tregister[32'h0004000F] = 15;\n\t end\n\t \n\t always @(CMWr or MRd or counterFromCache) begin\n\t     if (MRd == 0) begin  // 读主存\n\t\t      wordNum = Address[31:4]*16+counterFromCache*4;\n\t\t      DataWithCache[31:24] = register[wordNum];\n\t\t\t\tDataWithCache[23:16] = register[wordNum+1];\n\t\t\t\tDataWithCache[15:8] = register[wordNum+2];\n\t\t\t\tDataWithCache[7:0] = register[wordNum+3];\n\t\t\t\tsignalToCache = signalToCache+1;\n\t\t  end else if(CMWr == 1) begin  // 写主存\n\t\t\t\tregister[Address] = DataFromCPU[31:24];\n\t\t\t\tregister[Address+1] = DataFromCPU[23:16];\n\t\t\t\tregister[Address+2] = DataFromCPU[15:8];\n\t\t\t\tregister[Address+3] = DataFromCPU[7:0];\n\t\t  end\n\t  end\n\nendmodule\n```\n\n#### **MyCache模块**\n\n读取数据时，若数据在缓存中则直接读取，结束；如果不在，则更改counter的值然后进入主存读取，连续读取一整块后写区表存储器并将数据送到CPU；\n写数据时若命中，主存需要写，缓存也需要写。\n``` verilog\nmodule myCache(RD, CMWr, MRd, DataToCPU, DataFromCPU, Address, DataWithRAM, counterToRAM, signalFromRAM\n    );\n\t input RD, CMWr;\n\t input [1:0] signalFromRAM;\n\t input [31:0] DataFromCPU, DataWithRAM, Address;\n\t output MRd;\n\t output [2:0] counterToRAM;\n\t output [31:0] DataToCPU;\n\t \n\t reg [7:0] cacheData [0:18'h3ffff];   // 缓存中存数据的数组\n    reg [14:0] blockTable [0:14'h3fff];  // 区表存储器\n\t \n\t reg MRd;\n\t reg [2:0] counter, counterToRAM;\n\t reg [13:0] blockNum;\n\t reg [13:0] partNum;\n\t reg [31:0] cacheAddress, DataToCPU;\n\t \n\t integer i;\n\t \n\t initial begin  // 初始化区表存储器\n        for (i = 0; i <= 14'h3fff; i=i+1)\n\t\t      blockTable[i][14] = 0;\n\t\t  MRd = 1;\n\t\t  counter = 0;\n\t end\n \n     always @(RD or CMWr  or Address or DataFromCPU or DataWithRAM or signalFromRAM) begin\n\t      blockNum = Address[17:4];\n\t\t\tpartNum = Address[31:18];\n\t      if (RD == 0 && counter == 0) begin  // 读数据\n\t\t\t        if (partNum == blockTable[blockNum][13:0] && blockTable[blockNum][14] == 1) begin  // 数据在缓存中\n\t\t\t\t\t      cacheAddress = 16*blockNum+Address[3:0];\n\t\t\t\t\t      DataToCPU[31:24] = cacheData[cacheAddress];\n\t\t\t\t\t\t\tDataToCPU[23:16] = cacheData[cacheAddress+1];\n\t\t\t\t\t\t\tDataToCPU[15:8] = cacheData[cacheAddress+2];\n\t\t\t\t\t\t\tDataToCPU[7:0] = cacheData[cacheAddress+3];\n\t\t\t        end else begin   // 数据不在缓存中，更改counter进入主存读出来\n\t\t\t\t\t      MRd = 0;\n\t\t\t\t\t\t\tcounter = 1;\n\t\t               counterToRAM = 0;\n\t\t\t\t\t  end\n\t\t\tend else if(RD == 0 && counter >= 1) begin  // 读数据，在主存中，需要读一整块，四次\n\t\t\t    cacheAddress = 16*blockNum+4*(counter-1);\n\t\t\t\t cacheData[cacheAddress] = DataWithRAM[31:24];\n\t\t\t\t cacheData[cacheAddress+1] = DataWithRAM[23:16];\n\t\t\t\t cacheData[cacheAddress+2] = DataWithRAM[15:8];\n\t\t\t\t cacheData[cacheAddress+3] = DataWithRAM[7:0];\n\t\t\t    if (counter == 4) begin  // 读取完毕，写区表存储器并将数据传到CPU\n\t\t\t\t     MRd = 1;\n\t\t\t\t\t  cacheAddress = 16*blockNum+Address[3:0];\n\t\t\t\t\t  DataToCPU[31:24] = cacheData[cacheAddress];\n\t\t\t\t\t  DataToCPU[23:16] = cacheData[cacheAddress+1];\n\t\t\t\t\t  DataToCPU[15:8] = cacheData[cacheAddress+2];\n\t\t\t\t\t  DataToCPU[7:0] = cacheData[cacheAddress+3];\n\t\t\t\t\t  blockTable[blockNum][13:0] = partNum;\n\t\t\t\t\t  blockTable[blockNum][14] = 1;\n\t\t\t\t\t  counter = 0;\n\t\t\t\t end else begin   // 每10ns读一次\n\t\t\t\t\t  #10\n\t\t\t\t\t  counter = counter+1;\n\t\t\t\t\t  counterToRAM = counter-1;\n\t\t\t\t end\n\t\t\tend else if(CMWr == 1) begin  // 需要写数据，区号匹配，将CPU中数据写入缓存\n\t\t\t    if (partNum == blockTable[blockNum][13:0] && blockTable[blockNum][14] == 1) begin\n\t\t\t\t     cacheAddress = 16*blockNum+Address[3:0];\n\t\t\t\t     cacheData[cacheAddress] = DataFromCPU[31:24];\n\t\t\t\t\t  cacheData[cacheAddress+1] = DataFromCPU[23:16];\n\t\t\t\t\t  cacheData[cacheAddress+2] = DataFromCPU[15:8];\n\t\t\t\t\t  cacheData[cacheAddress+3] = DataFromCPU[7:0];\n\t\t\t\t end\n\t\t\tend\n\t  end\n\t \nendmodule\n\n\n```\n\n### **测试文件**\n\n#### **测试代码**\n\n一下文件方便测试，代码不唯一：\n``` verilog\nmodule test_tf;\n\n\t// Inputs\n\treg rd;\n\treg cmwr;\n\treg [31:0] from_cpu;\n\treg [31:0] address;\n\n\t// Outputs\n\twire [31:0] to_cpu;\n\twire mrd;\n\twire [31:0] datawithram;\n\n\t// Instantiate the Unit Under Test (UUT)\n\tCache uut (\n\t\t.rd(rd), \n\t\t.cmwr(cmwr), \n\t\t.from_cpu(from_cpu), \n\t\t.to_cpu(to_cpu), \n\t\t.address(address), \n\t\t.mrd(mrd), \n\t\t.datawithram(datawithram)\n\t);\n\n\tinitial begin\n\t\t// Initialize Inputs\n\t\trd = 1;\n\t\tcmwr = 0;\n\t\tfrom_cpu = 0;\n\t\taddress = 0;\n\t\t// Wait 100 ns for global reset to finish\n\t\t#100\n\t\t\n\t\t// 块0，区号0  数据不在缓存中，从主存读\n      address = 32'h00000002;\n\t\trd = 0;\n\t\tcmwr = 0;\n      #100\n\t\t\n\t\t// 块0，区号1  数据不在缓存中，从主存读，初始化为不同值\n\t\taddress = 32'h00040002;\n\t\trd = 0;\n\t\tcmwr = 0;\n\t\t#100\n\t\t\n\t\t// 块0，区号1  数据在缓存中，读\n\t\taddress = 32'h00040003;\n\t\trd = 0;\n\t\tcmwr = 0;\n\t\t#100\n\t\t\n\t\t// 块0，区号1  数据在缓存中，写缓存和主存\n\t\taddress = 32'h00040007;\n\t\tfrom_cpu = 32'haabbccdd;\n\t\trd = 1;\n\t\tcmwr = 1;\n\t\t#100\n\t\t\n\t\t// 块0，区号1  从偏移量5开始检测\n\t\taddress = 32'h00040005;\n\t\trd = 0;\n\t\tcmwr = 0;\n\t\t#100\n\t\t\n\t\t// 块0，区号0  数据不在缓存中命中，只改主存\n\t\taddress = 32'h00000002;\n\t\tfrom_cpu = 32'h11223344;\n\t\trd = 1;\n\t\tcmwr = 1;\n\t\t#100\n\t\t\n\t\t// 块0，区号0   先读到缓存再送到CPU，检测是否正确\n\t\taddress = 32'h00000002;\n\t\trd = 0;\n\t\tcmwr = 0;\n\tend\n      \nendmodule\n```\n\n#### **测试过程分析**\n\n由于测试过程复杂而且大同小异，这里不一一说明，主要是看波形图和变量值是否符合预期。\n\n##### **测试1**\n\n![](1.1.png)\n\n![](1.2.png)\n\n可以看到波形图中在100ns之后mdr有一小段时间变为0，这就是从主存拿数据的阶段\n\n##### **测试2**\n\n![](2.1.png)\n\n![](2.2.png)\n\n读取的地址在内存中每个字节的初值不同，所以可以观察到datawithram值有改变\n\n##### **测试3**\n\n![](3.1.png)\n\n![](3.2.png)\n\n\n","slug":"缓存","published":1,"updated":"2016-07-19T08:50:31.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzsm001zgobkb2cx03ww","content":"<p>什么是缓存？说白了，把图书馆比作主存，所有的书都放在图书馆中，而你书桌前的书就相当于缓存数据。CPU从Cache读数据，读到就送CPU，若读不到，还必须考虑先从主存中读取数据，然后再将数据写到Cache中，之后，将数据送往CPU；其次，还要考虑CPU修改Cache和存储器数据的情况。<br><a id=\"more\"></a><br>在本文中，CLK为系统时钟（用于计数器计数控制等操作），CLR为系统总清零信号（清区表存储器、计数器），WCT(tableWr)为写Cache区表存储器信号，AB31..AB0(Addr)为CPU访问内存的地址（地址总线），RD（为0，读）为Cache的读信号，MWr（为1，写）为Cache和主存的写信号，MRd（为0，读）为主存的读信号，CA17..CA0为Cache地址，MD31..MD0为主存与Cache的数据传送线，D31..D0为Cache和CPU的数据传送线，LA3…LA0为块内地址。</p>\n<h2 id=\"设计原理\"><a href=\"#设计原理\" class=\"headerlink\" title=\"设计原理\"></a><strong>设计原理</strong></h2><h3 id=\"直接相连映射\"><a href=\"#直接相连映射\" class=\"headerlink\" title=\"直接相连映射\"></a><strong>直接相连映射</strong></h3><p>直接相联映象方式简单而直接，硬件实现很简单，访问速度也比较快，但是块的冲突率比较高。其主要原则是：主存中一块只能映象到Cache的一个特定的块中。</p>\n<p>假设主存的块号为B，Cache的块号为b，则它们之间的映象关系可以表示为：</p>\n<p>b = B mod Cb</p>\n<p>其中，Cb是Cache的块容量。设主存的块容量为Mb，区容量为Me，则直接映象方法的关系如下图所示。把主存按Cache的大小分成区，一般主存容量为Cache容量的整数倍，主存每一个分区内的块数与Cache的总块数相等。直接映象方式只能把主存各个区中相对块号相同的那些块映象到Cache中同一块号的那个特定块中。例如，主存的块0只能映象到Cache的块0中，主存的块1只能映象到Cache的块1中，同样，主存区1中的块Cb（在区1中的相对块号是0），也只能映象到Cache的块0中。根据上面给出的地址映象规则，整个Cache地址与主存地址的低位部分是完全相同的。<br><img src=\"1.png\" alt=\"\"></p>\n<h3 id=\"地址变换过程\"><a href=\"#地址变换过程\" class=\"headerlink\" title=\"地址变换过程\"></a><strong>地址变换过程</strong></h3><p>主存地址分为三个部分：区号E、块号B和块内地址W；Cache地址分为两部分：块号b和块内地址w。主存地址中的块号B与Cache地址中的块号b是完全相同的。同样，主存地址中的块内地址W与Cache地址中的块内地址w也是完全相同的，主存地址比Cache地址长出来的部分称为区号E。<br><img src=\"2.png\" alt=\"\"></p>\n<p>在程序执行过程中，当要访问Cache时，为了实现主存块号到Cache块号的变换，需要有一个存放主存区号的小容量存储器（称为区表存储器），这个存储器的容量与Cache的块数相等，字长为主存地址中区号E的长度。</p>\n<p>从主存地址到Cache地址的变换过程中，首先用主存地址中的块号B去访问区表存储器（用块号B作为区表存储器的地址，访问它），然后，将读出来的区号与主存地址中的区号E进行比较，比较结果相等，则Cache命中，表示要访问的那一块已经装入到Cache中了，可以直接用块号及块内地址组成的缓冲地址到缓存Cache中取数，把读出来的数据送往CPU；如果比较结果不相等，表示要访问的那个块还没有装入到Cache中，这时，要用主存地址去访问主存储器，先把该地址所在的块读到Cache中，然后再读取Cache中该地址的数据送CPU。</p>\n<h3 id=\"Cache、CPU、存储器\"><a href=\"#Cache、CPU、存储器\" class=\"headerlink\" title=\"Cache、CPU、存储器\"></a><strong>Cache、CPU、存储器</strong></h3><p><img src=\"3.png\" alt=\"\"><br>32位主存地址为AB31..AB0（地址总线），RD（为0，读）为Cache的读信号，CMWr（为1，写）为Cache和主存的写信号，MRd（为0，读）为主存的读信号，D31..D0为CPU与Cache的数据传送线，MD31..MD0为存储器RAM与Cache的数据传送线。<br><img src=\"4.png\" alt=\"\"><br>如上图，区号E取14位，块号B为14位，块内地址为4位，这样Cache地址就是18位了，其中Cache块号b为14位，块内地址w为4位，所以Cache容量为256KB(2^18)个单元，块号b取14位，那么Cache分为16KB(2^14)块，块内地址w取4位，则每块为16个单元（每个单元一个字节）。</p>\n<p>实现Cache的存储体的方法是先实现一个8位的存储单元，然后用这个8位的存储单元来构成一个256Kb X 8位的Cache（地址18位）。</p>\n<p>再实现一个14位的存储单元，然后，用这个14位的存储单元来构成一个16k X 14位的区表存储器（地址14位与块号B相同），用来存放区号（14位）。在这个部分中，还要实现一个区号E比较器，也就是如果主存地址的区号E和区表存储器中按块号B为地址取出的相应单元中的区号E相等，则Cache命中，否则Cache失效。</p>\n<p>当Cache命中时，就将Cache存储体中相应单元的数据送往CPU，这个过程比较简单。当Cache失效时，就将主存中相应块中的数据读出写入Cache中，这样Cache控制器就要产生主存储器的读信号MRd（为0，读），由于每个Cache块占十六个单元，按32 位（4个字节）为访问存储器单位，那么需要连续访问4次主存，读取存储器中该块的数据，即16个字节，然后写入Cache相应块中，最后再修改区表存储器。至于访问主存的方法，要用到计数器。写数据时，如果Cache中有该地址数据，则修改，然后修改存储器该地址内容（MWr为1，写，为主存的写信号）；如果Cache中无该地址数据，就直接修改存储器该地址单元内容。读/写存储器时，要注意互锁情况。</p>\n<h2 id=\"设计方法\"><a href=\"#设计方法\" class=\"headerlink\" title=\"设计方法\"></a><strong>设计方法</strong></h2><h3 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a><strong>信号量</strong></h3><p>代码中包含多个信号量，下面先了解信号量的意义：<br>RAM中：</p>\n<ul>\n<li>counterFromCache：块内偏移地址</li>\n<li>signalToCache：在本设计中，当连续读取的相邻数据相同时没有办法触发cache中的写操作（将RAM读到的数据写入缓存），因此添加此变量实现触发</li>\n<li>MRd：值为0时，读主存</li>\n<li>CMWr：值为1，写主存；当缓存中命中时也写缓存</li>\n<li>DataWithCache：读取并传到缓存的数据</li>\n</ul>\n<p>MyCache中：</p>\n<ul>\n<li>RD：值为0时读缓存</li>\n<li>counterToRAM：同RAM中的counterFromCache</li>\n<li>signalFromRAM：同RAM中的signalToCache</li>\n<li>DataToCPU：传送数据到CPU</li>\n<li>cacheData：缓存储存</li>\n<li>blockTable：区表存储器</li>\n<li>DataWithRAM：同RAM中的DataWithCache</li>\n<li>Counter：初始化为0，当要读取数据时：若值为0，如果数据在缓存中，直接读取，结束，如果不在缓存中，更改counter值为1，counterToRAM设为0，在代码中counter值1会进入主存读取数据，读取四次即一整块后，再写区表存储器</li>\n</ul>\n<h3 id=\"注意要点\"><a href=\"#注意要点\" class=\"headerlink\" title=\"注意要点\"></a><strong>注意要点</strong></h3><p>counter变量用来计数，一开始设为2-bit变量。由于具体实现的原因，临界条件设为counter为4，结果会一直出错，事实上counter值为3的时候再加1又变为0了，所以把counter设为3-bit。</p>\n<p>MyCache模块根据RAM传进来的数据DataWithRAM的改变来将数据写到缓存中，但是连续读取的数据可能相同，于是添加signalFromRAM信号表明数据有读取，缓存一个在读相同数据时也要写入。</p>\n<h3 id=\"模块设计\"><a href=\"#模块设计\" class=\"headerlink\" title=\"模块设计\"></a><strong>模块设计</strong></h3><h4 id=\"cache主模块\"><a href=\"#cache主模块\" class=\"headerlink\" title=\"cache主模块\"></a><strong>cache主模块</strong></h4><p>将MyCache模块和RAM模块链接起来并实例MyCache和RAM。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> Cache(rd, cmwr, from_cpu, to_cpu, address, mrd, datawithram</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"keyword\">input</span> rd, cmwr;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] address, from_cpu;</div><div class=\"line\">\t <span class=\"keyword\">output</span> mrd;</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] to_cpu, datawithram;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">wire</span> rd, cmwr, mrd;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] signal;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] counter;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] to_cpu, from_cpu, address, datawithram;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 实例化</span></div><div class=\"line\">    myCache MYCACHE(<span class=\"variable\">.RD</span>(rd), <span class=\"variable\">.CMWr</span>(cmwr), <span class=\"variable\">.MRd</span>(mrd), <span class=\"variable\">.DataToCPU</span>(to_cpu),</div><div class=\"line\">                <span class=\"variable\">.DataFromCPU</span>(from_cpu), <span class=\"variable\">.Address</span>(address), <span class=\"variable\">.DataWithRAM</span>(datawithram),</div><div class=\"line\">\t\t\t\t\t <span class=\"variable\">.counterToRAM</span>(counter), <span class=\"variable\">.signalFromRAM</span>(signal));</div><div class=\"line\">    RAM myram(<span class=\"variable\">.CMWr</span>(cmwr), <span class=\"variable\">.MRd</span>(mrd), <span class=\"variable\">.counterFromCache</span>(counter), <span class=\"variable\">.Address</span>(address),</div><div class=\"line\">                <span class=\"variable\">.DataWithCache</span>(datawithram), <span class=\"variable\">.DataFromCPU</span>(from_cpu), <span class=\"variable\">.signalToCache</span>(signal));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"RAM模块\"><a href=\"#RAM模块\" class=\"headerlink\" title=\"RAM模块\"></a><strong>RAM模块</strong></h4><p>RAM模块主要是申明内存空间还有存储数据或取出数据：当MRd信号值为0时，需要读取内存中的某位置的数据到ram_data中，然后再写入cache中；而不管什么时候，只要CMWr信号为1，RAM都需要写入CPU送过来的数据。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> RAM(CMWr, MRd, counterFromCache, Address, DataWithCache, DataFromCPU, signalToCache</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">input</span> CMWr, MRd;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] counterFromCache;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] Address, DataFromCPU;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] signalToCache;</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataWithCache;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] register [<span class=\"number\">0</span>:<span class=\"number\">20'hfffff</span>];  <span class=\"comment\">// 主存中的存数据数组</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] signalToCache;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataWithCache, wordNum;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">integer</span> i;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t   signalToCache = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">20'hfffff</span>; i= i+<span class=\"number\">1</span>)</div><div class=\"line\">\t\t    register[i] = <span class=\"number\">8'b00001111</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040000</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040001</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040002</span>] = <span class=\"number\">2</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040003</span>] = <span class=\"number\">3</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040004</span>] = <span class=\"number\">4</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040005</span>] = <span class=\"number\">5</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040006</span>] = <span class=\"number\">6</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040007</span>] = <span class=\"number\">7</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040008</span>] = <span class=\"number\">8</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040009</span>] = <span class=\"number\">9</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000A</span>] = <span class=\"number\">10</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000B</span>] = <span class=\"number\">11</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000C</span>] = <span class=\"number\">12</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000D</span>] = <span class=\"number\">13</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000E</span>] = <span class=\"number\">14</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000F</span>] = <span class=\"number\">15</span>;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(CMWr <span class=\"keyword\">or</span> MRd <span class=\"keyword\">or</span> counterFromCache) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">if</span> (MRd == <span class=\"number\">0</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 读主存</span></div><div class=\"line\">\t\t      wordNum = Address[<span class=\"number\">31</span>:<span class=\"number\">4</span>]*<span class=\"number\">16</span>+counterFromCache*<span class=\"number\">4</span>;</div><div class=\"line\">\t\t      DataWithCache[<span class=\"number\">31</span>:<span class=\"number\">24</span>] = register[wordNum];</div><div class=\"line\">\t\t\t\tDataWithCache[<span class=\"number\">23</span>:<span class=\"number\">16</span>] = register[wordNum+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tDataWithCache[<span class=\"number\">15</span>:<span class=\"number\">8</span>] = register[wordNum+<span class=\"number\">2</span>];</div><div class=\"line\">\t\t\t\tDataWithCache[<span class=\"number\">7</span>:<span class=\"number\">0</span>] = register[wordNum+<span class=\"number\">3</span>];</div><div class=\"line\">\t\t\t\tsignalToCache = signalToCache+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(CMWr == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 写主存</span></div><div class=\"line\">\t\t\t\tregister[Address] = DataFromCPU[<span class=\"number\">31</span>:<span class=\"number\">24</span>];</div><div class=\"line\">\t\t\t\tregister[Address+<span class=\"number\">1</span>] = DataFromCPU[<span class=\"number\">23</span>:<span class=\"number\">16</span>];</div><div class=\"line\">\t\t\t\tregister[Address+<span class=\"number\">2</span>] = DataFromCPU[<span class=\"number\">15</span>:<span class=\"number\">8</span>];</div><div class=\"line\">\t\t\t\tregister[Address+<span class=\"number\">3</span>] = DataFromCPU[<span class=\"number\">7</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">\t  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"MyCache模块\"><a href=\"#MyCache模块\" class=\"headerlink\" title=\"MyCache模块\"></a><strong>MyCache模块</strong></h4><p>读取数据时，若数据在缓存中则直接读取，结束；如果不在，则更改counter的值然后进入主存读取，连续读取一整块后写区表存储器并将数据送到CPU；<br>写数据时若命中，主存需要写，缓存也需要写。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> myCache(RD, CMWr, MRd, DataToCPU, DataFromCPU, Address, DataWithRAM, counterToRAM, signalFromRAM</div><div class=\"line\">    );</div><div class=\"line\">\t <span class=\"keyword\">input</span> RD, CMWr;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] signalFromRAM;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataFromCPU, DataWithRAM, Address;</div><div class=\"line\">\t <span class=\"keyword\">output</span> MRd;</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] counterToRAM;</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataToCPU;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] cacheData [<span class=\"number\">0</span>:<span class=\"number\">18'h3ffff</span>];   <span class=\"comment\">// 缓存中存数据的数组</span></div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">14</span>:<span class=\"number\">0</span>] blockTable [<span class=\"number\">0</span>:<span class=\"number\">14'h3fff</span>];  <span class=\"comment\">// 区表存储器</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> MRd;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] counter, counterToRAM;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">13</span>:<span class=\"number\">0</span>] blockNum;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">13</span>:<span class=\"number\">0</span>] partNum;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] cacheAddress, DataToCPU;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">integer</span> i;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span>  <span class=\"comment\">// 初始化区表存储器</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">14'h3fff</span>; i=i+<span class=\"number\">1</span>)</div><div class=\"line\">\t\t      blockTable[i][<span class=\"number\">14</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  MRd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t  counter = <span class=\"number\">0</span>;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\">     <span class=\"keyword\">always</span> @(RD <span class=\"keyword\">or</span> CMWr  <span class=\"keyword\">or</span> Address <span class=\"keyword\">or</span> DataFromCPU <span class=\"keyword\">or</span> DataWithRAM <span class=\"keyword\">or</span> signalFromRAM) <span class=\"keyword\">begin</span></div><div class=\"line\">\t      blockNum = Address[<span class=\"number\">17</span>:<span class=\"number\">4</span>];</div><div class=\"line\">\t\t\tpartNum = Address[<span class=\"number\">31</span>:<span class=\"number\">18</span>];</div><div class=\"line\">\t      <span class=\"keyword\">if</span> (RD == <span class=\"number\">0</span> &amp;&amp; counter == <span class=\"number\">0</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 读数据</span></div><div class=\"line\">\t\t\t        <span class=\"keyword\">if</span> (partNum == blockTable[blockNum][<span class=\"number\">13</span>:<span class=\"number\">0</span>] &amp;&amp; blockTable[blockNum][<span class=\"number\">14</span>] == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 数据在缓存中</span></div><div class=\"line\">\t\t\t\t\t      cacheAddress = <span class=\"number\">16</span>*blockNum+Address[<span class=\"number\">3</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t\t      DataToCPU[<span class=\"number\">31</span>:<span class=\"number\">24</span>] = cacheData[cacheAddress];</div><div class=\"line\">\t\t\t\t\t\t\tDataToCPU[<span class=\"number\">23</span>:<span class=\"number\">16</span>] = cacheData[cacheAddress+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t\t\t\tDataToCPU[<span class=\"number\">15</span>:<span class=\"number\">8</span>] = cacheData[cacheAddress+<span class=\"number\">2</span>];</div><div class=\"line\">\t\t\t\t\t\t\tDataToCPU[<span class=\"number\">7</span>:<span class=\"number\">0</span>] = cacheData[cacheAddress+<span class=\"number\">3</span>];</div><div class=\"line\">\t\t\t        <span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span>   <span class=\"comment\">// 数据不在缓存中，更改counter进入主存读出来</span></div><div class=\"line\">\t\t\t\t\t      MRd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t\t\tcounter = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t               counterToRAM = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(RD == <span class=\"number\">0</span> &amp;&amp; counter &gt;= <span class=\"number\">1</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 读数据，在主存中，需要读一整块，四次</span></div><div class=\"line\">\t\t\t    cacheAddress = <span class=\"number\">16</span>*blockNum+<span class=\"number\">4</span>*(counter-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t cacheData[cacheAddress] = DataWithRAM[<span class=\"number\">31</span>:<span class=\"number\">24</span>];</div><div class=\"line\">\t\t\t\t cacheData[cacheAddress+<span class=\"number\">1</span>] = DataWithRAM[<span class=\"number\">23</span>:<span class=\"number\">16</span>];</div><div class=\"line\">\t\t\t\t cacheData[cacheAddress+<span class=\"number\">2</span>] = DataWithRAM[<span class=\"number\">15</span>:<span class=\"number\">8</span>];</div><div class=\"line\">\t\t\t\t cacheData[cacheAddress+<span class=\"number\">3</span>] = DataWithRAM[<span class=\"number\">7</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t    <span class=\"keyword\">if</span> (counter == <span class=\"number\">4</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 读取完毕，写区表存储器并将数据传到CPU</span></div><div class=\"line\">\t\t\t\t     MRd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t  cacheAddress = <span class=\"number\">16</span>*blockNum+Address[<span class=\"number\">3</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t\t  DataToCPU[<span class=\"number\">31</span>:<span class=\"number\">24</span>] = cacheData[cacheAddress];</div><div class=\"line\">\t\t\t\t\t  DataToCPU[<span class=\"number\">23</span>:<span class=\"number\">16</span>] = cacheData[cacheAddress+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t\t  DataToCPU[<span class=\"number\">15</span>:<span class=\"number\">8</span>] = cacheData[cacheAddress+<span class=\"number\">2</span>];</div><div class=\"line\">\t\t\t\t\t  DataToCPU[<span class=\"number\">7</span>:<span class=\"number\">0</span>] = cacheData[cacheAddress+<span class=\"number\">3</span>];</div><div class=\"line\">\t\t\t\t\t  blockTable[blockNum][<span class=\"number\">13</span>:<span class=\"number\">0</span>] = partNum;</div><div class=\"line\">\t\t\t\t\t  blockTable[blockNum][<span class=\"number\">14</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t  counter = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t <span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span>   <span class=\"comment\">// 每10ns读一次</span></div><div class=\"line\">\t\t\t\t\t  #<span class=\"number\">10</span></div><div class=\"line\">\t\t\t\t\t  counter = counter+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t  counterToRAM = counter-<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(CMWr == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 需要写数据，区号匹配，将CPU中数据写入缓存</span></div><div class=\"line\">\t\t\t    <span class=\"keyword\">if</span> (partNum == blockTable[blockNum][<span class=\"number\">13</span>:<span class=\"number\">0</span>] &amp;&amp; blockTable[blockNum][<span class=\"number\">14</span>] == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t     cacheAddress = <span class=\"number\">16</span>*blockNum+Address[<span class=\"number\">3</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t     cacheData[cacheAddress] = DataFromCPU[<span class=\"number\">31</span>:<span class=\"number\">24</span>];</div><div class=\"line\">\t\t\t\t\t  cacheData[cacheAddress+<span class=\"number\">1</span>] = DataFromCPU[<span class=\"number\">23</span>:<span class=\"number\">16</span>];</div><div class=\"line\">\t\t\t\t\t  cacheData[cacheAddress+<span class=\"number\">2</span>] = DataFromCPU[<span class=\"number\">15</span>:<span class=\"number\">8</span>];</div><div class=\"line\">\t\t\t\t\t  cacheData[cacheAddress+<span class=\"number\">3</span>] = DataFromCPU[<span class=\"number\">7</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t  <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"测试文件\"><a href=\"#测试文件\" class=\"headerlink\" title=\"测试文件\"></a><strong>测试文件</strong></h3><h4 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a><strong>测试代码</strong></h4><p>一下文件方便测试，代码不唯一：<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> test_tf;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Inputs</span></div><div class=\"line\">\t<span class=\"keyword\">reg</span> rd;</div><div class=\"line\">\t<span class=\"keyword\">reg</span> cmwr;</div><div class=\"line\">\t<span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] from_cpu;</div><div class=\"line\">\t<span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] address;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Outputs</span></div><div class=\"line\">\t<span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] to_cpu;</div><div class=\"line\">\t<span class=\"keyword\">wire</span> mrd;</div><div class=\"line\">\t<span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] datawithram;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Instantiate the Unit Under Test (UUT)</span></div><div class=\"line\">\tCache uut (</div><div class=\"line\">\t\t<span class=\"variable\">.rd</span>(rd), </div><div class=\"line\">\t\t<span class=\"variable\">.cmwr</span>(cmwr), </div><div class=\"line\">\t\t<span class=\"variable\">.from_cpu</span>(from_cpu), </div><div class=\"line\">\t\t<span class=\"variable\">.to_cpu</span>(to_cpu), </div><div class=\"line\">\t\t<span class=\"variable\">.address</span>(address), </div><div class=\"line\">\t\t<span class=\"variable\">.mrd</span>(mrd), </div><div class=\"line\">\t\t<span class=\"variable\">.datawithram</span>(datawithram)</div><div class=\"line\">\t);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t<span class=\"comment\">// Initialize Inputs</span></div><div class=\"line\">\t\trd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tfrom_cpu = <span class=\"number\">0</span>;</div><div class=\"line\">\t\taddress = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// Wait 100 ns for global reset to finish</span></div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号0  数据不在缓存中，从主存读</span></div><div class=\"line\">      address = <span class=\"number\">32'h00000002</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">      #<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号1  数据不在缓存中，从主存读，初始化为不同值</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00040002</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号1  数据在缓存中，读</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00040003</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号1  数据在缓存中，写缓存和主存</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00040007</span>;</div><div class=\"line\">\t\tfrom_cpu = <span class=\"number\">32'haabbccdd</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号1  从偏移量5开始检测</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00040005</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号0  数据不在缓存中命中，只改主存</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00000002</span>;</div><div class=\"line\">\t\tfrom_cpu = <span class=\"number\">32'h11223344</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号0   先读到缓存再送到CPU，检测是否正确</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00000002</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">end</span></div><div class=\"line\">      </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"测试过程分析\"><a href=\"#测试过程分析\" class=\"headerlink\" title=\"测试过程分析\"></a><strong>测试过程分析</strong></h4><p>由于测试过程复杂而且大同小异，这里不一一说明，主要是看波形图和变量值是否符合预期。</p>\n<h5 id=\"测试1\"><a href=\"#测试1\" class=\"headerlink\" title=\"测试1\"></a><strong>测试1</strong></h5><p><img src=\"1.1.png\" alt=\"\"></p>\n<p><img src=\"1.2.png\" alt=\"\"></p>\n<p>可以看到波形图中在100ns之后mdr有一小段时间变为0，这就是从主存拿数据的阶段</p>\n<h5 id=\"测试2\"><a href=\"#测试2\" class=\"headerlink\" title=\"测试2\"></a><strong>测试2</strong></h5><p><img src=\"2.1.png\" alt=\"\"></p>\n<p><img src=\"2.2.png\" alt=\"\"></p>\n<p>读取的地址在内存中每个字节的初值不同，所以可以观察到datawithram值有改变</p>\n<h5 id=\"测试3\"><a href=\"#测试3\" class=\"headerlink\" title=\"测试3\"></a><strong>测试3</strong></h5><p><img src=\"3.1.png\" alt=\"\"></p>\n<p><img src=\"3.2.png\" alt=\"\"></p>\n","excerpt":"<p>什么是缓存？说白了，把图书馆比作主存，所有的书都放在图书馆中，而你书桌前的书就相当于缓存数据。CPU从Cache读数据，读到就送CPU，若读不到，还必须考虑先从主存中读取数据，然后再将数据写到Cache中，之后，将数据送往CPU；其次，还要考虑CPU修改Cache和存储器数据的情况。<br>","more":"<br>在本文中，CLK为系统时钟（用于计数器计数控制等操作），CLR为系统总清零信号（清区表存储器、计数器），WCT(tableWr)为写Cache区表存储器信号，AB31..AB0(Addr)为CPU访问内存的地址（地址总线），RD（为0，读）为Cache的读信号，MWr（为1，写）为Cache和主存的写信号，MRd（为0，读）为主存的读信号，CA17..CA0为Cache地址，MD31..MD0为主存与Cache的数据传送线，D31..D0为Cache和CPU的数据传送线，LA3…LA0为块内地址。</p>\n<h2 id=\"设计原理\"><a href=\"#设计原理\" class=\"headerlink\" title=\"设计原理\"></a><strong>设计原理</strong></h2><h3 id=\"直接相连映射\"><a href=\"#直接相连映射\" class=\"headerlink\" title=\"直接相连映射\"></a><strong>直接相连映射</strong></h3><p>直接相联映象方式简单而直接，硬件实现很简单，访问速度也比较快，但是块的冲突率比较高。其主要原则是：主存中一块只能映象到Cache的一个特定的块中。</p>\n<p>假设主存的块号为B，Cache的块号为b，则它们之间的映象关系可以表示为：</p>\n<p>b = B mod Cb</p>\n<p>其中，Cb是Cache的块容量。设主存的块容量为Mb，区容量为Me，则直接映象方法的关系如下图所示。把主存按Cache的大小分成区，一般主存容量为Cache容量的整数倍，主存每一个分区内的块数与Cache的总块数相等。直接映象方式只能把主存各个区中相对块号相同的那些块映象到Cache中同一块号的那个特定块中。例如，主存的块0只能映象到Cache的块0中，主存的块1只能映象到Cache的块1中，同样，主存区1中的块Cb（在区1中的相对块号是0），也只能映象到Cache的块0中。根据上面给出的地址映象规则，整个Cache地址与主存地址的低位部分是完全相同的。<br><img src=\"1.png\" alt=\"\"></p>\n<h3 id=\"地址变换过程\"><a href=\"#地址变换过程\" class=\"headerlink\" title=\"地址变换过程\"></a><strong>地址变换过程</strong></h3><p>主存地址分为三个部分：区号E、块号B和块内地址W；Cache地址分为两部分：块号b和块内地址w。主存地址中的块号B与Cache地址中的块号b是完全相同的。同样，主存地址中的块内地址W与Cache地址中的块内地址w也是完全相同的，主存地址比Cache地址长出来的部分称为区号E。<br><img src=\"2.png\" alt=\"\"></p>\n<p>在程序执行过程中，当要访问Cache时，为了实现主存块号到Cache块号的变换，需要有一个存放主存区号的小容量存储器（称为区表存储器），这个存储器的容量与Cache的块数相等，字长为主存地址中区号E的长度。</p>\n<p>从主存地址到Cache地址的变换过程中，首先用主存地址中的块号B去访问区表存储器（用块号B作为区表存储器的地址，访问它），然后，将读出来的区号与主存地址中的区号E进行比较，比较结果相等，则Cache命中，表示要访问的那一块已经装入到Cache中了，可以直接用块号及块内地址组成的缓冲地址到缓存Cache中取数，把读出来的数据送往CPU；如果比较结果不相等，表示要访问的那个块还没有装入到Cache中，这时，要用主存地址去访问主存储器，先把该地址所在的块读到Cache中，然后再读取Cache中该地址的数据送CPU。</p>\n<h3 id=\"Cache、CPU、存储器\"><a href=\"#Cache、CPU、存储器\" class=\"headerlink\" title=\"Cache、CPU、存储器\"></a><strong>Cache、CPU、存储器</strong></h3><p><img src=\"3.png\" alt=\"\"><br>32位主存地址为AB31..AB0（地址总线），RD（为0，读）为Cache的读信号，CMWr（为1，写）为Cache和主存的写信号，MRd（为0，读）为主存的读信号，D31..D0为CPU与Cache的数据传送线，MD31..MD0为存储器RAM与Cache的数据传送线。<br><img src=\"4.png\" alt=\"\"><br>如上图，区号E取14位，块号B为14位，块内地址为4位，这样Cache地址就是18位了，其中Cache块号b为14位，块内地址w为4位，所以Cache容量为256KB(2^18)个单元，块号b取14位，那么Cache分为16KB(2^14)块，块内地址w取4位，则每块为16个单元（每个单元一个字节）。</p>\n<p>实现Cache的存储体的方法是先实现一个8位的存储单元，然后用这个8位的存储单元来构成一个256Kb X 8位的Cache（地址18位）。</p>\n<p>再实现一个14位的存储单元，然后，用这个14位的存储单元来构成一个16k X 14位的区表存储器（地址14位与块号B相同），用来存放区号（14位）。在这个部分中，还要实现一个区号E比较器，也就是如果主存地址的区号E和区表存储器中按块号B为地址取出的相应单元中的区号E相等，则Cache命中，否则Cache失效。</p>\n<p>当Cache命中时，就将Cache存储体中相应单元的数据送往CPU，这个过程比较简单。当Cache失效时，就将主存中相应块中的数据读出写入Cache中，这样Cache控制器就要产生主存储器的读信号MRd（为0，读），由于每个Cache块占十六个单元，按32 位（4个字节）为访问存储器单位，那么需要连续访问4次主存，读取存储器中该块的数据，即16个字节，然后写入Cache相应块中，最后再修改区表存储器。至于访问主存的方法，要用到计数器。写数据时，如果Cache中有该地址数据，则修改，然后修改存储器该地址内容（MWr为1，写，为主存的写信号）；如果Cache中无该地址数据，就直接修改存储器该地址单元内容。读/写存储器时，要注意互锁情况。</p>\n<h2 id=\"设计方法\"><a href=\"#设计方法\" class=\"headerlink\" title=\"设计方法\"></a><strong>设计方法</strong></h2><h3 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a><strong>信号量</strong></h3><p>代码中包含多个信号量，下面先了解信号量的意义：<br>RAM中：</p>\n<ul>\n<li>counterFromCache：块内偏移地址</li>\n<li>signalToCache：在本设计中，当连续读取的相邻数据相同时没有办法触发cache中的写操作（将RAM读到的数据写入缓存），因此添加此变量实现触发</li>\n<li>MRd：值为0时，读主存</li>\n<li>CMWr：值为1，写主存；当缓存中命中时也写缓存</li>\n<li>DataWithCache：读取并传到缓存的数据</li>\n</ul>\n<p>MyCache中：</p>\n<ul>\n<li>RD：值为0时读缓存</li>\n<li>counterToRAM：同RAM中的counterFromCache</li>\n<li>signalFromRAM：同RAM中的signalToCache</li>\n<li>DataToCPU：传送数据到CPU</li>\n<li>cacheData：缓存储存</li>\n<li>blockTable：区表存储器</li>\n<li>DataWithRAM：同RAM中的DataWithCache</li>\n<li>Counter：初始化为0，当要读取数据时：若值为0，如果数据在缓存中，直接读取，结束，如果不在缓存中，更改counter值为1，counterToRAM设为0，在代码中counter值1会进入主存读取数据，读取四次即一整块后，再写区表存储器</li>\n</ul>\n<h3 id=\"注意要点\"><a href=\"#注意要点\" class=\"headerlink\" title=\"注意要点\"></a><strong>注意要点</strong></h3><p>counter变量用来计数，一开始设为2-bit变量。由于具体实现的原因，临界条件设为counter为4，结果会一直出错，事实上counter值为3的时候再加1又变为0了，所以把counter设为3-bit。</p>\n<p>MyCache模块根据RAM传进来的数据DataWithRAM的改变来将数据写到缓存中，但是连续读取的数据可能相同，于是添加signalFromRAM信号表明数据有读取，缓存一个在读相同数据时也要写入。</p>\n<h3 id=\"模块设计\"><a href=\"#模块设计\" class=\"headerlink\" title=\"模块设计\"></a><strong>模块设计</strong></h3><h4 id=\"cache主模块\"><a href=\"#cache主模块\" class=\"headerlink\" title=\"cache主模块\"></a><strong>cache主模块</strong></h4><p>将MyCache模块和RAM模块链接起来并实例MyCache和RAM。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> Cache(rd, cmwr, from_cpu, to_cpu, address, mrd, datawithram</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"keyword\">input</span> rd, cmwr;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] address, from_cpu;</div><div class=\"line\">\t <span class=\"keyword\">output</span> mrd;</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] to_cpu, datawithram;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">wire</span> rd, cmwr, mrd;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] signal;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] counter;</div><div class=\"line\">\t <span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] to_cpu, from_cpu, address, datawithram;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"comment\">// 实例化</span></div><div class=\"line\">    myCache MYCACHE(<span class=\"variable\">.RD</span>(rd), <span class=\"variable\">.CMWr</span>(cmwr), <span class=\"variable\">.MRd</span>(mrd), <span class=\"variable\">.DataToCPU</span>(to_cpu),</div><div class=\"line\">                <span class=\"variable\">.DataFromCPU</span>(from_cpu), <span class=\"variable\">.Address</span>(address), <span class=\"variable\">.DataWithRAM</span>(datawithram),</div><div class=\"line\">\t\t\t\t\t <span class=\"variable\">.counterToRAM</span>(counter), <span class=\"variable\">.signalFromRAM</span>(signal));</div><div class=\"line\">    RAM myram(<span class=\"variable\">.CMWr</span>(cmwr), <span class=\"variable\">.MRd</span>(mrd), <span class=\"variable\">.counterFromCache</span>(counter), <span class=\"variable\">.Address</span>(address),</div><div class=\"line\">                <span class=\"variable\">.DataWithCache</span>(datawithram), <span class=\"variable\">.DataFromCPU</span>(from_cpu), <span class=\"variable\">.signalToCache</span>(signal));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"RAM模块\"><a href=\"#RAM模块\" class=\"headerlink\" title=\"RAM模块\"></a><strong>RAM模块</strong></h4><p>RAM模块主要是申明内存空间还有存储数据或取出数据：当MRd信号值为0时，需要读取内存中的某位置的数据到ram_data中，然后再写入cache中；而不管什么时候，只要CMWr信号为1，RAM都需要写入CPU送过来的数据。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> RAM(CMWr, MRd, counterFromCache, Address, DataWithCache, DataFromCPU, signalToCache</div><div class=\"line\">    );</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">input</span> CMWr, MRd;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] counterFromCache;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] Address, DataFromCPU;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] signalToCache;</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataWithCache;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] register [<span class=\"number\">0</span>:<span class=\"number\">20'hfffff</span>];  <span class=\"comment\">// 主存中的存数据数组</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] signalToCache;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataWithCache, wordNum;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">integer</span> i;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t   signalToCache = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">20'hfffff</span>; i= i+<span class=\"number\">1</span>)</div><div class=\"line\">\t\t    register[i] = <span class=\"number\">8'b00001111</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040000</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040001</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040002</span>] = <span class=\"number\">2</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040003</span>] = <span class=\"number\">3</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040004</span>] = <span class=\"number\">4</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040005</span>] = <span class=\"number\">5</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040006</span>] = <span class=\"number\">6</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040007</span>] = <span class=\"number\">7</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040008</span>] = <span class=\"number\">8</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h00040009</span>] = <span class=\"number\">9</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000A</span>] = <span class=\"number\">10</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000B</span>] = <span class=\"number\">11</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000C</span>] = <span class=\"number\">12</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000D</span>] = <span class=\"number\">13</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000E</span>] = <span class=\"number\">14</span>;</div><div class=\"line\">\t\tregister[<span class=\"number\">32'h0004000F</span>] = <span class=\"number\">15</span>;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">always</span> @(CMWr <span class=\"keyword\">or</span> MRd <span class=\"keyword\">or</span> counterFromCache) <span class=\"keyword\">begin</span></div><div class=\"line\">\t     <span class=\"keyword\">if</span> (MRd == <span class=\"number\">0</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 读主存</span></div><div class=\"line\">\t\t      wordNum = Address[<span class=\"number\">31</span>:<span class=\"number\">4</span>]*<span class=\"number\">16</span>+counterFromCache*<span class=\"number\">4</span>;</div><div class=\"line\">\t\t      DataWithCache[<span class=\"number\">31</span>:<span class=\"number\">24</span>] = register[wordNum];</div><div class=\"line\">\t\t\t\tDataWithCache[<span class=\"number\">23</span>:<span class=\"number\">16</span>] = register[wordNum+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\tDataWithCache[<span class=\"number\">15</span>:<span class=\"number\">8</span>] = register[wordNum+<span class=\"number\">2</span>];</div><div class=\"line\">\t\t\t\tDataWithCache[<span class=\"number\">7</span>:<span class=\"number\">0</span>] = register[wordNum+<span class=\"number\">3</span>];</div><div class=\"line\">\t\t\t\tsignalToCache = signalToCache+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(CMWr == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 写主存</span></div><div class=\"line\">\t\t\t\tregister[Address] = DataFromCPU[<span class=\"number\">31</span>:<span class=\"number\">24</span>];</div><div class=\"line\">\t\t\t\tregister[Address+<span class=\"number\">1</span>] = DataFromCPU[<span class=\"number\">23</span>:<span class=\"number\">16</span>];</div><div class=\"line\">\t\t\t\tregister[Address+<span class=\"number\">2</span>] = DataFromCPU[<span class=\"number\">15</span>:<span class=\"number\">8</span>];</div><div class=\"line\">\t\t\t\tregister[Address+<span class=\"number\">3</span>] = DataFromCPU[<span class=\"number\">7</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">\t  <span class=\"keyword\">end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"MyCache模块\"><a href=\"#MyCache模块\" class=\"headerlink\" title=\"MyCache模块\"></a><strong>MyCache模块</strong></h4><p>读取数据时，若数据在缓存中则直接读取，结束；如果不在，则更改counter的值然后进入主存读取，连续读取一整块后写区表存储器并将数据送到CPU；<br>写数据时若命中，主存需要写，缓存也需要写。<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> myCache(RD, CMWr, MRd, DataToCPU, DataFromCPU, Address, DataWithRAM, counterToRAM, signalFromRAM</div><div class=\"line\">    );</div><div class=\"line\">\t <span class=\"keyword\">input</span> RD, CMWr;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">1</span>:<span class=\"number\">0</span>] signalFromRAM;</div><div class=\"line\">\t <span class=\"keyword\">input</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataFromCPU, DataWithRAM, Address;</div><div class=\"line\">\t <span class=\"keyword\">output</span> MRd;</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] counterToRAM;</div><div class=\"line\">\t <span class=\"keyword\">output</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] DataToCPU;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">7</span>:<span class=\"number\">0</span>] cacheData [<span class=\"number\">0</span>:<span class=\"number\">18'h3ffff</span>];   <span class=\"comment\">// 缓存中存数据的数组</span></div><div class=\"line\">    <span class=\"keyword\">reg</span> [<span class=\"number\">14</span>:<span class=\"number\">0</span>] blockTable [<span class=\"number\">0</span>:<span class=\"number\">14'h3fff</span>];  <span class=\"comment\">// 区表存储器</span></div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">reg</span> MRd;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">2</span>:<span class=\"number\">0</span>] counter, counterToRAM;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">13</span>:<span class=\"number\">0</span>] blockNum;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">13</span>:<span class=\"number\">0</span>] partNum;</div><div class=\"line\">\t <span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] cacheAddress, DataToCPU;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">integer</span> i;</div><div class=\"line\">\t </div><div class=\"line\">\t <span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span>  <span class=\"comment\">// 初始化区表存储器</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">14'h3fff</span>; i=i+<span class=\"number\">1</span>)</div><div class=\"line\">\t\t      blockTable[i][<span class=\"number\">14</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t  MRd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t  counter = <span class=\"number\">0</span>;</div><div class=\"line\">\t <span class=\"keyword\">end</span></div><div class=\"line\"> </div><div class=\"line\">     <span class=\"keyword\">always</span> @(RD <span class=\"keyword\">or</span> CMWr  <span class=\"keyword\">or</span> Address <span class=\"keyword\">or</span> DataFromCPU <span class=\"keyword\">or</span> DataWithRAM <span class=\"keyword\">or</span> signalFromRAM) <span class=\"keyword\">begin</span></div><div class=\"line\">\t      blockNum = Address[<span class=\"number\">17</span>:<span class=\"number\">4</span>];</div><div class=\"line\">\t\t\tpartNum = Address[<span class=\"number\">31</span>:<span class=\"number\">18</span>];</div><div class=\"line\">\t      <span class=\"keyword\">if</span> (RD == <span class=\"number\">0</span> &amp;&amp; counter == <span class=\"number\">0</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 读数据</span></div><div class=\"line\">\t\t\t        <span class=\"keyword\">if</span> (partNum == blockTable[blockNum][<span class=\"number\">13</span>:<span class=\"number\">0</span>] &amp;&amp; blockTable[blockNum][<span class=\"number\">14</span>] == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 数据在缓存中</span></div><div class=\"line\">\t\t\t\t\t      cacheAddress = <span class=\"number\">16</span>*blockNum+Address[<span class=\"number\">3</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t\t      DataToCPU[<span class=\"number\">31</span>:<span class=\"number\">24</span>] = cacheData[cacheAddress];</div><div class=\"line\">\t\t\t\t\t\t\tDataToCPU[<span class=\"number\">23</span>:<span class=\"number\">16</span>] = cacheData[cacheAddress+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t\t\t\tDataToCPU[<span class=\"number\">15</span>:<span class=\"number\">8</span>] = cacheData[cacheAddress+<span class=\"number\">2</span>];</div><div class=\"line\">\t\t\t\t\t\t\tDataToCPU[<span class=\"number\">7</span>:<span class=\"number\">0</span>] = cacheData[cacheAddress+<span class=\"number\">3</span>];</div><div class=\"line\">\t\t\t        <span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span>   <span class=\"comment\">// 数据不在缓存中，更改counter进入主存读出来</span></div><div class=\"line\">\t\t\t\t\t      MRd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t\t\tcounter = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t               counterToRAM = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t  <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(RD == <span class=\"number\">0</span> &amp;&amp; counter &gt;= <span class=\"number\">1</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 读数据，在主存中，需要读一整块，四次</span></div><div class=\"line\">\t\t\t    cacheAddress = <span class=\"number\">16</span>*blockNum+<span class=\"number\">4</span>*(counter-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t cacheData[cacheAddress] = DataWithRAM[<span class=\"number\">31</span>:<span class=\"number\">24</span>];</div><div class=\"line\">\t\t\t\t cacheData[cacheAddress+<span class=\"number\">1</span>] = DataWithRAM[<span class=\"number\">23</span>:<span class=\"number\">16</span>];</div><div class=\"line\">\t\t\t\t cacheData[cacheAddress+<span class=\"number\">2</span>] = DataWithRAM[<span class=\"number\">15</span>:<span class=\"number\">8</span>];</div><div class=\"line\">\t\t\t\t cacheData[cacheAddress+<span class=\"number\">3</span>] = DataWithRAM[<span class=\"number\">7</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t    <span class=\"keyword\">if</span> (counter == <span class=\"number\">4</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 读取完毕，写区表存储器并将数据传到CPU</span></div><div class=\"line\">\t\t\t\t     MRd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t  cacheAddress = <span class=\"number\">16</span>*blockNum+Address[<span class=\"number\">3</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t\t  DataToCPU[<span class=\"number\">31</span>:<span class=\"number\">24</span>] = cacheData[cacheAddress];</div><div class=\"line\">\t\t\t\t\t  DataToCPU[<span class=\"number\">23</span>:<span class=\"number\">16</span>] = cacheData[cacheAddress+<span class=\"number\">1</span>];</div><div class=\"line\">\t\t\t\t\t  DataToCPU[<span class=\"number\">15</span>:<span class=\"number\">8</span>] = cacheData[cacheAddress+<span class=\"number\">2</span>];</div><div class=\"line\">\t\t\t\t\t  DataToCPU[<span class=\"number\">7</span>:<span class=\"number\">0</span>] = cacheData[cacheAddress+<span class=\"number\">3</span>];</div><div class=\"line\">\t\t\t\t\t  blockTable[blockNum][<span class=\"number\">13</span>:<span class=\"number\">0</span>] = partNum;</div><div class=\"line\">\t\t\t\t\t  blockTable[blockNum][<span class=\"number\">14</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t  counter = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t <span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span>   <span class=\"comment\">// 每10ns读一次</span></div><div class=\"line\">\t\t\t\t\t  #<span class=\"number\">10</span></div><div class=\"line\">\t\t\t\t\t  counter = counter+<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t  counterToRAM = counter-<span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">end</span> <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(CMWr == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span>  <span class=\"comment\">// 需要写数据，区号匹配，将CPU中数据写入缓存</span></div><div class=\"line\">\t\t\t    <span class=\"keyword\">if</span> (partNum == blockTable[blockNum][<span class=\"number\">13</span>:<span class=\"number\">0</span>] &amp;&amp; blockTable[blockNum][<span class=\"number\">14</span>] == <span class=\"number\">1</span>) <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t\t\t     cacheAddress = <span class=\"number\">16</span>*blockNum+Address[<span class=\"number\">3</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t     cacheData[cacheAddress] = DataFromCPU[<span class=\"number\">31</span>:<span class=\"number\">24</span>];</div><div class=\"line\">\t\t\t\t\t  cacheData[cacheAddress+<span class=\"number\">1</span>] = DataFromCPU[<span class=\"number\">23</span>:<span class=\"number\">16</span>];</div><div class=\"line\">\t\t\t\t\t  cacheData[cacheAddress+<span class=\"number\">2</span>] = DataFromCPU[<span class=\"number\">15</span>:<span class=\"number\">8</span>];</div><div class=\"line\">\t\t\t\t\t  cacheData[cacheAddress+<span class=\"number\">3</span>] = DataFromCPU[<span class=\"number\">7</span>:<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t <span class=\"keyword\">end</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">end</span></div><div class=\"line\">\t  <span class=\"keyword\">end</span></div><div class=\"line\">\t </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"测试文件\"><a href=\"#测试文件\" class=\"headerlink\" title=\"测试文件\"></a><strong>测试文件</strong></h3><h4 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a><strong>测试代码</strong></h4><p>一下文件方便测试，代码不唯一：<br><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">module</span> test_tf;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Inputs</span></div><div class=\"line\">\t<span class=\"keyword\">reg</span> rd;</div><div class=\"line\">\t<span class=\"keyword\">reg</span> cmwr;</div><div class=\"line\">\t<span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] from_cpu;</div><div class=\"line\">\t<span class=\"keyword\">reg</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] address;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Outputs</span></div><div class=\"line\">\t<span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] to_cpu;</div><div class=\"line\">\t<span class=\"keyword\">wire</span> mrd;</div><div class=\"line\">\t<span class=\"keyword\">wire</span> [<span class=\"number\">31</span>:<span class=\"number\">0</span>] datawithram;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Instantiate the Unit Under Test (UUT)</span></div><div class=\"line\">\tCache uut (</div><div class=\"line\">\t\t<span class=\"variable\">.rd</span>(rd), </div><div class=\"line\">\t\t<span class=\"variable\">.cmwr</span>(cmwr), </div><div class=\"line\">\t\t<span class=\"variable\">.from_cpu</span>(from_cpu), </div><div class=\"line\">\t\t<span class=\"variable\">.to_cpu</span>(to_cpu), </div><div class=\"line\">\t\t<span class=\"variable\">.address</span>(address), </div><div class=\"line\">\t\t<span class=\"variable\">.mrd</span>(mrd), </div><div class=\"line\">\t\t<span class=\"variable\">.datawithram</span>(datawithram)</div><div class=\"line\">\t);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">initial</span> <span class=\"keyword\">begin</span></div><div class=\"line\">\t\t<span class=\"comment\">// Initialize Inputs</span></div><div class=\"line\">\t\trd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tfrom_cpu = <span class=\"number\">0</span>;</div><div class=\"line\">\t\taddress = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"comment\">// Wait 100 ns for global reset to finish</span></div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号0  数据不在缓存中，从主存读</span></div><div class=\"line\">      address = <span class=\"number\">32'h00000002</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">      #<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号1  数据不在缓存中，从主存读，初始化为不同值</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00040002</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号1  数据在缓存中，读</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00040003</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号1  数据在缓存中，写缓存和主存</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00040007</span>;</div><div class=\"line\">\t\tfrom_cpu = <span class=\"number\">32'haabbccdd</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号1  从偏移量5开始检测</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00040005</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号0  数据不在缓存中命中，只改主存</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00000002</span>;</div><div class=\"line\">\t\tfrom_cpu = <span class=\"number\">32'h11223344</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t#<span class=\"number\">100</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">// 块0，区号0   先读到缓存再送到CPU，检测是否正确</span></div><div class=\"line\">\t\taddress = <span class=\"number\">32'h00000002</span>;</div><div class=\"line\">\t\trd = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tcmwr = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">end</span></div><div class=\"line\">      </div><div class=\"line\"><span class=\"keyword\">endmodule</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"测试过程分析\"><a href=\"#测试过程分析\" class=\"headerlink\" title=\"测试过程分析\"></a><strong>测试过程分析</strong></h4><p>由于测试过程复杂而且大同小异，这里不一一说明，主要是看波形图和变量值是否符合预期。</p>\n<h5 id=\"测试1\"><a href=\"#测试1\" class=\"headerlink\" title=\"测试1\"></a><strong>测试1</strong></h5><p><img src=\"1.1.png\" alt=\"\"></p>\n<p><img src=\"1.2.png\" alt=\"\"></p>\n<p>可以看到波形图中在100ns之后mdr有一小段时间变为0，这就是从主存拿数据的阶段</p>\n<h5 id=\"测试2\"><a href=\"#测试2\" class=\"headerlink\" title=\"测试2\"></a><strong>测试2</strong></h5><p><img src=\"2.1.png\" alt=\"\"></p>\n<p><img src=\"2.2.png\" alt=\"\"></p>\n<p>读取的地址在内存中每个字节的初值不同，所以可以观察到datawithram值有改变</p>\n<h5 id=\"测试3\"><a href=\"#测试3\" class=\"headerlink\" title=\"测试3\"></a><strong>测试3</strong></h5><p><img src=\"3.1.png\" alt=\"\"></p>\n<p><img src=\"3.2.png\" alt=\"\"></p>"},{"title":"进程创建及共享内存","toc":true,"date":"2016-07-19T09:44:05.000Z","_content":"操作系统（Operating System）分配资源的基本单位是进程，而线程是指令执行额基本单位。一个进程可以包含多个子进程，亦可以包含多个线程。下面简单了解一下关于进程的创建以及进程间的共享内存。\n<!--more-->\n\n## **进程创建**\n\n系统调用fork()在不同进程中会返回不同的值：在子进程中返回值为0；父进程中返回值为子进程的ID。所有进程都会执行fork()之后的指令，相应的父进程中的所有数据会复制到子进程中。看看例子：\n\n``` cpp\n#include <stdio.h>  \n#include <sys/types.h>  \n#include <unistd.h>\n\nint main() {\n    int pid1 = fork();\n    printf(\"**1**%d**%d**%d\\n\", getpid(), getppid(), pid1);\n    int pid2 = fork();\n    printf(\"**2**%d**%d**%d\\n\", getpid(), getppid(), pid2);\n    if (pid1 == 0) {\n        int pid3 = fork();\n        printf(\"**3**%d**%d**%d\\n\", getpid(), getppid(), pid3);\n          }\n    else printf(\"**4**%d**%d\\n\", getpid(), getppid());\n    return 0;\n}\n```\n![](1.png)\n\n下面解释一下运行结果：\n如上图所示，父进程ID2774，子进程有2775,2776, 2775的子进程有2777,2778,2777的子进程有2779。\n\n首先，父进程执行所有代码，则输出\\*\\*1\\*\\*2774\\*\\*2192\\*\\*2775 \\*\\*2\\*\\*2774\\*\\*2192\\*\\*2776  \\*\\*4\\*\\*2774\\*\\*2192，同时创建子进程2775,2776。\n\n子进程2775执行第七行到最后的代码，子进程2776执行第九行到最后的代码，两个子进程同步执行，先后顺序不一定。2775输出\\*\\*1\\*\\*2775\\*\\*2774\\*\\*0，接着在第八行创建子进程2777，输出\\*\\*2\\*\\*2775\\*\\*1\\*\\*2777，2777执行第九行到最后的代码。到第九行，2776输出\\*\\*2\\*\\*2776\\*\\*2774\\*\\*0，到第10行，2775需要进入if语句，此时2776不需要创建子进程，执行较快，输出\\*\\*4\\*\\*2776\\*\\*2774。2775进入if后，创建新进程2778，输出\\*\\*3\\*\\*2775\\*\\*1\\*\\*2778，2778执行第11行到最后的代码，到此，父进程2774的两个子进程2775,2776执行完毕。\n\n接着2775的子进程2777,2778同步执行，由于pid1为0，两个都执行if语句，2778输出\\*\\*3\\*\\*2778\\*\\*2775\\*\\*0，2777进入if创建2779子进程，2779执行12行到最后的代码，所以会输出\\*\\*2\\*\\*2777\\*\\*2775\\*\\*0，创建2779后输出\\*\\*3\\*\\*2777\\*\\*1\\*\\*2779  \\*\\*3\\*\\*2779\\*\\*2777\\*\\*0。\n\n## **共享内存**\n\n编写代码创建子进程，使用fork(), 产生的子程序生成对应的裴波那契数, 利用进程间共享内存的方法, 将每个子进程的数字添加到共享内存中, 最后, 在父进程中将数列输出。\n\n### **思路**\n\n注意父进程与子进程的同步问题，链式创建子进程，而且每个父进程都必须wait()子进程完成才能继续执行，每个进程存有整型fib0, fib1, result,分别代表前两个裴波纳契数和当前的裴波那契数,每个进程将result存储到共享内存中。最后父进程输出时，输出完毕，父进程删除共享空间。\n\n### **代码**\n\n``` cpp\n#include<stdlib.h>\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n#include<errno.h>\n#include<unistd.h>\n#include<sys/stat.h>\n#include<sys/types.h>\n#include<sys/ipc.h>\n#include<sys/shm.h>\n#include<sys/wait.h>\n\nusing namespace std;\n\n#define PERM S_IRUSR|S_IWUSR\n#define MAX_SEQUENCE 10\n\ntypedef struct {\n    long fib[MAX_SEQUENCE];\n    int size;\n} shared_data;\n\n\nint main(int argc, char* argv[]) {\n    key_t shmid;\n    pid_t pid;\n    bool parent = true;\n    int n;\n    shared_data* block;\n    if (argc != 2) {\n        cout << \"error: the number of argements must be 1\" << endl;\n        exit(1);\n    }\n    if ((shmid = shmget(IPC_PRIVATE, sizeof(shared_data), PERM)) == -1) {\n        cout << \"Create shared memory error\" << endl;\n    }\n    sscanf(argv[1], \"%d\", &n);\n    int fib0 = 0, fib1 = 1, result = 1;\n    block = (shared_data*)shmat(shmid, 0, 0);\n    block->size = 0;\n    \n    if (n > 0) block->fib[block->size++] = 0;\n    if (n > 1) block->fib[block->size++] = 1;\n    if (n > 2) {\n        block->fib[block->size++] = 1;\n        n -= 3;\n        while (n > 0) {\n            n--;\n            pid = fork();\n            if (pid == 0) {\n                parent = false;\n                fib0 = fib1;\n                fib1 = result;\n                result = fib0 + fib1;\n                block->fib[block->size++] = result;\n            } else break;       \n        }\n    }\n    if (pid != 0) {\n        wait(0);\n    }\n    if (parent) {\n        for (int i = 0; i < block->size; i++)\n            cout << block->fib[i] << endl;\n    }\n    shmdt(block);\n    if (parent)\n        shmctl(shmid, IPC_RMID, NULL);\n    return 0;\n}\n```\n### **结果**\n\n![](2.png)","source":"_posts/进程.md","raw":"---\ntitle: 进程创建及共享内存\ntoc: true\ndate: 2016-07-19 17:44:05\ntags:\n- C/C++\n- procedure\ncategories:\n- Operating System\n- C/C++\n---\n操作系统（Operating System）分配资源的基本单位是进程，而线程是指令执行额基本单位。一个进程可以包含多个子进程，亦可以包含多个线程。下面简单了解一下关于进程的创建以及进程间的共享内存。\n<!--more-->\n\n## **进程创建**\n\n系统调用fork()在不同进程中会返回不同的值：在子进程中返回值为0；父进程中返回值为子进程的ID。所有进程都会执行fork()之后的指令，相应的父进程中的所有数据会复制到子进程中。看看例子：\n\n``` cpp\n#include <stdio.h>  \n#include <sys/types.h>  \n#include <unistd.h>\n\nint main() {\n    int pid1 = fork();\n    printf(\"**1**%d**%d**%d\\n\", getpid(), getppid(), pid1);\n    int pid2 = fork();\n    printf(\"**2**%d**%d**%d\\n\", getpid(), getppid(), pid2);\n    if (pid1 == 0) {\n        int pid3 = fork();\n        printf(\"**3**%d**%d**%d\\n\", getpid(), getppid(), pid3);\n          }\n    else printf(\"**4**%d**%d\\n\", getpid(), getppid());\n    return 0;\n}\n```\n![](1.png)\n\n下面解释一下运行结果：\n如上图所示，父进程ID2774，子进程有2775,2776, 2775的子进程有2777,2778,2777的子进程有2779。\n\n首先，父进程执行所有代码，则输出\\*\\*1\\*\\*2774\\*\\*2192\\*\\*2775 \\*\\*2\\*\\*2774\\*\\*2192\\*\\*2776  \\*\\*4\\*\\*2774\\*\\*2192，同时创建子进程2775,2776。\n\n子进程2775执行第七行到最后的代码，子进程2776执行第九行到最后的代码，两个子进程同步执行，先后顺序不一定。2775输出\\*\\*1\\*\\*2775\\*\\*2774\\*\\*0，接着在第八行创建子进程2777，输出\\*\\*2\\*\\*2775\\*\\*1\\*\\*2777，2777执行第九行到最后的代码。到第九行，2776输出\\*\\*2\\*\\*2776\\*\\*2774\\*\\*0，到第10行，2775需要进入if语句，此时2776不需要创建子进程，执行较快，输出\\*\\*4\\*\\*2776\\*\\*2774。2775进入if后，创建新进程2778，输出\\*\\*3\\*\\*2775\\*\\*1\\*\\*2778，2778执行第11行到最后的代码，到此，父进程2774的两个子进程2775,2776执行完毕。\n\n接着2775的子进程2777,2778同步执行，由于pid1为0，两个都执行if语句，2778输出\\*\\*3\\*\\*2778\\*\\*2775\\*\\*0，2777进入if创建2779子进程，2779执行12行到最后的代码，所以会输出\\*\\*2\\*\\*2777\\*\\*2775\\*\\*0，创建2779后输出\\*\\*3\\*\\*2777\\*\\*1\\*\\*2779  \\*\\*3\\*\\*2779\\*\\*2777\\*\\*0。\n\n## **共享内存**\n\n编写代码创建子进程，使用fork(), 产生的子程序生成对应的裴波那契数, 利用进程间共享内存的方法, 将每个子进程的数字添加到共享内存中, 最后, 在父进程中将数列输出。\n\n### **思路**\n\n注意父进程与子进程的同步问题，链式创建子进程，而且每个父进程都必须wait()子进程完成才能继续执行，每个进程存有整型fib0, fib1, result,分别代表前两个裴波纳契数和当前的裴波那契数,每个进程将result存储到共享内存中。最后父进程输出时，输出完毕，父进程删除共享空间。\n\n### **代码**\n\n``` cpp\n#include<stdlib.h>\n#include<iostream>\n#include<stdio.h>\n#include<string.h>\n#include<errno.h>\n#include<unistd.h>\n#include<sys/stat.h>\n#include<sys/types.h>\n#include<sys/ipc.h>\n#include<sys/shm.h>\n#include<sys/wait.h>\n\nusing namespace std;\n\n#define PERM S_IRUSR|S_IWUSR\n#define MAX_SEQUENCE 10\n\ntypedef struct {\n    long fib[MAX_SEQUENCE];\n    int size;\n} shared_data;\n\n\nint main(int argc, char* argv[]) {\n    key_t shmid;\n    pid_t pid;\n    bool parent = true;\n    int n;\n    shared_data* block;\n    if (argc != 2) {\n        cout << \"error: the number of argements must be 1\" << endl;\n        exit(1);\n    }\n    if ((shmid = shmget(IPC_PRIVATE, sizeof(shared_data), PERM)) == -1) {\n        cout << \"Create shared memory error\" << endl;\n    }\n    sscanf(argv[1], \"%d\", &n);\n    int fib0 = 0, fib1 = 1, result = 1;\n    block = (shared_data*)shmat(shmid, 0, 0);\n    block->size = 0;\n    \n    if (n > 0) block->fib[block->size++] = 0;\n    if (n > 1) block->fib[block->size++] = 1;\n    if (n > 2) {\n        block->fib[block->size++] = 1;\n        n -= 3;\n        while (n > 0) {\n            n--;\n            pid = fork();\n            if (pid == 0) {\n                parent = false;\n                fib0 = fib1;\n                fib1 = result;\n                result = fib0 + fib1;\n                block->fib[block->size++] = result;\n            } else break;       \n        }\n    }\n    if (pid != 0) {\n        wait(0);\n    }\n    if (parent) {\n        for (int i = 0; i < block->size; i++)\n            cout << block->fib[i] << endl;\n    }\n    shmdt(block);\n    if (parent)\n        shmctl(shmid, IPC_RMID, NULL);\n    return 0;\n}\n```\n### **结果**\n\n![](2.png)","slug":"进程","published":1,"updated":"2016-07-21T09:42:08.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzsq0024gobka0ctt2ls","content":"<p>操作系统（Operating System）分配资源的基本单位是进程，而线程是指令执行额基本单位。一个进程可以包含多个子进程，亦可以包含多个线程。下面简单了解一下关于进程的创建以及进程间的共享内存。<br><a id=\"more\"></a></p>\n<h2 id=\"进程创建\"><a href=\"#进程创建\" class=\"headerlink\" title=\"进程创建\"></a><strong>进程创建</strong></h2><p>系统调用fork()在不同进程中会返回不同的值：在子进程中返回值为0；父进程中返回值为子进程的ID。所有进程都会执行fork()之后的指令，相应的父进程中的所有数据会复制到子进程中。看看例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> pid1 = fork();</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"**1**%d**%d**%d\\n\"</span>, getpid(), getppid(), pid1);</div><div class=\"line\">    <span class=\"keyword\">int</span> pid2 = fork();</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"**2**%d**%d**%d\\n\"</span>, getpid(), getppid(), pid2);</div><div class=\"line\">    <span class=\"keyword\">if</span> (pid1 == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pid3 = fork();</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"**3**%d**%d**%d\\n\"</span>, getpid(), getppid(), pid3);</div><div class=\"line\">          &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"**4**%d**%d\\n\"</span>, getpid(), getppid());</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>下面解释一下运行结果：<br>如上图所示，父进程ID2774，子进程有2775,2776, 2775的子进程有2777,2778,2777的子进程有2779。</p>\n<p>首先，父进程执行所有代码，则输出**1**2774**2192**2775 **2**2774**2192**2776  **4**2774**2192，同时创建子进程2775,2776。</p>\n<p>子进程2775执行第七行到最后的代码，子进程2776执行第九行到最后的代码，两个子进程同步执行，先后顺序不一定。2775输出**1**2775**2774**0，接着在第八行创建子进程2777，输出**2**2775**1**2777，2777执行第九行到最后的代码。到第九行，2776输出**2**2776**2774**0，到第10行，2775需要进入if语句，此时2776不需要创建子进程，执行较快，输出**4**2776**2774。2775进入if后，创建新进程2778，输出**3**2775**1**2778，2778执行第11行到最后的代码，到此，父进程2774的两个子进程2775,2776执行完毕。</p>\n<p>接着2775的子进程2777,2778同步执行，由于pid1为0，两个都执行if语句，2778输出**3**2778**2775**0，2777进入if创建2779子进程，2779执行12行到最后的代码，所以会输出**2**2777**2775**0，创建2779后输出**3**2777**1**2779  **3**2779**2777**0。</p>\n<h2 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a><strong>共享内存</strong></h2><p>编写代码创建子进程，使用fork(), 产生的子程序生成对应的裴波那契数, 利用进程间共享内存的方法, 将每个子进程的数字添加到共享内存中, 最后, 在父进程中将数列输出。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a><strong>思路</strong></h3><p>注意父进程与子进程的同步问题，链式创建子进程，而且每个父进程都必须wait()子进程完成才能继续执行，每个进程存有整型fib0, fib1, result,分别代表前两个裴波纳契数和当前的裴波那契数,每个进程将result存储到共享内存中。最后父进程输出时，输出完毕，父进程删除共享空间。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;errno.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/ipc.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PERM S_IRUSR|S_IWUSR</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_SEQUENCE 10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">long</span> fib[MAX_SEQUENCE];</div><div class=\"line\">    <span class=\"keyword\">int</span> size;</div><div class=\"line\">&#125; shared_data;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">key_t</span> shmid;</div><div class=\"line\">    <span class=\"keyword\">pid_t</span> pid;</div><div class=\"line\">    <span class=\"keyword\">bool</span> parent = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> n;</div><div class=\"line\">    shared_data* block;</div><div class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"error: the number of argements must be 1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((shmid = shmget(IPC_PRIVATE, <span class=\"keyword\">sizeof</span>(shared_data), PERM)) == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Create shared memory error\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">sscanf</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">    <span class=\"keyword\">int</span> fib0 = <span class=\"number\">0</span>, fib1 = <span class=\"number\">1</span>, result = <span class=\"number\">1</span>;</div><div class=\"line\">    block = (shared_data*)shmat(shmid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    block-&gt;size = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) block-&gt;fib[block-&gt;size++] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>) block-&gt;fib[block-&gt;size++] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        block-&gt;fib[block-&gt;size++] = <span class=\"number\">1</span>;</div><div class=\"line\">        n -= <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            n--;</div><div class=\"line\">            pid = fork();</div><div class=\"line\">            <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                parent = <span class=\"literal\">false</span>;</div><div class=\"line\">                fib0 = fib1;</div><div class=\"line\">                fib1 = result;</div><div class=\"line\">                result = fib0 + fib1;</div><div class=\"line\">                block-&gt;fib[block-&gt;size++] = result;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;       </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pid != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        wait(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; block-&gt;size; i++)</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; block-&gt;fib[i] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    shmdt(block);</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent)</div><div class=\"line\">        shmctl(shmid, IPC_RMID, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a><strong>结果</strong></h3><p><img src=\"2.png\" alt=\"\"></p>\n","excerpt":"<p>操作系统（Operating System）分配资源的基本单位是进程，而线程是指令执行额基本单位。一个进程可以包含多个子进程，亦可以包含多个线程。下面简单了解一下关于进程的创建以及进程间的共享内存。<br>","more":"</p>\n<h2 id=\"进程创建\"><a href=\"#进程创建\" class=\"headerlink\" title=\"进程创建\"></a><strong>进程创建</strong></h2><p>系统调用fork()在不同进程中会返回不同的值：在子进程中返回值为0；父进程中返回值为子进程的ID。所有进程都会执行fork()之后的指令，相应的父进程中的所有数据会复制到子进程中。看看例子：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span>  </span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> pid1 = fork();</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"**1**%d**%d**%d\\n\"</span>, getpid(), getppid(), pid1);</div><div class=\"line\">    <span class=\"keyword\">int</span> pid2 = fork();</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"**2**%d**%d**%d\\n\"</span>, getpid(), getppid(), pid2);</div><div class=\"line\">    <span class=\"keyword\">if</span> (pid1 == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> pid3 = fork();</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"**3**%d**%d**%d\\n\"</span>, getpid(), getppid(), pid3);</div><div class=\"line\">          &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"**4**%d**%d\\n\"</span>, getpid(), getppid());</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"1.png\" alt=\"\"></p>\n<p>下面解释一下运行结果：<br>如上图所示，父进程ID2774，子进程有2775,2776, 2775的子进程有2777,2778,2777的子进程有2779。</p>\n<p>首先，父进程执行所有代码，则输出**1**2774**2192**2775 **2**2774**2192**2776  **4**2774**2192，同时创建子进程2775,2776。</p>\n<p>子进程2775执行第七行到最后的代码，子进程2776执行第九行到最后的代码，两个子进程同步执行，先后顺序不一定。2775输出**1**2775**2774**0，接着在第八行创建子进程2777，输出**2**2775**1**2777，2777执行第九行到最后的代码。到第九行，2776输出**2**2776**2774**0，到第10行，2775需要进入if语句，此时2776不需要创建子进程，执行较快，输出**4**2776**2774。2775进入if后，创建新进程2778，输出**3**2775**1**2778，2778执行第11行到最后的代码，到此，父进程2774的两个子进程2775,2776执行完毕。</p>\n<p>接着2775的子进程2777,2778同步执行，由于pid1为0，两个都执行if语句，2778输出**3**2778**2775**0，2777进入if创建2779子进程，2779执行12行到最后的代码，所以会输出**2**2777**2775**0，创建2779后输出**3**2777**1**2779  **3**2779**2777**0。</p>\n<h2 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a><strong>共享内存</strong></h2><p>编写代码创建子进程，使用fork(), 产生的子程序生成对应的裴波那契数, 利用进程间共享内存的方法, 将每个子进程的数字添加到共享内存中, 最后, 在父进程中将数列输出。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a><strong>思路</strong></h3><p>注意父进程与子进程的同步问题，链式创建子进程，而且每个父进程都必须wait()子进程完成才能继续执行，每个进程存有整型fib0, fib1, result,分别代表前两个裴波纳契数和当前的裴波那契数,每个进程将result存储到共享内存中。最后父进程输出时，输出完毕，父进程删除共享空间。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a><strong>代码</strong></h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;errno.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/ipc.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/shm.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PERM S_IRUSR|S_IWUSR</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_SEQUENCE 10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">long</span> fib[MAX_SEQUENCE];</div><div class=\"line\">    <span class=\"keyword\">int</span> size;</div><div class=\"line\">&#125; shared_data;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">key_t</span> shmid;</div><div class=\"line\">    <span class=\"keyword\">pid_t</span> pid;</div><div class=\"line\">    <span class=\"keyword\">bool</span> parent = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> n;</div><div class=\"line\">    shared_data* block;</div><div class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"error: the number of argements must be 1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((shmid = shmget(IPC_PRIVATE, <span class=\"keyword\">sizeof</span>(shared_data), PERM)) == <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Create shared memory error\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">sscanf</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">\"%d\"</span>, &amp;n);</div><div class=\"line\">    <span class=\"keyword\">int</span> fib0 = <span class=\"number\">0</span>, fib1 = <span class=\"number\">1</span>, result = <span class=\"number\">1</span>;</div><div class=\"line\">    block = (shared_data*)shmat(shmid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    block-&gt;size = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) block-&gt;fib[block-&gt;size++] = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>) block-&gt;fib[block-&gt;size++] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        block-&gt;fib[block-&gt;size++] = <span class=\"number\">1</span>;</div><div class=\"line\">        n -= <span class=\"number\">3</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            n--;</div><div class=\"line\">            pid = fork();</div><div class=\"line\">            <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                parent = <span class=\"literal\">false</span>;</div><div class=\"line\">                fib0 = fib1;</div><div class=\"line\">                fib1 = result;</div><div class=\"line\">                result = fib0 + fib1;</div><div class=\"line\">                block-&gt;fib[block-&gt;size++] = result;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;       </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (pid != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        wait(<span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; block-&gt;size; i++)</div><div class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; block-&gt;fib[i] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    shmdt(block);</div><div class=\"line\">    <span class=\"keyword\">if</span> (parent)</div><div class=\"line\">        shmctl(shmid, IPC_RMID, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a><strong>结果</strong></h3><p><img src=\"2.png\" alt=\"\"></p>"},{"title":"全排列和整数划分","toc":true,"date":"2016-07-25T10:43:41.000Z","_content":"以下是关于运用递归解决全排列问题和整数划分问题的具体讲解。\n<!--more-->\n## **全排列**\n\n对于一组数，以a[0]到a[begin-1]为前缀，a[begin]以及剩下部分为后缀，列出全排列。实现过程中，每次将a[i]与a[begin]交换，再以a[0]到a[begin]为前缀，剩下部分为后缀，递归求出：\n``` cpp\nvoid swap(int &a, int &b) {\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\n\nvoid perm(int *a, int n, int begin) {\n    if (begin == n-1) {\n        for (int i = 0; i < n; ++i) cout << a[i];\n        cout << endl;\n    } else {\n        for (int i = begin; i < n; ++i) {\n            sort(a+begin, a+n);   // 控制输出为 312 321而不是321 312 \n            swap(a[begin], a[i]);\n            perm(a, n, begin+1);\n        }\n    }\n}\n```\n\n## **整数划分**\n\n整数划分问题，就是把一个整数划分为若干个整数的和。跟放鸡蛋问题相同：有egg个鸡蛋，可以放到basket个篮子里。每次放的时候，0号篮子可以放egg, egg-1.....1个鸡蛋，并确保i号篮子中的鸡蛋数不会少于i+1号篮子的鸡蛋数，这样可以确保不会出现重复。0号篮子放i个，剩下的egg-i个可以递归放置：\n``` cpp\nvoid divide(int egg, int basket, vector<int> arr, int cur) {\n    if (egg == 0) {\n        vector<int> a;\n        for (int i = 0; i < arr.size(); ++i)  // 方便输出 \n            if (arr[i] > 0)\n\t\t\t    a.push_back(arr[i]);\n\t\t\t    \n        for (int i = 0; i < a.size()-1; ++i) cout << a[i] << \"+\";\n        cout << a[a.size()-1] << endl;\n        \n    } else {\n        if (basket == 0) return;\n        for (int i = egg; i >= 1; i--) { \n        \tif (cur == 0 || i <= arr[cur-1]) {\n       \t        arr[cur] = i;\n            \tdivide(egg-i, basket-1, arr, cur+1);\n        \t}\n        }\n    }\n}\n```","source":"_posts/递归应用.md","raw":"---\ntitle: 全排列和整数划分\ntoc: true\ndate: 2016-07-25 18:43:41\ntags:\n- C/C++\n- 递归\ncategories:\n- algorithm\n- Data Structure\n---\n以下是关于运用递归解决全排列问题和整数划分问题的具体讲解。\n<!--more-->\n## **全排列**\n\n对于一组数，以a[0]到a[begin-1]为前缀，a[begin]以及剩下部分为后缀，列出全排列。实现过程中，每次将a[i]与a[begin]交换，再以a[0]到a[begin]为前缀，剩下部分为后缀，递归求出：\n``` cpp\nvoid swap(int &a, int &b) {\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\n\nvoid perm(int *a, int n, int begin) {\n    if (begin == n-1) {\n        for (int i = 0; i < n; ++i) cout << a[i];\n        cout << endl;\n    } else {\n        for (int i = begin; i < n; ++i) {\n            sort(a+begin, a+n);   // 控制输出为 312 321而不是321 312 \n            swap(a[begin], a[i]);\n            perm(a, n, begin+1);\n        }\n    }\n}\n```\n\n## **整数划分**\n\n整数划分问题，就是把一个整数划分为若干个整数的和。跟放鸡蛋问题相同：有egg个鸡蛋，可以放到basket个篮子里。每次放的时候，0号篮子可以放egg, egg-1.....1个鸡蛋，并确保i号篮子中的鸡蛋数不会少于i+1号篮子的鸡蛋数，这样可以确保不会出现重复。0号篮子放i个，剩下的egg-i个可以递归放置：\n``` cpp\nvoid divide(int egg, int basket, vector<int> arr, int cur) {\n    if (egg == 0) {\n        vector<int> a;\n        for (int i = 0; i < arr.size(); ++i)  // 方便输出 \n            if (arr[i] > 0)\n\t\t\t    a.push_back(arr[i]);\n\t\t\t    \n        for (int i = 0; i < a.size()-1; ++i) cout << a[i] << \"+\";\n        cout << a[a.size()-1] << endl;\n        \n    } else {\n        if (basket == 0) return;\n        for (int i = egg; i >= 1; i--) { \n        \tif (cur == 0 || i <= arr[cur-1]) {\n       \t        arr[cur] = i;\n            \tdivide(egg-i, basket-1, arr, cur+1);\n        \t}\n        }\n    }\n}\n```","slug":"递归应用","published":1,"updated":"2016-07-25T11:11:28.792Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzss0027gobkibrw7lux","content":"<p>以下是关于运用递归解决全排列问题和整数划分问题的具体讲解。<br><a id=\"more\"></a></p>\n<h2 id=\"全排列\"><a href=\"#全排列\" class=\"headerlink\" title=\"全排列\"></a><strong>全排列</strong></h2><p>对于一组数，以a[0]到a[begin-1]为前缀，a[begin]以及剩下部分为后缀，列出全排列。实现过程中，每次将a[i]与a[begin]交换，再以a[0]到a[begin]为前缀，剩下部分为后缀，递归求出：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = a;</div><div class=\"line\">    a = b;</div><div class=\"line\">    b = tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">perm</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> begin)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (begin == n<span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">cout</span> &lt;&lt; a[i];</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = begin; i &lt; n; ++i) &#123;</div><div class=\"line\">            sort(a+begin, a+n);   <span class=\"comment\">// 控制输出为 312 321而不是321 312 </span></div><div class=\"line\">            swap(a[begin], a[i]);</div><div class=\"line\">            perm(a, n, begin+<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"整数划分\"><a href=\"#整数划分\" class=\"headerlink\" title=\"整数划分\"></a><strong>整数划分</strong></h2><p>整数划分问题，就是把一个整数划分为若干个整数的和。跟放鸡蛋问题相同：有egg个鸡蛋，可以放到basket个篮子里。每次放的时候，0号篮子可以放egg, egg-1…..1个鸡蛋，并确保i号篮子中的鸡蛋数不会少于i+1号篮子的鸡蛋数，这样可以确保不会出现重复。0号篮子放i个，剩下的egg-i个可以递归放置：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> egg, <span class=\"keyword\">int</span> basket, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; arr, <span class=\"keyword\">int</span> cur)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (egg == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.size(); ++i)  <span class=\"comment\">// 方便输出 </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t    a.push_back(arr[i]);</div><div class=\"line\">\t\t\t    </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size()<span class=\"number\">-1</span>; ++i) <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\"+\"</span>;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[a.size()<span class=\"number\">-1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (basket == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = egg; i &gt;= <span class=\"number\">1</span>; i--) &#123; </div><div class=\"line\">        \t<span class=\"keyword\">if</span> (cur == <span class=\"number\">0</span> || i &lt;= arr[cur<span class=\"number\">-1</span>]) &#123;</div><div class=\"line\">       \t        arr[cur] = i;</div><div class=\"line\">            \tdivide(egg-i, basket<span class=\"number\">-1</span>, arr, cur+<span class=\"number\">1</span>);</div><div class=\"line\">        \t&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>以下是关于运用递归解决全排列问题和整数划分问题的具体讲解。<br>","more":"</p>\n<h2 id=\"全排列\"><a href=\"#全排列\" class=\"headerlink\" title=\"全排列\"></a><strong>全排列</strong></h2><p>对于一组数，以a[0]到a[begin-1]为前缀，a[begin]以及剩下部分为后缀，列出全排列。实现过程中，每次将a[i]与a[begin]交换，再以a[0]到a[begin]为前缀，剩下部分为后缀，递归求出：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = a;</div><div class=\"line\">    a = b;</div><div class=\"line\">    b = tmp;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">perm</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> begin)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (begin == n<span class=\"number\">-1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">cout</span> &lt;&lt; a[i];</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = begin; i &lt; n; ++i) &#123;</div><div class=\"line\">            sort(a+begin, a+n);   <span class=\"comment\">// 控制输出为 312 321而不是321 312 </span></div><div class=\"line\">            swap(a[begin], a[i]);</div><div class=\"line\">            perm(a, n, begin+<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"整数划分\"><a href=\"#整数划分\" class=\"headerlink\" title=\"整数划分\"></a><strong>整数划分</strong></h2><p>整数划分问题，就是把一个整数划分为若干个整数的和。跟放鸡蛋问题相同：有egg个鸡蛋，可以放到basket个篮子里。每次放的时候，0号篮子可以放egg, egg-1…..1个鸡蛋，并确保i号篮子中的鸡蛋数不会少于i+1号篮子的鸡蛋数，这样可以确保不会出现重复。0号篮子放i个，剩下的egg-i个可以递归放置：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">divide</span><span class=\"params\">(<span class=\"keyword\">int</span> egg, <span class=\"keyword\">int</span> basket, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; arr, <span class=\"keyword\">int</span> cur)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (egg == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; a;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.size(); ++i)  <span class=\"comment\">// 方便输出 </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &gt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t    a.push_back(arr[i]);</div><div class=\"line\">\t\t\t    </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.size()<span class=\"number\">-1</span>; ++i) <span class=\"built_in\">cout</span> &lt;&lt; a[i] &lt;&lt; <span class=\"string\">\"+\"</span>;</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; a[a.size()<span class=\"number\">-1</span>] &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        </div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (basket == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = egg; i &gt;= <span class=\"number\">1</span>; i--) &#123; </div><div class=\"line\">        \t<span class=\"keyword\">if</span> (cur == <span class=\"number\">0</span> || i &lt;= arr[cur<span class=\"number\">-1</span>]) &#123;</div><div class=\"line\">       \t        arr[cur] = i;</div><div class=\"line\">            \tdivide(egg-i, basket<span class=\"number\">-1</span>, arr, cur+<span class=\"number\">1</span>);</div><div class=\"line\">        \t&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"链表","toc":true,"date":"2016-07-25T06:05:32.000Z","_content":"栈、队列、链表是学习数据结构必须掌握的知识点，初学者必须学会自己实现它们并完善相关的操作函数。下面是单向链表以及双向链表的简单实现：\n<!--more-->\n## **单向链表**\n\n使用结构体Node，包含数据项entry以及一个指向下一个节点的指针next，MyList类即单向链表，包含拷贝构造函数，重载了赋值运算符，以及插入、删除、查找、替换、遍历等方法：\n``` java\nenum Error_code\n{\n    success,\n    underflow,\n    overflow\n};\n\ntemplate <class List_entry>\nstruct Node\n{\n    List_entry entry;\n    Node<List_entry> *next;\n};\n\ntemplate <class List_entry>\nclass MyList {\n\t\n\tprotected:\n        int count;\n        Node<List_entry> *head;\n        mutable int curPosition; \n        mutable Node<List_entry> *current;\n\n        void setPosition(int position) const {\n            current = head;\n            curPosition = position;\n            for (int i = 0; i < position; ++i) current = current->next;\n        }\n        \n    public:\n        MyList() {\n            count = curPosition = 0;\n            head = current = NULL;\n        }\n\n        ~MyList() {\n            clear();\n        }\n\n        MyList(const MyList<List_entry> &copy) {\n            count = copy.count, curPosition = copy.curPosition;\n            Node<List_entry> *htail, *temp = copy.head;\n            head = new Node<List_entry>, htail = new Node<List_entry>;\n            head = htail;\n            head->entry = htail->entry = temp->entry;\n            head->next = NULL, htail->next = NULL;\n            temp = temp->next;\n            while (temp) {\n                Node<List_entry> *htemp = new Node<List_entry>;\n                htemp->entry = temp->entry, htemp->next = NULL;\n                htail->next = htemp;\n                htail = htail->next, temp = temp->next;\n            }\n            current = head;\n            for (int i = 0; i < curPosition; ++i) current = current->next;\n        }\n                 \n        void operator =(const MyList<List_entry> &copy) {\n            count = copy.count, curPosition = copy.curPosition;\n            Node<List_entry> *h, *htail, *temp = copy.head;\n            h = new Node<List_entry>, htail = new Node<List_entry>;\n            h = htail;\n            h->entry = htail->entry = temp->entry;\n            h->next = NULL, htail->next = NULL;\n            temp = temp->next;\n            while (temp) {\n                Node<List_entry> *htemp = new Node<List_entry>;\n                htemp->entry = temp->entry, htemp->next = NULL;\n                htail->next = htemp;\n                htail = htail->next, temp = temp->next;\n            }\n            head = h;\n            current = head;\n            for (int i = 0; i < curPosition; ++i) current = current->next;\n        }\n\n        void clear() {\n            count = curPosition = 0;\n            while (head) {\n                Node<List_entry> *temp = head;\n                head = head->next;\n                delete temp;\n            }\n            head = current = NULL;\n        }\n\n        bool empty() const {\n            return count == 0;\n        }\n\n        bool full() const {\n            Node<List_entry> *temp = new Node<List_entry>;\n            if (temp == NULL) return true;\n            delete temp; return false;\n        }\n\n        int size() const {\n            return count;\n        }\n\n        Error_code insert(int position, const List_entry &entry) {\n            if (position < 0 || position > count) return underflow;\n            if (position == 0) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->entry = entry, temp->next = head;\n                head = temp;\n            } else {\n                Node<List_entry> *temp = new Node<List_entry>;\n                setPosition(position-1);\n                if (position != count) temp->next = current->next;\n                else temp->next = NULL;\n                current->next = temp, temp->entry = entry;\n            }\n            count++;\n            return success;\n        }\n\n        Error_code remove(int position, List_entry &entry) {\n            if (position < 0 || position >= count) return underflow;\n            if (position == 0) {\n                entry = head->entry;\n                Node<List_entry> *temp = head;\n                head = head->next;\n                delete temp;\n            } else {\n                setPosition(position-1);\n                entry = current->next->entry;\n                Node<List_entry> *temp = current->next;\n                current->next = temp->next;\n                delete temp;\n            }\n            count--;\n            return success;\n        }\n\n        Error_code retrieve(int position, List_entry &entry) const {\n            if (position < 0 || position >= count) return underflow;\n            setPosition(position);\n            entry = current->entry;\n            return success;\n        }\n\n        Error_code replace(int position, const List_entry &entry) {\n            if (position < 0 || position >= count) return underflow;\n            setPosition(position);\n            current->entry = entry;\n            return success;\n        }\n\n        void traverse(void (*visit)(List_entry &)) {\n            Node<List_entry> *temp = head;\n            while (temp) {\n                visit(temp->entry);\n                temp = temp->next;\n            }\n        }\n                      \n        void print() {\n            Node<List_entry> *temp = head;\n            while (temp) {\n                cout << temp->entry << \" \";\n                temp = temp->next;\n            }\n            cout << endl;\n        }\n        \n    \n};\n```\n\n## **双向链表**\n\n双向链表相对来说复杂很多，指针操作比较麻烦，容易出错，实现过程中需要细心，考虑多种情况。使用的结构体Node增加了一个指向前一个节点的指针back：\n``` java\nenum Error_code\n{\n    success,\n    underflow,\n    overflow\n};\n\n\ntemplate <class List_entry>\nstruct Node\n{\n    List_entry entry;\n    Node<List_entry> *next;\n    Node<List_entry> *back;\n};\n\ntemplate <class List_entry>\nclass MyList {\n\t\n\tprotected:\n        int count;                                                                          \n        mutable int curPosition;\n        mutable Node<List_entry> *current;\n        void setPosition(int position) const {\n            if (curPosition > position) {\n                int i = curPosition-position;\n                while (i--) current = current->back;\n            } else {\n                int i = position-curPosition;\n                while (i--) current = current->next;\n            }\n            curPosition = position;\n        }\n        \n    public:\n        MyList() {\n            count = curPosition = 0;\n            current = NULL;\n        }\n\n        ~MyList() {\n            clear();\n        }\n\n        MyList(const MyList<List_entry> &copy) {\n            count = copy.count, curPosition = copy.curPosition;\n            current = new Node<List_entry>;\n            current->entry = copy.current->entry;\n            current->next = NULL, current->back = NULL;\n            Node<List_entry> *temp1 = copy.current->back, *temp2 = copy.current->next;\n            Node<List_entry> *temp3 = current, *temp4 = current;\n            while (temp1) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->next = temp3, temp3->back = temp;\n                temp->back = NULL, temp->entry = temp1->entry;\n                temp3 = temp3->back, temp1 = temp1->back;\n            }\n            while (temp2) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->back = temp4, temp4->next = temp;\n                temp->next = NULL, temp->entry = temp2->entry;\n                temp4 = temp4->next, temp2 = temp2->next;\n            }\n        }\n                \n        void operator =(const MyList<List_entry> &copy) {\n        \tif (&copy == this) return;   // 指针 \n        \tclear();\n            count = copy.count, curPosition = copy.curPosition;\n            Node<List_entry> *tc = new Node<List_entry>;\n            tc->back = NULL, tc->next = NULL, tc->entry = copy.current->entry;\n            Node<List_entry> *temp1 = copy.current->back, *temp2 = copy.current->next;\n            Node<List_entry> *temp3 = tc, *temp4 = tc;\n            while (temp1) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->next = temp3, temp3->back = temp;\n                temp->back = NULL, temp->entry = temp1->entry;\n                temp3 = temp3->back, temp1 = temp1->back;\n            }\n            while (temp2) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->back = temp4, temp4->next = temp;\n                temp->next = NULL, temp->entry = temp2->entry;\n                temp4 = temp4->next, temp2 = temp2->next;\n            }\n            current = new Node<List_entry>;\n            current = tc;\n        }\n\n        void clear() {\n            count = curPosition = 0;\n            setPosition(0);\n            while (current) {\n                Node<List_entry> *temp = current;\n                current = current->next;\n                delete temp;\n                if (current) current->back = NULL;\n            }\n        }\n\n        bool empty() const {\n            return count == 0;\n        }\n\n        bool full() const {\n            Node<List_entry> *temp = new Node<List_entry>;\n            if (temp == NULL) return true;\n            delete temp;\n\t\t\treturn false;\n        }\n\n        int size() const {\n            return count;\n        }\n\n        Error_code insert(int position, const List_entry &entry) {\n            if (position < 0 || position > count) return underflow;\n            if (position == 0) {\n                setPosition(0);\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->entry = entry, temp->next = current, temp->back = NULL;\n                if (current) current->back = temp;\n                current = temp;   // current与curPosition对应   (else current = temp;)\n            } else {\n                setPosition(position-1);\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->next = current->next;\n                if (current->next) current->next->back = temp;\n                current->next = temp, temp->entry = entry, temp->back = current;\n            }\n            count++;\n            return success;\n        }\n\n        Error_code remove(int position, List_entry &entry) {\n            if (position < 0 || position >= count) return underflow;\n            if (position == 0) {\n                setPosition(0);\n                entry = current->entry;\n                Node<List_entry> *temp = current;\n                current = current->next;\n                delete temp;\n                if (current) current->back = NULL;\n            } else {\n                setPosition(position-1);\n                entry = current->next->entry;\n                Node<List_entry> *temp = current->next;\n                current->next = temp->next;\n                if (temp->next) temp->next->back = current;\n                delete temp;\n            }\n            count--;\n            return success;\n        }\n\n        Error_code retrieve(int position, List_entry &entry) const {\n            if (position < 0 || position >= count) return underflow;\n            setPosition(position);\n            entry = current->entry;\n            return success;;\n        }\n\n        Error_code replace(int position, const List_entry &entry) {\n            if (position < 0 || position >= count) return underflow;\n            setPosition(position);\n            current->entry = entry;\n            return success;\n        }\n\n        void traverse(void (*visit)(List_entry &)) {\n            if (count == 0) return;\n            setPosition(0);\n            Node<List_entry> *temp = current;\n            while (temp) {\n                visit(temp->entry);\n                temp = temp->next;\n            }\n        }\n        \n        void print() {\n\t\t    setPosition(0);\n            Node<List_entry> *temp = current;\n            while (temp) {\n                cout << temp->entry << \" \";\n                temp = temp->next;\n            }\n            cout << endl;\n        }\n\n};\n```","source":"_posts/链表.md","raw":"---\ntitle: 链表\ntoc: true\ndate: 2016-07-25 14:05:32\ntags:\n- C/C++\ncategories: Data Structure\n---\n栈、队列、链表是学习数据结构必须掌握的知识点，初学者必须学会自己实现它们并完善相关的操作函数。下面是单向链表以及双向链表的简单实现：\n<!--more-->\n## **单向链表**\n\n使用结构体Node，包含数据项entry以及一个指向下一个节点的指针next，MyList类即单向链表，包含拷贝构造函数，重载了赋值运算符，以及插入、删除、查找、替换、遍历等方法：\n``` java\nenum Error_code\n{\n    success,\n    underflow,\n    overflow\n};\n\ntemplate <class List_entry>\nstruct Node\n{\n    List_entry entry;\n    Node<List_entry> *next;\n};\n\ntemplate <class List_entry>\nclass MyList {\n\t\n\tprotected:\n        int count;\n        Node<List_entry> *head;\n        mutable int curPosition; \n        mutable Node<List_entry> *current;\n\n        void setPosition(int position) const {\n            current = head;\n            curPosition = position;\n            for (int i = 0; i < position; ++i) current = current->next;\n        }\n        \n    public:\n        MyList() {\n            count = curPosition = 0;\n            head = current = NULL;\n        }\n\n        ~MyList() {\n            clear();\n        }\n\n        MyList(const MyList<List_entry> &copy) {\n            count = copy.count, curPosition = copy.curPosition;\n            Node<List_entry> *htail, *temp = copy.head;\n            head = new Node<List_entry>, htail = new Node<List_entry>;\n            head = htail;\n            head->entry = htail->entry = temp->entry;\n            head->next = NULL, htail->next = NULL;\n            temp = temp->next;\n            while (temp) {\n                Node<List_entry> *htemp = new Node<List_entry>;\n                htemp->entry = temp->entry, htemp->next = NULL;\n                htail->next = htemp;\n                htail = htail->next, temp = temp->next;\n            }\n            current = head;\n            for (int i = 0; i < curPosition; ++i) current = current->next;\n        }\n                 \n        void operator =(const MyList<List_entry> &copy) {\n            count = copy.count, curPosition = copy.curPosition;\n            Node<List_entry> *h, *htail, *temp = copy.head;\n            h = new Node<List_entry>, htail = new Node<List_entry>;\n            h = htail;\n            h->entry = htail->entry = temp->entry;\n            h->next = NULL, htail->next = NULL;\n            temp = temp->next;\n            while (temp) {\n                Node<List_entry> *htemp = new Node<List_entry>;\n                htemp->entry = temp->entry, htemp->next = NULL;\n                htail->next = htemp;\n                htail = htail->next, temp = temp->next;\n            }\n            head = h;\n            current = head;\n            for (int i = 0; i < curPosition; ++i) current = current->next;\n        }\n\n        void clear() {\n            count = curPosition = 0;\n            while (head) {\n                Node<List_entry> *temp = head;\n                head = head->next;\n                delete temp;\n            }\n            head = current = NULL;\n        }\n\n        bool empty() const {\n            return count == 0;\n        }\n\n        bool full() const {\n            Node<List_entry> *temp = new Node<List_entry>;\n            if (temp == NULL) return true;\n            delete temp; return false;\n        }\n\n        int size() const {\n            return count;\n        }\n\n        Error_code insert(int position, const List_entry &entry) {\n            if (position < 0 || position > count) return underflow;\n            if (position == 0) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->entry = entry, temp->next = head;\n                head = temp;\n            } else {\n                Node<List_entry> *temp = new Node<List_entry>;\n                setPosition(position-1);\n                if (position != count) temp->next = current->next;\n                else temp->next = NULL;\n                current->next = temp, temp->entry = entry;\n            }\n            count++;\n            return success;\n        }\n\n        Error_code remove(int position, List_entry &entry) {\n            if (position < 0 || position >= count) return underflow;\n            if (position == 0) {\n                entry = head->entry;\n                Node<List_entry> *temp = head;\n                head = head->next;\n                delete temp;\n            } else {\n                setPosition(position-1);\n                entry = current->next->entry;\n                Node<List_entry> *temp = current->next;\n                current->next = temp->next;\n                delete temp;\n            }\n            count--;\n            return success;\n        }\n\n        Error_code retrieve(int position, List_entry &entry) const {\n            if (position < 0 || position >= count) return underflow;\n            setPosition(position);\n            entry = current->entry;\n            return success;\n        }\n\n        Error_code replace(int position, const List_entry &entry) {\n            if (position < 0 || position >= count) return underflow;\n            setPosition(position);\n            current->entry = entry;\n            return success;\n        }\n\n        void traverse(void (*visit)(List_entry &)) {\n            Node<List_entry> *temp = head;\n            while (temp) {\n                visit(temp->entry);\n                temp = temp->next;\n            }\n        }\n                      \n        void print() {\n            Node<List_entry> *temp = head;\n            while (temp) {\n                cout << temp->entry << \" \";\n                temp = temp->next;\n            }\n            cout << endl;\n        }\n        \n    \n};\n```\n\n## **双向链表**\n\n双向链表相对来说复杂很多，指针操作比较麻烦，容易出错，实现过程中需要细心，考虑多种情况。使用的结构体Node增加了一个指向前一个节点的指针back：\n``` java\nenum Error_code\n{\n    success,\n    underflow,\n    overflow\n};\n\n\ntemplate <class List_entry>\nstruct Node\n{\n    List_entry entry;\n    Node<List_entry> *next;\n    Node<List_entry> *back;\n};\n\ntemplate <class List_entry>\nclass MyList {\n\t\n\tprotected:\n        int count;                                                                          \n        mutable int curPosition;\n        mutable Node<List_entry> *current;\n        void setPosition(int position) const {\n            if (curPosition > position) {\n                int i = curPosition-position;\n                while (i--) current = current->back;\n            } else {\n                int i = position-curPosition;\n                while (i--) current = current->next;\n            }\n            curPosition = position;\n        }\n        \n    public:\n        MyList() {\n            count = curPosition = 0;\n            current = NULL;\n        }\n\n        ~MyList() {\n            clear();\n        }\n\n        MyList(const MyList<List_entry> &copy) {\n            count = copy.count, curPosition = copy.curPosition;\n            current = new Node<List_entry>;\n            current->entry = copy.current->entry;\n            current->next = NULL, current->back = NULL;\n            Node<List_entry> *temp1 = copy.current->back, *temp2 = copy.current->next;\n            Node<List_entry> *temp3 = current, *temp4 = current;\n            while (temp1) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->next = temp3, temp3->back = temp;\n                temp->back = NULL, temp->entry = temp1->entry;\n                temp3 = temp3->back, temp1 = temp1->back;\n            }\n            while (temp2) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->back = temp4, temp4->next = temp;\n                temp->next = NULL, temp->entry = temp2->entry;\n                temp4 = temp4->next, temp2 = temp2->next;\n            }\n        }\n                \n        void operator =(const MyList<List_entry> &copy) {\n        \tif (&copy == this) return;   // 指针 \n        \tclear();\n            count = copy.count, curPosition = copy.curPosition;\n            Node<List_entry> *tc = new Node<List_entry>;\n            tc->back = NULL, tc->next = NULL, tc->entry = copy.current->entry;\n            Node<List_entry> *temp1 = copy.current->back, *temp2 = copy.current->next;\n            Node<List_entry> *temp3 = tc, *temp4 = tc;\n            while (temp1) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->next = temp3, temp3->back = temp;\n                temp->back = NULL, temp->entry = temp1->entry;\n                temp3 = temp3->back, temp1 = temp1->back;\n            }\n            while (temp2) {\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->back = temp4, temp4->next = temp;\n                temp->next = NULL, temp->entry = temp2->entry;\n                temp4 = temp4->next, temp2 = temp2->next;\n            }\n            current = new Node<List_entry>;\n            current = tc;\n        }\n\n        void clear() {\n            count = curPosition = 0;\n            setPosition(0);\n            while (current) {\n                Node<List_entry> *temp = current;\n                current = current->next;\n                delete temp;\n                if (current) current->back = NULL;\n            }\n        }\n\n        bool empty() const {\n            return count == 0;\n        }\n\n        bool full() const {\n            Node<List_entry> *temp = new Node<List_entry>;\n            if (temp == NULL) return true;\n            delete temp;\n\t\t\treturn false;\n        }\n\n        int size() const {\n            return count;\n        }\n\n        Error_code insert(int position, const List_entry &entry) {\n            if (position < 0 || position > count) return underflow;\n            if (position == 0) {\n                setPosition(0);\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->entry = entry, temp->next = current, temp->back = NULL;\n                if (current) current->back = temp;\n                current = temp;   // current与curPosition对应   (else current = temp;)\n            } else {\n                setPosition(position-1);\n                Node<List_entry> *temp = new Node<List_entry>;\n                temp->next = current->next;\n                if (current->next) current->next->back = temp;\n                current->next = temp, temp->entry = entry, temp->back = current;\n            }\n            count++;\n            return success;\n        }\n\n        Error_code remove(int position, List_entry &entry) {\n            if (position < 0 || position >= count) return underflow;\n            if (position == 0) {\n                setPosition(0);\n                entry = current->entry;\n                Node<List_entry> *temp = current;\n                current = current->next;\n                delete temp;\n                if (current) current->back = NULL;\n            } else {\n                setPosition(position-1);\n                entry = current->next->entry;\n                Node<List_entry> *temp = current->next;\n                current->next = temp->next;\n                if (temp->next) temp->next->back = current;\n                delete temp;\n            }\n            count--;\n            return success;\n        }\n\n        Error_code retrieve(int position, List_entry &entry) const {\n            if (position < 0 || position >= count) return underflow;\n            setPosition(position);\n            entry = current->entry;\n            return success;;\n        }\n\n        Error_code replace(int position, const List_entry &entry) {\n            if (position < 0 || position >= count) return underflow;\n            setPosition(position);\n            current->entry = entry;\n            return success;\n        }\n\n        void traverse(void (*visit)(List_entry &)) {\n            if (count == 0) return;\n            setPosition(0);\n            Node<List_entry> *temp = current;\n            while (temp) {\n                visit(temp->entry);\n                temp = temp->next;\n            }\n        }\n        \n        void print() {\n\t\t    setPosition(0);\n            Node<List_entry> *temp = current;\n            while (temp) {\n                cout << temp->entry << \" \";\n                temp = temp->next;\n            }\n            cout << endl;\n        }\n\n};\n```","slug":"链表","published":1,"updated":"2016-07-25T06:23:36.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cir4pjzsx002cgobk7jtg7pew","content":"<p>栈、队列、链表是学习数据结构必须掌握的知识点，初学者必须学会自己实现它们并完善相关的操作函数。下面是单向链表以及双向链表的简单实现：<br><a id=\"more\"></a></p>\n<h2 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a><strong>单向链表</strong></h2><p>使用结构体Node，包含数据项entry以及一个指向下一个节点的指针next，MyList类即单向链表，包含拷贝构造函数，重载了赋值运算符，以及插入、删除、查找、替换、遍历等方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> Error_code</div><div class=\"line\">&#123;</div><div class=\"line\">    success,</div><div class=\"line\">    underflow,</div><div class=\"line\">    overflow</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">template &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List_entry</span>&gt;</span></div><div class=\"line\"><span class=\"title\">struct</span> <span class=\"title\">Node</span></div><div class=\"line\">&#123;</div><div class=\"line\">    List_entry entry;</div><div class=\"line\">    Node&lt;List_entry&gt; *next;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">template &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List_entry</span>&gt;</span></div><div class=\"line\"><span class=\"title\">class</span> <span class=\"title\">MyList</span> &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">protected</span>:</div><div class=\"line\">        <span class=\"keyword\">int</span> count;</div><div class=\"line\">        Node&lt;List_entry&gt; *head;</div><div class=\"line\">        mutable <span class=\"keyword\">int</span> curPosition; </div><div class=\"line\">        mutable Node&lt;List_entry&gt; *current;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPosition</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            current = head;</div><div class=\"line\">            curPosition = position;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; position; ++i) current = current-&gt;next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        MyList() &#123;</div><div class=\"line\">            count = curPosition = <span class=\"number\">0</span>;</div><div class=\"line\">            head = current = NULL;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ~MyList() &#123;</div><div class=\"line\">            clear();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        MyList(<span class=\"keyword\">const</span> MyList&lt;List_entry&gt; &amp;copy) &#123;</div><div class=\"line\">            count = copy.count, curPosition = copy.curPosition;</div><div class=\"line\">            Node&lt;List_entry&gt; *htail, *temp = copy.head;</div><div class=\"line\">            head = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;, htail = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            head = htail;</div><div class=\"line\">            head-&gt;entry = htail-&gt;entry = temp-&gt;entry;</div><div class=\"line\">            head-&gt;next = NULL, htail-&gt;next = NULL;</div><div class=\"line\">            temp = temp-&gt;next;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *htemp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                htemp-&gt;entry = temp-&gt;entry, htemp-&gt;next = NULL;</div><div class=\"line\">                htail-&gt;next = htemp;</div><div class=\"line\">                htail = htail-&gt;next, temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = head;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; curPosition; ++i) current = current-&gt;next;</div><div class=\"line\">        &#125;</div><div class=\"line\">                 </div><div class=\"line\">        <span class=\"keyword\">void</span> operator =(<span class=\"keyword\">const</span> MyList&lt;List_entry&gt; &amp;copy) &#123;</div><div class=\"line\">            count = copy.count, curPosition = copy.curPosition;</div><div class=\"line\">            Node&lt;List_entry&gt; *h, *htail, *temp = copy.head;</div><div class=\"line\">            h = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;, htail = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            h = htail;</div><div class=\"line\">            h-&gt;entry = htail-&gt;entry = temp-&gt;entry;</div><div class=\"line\">            h-&gt;next = NULL, htail-&gt;next = NULL;</div><div class=\"line\">            temp = temp-&gt;next;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *htemp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                htemp-&gt;entry = temp-&gt;entry, htemp-&gt;next = NULL;</div><div class=\"line\">                htail-&gt;next = htemp;</div><div class=\"line\">                htail = htail-&gt;next, temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            head = h;</div><div class=\"line\">            current = head;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; curPosition; ++i) current = current-&gt;next;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            count = curPosition = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (head) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = head;</div><div class=\"line\">                head = head-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            head = current = NULL;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">bool <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> count == <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">bool <span class=\"title\">full</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            <span class=\"keyword\">if</span> (temp == NULL) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            delete temp; <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> count;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">const</span> List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt; count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;entry = entry, temp-&gt;next = head;</div><div class=\"line\">                head = temp;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                setPosition(position-<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (position != count) temp-&gt;next = current-&gt;next;</div><div class=\"line\">                <span class=\"keyword\">else</span> temp-&gt;next = NULL;</div><div class=\"line\">                current-&gt;next = temp, temp-&gt;entry = entry;</div><div class=\"line\">            &#125;</div><div class=\"line\">            count++;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> position, List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                entry = head-&gt;entry;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = head;</div><div class=\"line\">                head = head-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                setPosition(position-<span class=\"number\">1</span>);</div><div class=\"line\">                entry = current-&gt;next-&gt;entry;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = current-&gt;next;</div><div class=\"line\">                current-&gt;next = temp-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            count--;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">retrieve</span><span class=\"params\">(<span class=\"keyword\">int</span> position, List_entry &amp;entry)</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            setPosition(position);</div><div class=\"line\">            entry = current-&gt;entry;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">const</span> List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            setPosition(position);</div><div class=\"line\">            current-&gt;entry = entry;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(<span class=\"keyword\">void</span> (*visit)</span><span class=\"params\">(List_entry &amp;)</span>) </span>&#123;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = head;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                visit(temp-&gt;entry);</div><div class=\"line\">                temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">                      </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = head;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                cout &lt;&lt; temp-&gt;entry &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">                temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            cout &lt;&lt; endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a><strong>双向链表</strong></h2><p>双向链表相对来说复杂很多，指针操作比较麻烦，容易出错，实现过程中需要细心，考虑多种情况。使用的结构体Node增加了一个指向前一个节点的指针back：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> Error_code</div><div class=\"line\">&#123;</div><div class=\"line\">    success,</div><div class=\"line\">    underflow,</div><div class=\"line\">    overflow</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">template &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List_entry</span>&gt;</span></div><div class=\"line\"><span class=\"title\">struct</span> <span class=\"title\">Node</span></div><div class=\"line\">&#123;</div><div class=\"line\">    List_entry entry;</div><div class=\"line\">    Node&lt;List_entry&gt; *next;</div><div class=\"line\">    Node&lt;List_entry&gt; *back;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">template &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List_entry</span>&gt;</span></div><div class=\"line\"><span class=\"title\">class</span> <span class=\"title\">MyList</span> &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">protected</span>:</div><div class=\"line\">        <span class=\"keyword\">int</span> count;                                                                          </div><div class=\"line\">        mutable <span class=\"keyword\">int</span> curPosition;</div><div class=\"line\">        mutable Node&lt;List_entry&gt; *current;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPosition</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (curPosition &gt; position) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> i = curPosition-position;</div><div class=\"line\">                <span class=\"keyword\">while</span> (i--) current = current-&gt;back;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> i = position-curPosition;</div><div class=\"line\">                <span class=\"keyword\">while</span> (i--) current = current-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            curPosition = position;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        MyList() &#123;</div><div class=\"line\">            count = curPosition = <span class=\"number\">0</span>;</div><div class=\"line\">            current = NULL;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ~MyList() &#123;</div><div class=\"line\">            clear();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        MyList(<span class=\"keyword\">const</span> MyList&lt;List_entry&gt; &amp;copy) &#123;</div><div class=\"line\">            count = copy.count, curPosition = copy.curPosition;</div><div class=\"line\">            current = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            current-&gt;entry = copy.current-&gt;entry;</div><div class=\"line\">            current-&gt;next = NULL, current-&gt;back = NULL;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp1 = copy.current-&gt;back, *temp2 = copy.current-&gt;next;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp3 = current, *temp4 = current;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp1) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;next = temp3, temp3-&gt;back = temp;</div><div class=\"line\">                temp-&gt;back = NULL, temp-&gt;entry = temp1-&gt;entry;</div><div class=\"line\">                temp3 = temp3-&gt;back, temp1 = temp1-&gt;back;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp2) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;back = temp4, temp4-&gt;next = temp;</div><div class=\"line\">                temp-&gt;next = NULL, temp-&gt;entry = temp2-&gt;entry;</div><div class=\"line\">                temp4 = temp4-&gt;next, temp2 = temp2-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">                </div><div class=\"line\">        <span class=\"keyword\">void</span> operator =(<span class=\"keyword\">const</span> MyList&lt;List_entry&gt; &amp;copy) &#123;</div><div class=\"line\">        \t<span class=\"keyword\">if</span> (&amp;copy == <span class=\"keyword\">this</span>) <span class=\"keyword\">return</span>;   <span class=\"comment\">// 指针 </span></div><div class=\"line\">        \tclear();</div><div class=\"line\">            count = copy.count, curPosition = copy.curPosition;</div><div class=\"line\">            Node&lt;List_entry&gt; *tc = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            tc-&gt;back = NULL, tc-&gt;next = NULL, tc-&gt;entry = copy.current-&gt;entry;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp1 = copy.current-&gt;back, *temp2 = copy.current-&gt;next;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp3 = tc, *temp4 = tc;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp1) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;next = temp3, temp3-&gt;back = temp;</div><div class=\"line\">                temp-&gt;back = NULL, temp-&gt;entry = temp1-&gt;entry;</div><div class=\"line\">                temp3 = temp3-&gt;back, temp1 = temp1-&gt;back;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp2) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;back = temp4, temp4-&gt;next = temp;</div><div class=\"line\">                temp-&gt;next = NULL, temp-&gt;entry = temp2-&gt;entry;</div><div class=\"line\">                temp4 = temp4-&gt;next, temp2 = temp2-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            current = tc;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            count = curPosition = <span class=\"number\">0</span>;</div><div class=\"line\">            setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">while</span> (current) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = current;</div><div class=\"line\">                current = current-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current) current-&gt;back = NULL;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">bool <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> count == <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">bool <span class=\"title\">full</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            <span class=\"keyword\">if</span> (temp == NULL) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            delete temp;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> count;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">const</span> List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt; count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;entry = entry, temp-&gt;next = current, temp-&gt;back = NULL;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current) current-&gt;back = temp;</div><div class=\"line\">                current = temp;   <span class=\"comment\">// current与curPosition对应   (else current = temp;)</span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                setPosition(position-<span class=\"number\">1</span>);</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;next = current-&gt;next;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current-&gt;next) current-&gt;next-&gt;back = temp;</div><div class=\"line\">                current-&gt;next = temp, temp-&gt;entry = entry, temp-&gt;back = current;</div><div class=\"line\">            &#125;</div><div class=\"line\">            count++;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> position, List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">                entry = current-&gt;entry;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = current;</div><div class=\"line\">                current = current-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current) current-&gt;back = NULL;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                setPosition(position-<span class=\"number\">1</span>);</div><div class=\"line\">                entry = current-&gt;next-&gt;entry;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = current-&gt;next;</div><div class=\"line\">                current-&gt;next = temp-&gt;next;</div><div class=\"line\">                <span class=\"keyword\">if</span> (temp-&gt;next) temp-&gt;next-&gt;back = current;</div><div class=\"line\">                delete temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            count--;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">retrieve</span><span class=\"params\">(<span class=\"keyword\">int</span> position, List_entry &amp;entry)</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            setPosition(position);</div><div class=\"line\">            entry = current-&gt;entry;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">const</span> List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            setPosition(position);</div><div class=\"line\">            current-&gt;entry = entry;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(<span class=\"keyword\">void</span> (*visit)</span><span class=\"params\">(List_entry &amp;)</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">            setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = current;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                visit(temp-&gt;entry);</div><div class=\"line\">                temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t    setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = current;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                cout &lt;&lt; temp-&gt;entry &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">                temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            cout &lt;&lt; endl;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>栈、队列、链表是学习数据结构必须掌握的知识点，初学者必须学会自己实现它们并完善相关的操作函数。下面是单向链表以及双向链表的简单实现：<br>","more":"</p>\n<h2 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a><strong>单向链表</strong></h2><p>使用结构体Node，包含数据项entry以及一个指向下一个节点的指针next，MyList类即单向链表，包含拷贝构造函数，重载了赋值运算符，以及插入、删除、查找、替换、遍历等方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> Error_code</div><div class=\"line\">&#123;</div><div class=\"line\">    success,</div><div class=\"line\">    underflow,</div><div class=\"line\">    overflow</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">template &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List_entry</span>&gt;</div><div class=\"line\"><span class=\"title\">struct</span> <span class=\"title\">Node</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    List_entry entry;</div><div class=\"line\">    Node&lt;List_entry&gt; *next;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">template &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List_entry</span>&gt;</div><div class=\"line\"><span class=\"title\">class</span> <span class=\"title\">MyList</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">protected</span>:</div><div class=\"line\">        <span class=\"keyword\">int</span> count;</div><div class=\"line\">        Node&lt;List_entry&gt; *head;</div><div class=\"line\">        mutable <span class=\"keyword\">int</span> curPosition; </div><div class=\"line\">        mutable Node&lt;List_entry&gt; *current;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPosition</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            current = head;</div><div class=\"line\">            curPosition = position;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; position; ++i) current = current-&gt;next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        MyList() &#123;</div><div class=\"line\">            count = curPosition = <span class=\"number\">0</span>;</div><div class=\"line\">            head = current = NULL;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ~MyList() &#123;</div><div class=\"line\">            clear();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        MyList(<span class=\"keyword\">const</span> MyList&lt;List_entry&gt; &amp;copy) &#123;</div><div class=\"line\">            count = copy.count, curPosition = copy.curPosition;</div><div class=\"line\">            Node&lt;List_entry&gt; *htail, *temp = copy.head;</div><div class=\"line\">            head = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;, htail = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            head = htail;</div><div class=\"line\">            head-&gt;entry = htail-&gt;entry = temp-&gt;entry;</div><div class=\"line\">            head-&gt;next = NULL, htail-&gt;next = NULL;</div><div class=\"line\">            temp = temp-&gt;next;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *htemp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                htemp-&gt;entry = temp-&gt;entry, htemp-&gt;next = NULL;</div><div class=\"line\">                htail-&gt;next = htemp;</div><div class=\"line\">                htail = htail-&gt;next, temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = head;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; curPosition; ++i) current = current-&gt;next;</div><div class=\"line\">        &#125;</div><div class=\"line\">                 </div><div class=\"line\">        <span class=\"keyword\">void</span> operator =(<span class=\"keyword\">const</span> MyList&lt;List_entry&gt; &amp;copy) &#123;</div><div class=\"line\">            count = copy.count, curPosition = copy.curPosition;</div><div class=\"line\">            Node&lt;List_entry&gt; *h, *htail, *temp = copy.head;</div><div class=\"line\">            h = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;, htail = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            h = htail;</div><div class=\"line\">            h-&gt;entry = htail-&gt;entry = temp-&gt;entry;</div><div class=\"line\">            h-&gt;next = NULL, htail-&gt;next = NULL;</div><div class=\"line\">            temp = temp-&gt;next;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *htemp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                htemp-&gt;entry = temp-&gt;entry, htemp-&gt;next = NULL;</div><div class=\"line\">                htail-&gt;next = htemp;</div><div class=\"line\">                htail = htail-&gt;next, temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            head = h;</div><div class=\"line\">            current = head;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; curPosition; ++i) current = current-&gt;next;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            count = curPosition = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span> (head) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = head;</div><div class=\"line\">                head = head-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            head = current = NULL;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">bool <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> count == <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">bool <span class=\"title\">full</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            <span class=\"keyword\">if</span> (temp == NULL) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            delete temp; <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> count;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">const</span> List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt; count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;entry = entry, temp-&gt;next = head;</div><div class=\"line\">                head = temp;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                setPosition(position-<span class=\"number\">1</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (position != count) temp-&gt;next = current-&gt;next;</div><div class=\"line\">                <span class=\"keyword\">else</span> temp-&gt;next = NULL;</div><div class=\"line\">                current-&gt;next = temp, temp-&gt;entry = entry;</div><div class=\"line\">            &#125;</div><div class=\"line\">            count++;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> position, List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                entry = head-&gt;entry;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = head;</div><div class=\"line\">                head = head-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                setPosition(position-<span class=\"number\">1</span>);</div><div class=\"line\">                entry = current-&gt;next-&gt;entry;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = current-&gt;next;</div><div class=\"line\">                current-&gt;next = temp-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            count--;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">retrieve</span><span class=\"params\">(<span class=\"keyword\">int</span> position, List_entry &amp;entry)</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            setPosition(position);</div><div class=\"line\">            entry = current-&gt;entry;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">const</span> List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            setPosition(position);</div><div class=\"line\">            current-&gt;entry = entry;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(<span class=\"keyword\">void</span> (*visit)</span><span class=\"params\">(List_entry &amp;)</span>) </span>&#123;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = head;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                visit(temp-&gt;entry);</div><div class=\"line\">                temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">                      </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = head;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                cout &lt;&lt; temp-&gt;entry &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">                temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            cout &lt;&lt; endl;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a><strong>双向链表</strong></h2><p>双向链表相对来说复杂很多，指针操作比较麻烦，容易出错，实现过程中需要细心，考虑多种情况。使用的结构体Node增加了一个指向前一个节点的指针back：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">enum</span> Error_code</div><div class=\"line\">&#123;</div><div class=\"line\">    success,</div><div class=\"line\">    underflow,</div><div class=\"line\">    overflow</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">template &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List_entry</span>&gt;</div><div class=\"line\"><span class=\"title\">struct</span> <span class=\"title\">Node</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    List_entry entry;</div><div class=\"line\">    Node&lt;List_entry&gt; *next;</div><div class=\"line\">    Node&lt;List_entry&gt; *back;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">template &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List_entry</span>&gt;</div><div class=\"line\"><span class=\"title\">class</span> <span class=\"title\">MyList</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">protected</span>:</div><div class=\"line\">        <span class=\"keyword\">int</span> count;                                                                          </div><div class=\"line\">        mutable <span class=\"keyword\">int</span> curPosition;</div><div class=\"line\">        mutable Node&lt;List_entry&gt; *current;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setPosition</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (curPosition &gt; position) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> i = curPosition-position;</div><div class=\"line\">                <span class=\"keyword\">while</span> (i--) current = current-&gt;back;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> i = position-curPosition;</div><div class=\"line\">                <span class=\"keyword\">while</span> (i--) current = current-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            curPosition = position;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        MyList() &#123;</div><div class=\"line\">            count = curPosition = <span class=\"number\">0</span>;</div><div class=\"line\">            current = NULL;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ~MyList() &#123;</div><div class=\"line\">            clear();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        MyList(<span class=\"keyword\">const</span> MyList&lt;List_entry&gt; &amp;copy) &#123;</div><div class=\"line\">            count = copy.count, curPosition = copy.curPosition;</div><div class=\"line\">            current = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            current-&gt;entry = copy.current-&gt;entry;</div><div class=\"line\">            current-&gt;next = NULL, current-&gt;back = NULL;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp1 = copy.current-&gt;back, *temp2 = copy.current-&gt;next;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp3 = current, *temp4 = current;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp1) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;next = temp3, temp3-&gt;back = temp;</div><div class=\"line\">                temp-&gt;back = NULL, temp-&gt;entry = temp1-&gt;entry;</div><div class=\"line\">                temp3 = temp3-&gt;back, temp1 = temp1-&gt;back;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp2) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;back = temp4, temp4-&gt;next = temp;</div><div class=\"line\">                temp-&gt;next = NULL, temp-&gt;entry = temp2-&gt;entry;</div><div class=\"line\">                temp4 = temp4-&gt;next, temp2 = temp2-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">                </div><div class=\"line\">        <span class=\"keyword\">void</span> operator =(<span class=\"keyword\">const</span> MyList&lt;List_entry&gt; &amp;copy) &#123;</div><div class=\"line\">        \t<span class=\"keyword\">if</span> (&amp;copy == <span class=\"keyword\">this</span>) <span class=\"keyword\">return</span>;   <span class=\"comment\">// 指针 </span></div><div class=\"line\">        \tclear();</div><div class=\"line\">            count = copy.count, curPosition = copy.curPosition;</div><div class=\"line\">            Node&lt;List_entry&gt; *tc = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            tc-&gt;back = NULL, tc-&gt;next = NULL, tc-&gt;entry = copy.current-&gt;entry;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp1 = copy.current-&gt;back, *temp2 = copy.current-&gt;next;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp3 = tc, *temp4 = tc;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp1) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;next = temp3, temp3-&gt;back = temp;</div><div class=\"line\">                temp-&gt;back = NULL, temp-&gt;entry = temp1-&gt;entry;</div><div class=\"line\">                temp3 = temp3-&gt;back, temp1 = temp1-&gt;back;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp2) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;back = temp4, temp4-&gt;next = temp;</div><div class=\"line\">                temp-&gt;next = NULL, temp-&gt;entry = temp2-&gt;entry;</div><div class=\"line\">                temp4 = temp4-&gt;next, temp2 = temp2-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            current = tc;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            count = curPosition = <span class=\"number\">0</span>;</div><div class=\"line\">            setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">            <span class=\"keyword\">while</span> (current) &#123;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = current;</div><div class=\"line\">                current = current-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current) current-&gt;back = NULL;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">bool <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> count == <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">bool <span class=\"title\">full</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">            <span class=\"keyword\">if</span> (temp == NULL) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            delete temp;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> count;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">const</span> List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt; count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;entry = entry, temp-&gt;next = current, temp-&gt;back = NULL;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current) current-&gt;back = temp;</div><div class=\"line\">                current = temp;   <span class=\"comment\">// current与curPosition对应   (else current = temp;)</span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                setPosition(position-<span class=\"number\">1</span>);</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = <span class=\"keyword\">new</span> Node&lt;List_entry&gt;;</div><div class=\"line\">                temp-&gt;next = current-&gt;next;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current-&gt;next) current-&gt;next-&gt;back = temp;</div><div class=\"line\">                current-&gt;next = temp, temp-&gt;entry = entry, temp-&gt;back = current;</div><div class=\"line\">            &#125;</div><div class=\"line\">            count++;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> position, List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">                entry = current-&gt;entry;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = current;</div><div class=\"line\">                current = current-&gt;next;</div><div class=\"line\">                delete temp;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current) current-&gt;back = NULL;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                setPosition(position-<span class=\"number\">1</span>);</div><div class=\"line\">                entry = current-&gt;next-&gt;entry;</div><div class=\"line\">                Node&lt;List_entry&gt; *temp = current-&gt;next;</div><div class=\"line\">                current-&gt;next = temp-&gt;next;</div><div class=\"line\">                <span class=\"keyword\">if</span> (temp-&gt;next) temp-&gt;next-&gt;back = current;</div><div class=\"line\">                delete temp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            count--;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">retrieve</span><span class=\"params\">(<span class=\"keyword\">int</span> position, List_entry &amp;entry)</span> <span class=\"keyword\">const</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            setPosition(position);</div><div class=\"line\">            entry = current-&gt;entry;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\">Error_code <span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">const</span> List_entry &amp;entry)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt;= count) <span class=\"keyword\">return</span> underflow;</div><div class=\"line\">            setPosition(position);</div><div class=\"line\">            current-&gt;entry = entry;</div><div class=\"line\">            <span class=\"keyword\">return</span> success;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(<span class=\"keyword\">void</span> (*visit)</span><span class=\"params\">(List_entry &amp;)</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">            setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = current;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                visit(temp-&gt;entry);</div><div class=\"line\">                temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t    setPosition(<span class=\"number\">0</span>);</div><div class=\"line\">            Node&lt;List_entry&gt; *temp = current;</div><div class=\"line\">            <span class=\"keyword\">while</span> (temp) &#123;</div><div class=\"line\">                cout &lt;&lt; temp-&gt;entry &lt;&lt; <span class=\"string\">\" \"</span>;</div><div class=\"line\">                temp = temp-&gt;next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            cout &lt;&lt; endl;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>"}],"PostAsset":[{"_id":"source/_posts/agenda/Agenda/Agenda.cpp","slug":"Agenda\\Agenda.cpp","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/AgendaService.cpp","slug":"Agenda\\AgendaService.cpp","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/AgendaService.h","slug":"Agenda\\AgendaService.h","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/AgendaUI.cpp","slug":"Agenda\\AgendaUI.cpp","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/AgendaUI.h","slug":"Agenda\\AgendaUI.h","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/Date.cpp","slug":"Agenda\\Date.cpp","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/Date.h","slug":"Agenda\\Date.h","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/Meeting.cpp","slug":"Agenda\\Meeting.cpp","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/Meeting.csv","slug":"Agenda\\Meeting.csv","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/Meeting.h","slug":"Agenda\\Meeting.h","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/Makefile","slug":"Agenda\\Makefile","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/Storage.cpp","slug":"Agenda\\Storage.cpp","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/Storage.h","slug":"Agenda\\Storage.h","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/User.cpp","slug":"Agenda\\User.cpp","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/User.csv","slug":"Agenda\\User.csv","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/agenda/Agenda/User.h","slug":"Agenda\\User.h","post":"cir4pjzk00005gobksuzqyli8","modified":1,"renderable":0},{"_id":"source/_posts/garen/g1.png","slug":"g1.png","post":"cir4pjzkp0008gobk8qzjp9yd","modified":1,"renderable":0},{"_id":"source/_posts/打飞碟改进/all.png","slug":"all.png","post":"cir4pjzpi0012gobkzjxwwlfz","modified":1,"renderable":0},{"_id":"source/_posts/井字棋/1.png","post":"cir4pjzli000cgobksqlxytzu","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/同步2/1.png","post":"cir4pjzmw000ogobkd09fki7d","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/图的最短路径/a.png","post":"cir4pjznh000qgobkew1k8bs6","slug":"a.png","modified":1,"renderable":1},{"_id":"source/_posts/排序2/a.png","post":"cir4pjzqu001dgobkkpyyuy4w","slug":"a.png","modified":1,"renderable":1},{"_id":"source/_posts/线程/1.png","post":"cir4pjzsj001wgobk9ugnz52a","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/进程/1.png","post":"cir4pjzsq0024gobka0ctt2ls","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/进程/2.png","post":"cir4pjzsq0024gobka0ctt2ls","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/garen/a.png","post":"cir4pjzkp0008gobk8qzjp9yd","slug":"a.png","modified":1,"renderable":1},{"_id":"source/_posts/garen/aa.gif","slug":"aa.gif","post":"cir4pjzkp0008gobk8qzjp9yd","modified":1,"renderable":0},{"_id":"source/_posts/garen/j.png","post":"cir4pjzkp0008gobk8qzjp9yd","slug":"j.png","modified":1,"renderable":1},{"_id":"source/_posts/garen/jg.png","post":"cir4pjzkp0008gobk8qzjp9yd","slug":"jg.png","modified":1,"renderable":1},{"_id":"source/_posts/序列化/a.png","post":"cir4pjzox000wgobkc7mb2bce","slug":"a.png","modified":1,"renderable":1},{"_id":"source/_posts/序列化/b.png","post":"cir4pjzox000wgobkc7mb2bce","slug":"b.png","modified":1,"renderable":1},{"_id":"source/_posts/序列化/c.png","post":"cir4pjzox000wgobkc7mb2bce","slug":"c.png","modified":1,"renderable":1},{"_id":"source/_posts/序列化/d.png","post":"cir4pjzox000wgobkc7mb2bce","slug":"d.png","modified":1,"renderable":1},{"_id":"source/_posts/序列化/f.png","post":"cir4pjzox000wgobkc7mb2bce","slug":"f.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师与魔鬼改进/a.png","post":"cir4pjzro001lgobkptvhgeiz","slug":"a.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师与魔鬼改进/b.png","post":"cir4pjzro001lgobkptvhgeiz","slug":"b.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师与魔鬼改进/c.png","post":"cir4pjzro001lgobkptvhgeiz","slug":"c.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师与魔鬼改进/d.png","post":"cir4pjzro001lgobkptvhgeiz","slug":"d.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师与魔鬼改进/e.png","post":"cir4pjzro001lgobkptvhgeiz","slug":"e.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师和魔鬼/1.png","post":"cir4pjzs1001pgobkjp9ipxjh","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师和魔鬼/2.png","post":"cir4pjzs1001pgobkjp9ipxjh","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师和魔鬼/3.png","post":"cir4pjzs1001pgobkjp9ipxjh","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师和魔鬼/4.png","post":"cir4pjzs1001pgobkjp9ipxjh","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/牧师和魔鬼/5.png","post":"cir4pjzs1001pgobkjp9ipxjh","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/粒子系统/a.gif","slug":"a.gif","post":"cir4pjzsf001rgobklyvzaxaa","modified":1,"renderable":0},{"_id":"source/_posts/粒子系统/a.png","post":"cir4pjzsf001rgobklyvzaxaa","slug":"a.png","modified":1,"renderable":1},{"_id":"source/_posts/粒子系统/b.gif","slug":"b.gif","post":"cir4pjzsf001rgobklyvzaxaa","modified":1,"renderable":0},{"_id":"source/_posts/粒子系统/b.png","post":"cir4pjzsf001rgobklyvzaxaa","slug":"b.png","modified":1,"renderable":1},{"_id":"source/_posts/粒子系统/z.png","post":"cir4pjzsf001rgobklyvzaxaa","slug":"z.png","modified":1,"renderable":1},{"_id":"source/_posts/同步1/1.png","post":"cir4pjzma000jgobkfjnhthxs","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/同步1/2.png","post":"cir4pjzma000jgobkfjnhthxs","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/同步1/3.png","post":"cir4pjzma000jgobkfjnhthxs","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/同步1/4.png","post":"cir4pjzma000jgobkfjnhthxs","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/同步1/5.png","post":"cir4pjzma000jgobkfjnhthxs","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/同步1/6.png","post":"cir4pjzma000jgobkfjnhthxs","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟改进/bc.png","post":"cir4pjzpi0012gobkzjxwwlfz","slug":"bc.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟改进/df.png","post":"cir4pjzpi0012gobkzjxwwlfz","slug":"df.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟改进/fd.png","post":"cir4pjzpi0012gobkzjxwwlfz","slug":"fd.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟改进/gm.png","post":"cir4pjzpi0012gobkzjxwwlfz","slug":"gm.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟改进/j.png","post":"cir4pjzpi0012gobkzjxwwlfz","slug":"j.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟改进/sxj.png","post":"cir4pjzpi0012gobkzjxwwlfz","slug":"sxj.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟改进/ui.png","post":"cir4pjzpi0012gobkzjxwwlfz","slug":"ui.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟改进/zd.png","post":"cir4pjzpi0012gobkzjxwwlfz","slug":"zd.png","modified":1,"renderable":1},{"_id":"source/_posts/汇编/5.png","post":"cir4pjzr9001hgobkm0b99sct","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/汇编/6.png","post":"cir4pjzr9001hgobkm0b99sct","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/汇编/7.png","post":"cir4pjzr9001hgobkm0b99sct","slug":"7.png","modified":1,"renderable":1},{"_id":"source/_posts/汇编/8.png","post":"cir4pjzr9001hgobkm0b99sct","slug":"8.png","modified":1,"renderable":1},{"_id":"source/_posts/汇编/9.png","post":"cir4pjzr9001hgobkm0b99sct","slug":"9.png","modified":1,"renderable":1},{"_id":"source/_posts/汇编/c++.png","post":"cir4pjzr9001hgobkm0b99sct","slug":"c++.png","modified":1,"renderable":1},{"_id":"source/_posts/汇编/jiemian1.png","slug":"jiemian1.png","post":"cir4pjzr9001hgobkm0b99sct","modified":1,"renderable":0},{"_id":"source/_posts/汇编/jiemian2.png","slug":"jiemian2.png","post":"cir4pjzr9001hgobkm0b99sct","modified":1,"renderable":0},{"_id":"source/_posts/汇编/jiemian3.png","slug":"jiemian3.png","post":"cir4pjzr9001hgobkm0b99sct","modified":1,"renderable":0},{"_id":"source/_posts/汇编/jiemian4.png","slug":"jiemian4.png","post":"cir4pjzr9001hgobkm0b99sct","modified":1,"renderable":0},{"_id":"source/_posts/缓存/1.1.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"1.1.png","modified":1,"renderable":1},{"_id":"source/_posts/缓存/1.2.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"1.2.png","modified":1,"renderable":1},{"_id":"source/_posts/缓存/1.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/缓存/2.1.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"2.1.png","modified":1,"renderable":1},{"_id":"source/_posts/缓存/2.2.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"2.2.png","modified":1,"renderable":1},{"_id":"source/_posts/缓存/2.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/缓存/3.1.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"3.1.png","modified":1,"renderable":1},{"_id":"source/_posts/缓存/3.2.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"3.2.png","modified":1,"renderable":1},{"_id":"source/_posts/缓存/3.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/缓存/4.png","post":"cir4pjzsm001zgobkb2cx03ww","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/alu.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"alu.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/chuansong.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"chuansong.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/duxie.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"duxie.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/fenzhi.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"fenzhi.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/i.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"i.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/j.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"j.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/luoji.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"luoji.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/r.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"r.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/suansu.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"suansu.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/tingji.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"tingji.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/tonglu.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"tonglu.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/xinhao.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"xinhao.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/yanzheng.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"yanzheng.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/yuanli.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"yuanli.png","modified":1,"renderable":1},{"_id":"source/_posts/单周期CPU/zong.png","post":"cir4pjzlz000hgobkcd2yzcf0","slug":"zong.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/a1.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"a1.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/aa.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"aa.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/all.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"all.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/bb.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"bb.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/cc.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"cc.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/d.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"d.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/f1.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"f1.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/f2.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"f2.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/f3.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"f3.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/f4.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"f4.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/f5.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"f5.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/f6.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"f6.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/f7.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"f7.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/g1.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"g1.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/u1.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"u1.png","modified":1,"renderable":1},{"_id":"source/_posts/打飞碟/u2.png","post":"cir4pjzp70010gobkvzzkpu1t","slug":"u2.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/alu.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"alu.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/bijiao.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"bijiao.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/ceshi.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"ceshi.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/chuansong.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"chuansong.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/duxie.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"duxie.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/exe.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"exe.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/fenzhi.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"fenzhi.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/guoc.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"guoc.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/id.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"id.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/if.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"if.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/kongzhi.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"kongzhi.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/luoji.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"luoji.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/mem.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"mem.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/suansu.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"suansu.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/tiaozhuan.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"tiaozhuan.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/tingji.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"tingji.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/tonglu.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"tonglu.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/wb.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"wb.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/xinhao1.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"xinhao1.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/xinhao2.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"xinhao2.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/yiwei.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"yiwei.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/zhuanyi.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"zhuanyi.png","modified":1,"renderable":1},{"_id":"source/_posts/多周期CPU/zi.png","post":"cir4pjzoj000ugobkxjic2a72","slug":"zi.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cir4pjzjh0000gobk4cxg8uoz","category_id":"cir4pjzjy0004gobkl9imkfhz","_id":"cir4pjzlg000bgobks6dsispf"},{"post_id":"cir4pjzkp0008gobk8qzjp9yd","category_id":"cir4pjzjy0004gobkl9imkfhz","_id":"cir4pjzlx000fgobk56u9ltgb"},{"post_id":"cir4pjzli000cgobksqlxytzu","category_id":"cir4pjzjy0004gobkl9imkfhz","_id":"cir4pjzms000mgobkzrohx7x4"},{"post_id":"cir4pjzk00005gobksuzqyli8","category_id":"cir4pjzlr000egobkggz858he","_id":"cir4pjznz000rgobkpgrcftjt"},{"post_id":"cir4pjzl4000agobkqatiko5o","category_id":"cir4pjzof000sgobk4j3n6wea","_id":"cir4pjzpu0013gobkijj231of"},{"post_id":"cir4pjzox000wgobkc7mb2bce","category_id":"cir4pjzjy0004gobkl9imkfhz","_id":"cir4pjzqd0017gobkw6pehxsn"},{"post_id":"cir4pjzp70010gobkvzzkpu1t","category_id":"cir4pjzjy0004gobkl9imkfhz","_id":"cir4pjzqq001agobky9t73n65"},{"post_id":"cir4pjzpi0012gobkzjxwwlfz","category_id":"cir4pjzjy0004gobkl9imkfhz","_id":"cir4pjzr7001fgobku9mbw3a2"},{"post_id":"cir4pjzjq0002gobkanmmb97g","category_id":"cir4pjzks0009gobkyygnmpau","_id":"cir4pjzrl001igobk9hdxyflj"},{"post_id":"cir4pjzjq0002gobkanmmb97g","category_id":"cir4pjzp5000zgobksxkzmzsh","_id":"cir4pjzrz001ngobkoywv0p9s"},{"post_id":"cir4pjzpy0015gobkirv4ajuu","category_id":"cir4pjzks0009gobkyygnmpau","_id":"cir4pjzsd001qgobkomcioatu"},{"post_id":"cir4pjzpy0015gobkirv4ajuu","category_id":"cir4pjzp5000zgobksxkzmzsh","_id":"cir4pjzsi001vgobk8krhev9x"},{"post_id":"cir4pjzqf0019gobk8zf98c4k","category_id":"cir4pjzks0009gobkyygnmpau","_id":"cir4pjzsl001ygobk3e869w67"},{"post_id":"cir4pjzqf0019gobk8zf98c4k","category_id":"cir4pjzp5000zgobksxkzmzsh","_id":"cir4pjzsp0023gobktksv9rmj"},{"post_id":"cir4pjzlz000hgobkcd2yzcf0","category_id":"cir4pjzpz0016gobkcctf92cp","_id":"cir4pjzss0026gobkzsbw1puk"},{"post_id":"cir4pjzqu001dgobkkpyyuy4w","category_id":"cir4pjzks0009gobkyygnmpau","_id":"cir4pjzsw002bgobkc41ii4dx"},{"post_id":"cir4pjzqu001dgobkkpyyuy4w","category_id":"cir4pjzp5000zgobksxkzmzsh","_id":"cir4pjzt0002egobke7vn1y7e"},{"post_id":"cir4pjzr9001hgobkm0b99sct","category_id":"cir4pjzpz0016gobkcctf92cp","_id":"cir4pjzt2002hgobkb46vkz5k"},{"post_id":"cir4pjzro001lgobkptvhgeiz","category_id":"cir4pjzjy0004gobkl9imkfhz","_id":"cir4pjzt3002kgobk7wvwpb7g"},{"post_id":"cir4pjzs1001pgobkjp9ipxjh","category_id":"cir4pjzjy0004gobkl9imkfhz","_id":"cir4pjzt4002mgobk7x6fzyqx"},{"post_id":"cir4pjzsf001rgobklyvzaxaa","category_id":"cir4pjzjy0004gobkl9imkfhz","_id":"cir4pjzt7002qgobkx1ls47h2"},{"post_id":"cir4pjzk70006gobk0a783v37","category_id":"cir4pjzks0009gobkyygnmpau","_id":"cir4pjzt7002sgobkiqjekdo7"},{"post_id":"cir4pjzk70006gobk0a783v37","category_id":"cir4pjzp5000zgobksxkzmzsh","_id":"cir4pjzt9002wgobk0mwqjgs4"},{"post_id":"cir4pjzsm001zgobkb2cx03ww","category_id":"cir4pjzpz0016gobkcctf92cp","_id":"cir4pjzt9002ygobkxtelpb0h"},{"post_id":"cir4pjznh000qgobkew1k8bs6","category_id":"cir4pjzks0009gobkyygnmpau","_id":"cir4pjztb0032gobk17xf2s3m"},{"post_id":"cir4pjznh000qgobkew1k8bs6","category_id":"cir4pjzp5000zgobksxkzmzsh","_id":"cir4pjztb0034gobks8o0vdqy"},{"post_id":"cir4pjzss0027gobkibrw7lux","category_id":"cir4pjzks0009gobkyygnmpau","_id":"cir4pjztc0036gobk1xnz9xvc"},{"post_id":"cir4pjzss0027gobkibrw7lux","category_id":"cir4pjzp5000zgobksxkzmzsh","_id":"cir4pjztd0039gobkv24u6ta4"},{"post_id":"cir4pjzoj000ugobkxjic2a72","category_id":"cir4pjzpz0016gobkcctf92cp","_id":"cir4pjzte003bgobkynd9r4mg"},{"post_id":"cir4pjzma000jgobkfjnhthxs","category_id":"cir4pjzqy001egobknyjd9fd6","_id":"cir4pjztf003egobkmsr41n94"},{"post_id":"cir4pjzma000jgobkfjnhthxs","category_id":"cir4pjzt2002ggobkzd7uhpo6","_id":"cir4pjztf003fgobkiw3ajhgq"},{"post_id":"cir4pjzmw000ogobkd09fki7d","category_id":"cir4pjzqy001egobknyjd9fd6","_id":"cir4pjzth003hgobk7nokltef"},{"post_id":"cir4pjzmw000ogobkd09fki7d","category_id":"cir4pjzt2002ggobkzd7uhpo6","_id":"cir4pjzth003jgobktxjaa6bw"},{"post_id":"cir4pjzsj001wgobk9ugnz52a","category_id":"cir4pjzqy001egobknyjd9fd6","_id":"cir4pjzti003mgobkqwigkcrs"},{"post_id":"cir4pjzsj001wgobk9ugnz52a","category_id":"cir4pjzt2002ggobkzd7uhpo6","_id":"cir4pjztj003ogobknnfmrb86"},{"post_id":"cir4pjzsq0024gobka0ctt2ls","category_id":"cir4pjzqy001egobknyjd9fd6","_id":"cir4pjztk003qgobkcwjd265a"},{"post_id":"cir4pjzsq0024gobka0ctt2ls","category_id":"cir4pjzt2002ggobkzd7uhpo6","_id":"cir4pjztl003sgobk3qm7odum"},{"post_id":"cir4pjzsx002cgobk7jtg7pew","category_id":"cir4pjztc0035gobkmp57ndb2","_id":"cir4pjztm003vgobkgu1jm161"}],"PostTag":[{"post_id":"cir4pjzjh0000gobk4cxg8uoz","tag_id":"cir4pjzjv0003gobk6nukerr3","_id":"cir4pjzly000ggobki8548t7m"},{"post_id":"cir4pjzjh0000gobk4cxg8uoz","tag_id":"cir4pjzkj0007gobkk23dtado","_id":"cir4pjzm9000igobkn4sssv88"},{"post_id":"cir4pjzli000cgobksqlxytzu","tag_id":"cir4pjzkj0007gobkk23dtado","_id":"cir4pjzmu000ngobk6l04bjbe"},{"post_id":"cir4pjzli000cgobksqlxytzu","tag_id":"cir4pjzjv0003gobk6nukerr3","_id":"cir4pjzne000pgobkycbap0hw"},{"post_id":"cir4pjzjq0002gobkanmmb97g","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzol000vgobk6sl3n003"},{"post_id":"cir4pjzjq0002gobkanmmb97g","tag_id":"cir4pjzmd000kgobk24fe8wcv","_id":"cir4pjzoz000xgobkhf7687at"},{"post_id":"cir4pjznh000qgobkew1k8bs6","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzpa0011gobka91h0xf0"},{"post_id":"cir4pjzk00005gobksuzqyli8","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzqe0018gobkkjtllbo0"},{"post_id":"cir4pjzk00005gobksuzqyli8","tag_id":"cir4pjzp4000ygobkku6gusv9","_id":"cir4pjzqq001bgobkg5dow7er"},{"post_id":"cir4pjzqf0019gobk8zf98c4k","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzr8001ggobkbtzzldu1"},{"post_id":"cir4pjzqf0019gobk8zf98c4k","tag_id":"cir4pjzmd000kgobk24fe8wcv","_id":"cir4pjzrl001jgobke1xu3fom"},{"post_id":"cir4pjzk70006gobk0a783v37","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzs0001ogobkc06m2hbm"},{"post_id":"cir4pjzs1001pgobkjp9ipxjh","tag_id":"cir4pjzjv0003gobk6nukerr3","_id":"cir4pjzsh001tgobkmnjvh48i"},{"post_id":"cir4pjzs1001pgobkjp9ipxjh","tag_id":"cir4pjzkj0007gobkk23dtado","_id":"cir4pjzsl001xgobk0u9jrfta"},{"post_id":"cir4pjzs1001pgobkjp9ipxjh","tag_id":"cir4pjzp4000ygobkku6gusv9","_id":"cir4pjzso0021gobk7c3c92tk"},{"post_id":"cir4pjzsf001rgobklyvzaxaa","tag_id":"cir4pjzjv0003gobk6nukerr3","_id":"cir4pjzsr0025gobkj4egb70r"},{"post_id":"cir4pjzsf001rgobklyvzaxaa","tag_id":"cir4pjzkj0007gobkk23dtado","_id":"cir4pjzsw0029gobkvek9b0xu"},{"post_id":"cir4pjzkp0008gobk8qzjp9yd","tag_id":"cir4pjzjv0003gobk6nukerr3","_id":"cir4pjzt0002dgobkbvswm8jt"},{"post_id":"cir4pjzkp0008gobk8qzjp9yd","tag_id":"cir4pjzp4000ygobkku6gusv9","_id":"cir4pjzt1002fgobk0nhtsye1"},{"post_id":"cir4pjzkp0008gobk8qzjp9yd","tag_id":"cir4pjzrm001kgobksjdnwvfj","_id":"cir4pjzt3002jgobkn80wob0u"},{"post_id":"cir4pjzkp0008gobk8qzjp9yd","tag_id":"cir4pjzsg001sgobk3bbeocru","_id":"cir4pjzt4002lgobk2uux0ojp"},{"post_id":"cir4pjzkp0008gobk8qzjp9yd","tag_id":"cir4pjzkj0007gobkk23dtado","_id":"cir4pjzt6002pgobkgfhue55j"},{"post_id":"cir4pjzss0027gobkibrw7lux","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzt7002rgobkq2mg9zk2"},{"post_id":"cir4pjzss0027gobkibrw7lux","tag_id":"cir4pjzmd000kgobk24fe8wcv","_id":"cir4pjzt8002vgobklxsj3sl2"},{"post_id":"cir4pjzsx002cgobk7jtg7pew","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzt9002xgobkpx541xh9"},{"post_id":"cir4pjzl4000agobkqatiko5o","tag_id":"cir4pjzsv0028gobkb3bag6xp","_id":"cir4pjzta0031gobkm3t3ypd3"},{"post_id":"cir4pjzl4000agobkqatiko5o","tag_id":"cir4pjzt2002igobkveoocpey","_id":"cir4pjztb0033gobkq6bj5mmu"},{"post_id":"cir4pjzlz000hgobkcd2yzcf0","tag_id":"cir4pjzt6002ogobkbzvbnb27","_id":"cir4pjztd0038gobknj7zuspm"},{"post_id":"cir4pjzlz000hgobkcd2yzcf0","tag_id":"cir4pjzt8002ugobkj6xjnpyv","_id":"cir4pjztd003agobkela195xm"},{"post_id":"cir4pjzlz000hgobkcd2yzcf0","tag_id":"cir4pjzta0030gobkdoxbxd8e","_id":"cir4pjzte003dgobkhm4cuc09"},{"post_id":"cir4pjzma000jgobkfjnhthxs","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzth003igobkujlfo2qn"},{"post_id":"cir4pjzma000jgobkfjnhthxs","tag_id":"cir4pjztc0037gobk2q9r7xrj","_id":"cir4pjzti003kgobkvvya4s9w"},{"post_id":"cir4pjzma000jgobkfjnhthxs","tag_id":"cir4pjzte003cgobkdzfinqqm","_id":"cir4pjztj003ngobkmorb0xff"},{"post_id":"cir4pjzmw000ogobkd09fki7d","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjztl003rgobk72jevte4"},{"post_id":"cir4pjzmw000ogobkd09fki7d","tag_id":"cir4pjztc0037gobk2q9r7xrj","_id":"cir4pjztl003tgobklpmmf4ks"},{"post_id":"cir4pjzmw000ogobkd09fki7d","tag_id":"cir4pjzte003cgobkdzfinqqm","_id":"cir4pjztm003wgobkmcpbrynw"},{"post_id":"cir4pjzoj000ugobkxjic2a72","tag_id":"cir4pjzt8002ugobkj6xjnpyv","_id":"cir4pjzto003zgobkkxwbujd6"},{"post_id":"cir4pjzoj000ugobkxjic2a72","tag_id":"cir4pjzta0030gobkdoxbxd8e","_id":"cir4pjzto0040gobkwhavgtdn"},{"post_id":"cir4pjzoj000ugobkxjic2a72","tag_id":"cir4pjzt6002ogobkbzvbnb27","_id":"cir4pjztp0042gobknnx0q8ae"},{"post_id":"cir4pjzox000wgobkc7mb2bce","tag_id":"cir4pjzjv0003gobk6nukerr3","_id":"cir4pjztq0045gobk18gysggu"},{"post_id":"cir4pjzox000wgobkc7mb2bce","tag_id":"cir4pjzkj0007gobkk23dtado","_id":"cir4pjztr0046gobknad240r5"},{"post_id":"cir4pjzox000wgobkc7mb2bce","tag_id":"cir4pjztn003ygobke1nsrdkx","_id":"cir4pjztr0048gobkhdhpkp4k"},{"post_id":"cir4pjzox000wgobkc7mb2bce","tag_id":"cir4pjzp4000ygobkku6gusv9","_id":"cir4pjzts0049gobkwhddpegy"},{"post_id":"cir4pjzox000wgobkc7mb2bce","tag_id":"cir4pjzrm001kgobksjdnwvfj","_id":"cir4pjztu004bgobk3ncdkxvs"},{"post_id":"cir4pjzp70010gobkvzzkpu1t","tag_id":"cir4pjzp4000ygobkku6gusv9","_id":"cir4pjztu004cgobkb3i86ftp"},{"post_id":"cir4pjzp70010gobkvzzkpu1t","tag_id":"cir4pjzjv0003gobk6nukerr3","_id":"cir4pjztw004egobkooa0zfis"},{"post_id":"cir4pjzp70010gobkvzzkpu1t","tag_id":"cir4pjzrm001kgobksjdnwvfj","_id":"cir4pjztw004fgobkvasc4web"},{"post_id":"cir4pjzp70010gobkvzzkpu1t","tag_id":"cir4pjzkj0007gobkk23dtado","_id":"cir4pjztx004hgobk0volgtr1"},{"post_id":"cir4pjzpi0012gobkzjxwwlfz","tag_id":"cir4pjzjv0003gobk6nukerr3","_id":"cir4pjzty004igobkbsicb8gf"},{"post_id":"cir4pjzpi0012gobkzjxwwlfz","tag_id":"cir4pjzkj0007gobkk23dtado","_id":"cir4pjzu0004kgobk5ii6kzxp"},{"post_id":"cir4pjzpi0012gobkzjxwwlfz","tag_id":"cir4pjzp4000ygobkku6gusv9","_id":"cir4pjzu0004lgobkl8tsetxy"},{"post_id":"cir4pjzpi0012gobkzjxwwlfz","tag_id":"cir4pjzrm001kgobksjdnwvfj","_id":"cir4pjzu4004ngobkoi4oljnc"},{"post_id":"cir4pjzpy0015gobkirv4ajuu","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzu4004ogobkkec0jcs4"},{"post_id":"cir4pjzpy0015gobkirv4ajuu","tag_id":"cir4pjztu004dgobkltjdrb3j","_id":"cir4pjzu5004qgobkr7lu66b9"},{"post_id":"cir4pjzpy0015gobkirv4ajuu","tag_id":"cir4pjzmd000kgobk24fe8wcv","_id":"cir4pjzu6004rgobks0cs2e9z"},{"post_id":"cir4pjzqu001dgobkkpyyuy4w","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzu7004tgobkraiq7bpp"},{"post_id":"cir4pjzqu001dgobkkpyyuy4w","tag_id":"cir4pjzmd000kgobk24fe8wcv","_id":"cir4pjzu7004ugobkkdeui782"},{"post_id":"cir4pjzqu001dgobkkpyyuy4w","tag_id":"cir4pjztu004dgobkltjdrb3j","_id":"cir4pjzu8004wgobk52qajywh"},{"post_id":"cir4pjzr9001hgobkm0b99sct","tag_id":"cir4pjzty004jgobkzl342ho9","_id":"cir4pjzu8004xgobkgp8wtxtq"},{"post_id":"cir4pjzr9001hgobkm0b99sct","tag_id":"cir4pjztu004dgobkltjdrb3j","_id":"cir4pjzu9004zgobkt8tg5qnn"},{"post_id":"cir4pjzro001lgobkptvhgeiz","tag_id":"cir4pjzjv0003gobk6nukerr3","_id":"cir4pjzua0050gobkyjee142b"},{"post_id":"cir4pjzro001lgobkptvhgeiz","tag_id":"cir4pjzp4000ygobkku6gusv9","_id":"cir4pjzuc0052gobkaoopvgc7"},{"post_id":"cir4pjzro001lgobkptvhgeiz","tag_id":"cir4pjzkj0007gobkk23dtado","_id":"cir4pjzuc0053gobklgma7a8e"},{"post_id":"cir4pjzro001lgobkptvhgeiz","tag_id":"cir4pjzrm001kgobksjdnwvfj","_id":"cir4pjzud0055gobkv5jy0r9c"},{"post_id":"cir4pjzsj001wgobk9ugnz52a","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzue0056gobk5xexk9zq"},{"post_id":"cir4pjzsj001wgobk9ugnz52a","tag_id":"cir4pjztc0037gobk2q9r7xrj","_id":"cir4pjzue0057gobkyl907cn8"},{"post_id":"cir4pjzsm001zgobkb2cx03ww","tag_id":"cir4pjzu7004vgobkiiytj3dc","_id":"cir4pjzuf0058gobkwuonr5c8"},{"post_id":"cir4pjzsm001zgobkb2cx03ww","tag_id":"cir4pjzta0030gobkdoxbxd8e","_id":"cir4pjzuf0059gobk5ydu0ek4"},{"post_id":"cir4pjzsm001zgobkb2cx03ww","tag_id":"cir4pjzt8002ugobkj6xjnpyv","_id":"cir4pjzuf005agobk7ymwwzzx"},{"post_id":"cir4pjzsq0024gobka0ctt2ls","tag_id":"cir4pjzlq000dgobkani3eulu","_id":"cir4pjzuf005bgobkb09c39ep"},{"post_id":"cir4pjzsq0024gobka0ctt2ls","tag_id":"cir4pjzuc0054gobkmk36bhuy","_id":"cir4pjzuf005cgobkxaeo5a1v"}],"Tag":[{"name":"C#","_id":"cir4pjzjv0003gobk6nukerr3"},{"name":"unity3d","_id":"cir4pjzkj0007gobkk23dtado"},{"name":"C/C++","_id":"cir4pjzlq000dgobkani3eulu"},{"name":"递归","_id":"cir4pjzmd000kgobk24fe8wcv"},{"name":"MVC","_id":"cir4pjzp4000ygobkku6gusv9"},{"name":"工厂模式","_id":"cir4pjzrm001kgobksjdnwvfj"},{"name":"观察者模式","_id":"cir4pjzsg001sgobk3bbeocru"},{"name":"hexo","_id":"cir4pjzsv0028gobkb3bag6xp"},{"name":"blog","_id":"cir4pjzt2002igobkveoocpey"},{"name":"verilog","_id":"cir4pjzt6002ogobkbzvbnb27"},{"name":"CPU","_id":"cir4pjzt8002ugobkj6xjnpyv"},{"name":"MIPS","_id":"cir4pjzta0030gobkdoxbxd8e"},{"name":"thread","_id":"cir4pjztc0037gobk2q9r7xrj"},{"name":"semaphore","_id":"cir4pjzte003cgobkdzfinqqm"},{"name":"序列化","_id":"cir4pjztn003ygobke1nsrdkx"},{"name":"排序","_id":"cir4pjztu004dgobkltjdrb3j"},{"name":"汇编","_id":"cir4pjzty004jgobkzl342ho9"},{"name":"cache","_id":"cir4pjzu7004vgobkiiytj3dc"},{"name":"procedure","_id":"cir4pjzuc0054gobkmk36bhuy"}]}}